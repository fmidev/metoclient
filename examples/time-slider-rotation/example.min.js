(function () {
  'use strict';

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function commonjsRequire () {
  	throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
  }

  function unwrapExports (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var check = function (it) {
    return it && it.Math == Math && it;
  };

  // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
  var global_1 =
    // eslint-disable-next-line no-undef
    check(typeof globalThis == 'object' && globalThis) ||
    check(typeof window == 'object' && window) ||
    check(typeof self == 'object' && self) ||
    check(typeof commonjsGlobal == 'object' && commonjsGlobal) ||
    // eslint-disable-next-line no-new-func
    Function('return this')();

  var fails = function (exec) {
    try {
      return !!exec();
    } catch (error) {
      return true;
    }
  };

  // Thank's IE8 for his funny defineProperty
  var descriptors = !fails(function () {
    return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
  });

  var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
  var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

  // Nashorn ~ JDK8 bug
  var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);

  // `Object.prototype.propertyIsEnumerable` method implementation
  // https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable
  var f = NASHORN_BUG ? function propertyIsEnumerable(V) {
    var descriptor = getOwnPropertyDescriptor(this, V);
    return !!descriptor && descriptor.enumerable;
  } : nativePropertyIsEnumerable;

  var objectPropertyIsEnumerable = {
  	f: f
  };

  var createPropertyDescriptor = function (bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value: value
    };
  };

  var toString = {}.toString;

  var classofRaw = function (it) {
    return toString.call(it).slice(8, -1);
  };

  var split = ''.split;

  // fallback for non-array-like ES3 and non-enumerable old V8 strings
  var indexedObject = fails(function () {
    // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
    // eslint-disable-next-line no-prototype-builtins
    return !Object('z').propertyIsEnumerable(0);
  }) ? function (it) {
    return classofRaw(it) == 'String' ? split.call(it, '') : Object(it);
  } : Object;

  // `RequireObjectCoercible` abstract operation
  // https://tc39.github.io/ecma262/#sec-requireobjectcoercible
  var requireObjectCoercible = function (it) {
    if (it == undefined) throw TypeError("Can't call method on " + it);
    return it;
  };

  // toObject with fallback for non-array-like ES3 strings



  var toIndexedObject = function (it) {
    return indexedObject(requireObjectCoercible(it));
  };

  var isObject = function (it) {
    return typeof it === 'object' ? it !== null : typeof it === 'function';
  };

  // `ToPrimitive` abstract operation
  // https://tc39.github.io/ecma262/#sec-toprimitive
  // instead of the ES6 spec version, we didn't implement @@toPrimitive case
  // and the second argument - flag - preferred type is a string
  var toPrimitive = function (input, PREFERRED_STRING) {
    if (!isObject(input)) return input;
    var fn, val;
    if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
    if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
    if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
    throw TypeError("Can't convert object to primitive value");
  };

  var hasOwnProperty = {}.hasOwnProperty;

  var has = function (it, key) {
    return hasOwnProperty.call(it, key);
  };

  var document$1 = global_1.document;
  // typeof document.createElement is 'object' in old IE
  var EXISTS = isObject(document$1) && isObject(document$1.createElement);

  var documentCreateElement = function (it) {
    return EXISTS ? document$1.createElement(it) : {};
  };

  // Thank's IE8 for his funny defineProperty
  var ie8DomDefine = !descriptors && !fails(function () {
    return Object.defineProperty(documentCreateElement('div'), 'a', {
      get: function () { return 7; }
    }).a != 7;
  });

  var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

  // `Object.getOwnPropertyDescriptor` method
  // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
  var f$1 = descriptors ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
    O = toIndexedObject(O);
    P = toPrimitive(P, true);
    if (ie8DomDefine) try {
      return nativeGetOwnPropertyDescriptor(O, P);
    } catch (error) { /* empty */ }
    if (has(O, P)) return createPropertyDescriptor(!objectPropertyIsEnumerable.f.call(O, P), O[P]);
  };

  var objectGetOwnPropertyDescriptor = {
  	f: f$1
  };

  var anObject = function (it) {
    if (!isObject(it)) {
      throw TypeError(String(it) + ' is not an object');
    } return it;
  };

  var nativeDefineProperty = Object.defineProperty;

  // `Object.defineProperty` method
  // https://tc39.github.io/ecma262/#sec-object.defineproperty
  var f$2 = descriptors ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
    anObject(O);
    P = toPrimitive(P, true);
    anObject(Attributes);
    if (ie8DomDefine) try {
      return nativeDefineProperty(O, P, Attributes);
    } catch (error) { /* empty */ }
    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
    if ('value' in Attributes) O[P] = Attributes.value;
    return O;
  };

  var objectDefineProperty = {
  	f: f$2
  };

  var createNonEnumerableProperty = descriptors ? function (object, key, value) {
    return objectDefineProperty.f(object, key, createPropertyDescriptor(1, value));
  } : function (object, key, value) {
    object[key] = value;
    return object;
  };

  var setGlobal = function (key, value) {
    try {
      createNonEnumerableProperty(global_1, key, value);
    } catch (error) {
      global_1[key] = value;
    } return value;
  };

  var SHARED = '__core-js_shared__';
  var store = global_1[SHARED] || setGlobal(SHARED, {});

  var sharedStore = store;

  var functionToString = Function.toString;

  // this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper
  if (typeof sharedStore.inspectSource != 'function') {
    sharedStore.inspectSource = function (it) {
      return functionToString.call(it);
    };
  }

  var inspectSource = sharedStore.inspectSource;

  var WeakMap$1 = global_1.WeakMap;

  var nativeWeakMap = typeof WeakMap$1 === 'function' && /native code/.test(inspectSource(WeakMap$1));

  var shared = createCommonjsModule(function (module) {
  (module.exports = function (key, value) {
    return sharedStore[key] || (sharedStore[key] = value !== undefined ? value : {});
  })('versions', []).push({
    version: '3.6.5',
    mode:  'global',
    copyright: 'Â© 2020 Denis Pushkarev (zloirock.ru)'
  });
  });

  var id = 0;
  var postfix = Math.random();

  var uid = function (key) {
    return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
  };

  var keys = shared('keys');

  var sharedKey = function (key) {
    return keys[key] || (keys[key] = uid(key));
  };

  var hiddenKeys = {};

  var WeakMap$2 = global_1.WeakMap;
  var set, get$1, has$1;

  var enforce = function (it) {
    return has$1(it) ? get$1(it) : set(it, {});
  };

  var getterFor = function (TYPE) {
    return function (it) {
      var state;
      if (!isObject(it) || (state = get$1(it)).type !== TYPE) {
        throw TypeError('Incompatible receiver, ' + TYPE + ' required');
      } return state;
    };
  };

  if (nativeWeakMap) {
    var store$1 = new WeakMap$2();
    var wmget = store$1.get;
    var wmhas = store$1.has;
    var wmset = store$1.set;
    set = function (it, metadata) {
      wmset.call(store$1, it, metadata);
      return metadata;
    };
    get$1 = function (it) {
      return wmget.call(store$1, it) || {};
    };
    has$1 = function (it) {
      return wmhas.call(store$1, it);
    };
  } else {
    var STATE = sharedKey('state');
    hiddenKeys[STATE] = true;
    set = function (it, metadata) {
      createNonEnumerableProperty(it, STATE, metadata);
      return metadata;
    };
    get$1 = function (it) {
      return has(it, STATE) ? it[STATE] : {};
    };
    has$1 = function (it) {
      return has(it, STATE);
    };
  }

  var internalState = {
    set: set,
    get: get$1,
    has: has$1,
    enforce: enforce,
    getterFor: getterFor
  };

  var redefine = createCommonjsModule(function (module) {
  var getInternalState = internalState.get;
  var enforceInternalState = internalState.enforce;
  var TEMPLATE = String(String).split('String');

  (module.exports = function (O, key, value, options) {
    var unsafe = options ? !!options.unsafe : false;
    var simple = options ? !!options.enumerable : false;
    var noTargetGet = options ? !!options.noTargetGet : false;
    if (typeof value == 'function') {
      if (typeof key == 'string' && !has(value, 'name')) createNonEnumerableProperty(value, 'name', key);
      enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');
    }
    if (O === global_1) {
      if (simple) O[key] = value;
      else setGlobal(key, value);
      return;
    } else if (!unsafe) {
      delete O[key];
    } else if (!noTargetGet && O[key]) {
      simple = true;
    }
    if (simple) O[key] = value;
    else createNonEnumerableProperty(O, key, value);
  // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
  })(Function.prototype, 'toString', function toString() {
    return typeof this == 'function' && getInternalState(this).source || inspectSource(this);
  });
  });

  var path = global_1;

  var aFunction = function (variable) {
    return typeof variable == 'function' ? variable : undefined;
  };

  var getBuiltIn = function (namespace, method) {
    return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global_1[namespace])
      : path[namespace] && path[namespace][method] || global_1[namespace] && global_1[namespace][method];
  };

  var ceil = Math.ceil;
  var floor = Math.floor;

  // `ToInteger` abstract operation
  // https://tc39.github.io/ecma262/#sec-tointeger
  var toInteger = function (argument) {
    return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
  };

  var min = Math.min;

  // `ToLength` abstract operation
  // https://tc39.github.io/ecma262/#sec-tolength
  var toLength = function (argument) {
    return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
  };

  var max = Math.max;
  var min$1 = Math.min;

  // Helper for a popular repeating case of the spec:
  // Let integer be ? ToInteger(index).
  // If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
  var toAbsoluteIndex = function (index, length) {
    var integer = toInteger(index);
    return integer < 0 ? max(integer + length, 0) : min$1(integer, length);
  };

  // `Array.prototype.{ indexOf, includes }` methods implementation
  var createMethod = function (IS_INCLUDES) {
    return function ($this, el, fromIndex) {
      var O = toIndexedObject($this);
      var length = toLength(O.length);
      var index = toAbsoluteIndex(fromIndex, length);
      var value;
      // Array#includes uses SameValueZero equality algorithm
      // eslint-disable-next-line no-self-compare
      if (IS_INCLUDES && el != el) while (length > index) {
        value = O[index++];
        // eslint-disable-next-line no-self-compare
        if (value != value) return true;
      // Array#indexOf ignores holes, Array#includes - not
      } else for (;length > index; index++) {
        if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
      } return !IS_INCLUDES && -1;
    };
  };

  var arrayIncludes = {
    // `Array.prototype.includes` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.includes
    includes: createMethod(true),
    // `Array.prototype.indexOf` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
    indexOf: createMethod(false)
  };

  var indexOf = arrayIncludes.indexOf;


  var objectKeysInternal = function (object, names) {
    var O = toIndexedObject(object);
    var i = 0;
    var result = [];
    var key;
    for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
    // Don't enum bug & hidden keys
    while (names.length > i) if (has(O, key = names[i++])) {
      ~indexOf(result, key) || result.push(key);
    }
    return result;
  };

  // IE8- don't enum bug keys
  var enumBugKeys = [
    'constructor',
    'hasOwnProperty',
    'isPrototypeOf',
    'propertyIsEnumerable',
    'toLocaleString',
    'toString',
    'valueOf'
  ];

  var hiddenKeys$1 = enumBugKeys.concat('length', 'prototype');

  // `Object.getOwnPropertyNames` method
  // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
  var f$3 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
    return objectKeysInternal(O, hiddenKeys$1);
  };

  var objectGetOwnPropertyNames = {
  	f: f$3
  };

  var f$4 = Object.getOwnPropertySymbols;

  var objectGetOwnPropertySymbols = {
  	f: f$4
  };

  // all object keys, includes non-enumerable and symbols
  var ownKeys = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
    var keys = objectGetOwnPropertyNames.f(anObject(it));
    var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
    return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
  };

  var copyConstructorProperties = function (target, source) {
    var keys = ownKeys(source);
    var defineProperty = objectDefineProperty.f;
    var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
    }
  };

  var replacement = /#|\.prototype\./;

  var isForced = function (feature, detection) {
    var value = data[normalize(feature)];
    return value == POLYFILL ? true
      : value == NATIVE ? false
      : typeof detection == 'function' ? fails(detection)
      : !!detection;
  };

  var normalize = isForced.normalize = function (string) {
    return String(string).replace(replacement, '.').toLowerCase();
  };

  var data = isForced.data = {};
  var NATIVE = isForced.NATIVE = 'N';
  var POLYFILL = isForced.POLYFILL = 'P';

  var isForced_1 = isForced;

  var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;






  /*
    options.target      - name of the target object
    options.global      - target is the global object
    options.stat        - export as static methods of target
    options.proto       - export as prototype methods of target
    options.real        - real prototype method for the `pure` version
    options.forced      - export even if the native feature is available
    options.bind        - bind methods to the target, required for the `pure` version
    options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
    options.unsafe      - use the simple assignment of property instead of delete + defineProperty
    options.sham        - add a flag to not completely full polyfills
    options.enumerable  - export as enumerable property
    options.noTargetGet - prevent calling a getter on target
  */
  var _export = function (options, source) {
    var TARGET = options.target;
    var GLOBAL = options.global;
    var STATIC = options.stat;
    var FORCED, target, key, targetProperty, sourceProperty, descriptor;
    if (GLOBAL) {
      target = global_1;
    } else if (STATIC) {
      target = global_1[TARGET] || setGlobal(TARGET, {});
    } else {
      target = (global_1[TARGET] || {}).prototype;
    }
    if (target) for (key in source) {
      sourceProperty = source[key];
      if (options.noTargetGet) {
        descriptor = getOwnPropertyDescriptor$1(target, key);
        targetProperty = descriptor && descriptor.value;
      } else targetProperty = target[key];
      FORCED = isForced_1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
      // contained in target
      if (!FORCED && targetProperty !== undefined) {
        if (typeof sourceProperty === typeof targetProperty) continue;
        copyConstructorProperties(sourceProperty, targetProperty);
      }
      // add a flag to not completely full polyfills
      if (options.sham || (targetProperty && targetProperty.sham)) {
        createNonEnumerableProperty(sourceProperty, 'sham', true);
      }
      // extend global
      redefine(target, key, sourceProperty, options);
    }
  };

  // `IsArray` abstract operation
  // https://tc39.github.io/ecma262/#sec-isarray
  var isArray = Array.isArray || function isArray(arg) {
    return classofRaw(arg) == 'Array';
  };

  // `ToObject` abstract operation
  // https://tc39.github.io/ecma262/#sec-toobject
  var toObject = function (argument) {
    return Object(requireObjectCoercible(argument));
  };

  var createProperty = function (object, key, value) {
    var propertyKey = toPrimitive(key);
    if (propertyKey in object) objectDefineProperty.f(object, propertyKey, createPropertyDescriptor(0, value));
    else object[propertyKey] = value;
  };

  var nativeSymbol = !!Object.getOwnPropertySymbols && !fails(function () {
    // Chrome 38 Symbol has incorrect toString conversion
    // eslint-disable-next-line no-undef
    return !String(Symbol());
  });

  var useSymbolAsUid = nativeSymbol
    // eslint-disable-next-line no-undef
    && !Symbol.sham
    // eslint-disable-next-line no-undef
    && typeof Symbol.iterator == 'symbol';

  var WellKnownSymbolsStore = shared('wks');
  var Symbol$1 = global_1.Symbol;
  var createWellKnownSymbol = useSymbolAsUid ? Symbol$1 : Symbol$1 && Symbol$1.withoutSetter || uid;

  var wellKnownSymbol = function (name) {
    if (!has(WellKnownSymbolsStore, name)) {
      if (nativeSymbol && has(Symbol$1, name)) WellKnownSymbolsStore[name] = Symbol$1[name];
      else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
    } return WellKnownSymbolsStore[name];
  };

  var SPECIES = wellKnownSymbol('species');

  // `ArraySpeciesCreate` abstract operation
  // https://tc39.github.io/ecma262/#sec-arrayspeciescreate
  var arraySpeciesCreate = function (originalArray, length) {
    var C;
    if (isArray(originalArray)) {
      C = originalArray.constructor;
      // cross-realm fallback
      if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
      else if (isObject(C)) {
        C = C[SPECIES];
        if (C === null) C = undefined;
      }
    } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
  };

  var engineUserAgent = getBuiltIn('navigator', 'userAgent') || '';

  var process$1 = global_1.process;
  var versions = process$1 && process$1.versions;
  var v8 = versions && versions.v8;
  var match, version;

  if (v8) {
    match = v8.split('.');
    version = match[0] + match[1];
  } else if (engineUserAgent) {
    match = engineUserAgent.match(/Edge\/(\d+)/);
    if (!match || match[1] >= 74) {
      match = engineUserAgent.match(/Chrome\/(\d+)/);
      if (match) version = match[1];
    }
  }

  var engineV8Version = version && +version;

  var SPECIES$1 = wellKnownSymbol('species');

  var arrayMethodHasSpeciesSupport = function (METHOD_NAME) {
    // We can't use this feature detection in V8 since it causes
    // deoptimization and serious performance degradation
    // https://github.com/zloirock/core-js/issues/677
    return engineV8Version >= 51 || !fails(function () {
      var array = [];
      var constructor = array.constructor = {};
      constructor[SPECIES$1] = function () {
        return { foo: 1 };
      };
      return array[METHOD_NAME](Boolean).foo !== 1;
    });
  };

  var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
  var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
  var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';

  // We can't use this feature detection in V8 since it causes
  // deoptimization and serious performance degradation
  // https://github.com/zloirock/core-js/issues/679
  var IS_CONCAT_SPREADABLE_SUPPORT = engineV8Version >= 51 || !fails(function () {
    var array = [];
    array[IS_CONCAT_SPREADABLE] = false;
    return array.concat()[0] !== array;
  });

  var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

  var isConcatSpreadable = function (O) {
    if (!isObject(O)) return false;
    var spreadable = O[IS_CONCAT_SPREADABLE];
    return spreadable !== undefined ? !!spreadable : isArray(O);
  };

  var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

  // `Array.prototype.concat` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.concat
  // with adding support of @@isConcatSpreadable and @@species
  _export({ target: 'Array', proto: true, forced: FORCED }, {
    concat: function concat(arg) { // eslint-disable-line no-unused-vars
      var O = toObject(this);
      var A = arraySpeciesCreate(O, 0);
      var n = 0;
      var i, k, length, len, E;
      for (i = -1, length = arguments.length; i < length; i++) {
        E = i === -1 ? O : arguments[i];
        if (isConcatSpreadable(E)) {
          len = toLength(E.length);
          if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
          for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
        } else {
          if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
          createProperty(A, n++, E);
        }
      }
      A.length = n;
      return A;
    }
  });

  var aFunction$1 = function (it) {
    if (typeof it != 'function') {
      throw TypeError(String(it) + ' is not a function');
    } return it;
  };

  // optional / simple context binding
  var functionBindContext = function (fn, that, length) {
    aFunction$1(fn);
    if (that === undefined) return fn;
    switch (length) {
      case 0: return function () {
        return fn.call(that);
      };
      case 1: return function (a) {
        return fn.call(that, a);
      };
      case 2: return function (a, b) {
        return fn.call(that, a, b);
      };
      case 3: return function (a, b, c) {
        return fn.call(that, a, b, c);
      };
    }
    return function (/* ...args */) {
      return fn.apply(that, arguments);
    };
  };

  var push = [].push;

  // `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation
  var createMethod$1 = function (TYPE) {
    var IS_MAP = TYPE == 1;
    var IS_FILTER = TYPE == 2;
    var IS_SOME = TYPE == 3;
    var IS_EVERY = TYPE == 4;
    var IS_FIND_INDEX = TYPE == 6;
    var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
    return function ($this, callbackfn, that, specificCreate) {
      var O = toObject($this);
      var self = indexedObject(O);
      var boundFunction = functionBindContext(callbackfn, that, 3);
      var length = toLength(self.length);
      var index = 0;
      var create = specificCreate || arraySpeciesCreate;
      var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
      var value, result;
      for (;length > index; index++) if (NO_HOLES || index in self) {
        value = self[index];
        result = boundFunction(value, index, O);
        if (TYPE) {
          if (IS_MAP) target[index] = result; // map
          else if (result) switch (TYPE) {
            case 3: return true;              // some
            case 5: return value;             // find
            case 6: return index;             // findIndex
            case 2: push.call(target, value); // filter
          } else if (IS_EVERY) return false;  // every
        }
      }
      return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
    };
  };

  var arrayIteration = {
    // `Array.prototype.forEach` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
    forEach: createMethod$1(0),
    // `Array.prototype.map` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.map
    map: createMethod$1(1),
    // `Array.prototype.filter` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.filter
    filter: createMethod$1(2),
    // `Array.prototype.some` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.some
    some: createMethod$1(3),
    // `Array.prototype.every` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.every
    every: createMethod$1(4),
    // `Array.prototype.find` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.find
    find: createMethod$1(5),
    // `Array.prototype.findIndex` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
    findIndex: createMethod$1(6)
  };

  var arrayMethodIsStrict = function (METHOD_NAME, argument) {
    var method = [][METHOD_NAME];
    return !!method && fails(function () {
      // eslint-disable-next-line no-useless-call,no-throw-literal
      method.call(null, argument || function () { throw 1; }, 1);
    });
  };

  var defineProperty = Object.defineProperty;
  var cache = {};

  var thrower = function (it) { throw it; };

  var arrayMethodUsesToLength = function (METHOD_NAME, options) {
    if (has(cache, METHOD_NAME)) return cache[METHOD_NAME];
    if (!options) options = {};
    var method = [][METHOD_NAME];
    var ACCESSORS = has(options, 'ACCESSORS') ? options.ACCESSORS : false;
    var argument0 = has(options, 0) ? options[0] : thrower;
    var argument1 = has(options, 1) ? options[1] : undefined;

    return cache[METHOD_NAME] = !!method && !fails(function () {
      if (ACCESSORS && !descriptors) return true;
      var O = { length: -1 };

      if (ACCESSORS) defineProperty(O, 1, { enumerable: true, get: thrower });
      else O[1] = 1;

      method.call(O, argument0, argument1);
    });
  };

  var $every = arrayIteration.every;



  var STRICT_METHOD = arrayMethodIsStrict('every');
  var USES_TO_LENGTH = arrayMethodUsesToLength('every');

  // `Array.prototype.every` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.every
  _export({ target: 'Array', proto: true, forced: !STRICT_METHOD || !USES_TO_LENGTH }, {
    every: function every(callbackfn /* , thisArg */) {
      return $every(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
  });

  // `Array.prototype.fill` method implementation
  // https://tc39.github.io/ecma262/#sec-array.prototype.fill
  var arrayFill = function fill(value /* , start = 0, end = @length */) {
    var O = toObject(this);
    var length = toLength(O.length);
    var argumentsLength = arguments.length;
    var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);
    var end = argumentsLength > 2 ? arguments[2] : undefined;
    var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
    while (endPos > index) O[index++] = value;
    return O;
  };

  // `Object.keys` method
  // https://tc39.github.io/ecma262/#sec-object.keys
  var objectKeys = Object.keys || function keys(O) {
    return objectKeysInternal(O, enumBugKeys);
  };

  // `Object.defineProperties` method
  // https://tc39.github.io/ecma262/#sec-object.defineproperties
  var objectDefineProperties = descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
    anObject(O);
    var keys = objectKeys(Properties);
    var length = keys.length;
    var index = 0;
    var key;
    while (length > index) objectDefineProperty.f(O, key = keys[index++], Properties[key]);
    return O;
  };

  var html = getBuiltIn('document', 'documentElement');

  var GT = '>';
  var LT = '<';
  var PROTOTYPE = 'prototype';
  var SCRIPT = 'script';
  var IE_PROTO = sharedKey('IE_PROTO');

  var EmptyConstructor = function () { /* empty */ };

  var scriptTag = function (content) {
    return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
  };

  // Create object with fake `null` prototype: use ActiveX Object with cleared prototype
  var NullProtoObjectViaActiveX = function (activeXDocument) {
    activeXDocument.write(scriptTag(''));
    activeXDocument.close();
    var temp = activeXDocument.parentWindow.Object;
    activeXDocument = null; // avoid memory leak
    return temp;
  };

  // Create object with fake `null` prototype: use iframe Object with cleared prototype
  var NullProtoObjectViaIFrame = function () {
    // Thrash, waste and sodomy: IE GC bug
    var iframe = documentCreateElement('iframe');
    var JS = 'java' + SCRIPT + ':';
    var iframeDocument;
    iframe.style.display = 'none';
    html.appendChild(iframe);
    // https://github.com/zloirock/core-js/issues/475
    iframe.src = String(JS);
    iframeDocument = iframe.contentWindow.document;
    iframeDocument.open();
    iframeDocument.write(scriptTag('document.F=Object'));
    iframeDocument.close();
    return iframeDocument.F;
  };

  // Check for document.domain and active x support
  // No need to use active x approach when document.domain is not set
  // see https://github.com/es-shims/es5-shim/issues/150
  // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
  // avoid IE GC bug
  var activeXDocument;
  var NullProtoObject = function () {
    try {
      /* global ActiveXObject */
      activeXDocument = document.domain && new ActiveXObject('htmlfile');
    } catch (error) { /* ignore */ }
    NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();
    var length = enumBugKeys.length;
    while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
    return NullProtoObject();
  };

  hiddenKeys[IE_PROTO] = true;

  // `Object.create` method
  // https://tc39.github.io/ecma262/#sec-object.create
  var objectCreate = Object.create || function create(O, Properties) {
    var result;
    if (O !== null) {
      EmptyConstructor[PROTOTYPE] = anObject(O);
      result = new EmptyConstructor();
      EmptyConstructor[PROTOTYPE] = null;
      // add "__proto__" for Object.getPrototypeOf polyfill
      result[IE_PROTO] = O;
    } else result = NullProtoObject();
    return Properties === undefined ? result : objectDefineProperties(result, Properties);
  };

  var UNSCOPABLES = wellKnownSymbol('unscopables');
  var ArrayPrototype = Array.prototype;

  // Array.prototype[@@unscopables]
  // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
  if (ArrayPrototype[UNSCOPABLES] == undefined) {
    objectDefineProperty.f(ArrayPrototype, UNSCOPABLES, {
      configurable: true,
      value: objectCreate(null)
    });
  }

  // add a key to Array.prototype[@@unscopables]
  var addToUnscopables = function (key) {
    ArrayPrototype[UNSCOPABLES][key] = true;
  };

  // `Array.prototype.fill` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.fill
  _export({ target: 'Array', proto: true }, {
    fill: arrayFill
  });

  // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
  addToUnscopables('fill');

  var $filter = arrayIteration.filter;



  var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('filter');
  // Edge 14- issue
  var USES_TO_LENGTH$1 = arrayMethodUsesToLength('filter');

  // `Array.prototype.filter` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.filter
  // with adding support of @@species
  _export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH$1 }, {
    filter: function filter(callbackfn /* , thisArg */) {
      return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
  });

  var $find = arrayIteration.find;



  var FIND = 'find';
  var SKIPS_HOLES = true;

  var USES_TO_LENGTH$2 = arrayMethodUsesToLength(FIND);

  // Shouldn't skip holes
  if (FIND in []) Array(1)[FIND](function () { SKIPS_HOLES = false; });

  // `Array.prototype.find` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.find
  _export({ target: 'Array', proto: true, forced: SKIPS_HOLES || !USES_TO_LENGTH$2 }, {
    find: function find(callbackfn /* , that = undefined */) {
      return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
  });

  // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
  addToUnscopables(FIND);

  var $findIndex = arrayIteration.findIndex;



  var FIND_INDEX = 'findIndex';
  var SKIPS_HOLES$1 = true;

  var USES_TO_LENGTH$3 = arrayMethodUsesToLength(FIND_INDEX);

  // Shouldn't skip holes
  if (FIND_INDEX in []) Array(1)[FIND_INDEX](function () { SKIPS_HOLES$1 = false; });

  // `Array.prototype.findIndex` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.findindex
  _export({ target: 'Array', proto: true, forced: SKIPS_HOLES$1 || !USES_TO_LENGTH$3 }, {
    findIndex: function findIndex(callbackfn /* , that = undefined */) {
      return $findIndex(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
  });

  // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
  addToUnscopables(FIND_INDEX);

  var $forEach = arrayIteration.forEach;



  var STRICT_METHOD$1 = arrayMethodIsStrict('forEach');
  var USES_TO_LENGTH$4 = arrayMethodUsesToLength('forEach');

  // `Array.prototype.forEach` method implementation
  // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
  var arrayForEach = (!STRICT_METHOD$1 || !USES_TO_LENGTH$4) ? function forEach(callbackfn /* , thisArg */) {
    return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  } : [].forEach;

  // `Array.prototype.forEach` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
  _export({ target: 'Array', proto: true, forced: [].forEach != arrayForEach }, {
    forEach: arrayForEach
  });

  var $includes = arrayIncludes.includes;



  var USES_TO_LENGTH$5 = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });

  // `Array.prototype.includes` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.includes
  _export({ target: 'Array', proto: true, forced: !USES_TO_LENGTH$5 }, {
    includes: function includes(el /* , fromIndex = 0 */) {
      return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
    }
  });

  // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
  addToUnscopables('includes');

  var iterators = {};

  var correctPrototypeGetter = !fails(function () {
    function F() { /* empty */ }
    F.prototype.constructor = null;
    return Object.getPrototypeOf(new F()) !== F.prototype;
  });

  var IE_PROTO$1 = sharedKey('IE_PROTO');
  var ObjectPrototype = Object.prototype;

  // `Object.getPrototypeOf` method
  // https://tc39.github.io/ecma262/#sec-object.getprototypeof
  var objectGetPrototypeOf = correctPrototypeGetter ? Object.getPrototypeOf : function (O) {
    O = toObject(O);
    if (has(O, IE_PROTO$1)) return O[IE_PROTO$1];
    if (typeof O.constructor == 'function' && O instanceof O.constructor) {
      return O.constructor.prototype;
    } return O instanceof Object ? ObjectPrototype : null;
  };

  var ITERATOR = wellKnownSymbol('iterator');
  var BUGGY_SAFARI_ITERATORS = false;

  var returnThis = function () { return this; };

  // `%IteratorPrototype%` object
  // https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object
  var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

  if ([].keys) {
    arrayIterator = [].keys();
    // Safari 8 has buggy iterators w/o `next`
    if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
    else {
      PrototypeOfArrayIteratorPrototype = objectGetPrototypeOf(objectGetPrototypeOf(arrayIterator));
      if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
    }
  }

  if (IteratorPrototype == undefined) IteratorPrototype = {};

  // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
  if ( !has(IteratorPrototype, ITERATOR)) {
    createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);
  }

  var iteratorsCore = {
    IteratorPrototype: IteratorPrototype,
    BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
  };

  var defineProperty$1 = objectDefineProperty.f;



  var TO_STRING_TAG = wellKnownSymbol('toStringTag');

  var setToStringTag = function (it, TAG, STATIC) {
    if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
      defineProperty$1(it, TO_STRING_TAG, { configurable: true, value: TAG });
    }
  };

  var IteratorPrototype$1 = iteratorsCore.IteratorPrototype;





  var returnThis$1 = function () { return this; };

  var createIteratorConstructor = function (IteratorConstructor, NAME, next) {
    var TO_STRING_TAG = NAME + ' Iterator';
    IteratorConstructor.prototype = objectCreate(IteratorPrototype$1, { next: createPropertyDescriptor(1, next) });
    setToStringTag(IteratorConstructor, TO_STRING_TAG, false);
    iterators[TO_STRING_TAG] = returnThis$1;
    return IteratorConstructor;
  };

  var aPossiblePrototype = function (it) {
    if (!isObject(it) && it !== null) {
      throw TypeError("Can't set " + String(it) + ' as a prototype');
    } return it;
  };

  // `Object.setPrototypeOf` method
  // https://tc39.github.io/ecma262/#sec-object.setprototypeof
  // Works with __proto__ only. Old v8 can't work with null proto objects.
  /* eslint-disable no-proto */
  var objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {} ? function () {
    var CORRECT_SETTER = false;
    var test = {};
    var setter;
    try {
      setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
      setter.call(test, []);
      CORRECT_SETTER = test instanceof Array;
    } catch (error) { /* empty */ }
    return function setPrototypeOf(O, proto) {
      anObject(O);
      aPossiblePrototype(proto);
      if (CORRECT_SETTER) setter.call(O, proto);
      else O.__proto__ = proto;
      return O;
    };
  }() : undefined);

  var IteratorPrototype$2 = iteratorsCore.IteratorPrototype;
  var BUGGY_SAFARI_ITERATORS$1 = iteratorsCore.BUGGY_SAFARI_ITERATORS;
  var ITERATOR$1 = wellKnownSymbol('iterator');
  var KEYS = 'keys';
  var VALUES = 'values';
  var ENTRIES = 'entries';

  var returnThis$2 = function () { return this; };

  var defineIterator = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
    createIteratorConstructor(IteratorConstructor, NAME, next);

    var getIterationMethod = function (KIND) {
      if (KIND === DEFAULT && defaultIterator) return defaultIterator;
      if (!BUGGY_SAFARI_ITERATORS$1 && KIND in IterablePrototype) return IterablePrototype[KIND];
      switch (KIND) {
        case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
        case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
        case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
      } return function () { return new IteratorConstructor(this); };
    };

    var TO_STRING_TAG = NAME + ' Iterator';
    var INCORRECT_VALUES_NAME = false;
    var IterablePrototype = Iterable.prototype;
    var nativeIterator = IterablePrototype[ITERATOR$1]
      || IterablePrototype['@@iterator']
      || DEFAULT && IterablePrototype[DEFAULT];
    var defaultIterator = !BUGGY_SAFARI_ITERATORS$1 && nativeIterator || getIterationMethod(DEFAULT);
    var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
    var CurrentIteratorPrototype, methods, KEY;

    // fix native
    if (anyNativeIterator) {
      CurrentIteratorPrototype = objectGetPrototypeOf(anyNativeIterator.call(new Iterable()));
      if (IteratorPrototype$2 !== Object.prototype && CurrentIteratorPrototype.next) {
        if ( objectGetPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype$2) {
          if (objectSetPrototypeOf) {
            objectSetPrototypeOf(CurrentIteratorPrototype, IteratorPrototype$2);
          } else if (typeof CurrentIteratorPrototype[ITERATOR$1] != 'function') {
            createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR$1, returnThis$2);
          }
        }
        // Set @@toStringTag to native iterators
        setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true);
      }
    }

    // fix Array#{values, @@iterator}.name in V8 / FF
    if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
      INCORRECT_VALUES_NAME = true;
      defaultIterator = function values() { return nativeIterator.call(this); };
    }

    // define iterator
    if ( IterablePrototype[ITERATOR$1] !== defaultIterator) {
      createNonEnumerableProperty(IterablePrototype, ITERATOR$1, defaultIterator);
    }
    iterators[NAME] = defaultIterator;

    // export additional methods
    if (DEFAULT) {
      methods = {
        values: getIterationMethod(VALUES),
        keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
        entries: getIterationMethod(ENTRIES)
      };
      if (FORCED) for (KEY in methods) {
        if (BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
          redefine(IterablePrototype, KEY, methods[KEY]);
        }
      } else _export({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME }, methods);
    }

    return methods;
  };

  var ARRAY_ITERATOR = 'Array Iterator';
  var setInternalState = internalState.set;
  var getInternalState = internalState.getterFor(ARRAY_ITERATOR);

  // `Array.prototype.entries` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.entries
  // `Array.prototype.keys` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.keys
  // `Array.prototype.values` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.values
  // `Array.prototype[@@iterator]` method
  // https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator
  // `CreateArrayIterator` internal method
  // https://tc39.github.io/ecma262/#sec-createarrayiterator
  var es_array_iterator = defineIterator(Array, 'Array', function (iterated, kind) {
    setInternalState(this, {
      type: ARRAY_ITERATOR,
      target: toIndexedObject(iterated), // target
      index: 0,                          // next index
      kind: kind                         // kind
    });
  // `%ArrayIteratorPrototype%.next` method
  // https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next
  }, function () {
    var state = getInternalState(this);
    var target = state.target;
    var kind = state.kind;
    var index = state.index++;
    if (!target || index >= target.length) {
      state.target = undefined;
      return { value: undefined, done: true };
    }
    if (kind == 'keys') return { value: index, done: false };
    if (kind == 'values') return { value: target[index], done: false };
    return { value: [index, target[index]], done: false };
  }, 'values');

  // argumentsList[@@iterator] is %ArrayProto_values%
  // https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject
  // https://tc39.github.io/ecma262/#sec-createmappedargumentsobject
  iterators.Arguments = iterators.Array;

  // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
  addToUnscopables('keys');
  addToUnscopables('values');
  addToUnscopables('entries');

  var nativeJoin = [].join;

  var ES3_STRINGS = indexedObject != Object;
  var STRICT_METHOD$2 = arrayMethodIsStrict('join', ',');

  // `Array.prototype.join` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.join
  _export({ target: 'Array', proto: true, forced: ES3_STRINGS || !STRICT_METHOD$2 }, {
    join: function join(separator) {
      return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);
    }
  });

  var min$2 = Math.min;
  var nativeLastIndexOf = [].lastIndexOf;
  var NEGATIVE_ZERO = !!nativeLastIndexOf && 1 / [1].lastIndexOf(1, -0) < 0;
  var STRICT_METHOD$3 = arrayMethodIsStrict('lastIndexOf');
  // For preventing possible almost infinite loop in non-standard implementations, test the forward version of the method
  var USES_TO_LENGTH$6 = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });
  var FORCED$1 = NEGATIVE_ZERO || !STRICT_METHOD$3 || !USES_TO_LENGTH$6;

  // `Array.prototype.lastIndexOf` method implementation
  // https://tc39.github.io/ecma262/#sec-array.prototype.lastindexof
  var arrayLastIndexOf = FORCED$1 ? function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
    // convert -0 to +0
    if (NEGATIVE_ZERO) return nativeLastIndexOf.apply(this, arguments) || 0;
    var O = toIndexedObject(this);
    var length = toLength(O.length);
    var index = length - 1;
    if (arguments.length > 1) index = min$2(index, toInteger(arguments[1]));
    if (index < 0) index = length + index;
    for (;index >= 0; index--) if (index in O && O[index] === searchElement) return index || 0;
    return -1;
  } : nativeLastIndexOf;

  // `Array.prototype.lastIndexOf` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.lastindexof
  _export({ target: 'Array', proto: true, forced: arrayLastIndexOf !== [].lastIndexOf }, {
    lastIndexOf: arrayLastIndexOf
  });

  var $map = arrayIteration.map;



  var HAS_SPECIES_SUPPORT$1 = arrayMethodHasSpeciesSupport('map');
  // FF49- issue
  var USES_TO_LENGTH$7 = arrayMethodUsesToLength('map');

  // `Array.prototype.map` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.map
  // with adding support of @@species
  _export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$1 || !USES_TO_LENGTH$7 }, {
    map: function map(callbackfn /* , thisArg */) {
      return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
  });

  // `Array.prototype.{ reduce, reduceRight }` methods implementation
  var createMethod$2 = function (IS_RIGHT) {
    return function (that, callbackfn, argumentsLength, memo) {
      aFunction$1(callbackfn);
      var O = toObject(that);
      var self = indexedObject(O);
      var length = toLength(O.length);
      var index = IS_RIGHT ? length - 1 : 0;
      var i = IS_RIGHT ? -1 : 1;
      if (argumentsLength < 2) while (true) {
        if (index in self) {
          memo = self[index];
          index += i;
          break;
        }
        index += i;
        if (IS_RIGHT ? index < 0 : length <= index) {
          throw TypeError('Reduce of empty array with no initial value');
        }
      }
      for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {
        memo = callbackfn(memo, self[index], index, O);
      }
      return memo;
    };
  };

  var arrayReduce = {
    // `Array.prototype.reduce` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.reduce
    left: createMethod$2(false),
    // `Array.prototype.reduceRight` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright
    right: createMethod$2(true)
  };

  var $reduce = arrayReduce.left;



  var STRICT_METHOD$4 = arrayMethodIsStrict('reduce');
  var USES_TO_LENGTH$8 = arrayMethodUsesToLength('reduce', { 1: 0 });

  // `Array.prototype.reduce` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.reduce
  _export({ target: 'Array', proto: true, forced: !STRICT_METHOD$4 || !USES_TO_LENGTH$8 }, {
    reduce: function reduce(callbackfn /* , initialValue */) {
      return $reduce(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
    }
  });

  var $some = arrayIteration.some;



  var STRICT_METHOD$5 = arrayMethodIsStrict('some');
  var USES_TO_LENGTH$9 = arrayMethodUsesToLength('some');

  // `Array.prototype.some` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.some
  _export({ target: 'Array', proto: true, forced: !STRICT_METHOD$5 || !USES_TO_LENGTH$9 }, {
    some: function some(callbackfn /* , thisArg */) {
      return $some(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
  });

  var HAS_SPECIES_SUPPORT$2 = arrayMethodHasSpeciesSupport('splice');
  var USES_TO_LENGTH$a = arrayMethodUsesToLength('splice', { ACCESSORS: true, 0: 0, 1: 2 });

  var max$1 = Math.max;
  var min$3 = Math.min;
  var MAX_SAFE_INTEGER$1 = 0x1FFFFFFFFFFFFF;
  var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';

  // `Array.prototype.splice` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.splice
  // with adding support of @@species
  _export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$2 || !USES_TO_LENGTH$a }, {
    splice: function splice(start, deleteCount /* , ...items */) {
      var O = toObject(this);
      var len = toLength(O.length);
      var actualStart = toAbsoluteIndex(start, len);
      var argumentsLength = arguments.length;
      var insertCount, actualDeleteCount, A, k, from, to;
      if (argumentsLength === 0) {
        insertCount = actualDeleteCount = 0;
      } else if (argumentsLength === 1) {
        insertCount = 0;
        actualDeleteCount = len - actualStart;
      } else {
        insertCount = argumentsLength - 2;
        actualDeleteCount = min$3(max$1(toInteger(deleteCount), 0), len - actualStart);
      }
      if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER$1) {
        throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
      }
      A = arraySpeciesCreate(O, actualDeleteCount);
      for (k = 0; k < actualDeleteCount; k++) {
        from = actualStart + k;
        if (from in O) createProperty(A, k, O[from]);
      }
      A.length = actualDeleteCount;
      if (insertCount < actualDeleteCount) {
        for (k = actualStart; k < len - actualDeleteCount; k++) {
          from = k + actualDeleteCount;
          to = k + insertCount;
          if (from in O) O[to] = O[from];
          else delete O[to];
        }
        for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];
      } else if (insertCount > actualDeleteCount) {
        for (k = len - actualDeleteCount; k > actualStart; k--) {
          from = k + actualDeleteCount - 1;
          to = k + insertCount - 1;
          if (from in O) O[to] = O[from];
          else delete O[to];
        }
      }
      for (k = 0; k < insertCount; k++) {
        O[k + actualStart] = arguments[k + 2];
      }
      O.length = len - actualDeleteCount + insertCount;
      return A;
    }
  });

  var defineProperty$2 = objectDefineProperty.f;

  var FunctionPrototype = Function.prototype;
  var FunctionPrototypeToString = FunctionPrototype.toString;
  var nameRE = /^\s*function ([^ (]*)/;
  var NAME = 'name';

  // Function instances `.name` property
  // https://tc39.github.io/ecma262/#sec-function-instances-name
  if (descriptors && !(NAME in FunctionPrototype)) {
    defineProperty$2(FunctionPrototype, NAME, {
      configurable: true,
      get: function () {
        try {
          return FunctionPrototypeToString.call(this).match(nameRE)[1];
        } catch (error) {
          return '';
        }
      }
    });
  }

  // `Math.sign` method implementation
  // https://tc39.github.io/ecma262/#sec-math.sign
  var mathSign = Math.sign || function sign(x) {
    // eslint-disable-next-line no-self-compare
    return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
  };

  // `Math.sign` method
  // https://tc39.github.io/ecma262/#sec-math.sign
  _export({ target: 'Math', stat: true }, {
    sign: mathSign
  });

  // makes subclassing work correct for wrapped built-ins
  var inheritIfRequired = function ($this, dummy, Wrapper) {
    var NewTarget, NewTargetPrototype;
    if (
      // it can work only with native `setPrototypeOf`
      objectSetPrototypeOf &&
      // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
      typeof (NewTarget = dummy.constructor) == 'function' &&
      NewTarget !== Wrapper &&
      isObject(NewTargetPrototype = NewTarget.prototype) &&
      NewTargetPrototype !== Wrapper.prototype
    ) objectSetPrototypeOf($this, NewTargetPrototype);
    return $this;
  };

  // a string of all valid unicode whitespaces
  // eslint-disable-next-line max-len
  var whitespaces = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

  var whitespace = '[' + whitespaces + ']';
  var ltrim = RegExp('^' + whitespace + whitespace + '*');
  var rtrim = RegExp(whitespace + whitespace + '*$');

  // `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
  var createMethod$3 = function (TYPE) {
    return function ($this) {
      var string = String(requireObjectCoercible($this));
      if (TYPE & 1) string = string.replace(ltrim, '');
      if (TYPE & 2) string = string.replace(rtrim, '');
      return string;
    };
  };

  var stringTrim = {
    // `String.prototype.{ trimLeft, trimStart }` methods
    // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart
    start: createMethod$3(1),
    // `String.prototype.{ trimRight, trimEnd }` methods
    // https://tc39.github.io/ecma262/#sec-string.prototype.trimend
    end: createMethod$3(2),
    // `String.prototype.trim` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.trim
    trim: createMethod$3(3)
  };

  var getOwnPropertyNames = objectGetOwnPropertyNames.f;
  var getOwnPropertyDescriptor$2 = objectGetOwnPropertyDescriptor.f;
  var defineProperty$3 = objectDefineProperty.f;
  var trim = stringTrim.trim;

  var NUMBER = 'Number';
  var NativeNumber = global_1[NUMBER];
  var NumberPrototype = NativeNumber.prototype;

  // Opera ~12 has broken Object#toString
  var BROKEN_CLASSOF = classofRaw(objectCreate(NumberPrototype)) == NUMBER;

  // `ToNumber` abstract operation
  // https://tc39.github.io/ecma262/#sec-tonumber
  var toNumber = function (argument) {
    var it = toPrimitive(argument, false);
    var first, third, radix, maxCode, digits, length, index, code;
    if (typeof it == 'string' && it.length > 2) {
      it = trim(it);
      first = it.charCodeAt(0);
      if (first === 43 || first === 45) {
        third = it.charCodeAt(2);
        if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
      } else if (first === 48) {
        switch (it.charCodeAt(1)) {
          case 66: case 98: radix = 2; maxCode = 49; break; // fast equal of /^0b[01]+$/i
          case 79: case 111: radix = 8; maxCode = 55; break; // fast equal of /^0o[0-7]+$/i
          default: return +it;
        }
        digits = it.slice(2);
        length = digits.length;
        for (index = 0; index < length; index++) {
          code = digits.charCodeAt(index);
          // parseInt parses a string to a first unavailable symbol
          // but ToNumber should return NaN if a string contains unavailable symbols
          if (code < 48 || code > maxCode) return NaN;
        } return parseInt(digits, radix);
      }
    } return +it;
  };

  // `Number` constructor
  // https://tc39.github.io/ecma262/#sec-number-constructor
  if (isForced_1(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {
    var NumberWrapper = function Number(value) {
      var it = arguments.length < 1 ? 0 : value;
      var dummy = this;
      return dummy instanceof NumberWrapper
        // check on 1..constructor(foo) case
        && (BROKEN_CLASSOF ? fails(function () { NumberPrototype.valueOf.call(dummy); }) : classofRaw(dummy) != NUMBER)
          ? inheritIfRequired(new NativeNumber(toNumber(it)), dummy, NumberWrapper) : toNumber(it);
    };
    for (var keys$1 = descriptors ? getOwnPropertyNames(NativeNumber) : (
      // ES3:
      'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
      // ES2015 (in case, if modules with ES2015 Number statics required before):
      'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
      'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
    ).split(','), j = 0, key; keys$1.length > j; j++) {
      if (has(NativeNumber, key = keys$1[j]) && !has(NumberWrapper, key)) {
        defineProperty$3(NumberWrapper, key, getOwnPropertyDescriptor$2(NativeNumber, key));
      }
    }
    NumberWrapper.prototype = NumberPrototype;
    NumberPrototype.constructor = NumberWrapper;
    redefine(global_1, NUMBER, NumberWrapper);
  }

  var globalIsFinite = global_1.isFinite;

  // `Number.isFinite` method
  // https://tc39.github.io/ecma262/#sec-number.isfinite
  var numberIsFinite = Number.isFinite || function isFinite(it) {
    return typeof it == 'number' && globalIsFinite(it);
  };

  // `Number.isFinite` method
  // https://tc39.github.io/ecma262/#sec-number.isfinite
  _export({ target: 'Number', stat: true }, { isFinite: numberIsFinite });

  // `Number.isNaN` method
  // https://tc39.github.io/ecma262/#sec-number.isnan
  _export({ target: 'Number', stat: true }, {
    isNaN: function isNaN(number) {
      // eslint-disable-next-line no-self-compare
      return number != number;
    }
  });

  // `Number.MAX_SAFE_INTEGER` constant
  // https://tc39.github.io/ecma262/#sec-number.max_safe_integer
  _export({ target: 'Number', stat: true }, {
    MAX_SAFE_INTEGER: 0x1FFFFFFFFFFFFF
  });

  var propertyIsEnumerable = objectPropertyIsEnumerable.f;

  // `Object.{ entries, values }` methods implementation
  var createMethod$4 = function (TO_ENTRIES) {
    return function (it) {
      var O = toIndexedObject(it);
      var keys = objectKeys(O);
      var length = keys.length;
      var i = 0;
      var result = [];
      var key;
      while (length > i) {
        key = keys[i++];
        if (!descriptors || propertyIsEnumerable.call(O, key)) {
          result.push(TO_ENTRIES ? [key, O[key]] : O[key]);
        }
      }
      return result;
    };
  };

  var objectToArray = {
    // `Object.entries` method
    // https://tc39.github.io/ecma262/#sec-object.entries
    entries: createMethod$4(true),
    // `Object.values` method
    // https://tc39.github.io/ecma262/#sec-object.values
    values: createMethod$4(false)
  };

  var $entries = objectToArray.entries;

  // `Object.entries` method
  // https://tc39.github.io/ecma262/#sec-object.entries
  _export({ target: 'Object', stat: true }, {
    entries: function entries(O) {
      return $entries(O);
    }
  });

  var FAILS_ON_PRIMITIVES = fails(function () { objectKeys(1); });

  // `Object.keys` method
  // https://tc39.github.io/ecma262/#sec-object.keys
  _export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
    keys: function keys(it) {
      return objectKeys(toObject(it));
    }
  });

  var TO_STRING_TAG$1 = wellKnownSymbol('toStringTag');
  var test = {};

  test[TO_STRING_TAG$1] = 'z';

  var toStringTagSupport = String(test) === '[object z]';

  var TO_STRING_TAG$2 = wellKnownSymbol('toStringTag');
  // ES3 wrong here
  var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

  // fallback for IE11 Script Access Denied error
  var tryGet = function (it, key) {
    try {
      return it[key];
    } catch (error) { /* empty */ }
  };

  // getting tag from ES6+ `Object.prototype.toString`
  var classof = toStringTagSupport ? classofRaw : function (it) {
    var O, tag, result;
    return it === undefined ? 'Undefined' : it === null ? 'Null'
      // @@toStringTag case
      : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG$2)) == 'string' ? tag
      // builtinTag case
      : CORRECT_ARGUMENTS ? classofRaw(O)
      // ES3 arguments fallback
      : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
  };

  // `Object.prototype.toString` method implementation
  // https://tc39.github.io/ecma262/#sec-object.prototype.tostring
  var objectToString = toStringTagSupport ? {}.toString : function toString() {
    return '[object ' + classof(this) + ']';
  };

  // `Object.prototype.toString` method
  // https://tc39.github.io/ecma262/#sec-object.prototype.tostring
  if (!toStringTagSupport) {
    redefine(Object.prototype, 'toString', objectToString, { unsafe: true });
  }

  var nativePromiseConstructor = global_1.Promise;

  var redefineAll = function (target, src, options) {
    for (var key in src) redefine(target, key, src[key], options);
    return target;
  };

  var SPECIES$2 = wellKnownSymbol('species');

  var setSpecies = function (CONSTRUCTOR_NAME) {
    var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
    var defineProperty = objectDefineProperty.f;

    if (descriptors && Constructor && !Constructor[SPECIES$2]) {
      defineProperty(Constructor, SPECIES$2, {
        configurable: true,
        get: function () { return this; }
      });
    }
  };

  var anInstance = function (it, Constructor, name) {
    if (!(it instanceof Constructor)) {
      throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
    } return it;
  };

  var ITERATOR$2 = wellKnownSymbol('iterator');
  var ArrayPrototype$1 = Array.prototype;

  // check on default Array iterator
  var isArrayIteratorMethod = function (it) {
    return it !== undefined && (iterators.Array === it || ArrayPrototype$1[ITERATOR$2] === it);
  };

  var ITERATOR$3 = wellKnownSymbol('iterator');

  var getIteratorMethod = function (it) {
    if (it != undefined) return it[ITERATOR$3]
      || it['@@iterator']
      || iterators[classof(it)];
  };

  // call something on iterator step with safe closing on error
  var callWithSafeIterationClosing = function (iterator, fn, value, ENTRIES) {
    try {
      return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
    // 7.4.6 IteratorClose(iterator, completion)
    } catch (error) {
      var returnMethod = iterator['return'];
      if (returnMethod !== undefined) anObject(returnMethod.call(iterator));
      throw error;
    }
  };

  var iterate_1 = createCommonjsModule(function (module) {
  var Result = function (stopped, result) {
    this.stopped = stopped;
    this.result = result;
  };

  var iterate = module.exports = function (iterable, fn, that, AS_ENTRIES, IS_ITERATOR) {
    var boundFunction = functionBindContext(fn, that, AS_ENTRIES ? 2 : 1);
    var iterator, iterFn, index, length, result, next, step;

    if (IS_ITERATOR) {
      iterator = iterable;
    } else {
      iterFn = getIteratorMethod(iterable);
      if (typeof iterFn != 'function') throw TypeError('Target is not iterable');
      // optimisation for array iterators
      if (isArrayIteratorMethod(iterFn)) {
        for (index = 0, length = toLength(iterable.length); length > index; index++) {
          result = AS_ENTRIES
            ? boundFunction(anObject(step = iterable[index])[0], step[1])
            : boundFunction(iterable[index]);
          if (result && result instanceof Result) return result;
        } return new Result(false);
      }
      iterator = iterFn.call(iterable);
    }

    next = iterator.next;
    while (!(step = next.call(iterator)).done) {
      result = callWithSafeIterationClosing(iterator, boundFunction, step.value, AS_ENTRIES);
      if (typeof result == 'object' && result && result instanceof Result) return result;
    } return new Result(false);
  };

  iterate.stop = function (result) {
    return new Result(true, result);
  };
  });

  var ITERATOR$4 = wellKnownSymbol('iterator');
  var SAFE_CLOSING = false;

  try {
    var called = 0;
    var iteratorWithReturn = {
      next: function () {
        return { done: !!called++ };
      },
      'return': function () {
        SAFE_CLOSING = true;
      }
    };
    iteratorWithReturn[ITERATOR$4] = function () {
      return this;
    };
    // eslint-disable-next-line no-throw-literal
    Array.from(iteratorWithReturn, function () { throw 2; });
  } catch (error) { /* empty */ }

  var checkCorrectnessOfIteration = function (exec, SKIP_CLOSING) {
    if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
    var ITERATION_SUPPORT = false;
    try {
      var object = {};
      object[ITERATOR$4] = function () {
        return {
          next: function () {
            return { done: ITERATION_SUPPORT = true };
          }
        };
      };
      exec(object);
    } catch (error) { /* empty */ }
    return ITERATION_SUPPORT;
  };

  var SPECIES$3 = wellKnownSymbol('species');

  // `SpeciesConstructor` abstract operation
  // https://tc39.github.io/ecma262/#sec-speciesconstructor
  var speciesConstructor = function (O, defaultConstructor) {
    var C = anObject(O).constructor;
    var S;
    return C === undefined || (S = anObject(C)[SPECIES$3]) == undefined ? defaultConstructor : aFunction$1(S);
  };

  var engineIsIos = /(iphone|ipod|ipad).*applewebkit/i.test(engineUserAgent);

  var location = global_1.location;
  var set$1 = global_1.setImmediate;
  var clear = global_1.clearImmediate;
  var process$2 = global_1.process;
  var MessageChannel = global_1.MessageChannel;
  var Dispatch = global_1.Dispatch;
  var counter = 0;
  var queue = {};
  var ONREADYSTATECHANGE = 'onreadystatechange';
  var defer, channel, port;

  var run = function (id) {
    // eslint-disable-next-line no-prototype-builtins
    if (queue.hasOwnProperty(id)) {
      var fn = queue[id];
      delete queue[id];
      fn();
    }
  };

  var runner = function (id) {
    return function () {
      run(id);
    };
  };

  var listener = function (event) {
    run(event.data);
  };

  var post = function (id) {
    // old engines have not location.origin
    global_1.postMessage(id + '', location.protocol + '//' + location.host);
  };

  // Node.js 0.9+ & IE10+ has setImmediate, otherwise:
  if (!set$1 || !clear) {
    set$1 = function setImmediate(fn) {
      var args = [];
      var i = 1;
      while (arguments.length > i) args.push(arguments[i++]);
      queue[++counter] = function () {
        // eslint-disable-next-line no-new-func
        (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);
      };
      defer(counter);
      return counter;
    };
    clear = function clearImmediate(id) {
      delete queue[id];
    };
    // Node.js 0.8-
    if (classofRaw(process$2) == 'process') {
      defer = function (id) {
        process$2.nextTick(runner(id));
      };
    // Sphere (JS game engine) Dispatch API
    } else if (Dispatch && Dispatch.now) {
      defer = function (id) {
        Dispatch.now(runner(id));
      };
    // Browsers with MessageChannel, includes WebWorkers
    // except iOS - https://github.com/zloirock/core-js/issues/624
    } else if (MessageChannel && !engineIsIos) {
      channel = new MessageChannel();
      port = channel.port2;
      channel.port1.onmessage = listener;
      defer = functionBindContext(port.postMessage, port, 1);
    // Browsers with postMessage, skip WebWorkers
    // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
    } else if (
      global_1.addEventListener &&
      typeof postMessage == 'function' &&
      !global_1.importScripts &&
      !fails(post) &&
      location.protocol !== 'file:'
    ) {
      defer = post;
      global_1.addEventListener('message', listener, false);
    // IE8-
    } else if (ONREADYSTATECHANGE in documentCreateElement('script')) {
      defer = function (id) {
        html.appendChild(documentCreateElement('script'))[ONREADYSTATECHANGE] = function () {
          html.removeChild(this);
          run(id);
        };
      };
    // Rest old browsers
    } else {
      defer = function (id) {
        setTimeout(runner(id), 0);
      };
    }
  }

  var task = {
    set: set$1,
    clear: clear
  };

  var getOwnPropertyDescriptor$3 = objectGetOwnPropertyDescriptor.f;

  var macrotask = task.set;


  var MutationObserver$1 = global_1.MutationObserver || global_1.WebKitMutationObserver;
  var process$3 = global_1.process;
  var Promise$1 = global_1.Promise;
  var IS_NODE = classofRaw(process$3) == 'process';
  // Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
  var queueMicrotaskDescriptor = getOwnPropertyDescriptor$3(global_1, 'queueMicrotask');
  var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

  var flush, head, last, notify, toggle, node, promise, then;

  // modern engines have queueMicrotask method
  if (!queueMicrotask) {
    flush = function () {
      var parent, fn;
      if (IS_NODE && (parent = process$3.domain)) parent.exit();
      while (head) {
        fn = head.fn;
        head = head.next;
        try {
          fn();
        } catch (error) {
          if (head) notify();
          else last = undefined;
          throw error;
        }
      } last = undefined;
      if (parent) parent.enter();
    };

    // Node.js
    if (IS_NODE) {
      notify = function () {
        process$3.nextTick(flush);
      };
    // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
    } else if (MutationObserver$1 && !engineIsIos) {
      toggle = true;
      node = document.createTextNode('');
      new MutationObserver$1(flush).observe(node, { characterData: true });
      notify = function () {
        node.data = toggle = !toggle;
      };
    // environments with maybe non-completely correct, but existent Promise
    } else if (Promise$1 && Promise$1.resolve) {
      // Promise.resolve without an argument throws an error in LG WebOS 2
      promise = Promise$1.resolve(undefined);
      then = promise.then;
      notify = function () {
        then.call(promise, flush);
      };
    // for other environments - macrotask based on:
    // - setImmediate
    // - MessageChannel
    // - window.postMessag
    // - onreadystatechange
    // - setTimeout
    } else {
      notify = function () {
        // strange IE + webpack dev server bug - use .call(global)
        macrotask.call(global_1, flush);
      };
    }
  }

  var microtask = queueMicrotask || function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };

  var PromiseCapability = function (C) {
    var resolve, reject;
    this.promise = new C(function ($$resolve, $$reject) {
      if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
      resolve = $$resolve;
      reject = $$reject;
    });
    this.resolve = aFunction$1(resolve);
    this.reject = aFunction$1(reject);
  };

  // 25.4.1.5 NewPromiseCapability(C)
  var f$5 = function (C) {
    return new PromiseCapability(C);
  };

  var newPromiseCapability = {
  	f: f$5
  };

  var promiseResolve = function (C, x) {
    anObject(C);
    if (isObject(x) && x.constructor === C) return x;
    var promiseCapability = newPromiseCapability.f(C);
    var resolve = promiseCapability.resolve;
    resolve(x);
    return promiseCapability.promise;
  };

  var hostReportErrors = function (a, b) {
    var console = global_1.console;
    if (console && console.error) {
      arguments.length === 1 ? console.error(a) : console.error(a, b);
    }
  };

  var perform = function (exec) {
    try {
      return { error: false, value: exec() };
    } catch (error) {
      return { error: true, value: error };
    }
  };

  var task$1 = task.set;










  var SPECIES$4 = wellKnownSymbol('species');
  var PROMISE = 'Promise';
  var getInternalState$1 = internalState.get;
  var setInternalState$1 = internalState.set;
  var getInternalPromiseState = internalState.getterFor(PROMISE);
  var PromiseConstructor = nativePromiseConstructor;
  var TypeError$1 = global_1.TypeError;
  var document$2 = global_1.document;
  var process$4 = global_1.process;
  var $fetch = getBuiltIn('fetch');
  var newPromiseCapability$1 = newPromiseCapability.f;
  var newGenericPromiseCapability = newPromiseCapability$1;
  var IS_NODE$1 = classofRaw(process$4) == 'process';
  var DISPATCH_EVENT = !!(document$2 && document$2.createEvent && global_1.dispatchEvent);
  var UNHANDLED_REJECTION = 'unhandledrejection';
  var REJECTION_HANDLED = 'rejectionhandled';
  var PENDING = 0;
  var FULFILLED = 1;
  var REJECTED = 2;
  var HANDLED = 1;
  var UNHANDLED = 2;
  var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

  var FORCED$2 = isForced_1(PROMISE, function () {
    var GLOBAL_CORE_JS_PROMISE = inspectSource(PromiseConstructor) !== String(PromiseConstructor);
    if (!GLOBAL_CORE_JS_PROMISE) {
      // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // We can't detect it synchronously, so just check versions
      if (engineV8Version === 66) return true;
      // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
      if (!IS_NODE$1 && typeof PromiseRejectionEvent != 'function') return true;
    }
    // We can't use @@species feature detection in V8 since it causes
    // deoptimization and performance degradation
    // https://github.com/zloirock/core-js/issues/679
    if (engineV8Version >= 51 && /native code/.test(PromiseConstructor)) return false;
    // Detect correctness of subclassing with @@species support
    var promise = PromiseConstructor.resolve(1);
    var FakePromise = function (exec) {
      exec(function () { /* empty */ }, function () { /* empty */ });
    };
    var constructor = promise.constructor = {};
    constructor[SPECIES$4] = FakePromise;
    return !(promise.then(function () { /* empty */ }) instanceof FakePromise);
  });

  var INCORRECT_ITERATION = FORCED$2 || !checkCorrectnessOfIteration(function (iterable) {
    PromiseConstructor.all(iterable)['catch'](function () { /* empty */ });
  });

  // helpers
  var isThenable = function (it) {
    var then;
    return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
  };

  var notify$1 = function (promise, state, isReject) {
    if (state.notified) return;
    state.notified = true;
    var chain = state.reactions;
    microtask(function () {
      var value = state.value;
      var ok = state.state == FULFILLED;
      var index = 0;
      // variable length - can't use forEach
      while (chain.length > index) {
        var reaction = chain[index++];
        var handler = ok ? reaction.ok : reaction.fail;
        var resolve = reaction.resolve;
        var reject = reaction.reject;
        var domain = reaction.domain;
        var result, then, exited;
        try {
          if (handler) {
            if (!ok) {
              if (state.rejection === UNHANDLED) onHandleUnhandled(promise, state);
              state.rejection = HANDLED;
            }
            if (handler === true) result = value;
            else {
              if (domain) domain.enter();
              result = handler(value); // can throw
              if (domain) {
                domain.exit();
                exited = true;
              }
            }
            if (result === reaction.promise) {
              reject(TypeError$1('Promise-chain cycle'));
            } else if (then = isThenable(result)) {
              then.call(result, resolve, reject);
            } else resolve(result);
          } else reject(value);
        } catch (error) {
          if (domain && !exited) domain.exit();
          reject(error);
        }
      }
      state.reactions = [];
      state.notified = false;
      if (isReject && !state.rejection) onUnhandled(promise, state);
    });
  };

  var dispatchEvent = function (name, promise, reason) {
    var event, handler;
    if (DISPATCH_EVENT) {
      event = document$2.createEvent('Event');
      event.promise = promise;
      event.reason = reason;
      event.initEvent(name, false, true);
      global_1.dispatchEvent(event);
    } else event = { promise: promise, reason: reason };
    if (handler = global_1['on' + name]) handler(event);
    else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
  };

  var onUnhandled = function (promise, state) {
    task$1.call(global_1, function () {
      var value = state.value;
      var IS_UNHANDLED = isUnhandled(state);
      var result;
      if (IS_UNHANDLED) {
        result = perform(function () {
          if (IS_NODE$1) {
            process$4.emit('unhandledRejection', value, promise);
          } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
        });
        // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
        state.rejection = IS_NODE$1 || isUnhandled(state) ? UNHANDLED : HANDLED;
        if (result.error) throw result.value;
      }
    });
  };

  var isUnhandled = function (state) {
    return state.rejection !== HANDLED && !state.parent;
  };

  var onHandleUnhandled = function (promise, state) {
    task$1.call(global_1, function () {
      if (IS_NODE$1) {
        process$4.emit('rejectionHandled', promise);
      } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
    });
  };

  var bind = function (fn, promise, state, unwrap) {
    return function (value) {
      fn(promise, state, value, unwrap);
    };
  };

  var internalReject = function (promise, state, value, unwrap) {
    if (state.done) return;
    state.done = true;
    if (unwrap) state = unwrap;
    state.value = value;
    state.state = REJECTED;
    notify$1(promise, state, true);
  };

  var internalResolve = function (promise, state, value, unwrap) {
    if (state.done) return;
    state.done = true;
    if (unwrap) state = unwrap;
    try {
      if (promise === value) throw TypeError$1("Promise can't be resolved itself");
      var then = isThenable(value);
      if (then) {
        microtask(function () {
          var wrapper = { done: false };
          try {
            then.call(value,
              bind(internalResolve, promise, wrapper, state),
              bind(internalReject, promise, wrapper, state)
            );
          } catch (error) {
            internalReject(promise, wrapper, error, state);
          }
        });
      } else {
        state.value = value;
        state.state = FULFILLED;
        notify$1(promise, state, false);
      }
    } catch (error) {
      internalReject(promise, { done: false }, error, state);
    }
  };

  // constructor polyfill
  if (FORCED$2) {
    // 25.4.3.1 Promise(executor)
    PromiseConstructor = function Promise(executor) {
      anInstance(this, PromiseConstructor, PROMISE);
      aFunction$1(executor);
      Internal.call(this);
      var state = getInternalState$1(this);
      try {
        executor(bind(internalResolve, this, state), bind(internalReject, this, state));
      } catch (error) {
        internalReject(this, state, error);
      }
    };
    // eslint-disable-next-line no-unused-vars
    Internal = function Promise(executor) {
      setInternalState$1(this, {
        type: PROMISE,
        done: false,
        notified: false,
        parent: false,
        reactions: [],
        rejection: false,
        state: PENDING,
        value: undefined
      });
    };
    Internal.prototype = redefineAll(PromiseConstructor.prototype, {
      // `Promise.prototype.then` method
      // https://tc39.github.io/ecma262/#sec-promise.prototype.then
      then: function then(onFulfilled, onRejected) {
        var state = getInternalPromiseState(this);
        var reaction = newPromiseCapability$1(speciesConstructor(this, PromiseConstructor));
        reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
        reaction.fail = typeof onRejected == 'function' && onRejected;
        reaction.domain = IS_NODE$1 ? process$4.domain : undefined;
        state.parent = true;
        state.reactions.push(reaction);
        if (state.state != PENDING) notify$1(this, state, false);
        return reaction.promise;
      },
      // `Promise.prototype.catch` method
      // https://tc39.github.io/ecma262/#sec-promise.prototype.catch
      'catch': function (onRejected) {
        return this.then(undefined, onRejected);
      }
    });
    OwnPromiseCapability = function () {
      var promise = new Internal();
      var state = getInternalState$1(promise);
      this.promise = promise;
      this.resolve = bind(internalResolve, promise, state);
      this.reject = bind(internalReject, promise, state);
    };
    newPromiseCapability.f = newPromiseCapability$1 = function (C) {
      return C === PromiseConstructor || C === PromiseWrapper
        ? new OwnPromiseCapability(C)
        : newGenericPromiseCapability(C);
    };

    if ( typeof nativePromiseConstructor == 'function') {
      nativeThen = nativePromiseConstructor.prototype.then;

      // wrap native Promise#then for native async functions
      redefine(nativePromiseConstructor.prototype, 'then', function then(onFulfilled, onRejected) {
        var that = this;
        return new PromiseConstructor(function (resolve, reject) {
          nativeThen.call(that, resolve, reject);
        }).then(onFulfilled, onRejected);
      // https://github.com/zloirock/core-js/issues/640
      }, { unsafe: true });

      // wrap fetch result
      if (typeof $fetch == 'function') _export({ global: true, enumerable: true, forced: true }, {
        // eslint-disable-next-line no-unused-vars
        fetch: function fetch(input /* , init */) {
          return promiseResolve(PromiseConstructor, $fetch.apply(global_1, arguments));
        }
      });
    }
  }

  _export({ global: true, wrap: true, forced: FORCED$2 }, {
    Promise: PromiseConstructor
  });

  setToStringTag(PromiseConstructor, PROMISE, false);
  setSpecies(PROMISE);

  PromiseWrapper = getBuiltIn(PROMISE);

  // statics
  _export({ target: PROMISE, stat: true, forced: FORCED$2 }, {
    // `Promise.reject` method
    // https://tc39.github.io/ecma262/#sec-promise.reject
    reject: function reject(r) {
      var capability = newPromiseCapability$1(this);
      capability.reject.call(undefined, r);
      return capability.promise;
    }
  });

  _export({ target: PROMISE, stat: true, forced:  FORCED$2 }, {
    // `Promise.resolve` method
    // https://tc39.github.io/ecma262/#sec-promise.resolve
    resolve: function resolve(x) {
      return promiseResolve( this, x);
    }
  });

  _export({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION }, {
    // `Promise.all` method
    // https://tc39.github.io/ecma262/#sec-promise.all
    all: function all(iterable) {
      var C = this;
      var capability = newPromiseCapability$1(C);
      var resolve = capability.resolve;
      var reject = capability.reject;
      var result = perform(function () {
        var $promiseResolve = aFunction$1(C.resolve);
        var values = [];
        var counter = 0;
        var remaining = 1;
        iterate_1(iterable, function (promise) {
          var index = counter++;
          var alreadyCalled = false;
          values.push(undefined);
          remaining++;
          $promiseResolve.call(C, promise).then(function (value) {
            if (alreadyCalled) return;
            alreadyCalled = true;
            values[index] = value;
            --remaining || resolve(values);
          }, reject);
        });
        --remaining || resolve(values);
      });
      if (result.error) reject(result.value);
      return capability.promise;
    },
    // `Promise.race` method
    // https://tc39.github.io/ecma262/#sec-promise.race
    race: function race(iterable) {
      var C = this;
      var capability = newPromiseCapability$1(C);
      var reject = capability.reject;
      var result = perform(function () {
        var $promiseResolve = aFunction$1(C.resolve);
        iterate_1(iterable, function (promise) {
          $promiseResolve.call(C, promise).then(capability.resolve, reject);
        });
      });
      if (result.error) reject(result.value);
      return capability.promise;
    }
  });

  // `RegExp.prototype.flags` getter implementation
  // https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags
  var regexpFlags = function () {
    var that = anObject(this);
    var result = '';
    if (that.global) result += 'g';
    if (that.ignoreCase) result += 'i';
    if (that.multiline) result += 'm';
    if (that.dotAll) result += 's';
    if (that.unicode) result += 'u';
    if (that.sticky) result += 'y';
    return result;
  };

  // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError,
  // so we use an intermediate function.
  function RE(s, f) {
    return RegExp(s, f);
  }

  var UNSUPPORTED_Y = fails(function () {
    // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
    var re = RE('a', 'y');
    re.lastIndex = 2;
    return re.exec('abcd') != null;
  });

  var BROKEN_CARET = fails(function () {
    // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
    var re = RE('^r', 'gy');
    re.lastIndex = 2;
    return re.exec('str') != null;
  });

  var regexpStickyHelpers = {
  	UNSUPPORTED_Y: UNSUPPORTED_Y,
  	BROKEN_CARET: BROKEN_CARET
  };

  var nativeExec = RegExp.prototype.exec;
  // This always refers to the native implementation, because the
  // String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
  // which loads this file before patching the method.
  var nativeReplace = String.prototype.replace;

  var patchedExec = nativeExec;

  var UPDATES_LAST_INDEX_WRONG = (function () {
    var re1 = /a/;
    var re2 = /b*/g;
    nativeExec.call(re1, 'a');
    nativeExec.call(re2, 'a');
    return re1.lastIndex !== 0 || re2.lastIndex !== 0;
  })();

  var UNSUPPORTED_Y$1 = regexpStickyHelpers.UNSUPPORTED_Y || regexpStickyHelpers.BROKEN_CARET;

  // nonparticipating capturing group, copied from es5-shim's String#split patch.
  var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

  var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y$1;

  if (PATCH) {
    patchedExec = function exec(str) {
      var re = this;
      var lastIndex, reCopy, match, i;
      var sticky = UNSUPPORTED_Y$1 && re.sticky;
      var flags = regexpFlags.call(re);
      var source = re.source;
      var charsAdded = 0;
      var strCopy = str;

      if (sticky) {
        flags = flags.replace('y', '');
        if (flags.indexOf('g') === -1) {
          flags += 'g';
        }

        strCopy = String(str).slice(re.lastIndex);
        // Support anchored sticky behavior.
        if (re.lastIndex > 0 && (!re.multiline || re.multiline && str[re.lastIndex - 1] !== '\n')) {
          source = '(?: ' + source + ')';
          strCopy = ' ' + strCopy;
          charsAdded++;
        }
        // ^(? + rx + ) is needed, in combination with some str slicing, to
        // simulate the 'y' flag.
        reCopy = new RegExp('^(?:' + source + ')', flags);
      }

      if (NPCG_INCLUDED) {
        reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
      }
      if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

      match = nativeExec.call(sticky ? reCopy : re, strCopy);

      if (sticky) {
        if (match) {
          match.input = match.input.slice(charsAdded);
          match[0] = match[0].slice(charsAdded);
          match.index = re.lastIndex;
          re.lastIndex += match[0].length;
        } else re.lastIndex = 0;
      } else if (UPDATES_LAST_INDEX_WRONG && match) {
        re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
      }
      if (NPCG_INCLUDED && match && match.length > 1) {
        // Fix browsers whose `exec` methods don't consistently return `undefined`
        // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
        nativeReplace.call(match[0], reCopy, function () {
          for (i = 1; i < arguments.length - 2; i++) {
            if (arguments[i] === undefined) match[i] = undefined;
          }
        });
      }

      return match;
    };
  }

  var regexpExec = patchedExec;

  _export({ target: 'RegExp', proto: true, forced: /./.exec !== regexpExec }, {
    exec: regexpExec
  });

  var freezing = !fails(function () {
    return Object.isExtensible(Object.preventExtensions({}));
  });

  var internalMetadata = createCommonjsModule(function (module) {
  var defineProperty = objectDefineProperty.f;



  var METADATA = uid('meta');
  var id = 0;

  var isExtensible = Object.isExtensible || function () {
    return true;
  };

  var setMetadata = function (it) {
    defineProperty(it, METADATA, { value: {
      objectID: 'O' + ++id, // object ID
      weakData: {}          // weak collections IDs
    } });
  };

  var fastKey = function (it, create) {
    // return a primitive with prefix
    if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
    if (!has(it, METADATA)) {
      // can't set metadata to uncaught frozen object
      if (!isExtensible(it)) return 'F';
      // not necessary to add metadata
      if (!create) return 'E';
      // add missing metadata
      setMetadata(it);
    // return object ID
    } return it[METADATA].objectID;
  };

  var getWeakData = function (it, create) {
    if (!has(it, METADATA)) {
      // can't set metadata to uncaught frozen object
      if (!isExtensible(it)) return true;
      // not necessary to add metadata
      if (!create) return false;
      // add missing metadata
      setMetadata(it);
    // return the store of weak collections IDs
    } return it[METADATA].weakData;
  };

  // add metadata on freeze-family methods calling
  var onFreeze = function (it) {
    if (freezing && meta.REQUIRED && isExtensible(it) && !has(it, METADATA)) setMetadata(it);
    return it;
  };

  var meta = module.exports = {
    REQUIRED: false,
    fastKey: fastKey,
    getWeakData: getWeakData,
    onFreeze: onFreeze
  };

  hiddenKeys[METADATA] = true;
  });
  var internalMetadata_1 = internalMetadata.REQUIRED;
  var internalMetadata_2 = internalMetadata.fastKey;
  var internalMetadata_3 = internalMetadata.getWeakData;
  var internalMetadata_4 = internalMetadata.onFreeze;

  var collection = function (CONSTRUCTOR_NAME, wrapper, common) {
    var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
    var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
    var ADDER = IS_MAP ? 'set' : 'add';
    var NativeConstructor = global_1[CONSTRUCTOR_NAME];
    var NativePrototype = NativeConstructor && NativeConstructor.prototype;
    var Constructor = NativeConstructor;
    var exported = {};

    var fixMethod = function (KEY) {
      var nativeMethod = NativePrototype[KEY];
      redefine(NativePrototype, KEY,
        KEY == 'add' ? function add(value) {
          nativeMethod.call(this, value === 0 ? 0 : value);
          return this;
        } : KEY == 'delete' ? function (key) {
          return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
        } : KEY == 'get' ? function get(key) {
          return IS_WEAK && !isObject(key) ? undefined : nativeMethod.call(this, key === 0 ? 0 : key);
        } : KEY == 'has' ? function has(key) {
          return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
        } : function set(key, value) {
          nativeMethod.call(this, key === 0 ? 0 : key, value);
          return this;
        }
      );
    };

    // eslint-disable-next-line max-len
    if (isForced_1(CONSTRUCTOR_NAME, typeof NativeConstructor != 'function' || !(IS_WEAK || NativePrototype.forEach && !fails(function () {
      new NativeConstructor().entries().next();
    })))) {
      // create collection constructor
      Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
      internalMetadata.REQUIRED = true;
    } else if (isForced_1(CONSTRUCTOR_NAME, true)) {
      var instance = new Constructor();
      // early implementations not supports chaining
      var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
      // V8 ~ Chromium 40- weak-collections throws on primitives, but should return false
      var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
      // most early implementations doesn't supports iterables, most modern - not close it correctly
      // eslint-disable-next-line no-new
      var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function (iterable) { new NativeConstructor(iterable); });
      // for early implementations -0 and +0 not the same
      var BUGGY_ZERO = !IS_WEAK && fails(function () {
        // V8 ~ Chromium 42- fails only with 5+ elements
        var $instance = new NativeConstructor();
        var index = 5;
        while (index--) $instance[ADDER](index, index);
        return !$instance.has(-0);
      });

      if (!ACCEPT_ITERABLES) {
        Constructor = wrapper(function (dummy, iterable) {
          anInstance(dummy, Constructor, CONSTRUCTOR_NAME);
          var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);
          if (iterable != undefined) iterate_1(iterable, that[ADDER], that, IS_MAP);
          return that;
        });
        Constructor.prototype = NativePrototype;
        NativePrototype.constructor = Constructor;
      }

      if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
        fixMethod('delete');
        fixMethod('has');
        IS_MAP && fixMethod('get');
      }

      if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);

      // weak collections should not contains .clear method
      if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;
    }

    exported[CONSTRUCTOR_NAME] = Constructor;
    _export({ global: true, forced: Constructor != NativeConstructor }, exported);

    setToStringTag(Constructor, CONSTRUCTOR_NAME);

    if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);

    return Constructor;
  };

  var defineProperty$4 = objectDefineProperty.f;








  var fastKey = internalMetadata.fastKey;


  var setInternalState$2 = internalState.set;
  var internalStateGetterFor = internalState.getterFor;

  var collectionStrong = {
    getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
      var C = wrapper(function (that, iterable) {
        anInstance(that, C, CONSTRUCTOR_NAME);
        setInternalState$2(that, {
          type: CONSTRUCTOR_NAME,
          index: objectCreate(null),
          first: undefined,
          last: undefined,
          size: 0
        });
        if (!descriptors) that.size = 0;
        if (iterable != undefined) iterate_1(iterable, that[ADDER], that, IS_MAP);
      });

      var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

      var define = function (that, key, value) {
        var state = getInternalState(that);
        var entry = getEntry(that, key);
        var previous, index;
        // change existing entry
        if (entry) {
          entry.value = value;
        // create new entry
        } else {
          state.last = entry = {
            index: index = fastKey(key, true),
            key: key,
            value: value,
            previous: previous = state.last,
            next: undefined,
            removed: false
          };
          if (!state.first) state.first = entry;
          if (previous) previous.next = entry;
          if (descriptors) state.size++;
          else that.size++;
          // add to index
          if (index !== 'F') state.index[index] = entry;
        } return that;
      };

      var getEntry = function (that, key) {
        var state = getInternalState(that);
        // fast case
        var index = fastKey(key);
        var entry;
        if (index !== 'F') return state.index[index];
        // frozen object case
        for (entry = state.first; entry; entry = entry.next) {
          if (entry.key == key) return entry;
        }
      };

      redefineAll(C.prototype, {
        // 23.1.3.1 Map.prototype.clear()
        // 23.2.3.2 Set.prototype.clear()
        clear: function clear() {
          var that = this;
          var state = getInternalState(that);
          var data = state.index;
          var entry = state.first;
          while (entry) {
            entry.removed = true;
            if (entry.previous) entry.previous = entry.previous.next = undefined;
            delete data[entry.index];
            entry = entry.next;
          }
          state.first = state.last = undefined;
          if (descriptors) state.size = 0;
          else that.size = 0;
        },
        // 23.1.3.3 Map.prototype.delete(key)
        // 23.2.3.4 Set.prototype.delete(value)
        'delete': function (key) {
          var that = this;
          var state = getInternalState(that);
          var entry = getEntry(that, key);
          if (entry) {
            var next = entry.next;
            var prev = entry.previous;
            delete state.index[entry.index];
            entry.removed = true;
            if (prev) prev.next = next;
            if (next) next.previous = prev;
            if (state.first == entry) state.first = next;
            if (state.last == entry) state.last = prev;
            if (descriptors) state.size--;
            else that.size--;
          } return !!entry;
        },
        // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
        // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
        forEach: function forEach(callbackfn /* , that = undefined */) {
          var state = getInternalState(this);
          var boundFunction = functionBindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
          var entry;
          while (entry = entry ? entry.next : state.first) {
            boundFunction(entry.value, entry.key, this);
            // revert to the last existing entry
            while (entry && entry.removed) entry = entry.previous;
          }
        },
        // 23.1.3.7 Map.prototype.has(key)
        // 23.2.3.7 Set.prototype.has(value)
        has: function has(key) {
          return !!getEntry(this, key);
        }
      });

      redefineAll(C.prototype, IS_MAP ? {
        // 23.1.3.6 Map.prototype.get(key)
        get: function get(key) {
          var entry = getEntry(this, key);
          return entry && entry.value;
        },
        // 23.1.3.9 Map.prototype.set(key, value)
        set: function set(key, value) {
          return define(this, key === 0 ? 0 : key, value);
        }
      } : {
        // 23.2.3.1 Set.prototype.add(value)
        add: function add(value) {
          return define(this, value = value === 0 ? 0 : value, value);
        }
      });
      if (descriptors) defineProperty$4(C.prototype, 'size', {
        get: function () {
          return getInternalState(this).size;
        }
      });
      return C;
    },
    setStrong: function (C, CONSTRUCTOR_NAME, IS_MAP) {
      var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
      var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
      var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
      // add .keys, .values, .entries, [@@iterator]
      // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
      defineIterator(C, CONSTRUCTOR_NAME, function (iterated, kind) {
        setInternalState$2(this, {
          type: ITERATOR_NAME,
          target: iterated,
          state: getInternalCollectionState(iterated),
          kind: kind,
          last: undefined
        });
      }, function () {
        var state = getInternalIteratorState(this);
        var kind = state.kind;
        var entry = state.last;
        // revert to the last existing entry
        while (entry && entry.removed) entry = entry.previous;
        // get next entry
        if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
          // or finish the iteration
          state.target = undefined;
          return { value: undefined, done: true };
        }
        // return step by kind
        if (kind == 'keys') return { value: entry.key, done: false };
        if (kind == 'values') return { value: entry.value, done: false };
        return { value: [entry.key, entry.value], done: false };
      }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

      // add [@@species], 23.1.2.2, 23.2.2.2
      setSpecies(CONSTRUCTOR_NAME);
    }
  };

  // `Set` constructor
  // https://tc39.github.io/ecma262/#sec-set-objects
  var es_set = collection('Set', function (init) {
    return function Set() { return init(this, arguments.length ? arguments[0] : undefined); };
  }, collectionStrong);

  var MATCH = wellKnownSymbol('match');

  // `IsRegExp` abstract operation
  // https://tc39.github.io/ecma262/#sec-isregexp
  var isRegexp = function (it) {
    var isRegExp;
    return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classofRaw(it) == 'RegExp');
  };

  var notARegexp = function (it) {
    if (isRegexp(it)) {
      throw TypeError("The method doesn't accept regular expressions");
    } return it;
  };

  var MATCH$1 = wellKnownSymbol('match');

  var correctIsRegexpLogic = function (METHOD_NAME) {
    var regexp = /./;
    try {
      '/./'[METHOD_NAME](regexp);
    } catch (e) {
      try {
        regexp[MATCH$1] = false;
        return '/./'[METHOD_NAME](regexp);
      } catch (f) { /* empty */ }
    } return false;
  };

  var getOwnPropertyDescriptor$4 = objectGetOwnPropertyDescriptor.f;






  var nativeEndsWith = ''.endsWith;
  var min$4 = Math.min;

  var CORRECT_IS_REGEXP_LOGIC = correctIsRegexpLogic('endsWith');
  // https://github.com/zloirock/core-js/pull/702
  var MDN_POLYFILL_BUG =  !CORRECT_IS_REGEXP_LOGIC && !!function () {
    var descriptor = getOwnPropertyDescriptor$4(String.prototype, 'endsWith');
    return descriptor && !descriptor.writable;
  }();

  // `String.prototype.endsWith` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.endswith
  _export({ target: 'String', proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {
    endsWith: function endsWith(searchString /* , endPosition = @length */) {
      var that = String(requireObjectCoercible(this));
      notARegexp(searchString);
      var endPosition = arguments.length > 1 ? arguments[1] : undefined;
      var len = toLength(that.length);
      var end = endPosition === undefined ? len : min$4(toLength(endPosition), len);
      var search = String(searchString);
      return nativeEndsWith
        ? nativeEndsWith.call(that, search, end)
        : that.slice(end - search.length, end) === search;
    }
  });

  // `String.prototype.includes` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.includes
  _export({ target: 'String', proto: true, forced: !correctIsRegexpLogic('includes') }, {
    includes: function includes(searchString /* , position = 0 */) {
      return !!~String(requireObjectCoercible(this))
        .indexOf(notARegexp(searchString), arguments.length > 1 ? arguments[1] : undefined);
    }
  });

  // `String.prototype.{ codePointAt, at }` methods implementation
  var createMethod$5 = function (CONVERT_TO_STRING) {
    return function ($this, pos) {
      var S = String(requireObjectCoercible($this));
      var position = toInteger(pos);
      var size = S.length;
      var first, second;
      if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
      first = S.charCodeAt(position);
      return first < 0xD800 || first > 0xDBFF || position + 1 === size
        || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF
          ? CONVERT_TO_STRING ? S.charAt(position) : first
          : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
    };
  };

  var stringMultibyte = {
    // `String.prototype.codePointAt` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
    codeAt: createMethod$5(false),
    // `String.prototype.at` method
    // https://github.com/mathiasbynens/String.prototype.at
    charAt: createMethod$5(true)
  };

  var charAt = stringMultibyte.charAt;



  var STRING_ITERATOR = 'String Iterator';
  var setInternalState$3 = internalState.set;
  var getInternalState$2 = internalState.getterFor(STRING_ITERATOR);

  // `String.prototype[@@iterator]` method
  // https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator
  defineIterator(String, 'String', function (iterated) {
    setInternalState$3(this, {
      type: STRING_ITERATOR,
      string: String(iterated),
      index: 0
    });
  // `%StringIteratorPrototype%.next` method
  // https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next
  }, function next() {
    var state = getInternalState$2(this);
    var string = state.string;
    var index = state.index;
    var point;
    if (index >= string.length) return { value: undefined, done: true };
    point = charAt(string, index);
    state.index += point.length;
    return { value: point, done: false };
  });

  // TODO: Remove from `core-js@4` since it's moved to entry points







  var SPECIES$5 = wellKnownSymbol('species');

  var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
    // #replace needs built-in support for named groups.
    // #match works fine because it just return the exec results, even if it has
    // a "grops" property.
    var re = /./;
    re.exec = function () {
      var result = [];
      result.groups = { a: '7' };
      return result;
    };
    return ''.replace(re, '$<a>') !== '7';
  });

  // IE <= 11 replaces $0 with the whole match, as if it was $&
  // https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0
  var REPLACE_KEEPS_$0 = (function () {
    return 'a'.replace(/./, '$0') === '$0';
  })();

  var REPLACE = wellKnownSymbol('replace');
  // Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string
  var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function () {
    if (/./[REPLACE]) {
      return /./[REPLACE]('a', '$0') === '';
    }
    return false;
  })();

  // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
  // Weex JS has frozen built-in prototypes, so use try / catch wrapper
  var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
    var re = /(?:)/;
    var originalExec = re.exec;
    re.exec = function () { return originalExec.apply(this, arguments); };
    var result = 'ab'.split(re);
    return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
  });

  var fixRegexpWellKnownSymbolLogic = function (KEY, length, exec, sham) {
    var SYMBOL = wellKnownSymbol(KEY);

    var DELEGATES_TO_SYMBOL = !fails(function () {
      // String methods call symbol-named RegEp methods
      var O = {};
      O[SYMBOL] = function () { return 7; };
      return ''[KEY](O) != 7;
    });

    var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
      // Symbol-named RegExp methods call .exec
      var execCalled = false;
      var re = /a/;

      if (KEY === 'split') {
        // We can't use real regex here since it causes deoptimization
        // and serious performance degradation in V8
        // https://github.com/zloirock/core-js/issues/306
        re = {};
        // RegExp[@@split] doesn't call the regex's exec method, but first creates
        // a new one. We need to return the patched regex when creating the new one.
        re.constructor = {};
        re.constructor[SPECIES$5] = function () { return re; };
        re.flags = '';
        re[SYMBOL] = /./[SYMBOL];
      }

      re.exec = function () { execCalled = true; return null; };

      re[SYMBOL]('');
      return !execCalled;
    });

    if (
      !DELEGATES_TO_SYMBOL ||
      !DELEGATES_TO_EXEC ||
      (KEY === 'replace' && !(
        REPLACE_SUPPORTS_NAMED_GROUPS &&
        REPLACE_KEEPS_$0 &&
        !REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
      )) ||
      (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
    ) {
      var nativeRegExpMethod = /./[SYMBOL];
      var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
        if (regexp.exec === regexpExec) {
          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
            // The native String method already delegates to @@method (this
            // polyfilled function), leasing to infinite recursion.
            // We avoid it by directly calling the native @@method method.
            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
          }
          return { done: true, value: nativeMethod.call(str, regexp, arg2) };
        }
        return { done: false };
      }, {
        REPLACE_KEEPS_$0: REPLACE_KEEPS_$0,
        REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
      });
      var stringMethod = methods[0];
      var regexMethod = methods[1];

      redefine(String.prototype, KEY, stringMethod);
      redefine(RegExp.prototype, SYMBOL, length == 2
        // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
        // 21.2.5.11 RegExp.prototype[@@split](string, limit)
        ? function (string, arg) { return regexMethod.call(string, this, arg); }
        // 21.2.5.6 RegExp.prototype[@@match](string)
        // 21.2.5.9 RegExp.prototype[@@search](string)
        : function (string) { return regexMethod.call(string, this); }
      );
    }

    if (sham) createNonEnumerableProperty(RegExp.prototype[SYMBOL], 'sham', true);
  };

  var charAt$1 = stringMultibyte.charAt;

  // `AdvanceStringIndex` abstract operation
  // https://tc39.github.io/ecma262/#sec-advancestringindex
  var advanceStringIndex = function (S, index, unicode) {
    return index + (unicode ? charAt$1(S, index).length : 1);
  };

  // `RegExpExec` abstract operation
  // https://tc39.github.io/ecma262/#sec-regexpexec
  var regexpExecAbstract = function (R, S) {
    var exec = R.exec;
    if (typeof exec === 'function') {
      var result = exec.call(R, S);
      if (typeof result !== 'object') {
        throw TypeError('RegExp exec method returned something other than an Object or null');
      }
      return result;
    }

    if (classofRaw(R) !== 'RegExp') {
      throw TypeError('RegExp#exec called on incompatible receiver');
    }

    return regexpExec.call(R, S);
  };

  var arrayPush = [].push;
  var min$5 = Math.min;
  var MAX_UINT32 = 0xFFFFFFFF;

  // babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
  var SUPPORTS_Y = !fails(function () { return !RegExp(MAX_UINT32, 'y'); });

  // @@split logic
  fixRegexpWellKnownSymbolLogic('split', 2, function (SPLIT, nativeSplit, maybeCallNative) {
    var internalSplit;
    if (
      'abbc'.split(/(b)*/)[1] == 'c' ||
      'test'.split(/(?:)/, -1).length != 4 ||
      'ab'.split(/(?:ab)*/).length != 2 ||
      '.'.split(/(.?)(.?)/).length != 4 ||
      '.'.split(/()()/).length > 1 ||
      ''.split(/.?/).length
    ) {
      // based on es5-shim implementation, need to rework it
      internalSplit = function (separator, limit) {
        var string = String(requireObjectCoercible(this));
        var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
        if (lim === 0) return [];
        if (separator === undefined) return [string];
        // If `separator` is not a regex, use native split
        if (!isRegexp(separator)) {
          return nativeSplit.call(string, separator, lim);
        }
        var output = [];
        var flags = (separator.ignoreCase ? 'i' : '') +
                    (separator.multiline ? 'm' : '') +
                    (separator.unicode ? 'u' : '') +
                    (separator.sticky ? 'y' : '');
        var lastLastIndex = 0;
        // Make `global` and avoid `lastIndex` issues by working with a copy
        var separatorCopy = new RegExp(separator.source, flags + 'g');
        var match, lastIndex, lastLength;
        while (match = regexpExec.call(separatorCopy, string)) {
          lastIndex = separatorCopy.lastIndex;
          if (lastIndex > lastLastIndex) {
            output.push(string.slice(lastLastIndex, match.index));
            if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));
            lastLength = match[0].length;
            lastLastIndex = lastIndex;
            if (output.length >= lim) break;
          }
          if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
        }
        if (lastLastIndex === string.length) {
          if (lastLength || !separatorCopy.test('')) output.push('');
        } else output.push(string.slice(lastLastIndex));
        return output.length > lim ? output.slice(0, lim) : output;
      };
    // Chakra, V8
    } else if ('0'.split(undefined, 0).length) {
      internalSplit = function (separator, limit) {
        return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);
      };
    } else internalSplit = nativeSplit;

    return [
      // `String.prototype.split` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.split
      function split(separator, limit) {
        var O = requireObjectCoercible(this);
        var splitter = separator == undefined ? undefined : separator[SPLIT];
        return splitter !== undefined
          ? splitter.call(separator, O, limit)
          : internalSplit.call(String(O), separator, limit);
      },
      // `RegExp.prototype[@@split]` method
      // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
      //
      // NOTE: This cannot be properly polyfilled in engines that don't support
      // the 'y' flag.
      function (regexp, limit) {
        var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);
        if (res.done) return res.value;

        var rx = anObject(regexp);
        var S = String(this);
        var C = speciesConstructor(rx, RegExp);

        var unicodeMatching = rx.unicode;
        var flags = (rx.ignoreCase ? 'i' : '') +
                    (rx.multiline ? 'm' : '') +
                    (rx.unicode ? 'u' : '') +
                    (SUPPORTS_Y ? 'y' : 'g');

        // ^(? + rx + ) is needed, in combination with some S slicing, to
        // simulate the 'y' flag.
        var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
        var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
        if (lim === 0) return [];
        if (S.length === 0) return regexpExecAbstract(splitter, S) === null ? [S] : [];
        var p = 0;
        var q = 0;
        var A = [];
        while (q < S.length) {
          splitter.lastIndex = SUPPORTS_Y ? q : 0;
          var z = regexpExecAbstract(splitter, SUPPORTS_Y ? S : S.slice(q));
          var e;
          if (
            z === null ||
            (e = min$5(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
          ) {
            q = advanceStringIndex(S, q, unicodeMatching);
          } else {
            A.push(S.slice(p, q));
            if (A.length === lim) return A;
            for (var i = 1; i <= z.length - 1; i++) {
              A.push(z[i]);
              if (A.length === lim) return A;
            }
            q = p = e;
          }
        }
        A.push(S.slice(p));
        return A;
      }
    ];
  }, !SUPPORTS_Y);

  var getOwnPropertyDescriptor$5 = objectGetOwnPropertyDescriptor.f;






  var nativeStartsWith = ''.startsWith;
  var min$6 = Math.min;

  var CORRECT_IS_REGEXP_LOGIC$1 = correctIsRegexpLogic('startsWith');
  // https://github.com/zloirock/core-js/pull/702
  var MDN_POLYFILL_BUG$1 =  !CORRECT_IS_REGEXP_LOGIC$1 && !!function () {
    var descriptor = getOwnPropertyDescriptor$5(String.prototype, 'startsWith');
    return descriptor && !descriptor.writable;
  }();

  // `String.prototype.startsWith` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.startswith
  _export({ target: 'String', proto: true, forced: !MDN_POLYFILL_BUG$1 && !CORRECT_IS_REGEXP_LOGIC$1 }, {
    startsWith: function startsWith(searchString /* , position = 0 */) {
      var that = String(requireObjectCoercible(this));
      notARegexp(searchString);
      var index = toLength(min$6(arguments.length > 1 ? arguments[1] : undefined, that.length));
      var search = String(searchString);
      return nativeStartsWith
        ? nativeStartsWith.call(that, search, index)
        : that.slice(index, index + search.length) === search;
    }
  });

  // iterable DOM collections
  // flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
  var domIterables = {
    CSSRuleList: 0,
    CSSStyleDeclaration: 0,
    CSSValueList: 0,
    ClientRectList: 0,
    DOMRectList: 0,
    DOMStringList: 0,
    DOMTokenList: 1,
    DataTransferItemList: 0,
    FileList: 0,
    HTMLAllCollection: 0,
    HTMLCollection: 0,
    HTMLFormElement: 0,
    HTMLSelectElement: 0,
    MediaList: 0,
    MimeTypeArray: 0,
    NamedNodeMap: 0,
    NodeList: 1,
    PaintRequestList: 0,
    Plugin: 0,
    PluginArray: 0,
    SVGLengthList: 0,
    SVGNumberList: 0,
    SVGPathSegList: 0,
    SVGPointList: 0,
    SVGStringList: 0,
    SVGTransformList: 0,
    SourceBufferList: 0,
    StyleSheetList: 0,
    TextTrackCueList: 0,
    TextTrackList: 0,
    TouchList: 0
  };

  for (var COLLECTION_NAME in domIterables) {
    var Collection = global_1[COLLECTION_NAME];
    var CollectionPrototype = Collection && Collection.prototype;
    // some Chrome versions have non-configurable methods on DOMTokenList
    if (CollectionPrototype && CollectionPrototype.forEach !== arrayForEach) try {
      createNonEnumerableProperty(CollectionPrototype, 'forEach', arrayForEach);
    } catch (error) {
      CollectionPrototype.forEach = arrayForEach;
    }
  }

  var ITERATOR$5 = wellKnownSymbol('iterator');
  var TO_STRING_TAG$3 = wellKnownSymbol('toStringTag');
  var ArrayValues = es_array_iterator.values;

  for (var COLLECTION_NAME$1 in domIterables) {
    var Collection$1 = global_1[COLLECTION_NAME$1];
    var CollectionPrototype$1 = Collection$1 && Collection$1.prototype;
    if (CollectionPrototype$1) {
      // some Chrome versions have non-configurable methods on DOMTokenList
      if (CollectionPrototype$1[ITERATOR$5] !== ArrayValues) try {
        createNonEnumerableProperty(CollectionPrototype$1, ITERATOR$5, ArrayValues);
      } catch (error) {
        CollectionPrototype$1[ITERATOR$5] = ArrayValues;
      }
      if (!CollectionPrototype$1[TO_STRING_TAG$3]) {
        createNonEnumerableProperty(CollectionPrototype$1, TO_STRING_TAG$3, COLLECTION_NAME$1);
      }
      if (domIterables[COLLECTION_NAME$1]) for (var METHOD_NAME in es_array_iterator) {
        // some Chrome versions have non-configurable methods on DOMTokenList
        if (CollectionPrototype$1[METHOD_NAME] !== es_array_iterator[METHOD_NAME]) try {
          createNonEnumerableProperty(CollectionPrototype$1, METHOD_NAME, es_array_iterator[METHOD_NAME]);
        } catch (error) {
          CollectionPrototype$1[METHOD_NAME] = es_array_iterator[METHOD_NAME];
        }
      }
    }
  }

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys$1(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys$1(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$1(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _construct(Parent, args, Class) {
    if (_isNativeReflectConstruct()) {
      _construct = Reflect.construct;
    } else {
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }

    return _construct.apply(null, arguments);
  }

  function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }

  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !_isNativeFunction(Class)) return Class;

      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }

      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);

        _cache.set(Class, Wrapper);
      }

      function Wrapper() {
        return _construct(Class, arguments, _getPrototypeOf(this).constructor);
      }

      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return _setPrototypeOf(Wrapper, Class);
    };

    return _wrapNativeSuper(Class);
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = _objectWithoutPropertiesLoose(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();

    return function () {
      var Super = _getPrototypeOf(Derived),
          result;

      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;

        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }

      return _possibleConstructorReturn(this, result);
    };
  }

  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = _getPrototypeOf(object);
      if (object === null) break;
    }

    return object;
  }

  function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      _get = Reflect.get;
    } else {
      _get = function _get(target, property, receiver) {
        var base = _superPropBase(target, property);

        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);

        if (desc.get) {
          return desc.get.call(receiver);
        }

        return desc.value;
      };
    }

    return _get(target, property, receiver || target);
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
  }

  function _iterableToArrayLimit(arr, i) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _createForOfIteratorHelper(o) {
    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
      if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) {
        var i = 0;

        var F = function () {};

        return {
          s: F,
          n: function () {
            if (i >= o.length) return {
              done: true
            };
            return {
              done: false,
              value: o[i++]
            };
          },
          e: function (e) {
            throw e;
          },
          f: F
        };
      }

      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    var it,
        normalCompletion = true,
        didErr = false,
        err;
    return {
      s: function () {
        it = o[Symbol.iterator]();
      },
      n: function () {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      },
      e: function (e) {
        didErr = true;
        err = e;
      },
      f: function () {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      }
    };
  }

  var runtime_1 = createCommonjsModule(function (module) {
  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  var runtime = (function (exports) {

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined$1; // More compressible than void 0.
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);

      // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.
      generator._invoke = makeInvokeMethod(innerFn, self, context);

      return generator;
    }
    exports.wrap = wrap;

    // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.
    function tryCatch(fn, obj, arg) {
      try {
        return { type: "normal", arg: fn.call(obj, arg) };
      } catch (err) {
        return { type: "throw", arg: err };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";

    // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.
    var ContinueSentinel = {};

    // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}

    // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.
    var IteratorPrototype = {};
    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    if (NativeIteratorPrototype &&
        NativeIteratorPrototype !== Op &&
        hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      // This environment has a native %IteratorPrototype%; use it instead
      // of the polyfill.
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype =
      Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunctionPrototype[toStringTagSymbol] =
      GeneratorFunction.displayName = "GeneratorFunction";

    // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function(method) {
        prototype[method] = function(arg) {
          return this._invoke(method, arg);
        };
      });
    }

    exports.isGeneratorFunction = function(genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor
        ? ctor === GeneratorFunction ||
          // For the native GeneratorFunction constructor, the best we can
          // do is to check its .name property.
          (ctor.displayName || ctor.name) === "GeneratorFunction"
        : false;
    };

    exports.mark = function(genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        if (!(toStringTagSymbol in genFun)) {
          genFun[toStringTagSymbol] = "GeneratorFunction";
        }
      }
      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.
    exports.awrap = function(arg) {
      return { __await: arg };
    };

    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);
        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;
          if (value &&
              typeof value === "object" &&
              hasOwn.call(value, "__await")) {
            return PromiseImpl.resolve(value.__await).then(function(value) {
              invoke("next", value, resolve, reject);
            }, function(err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return PromiseImpl.resolve(value).then(function(unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration.
            result.value = unwrapped;
            resolve(result);
          }, function(error) {
            // If a rejected Promise was yielded, throw the rejection back
            // into the async generator function so it can be handled there.
            return invoke("throw", error, resolve, reject);
          });
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function(resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise =
          // If enqueue has been called before, then we want to wait until
          // all previous Promises have been resolved before calling invoke,
          // so that results are always delivered in the correct order. If
          // enqueue has not been called before, then it is important to
          // call invoke immediately, without waiting on a callback to fire,
          // so that the async generator function has the opportunity to do
          // any necessary setup in a predictable way. This predictability
          // is why the Promise constructor synchronously invokes its
          // executor callback, and why async functions synchronously
          // execute code before the first await. Since we implement simple
          // async functions in terms of async generators, it is especially
          // important to get this right, even though it requires care.
          previousPromise ? previousPromise.then(
            callInvokeWithMethodAndArg,
            // Avoid propagating failures to Promises returned by later
            // invocations of the iterator.
            callInvokeWithMethodAndArg
          ) : callInvokeWithMethodAndArg();
      }

      // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).
      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);
    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };
    exports.AsyncIterator = AsyncIterator;

    // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.
    exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      if (PromiseImpl === void 0) PromiseImpl = Promise;

      var iter = new AsyncIterator(
        wrap(innerFn, outerFn, self, tryLocsList),
        PromiseImpl
      );

      return exports.isGeneratorFunction(outerFn)
        ? iter // If outerFn is a generator, return the full iterator.
        : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
          });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;

      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            // Setting context._sent for legacy support of Babel's
            // function.sent implementation.
            context.sent = context._sent = context.arg;

          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);

          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;

          var record = tryCatch(innerFn, self, context);
          if (record.type === "normal") {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done
              ? GenStateCompleted
              : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };

          } else if (record.type === "throw") {
            state = GenStateCompleted;
            // Dispatch the exception by looping back around to the
            // context.dispatchException(context.arg) call above.
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.
    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];
      if (method === undefined$1) {
        // A .throw or .return when the delegate iterator has no .throw
        // method always terminates the yield* loop.
        context.delegate = null;

        if (context.method === "throw") {
          // Note: ["return"] must be used for ES3 parsing compatibility.
          if (delegate.iterator["return"]) {
            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            context.method = "return";
            context.arg = undefined$1;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              // If maybeInvokeDelegate(context) changed context.method from
              // "return" to "throw", let that override the TypeError below.
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError(
            "The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (! info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        // Assign the result of the finished delegate to the temporary
        // variable specified by delegate.resultName (see delegateYield).
        context[delegate.resultName] = info.value;

        // Resume execution at the desired location (see delegateYield).
        context.next = delegate.nextLoc;

        // If context.method was "throw" but the delegate handled the
        // exception, let the outer generator proceed normally. If
        // context.method was "next", forget context.arg since it has been
        // "consumed" by the delegate iterator. If context.method was
        // "return", allow the original .return call to continue in the
        // outer generator.
        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined$1;
        }

      } else {
        // Re-yield the result returned by the delegate method.
        return info;
      }

      // The delegate iterator is finished, so forget it and continue with
      // the outer generator.
      context.delegate = null;
      return ContinueSentinel;
    }

    // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.
    defineIteratorMethods(Gp);

    Gp[toStringTagSymbol] = "Generator";

    // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.
    Gp[iteratorSymbol] = function() {
      return this;
    };

    Gp.toString = function() {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = { tryLoc: locs[0] };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{ tryLoc: "root" }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    exports.keys = function(object) {
      var keys = [];
      for (var key in object) {
        keys.push(key);
      }
      keys.reverse();

      // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.
      return function next() {
        while (keys.length) {
          var key = keys.pop();
          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.
        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1, next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined$1;
            next.done = true;

            return next;
          };

          return next.next = next;
        }
      }

      // Return an iterator with no values.
      return { next: doneResult };
    }
    exports.values = values;

    function doneResult() {
      return { value: undefined$1, done: true };
    }

    Context.prototype = {
      constructor: Context,

      reset: function(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.
        this.sent = this._sent = undefined$1;
        this.done = false;
        this.delegate = null;

        this.method = "next";
        this.arg = undefined$1;

        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (name.charAt(0) === "t" &&
                hasOwn.call(this, name) &&
                !isNaN(+name.slice(1))) {
              this[name] = undefined$1;
            }
          }
        }
      },

      stop: function() {
        this.done = true;

        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;
        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },

      dispatchException: function(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;
        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            context.method = "next";
            context.arg = undefined$1;
          }

          return !! caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }

            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }

            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }

            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },

      abrupt: function(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc <= this.prev &&
              hasOwn.call(entry, "finallyLoc") &&
              this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry &&
            (type === "break" ||
             type === "continue") &&
            finallyEntry.tryLoc <= arg &&
            arg <= finallyEntry.finallyLoc) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },

      complete: function(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" ||
            record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },

      finish: function(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },

      "catch": function(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }

        // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.
        throw new Error("illegal catch attempt");
      },

      delegateYield: function(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          // Deliberately forget the last sent value so that we don't
          // accidentally pass it on to the delegate.
          this.arg = undefined$1;
        }

        return ContinueSentinel;
      }
    };

    // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.
    return exports;

  }(
    // If this script is executing as a CommonJS module, use module.exports
    // as the regeneratorRuntime namespace. Otherwise create a new empty
    // object. Either way, the resulting object will be used to initialize
    // the regeneratorRuntime variable at the top of this file.
     module.exports 
  ));

  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    Function("r", "regeneratorRuntime = r")(runtime);
  }
  });

  /**
   * @module ol/obj
   */
  /**
   * Polyfill for Object.assign().  Assigns enumerable and own properties from
   * one or more source objects to a target object.
   * See https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign.
   *
   * @param {!Object} target The target object.
   * @param {...Object} var_sources The source object(s).
   * @return {!Object} The modified target object.
   */
  var assign = (typeof Object.assign === 'function') ? Object.assign : function (target, var_sources) {
      if (target === undefined || target === null) {
          throw new TypeError('Cannot convert undefined or null to object');
      }
      var output = Object(target);
      for (var i = 1, ii = arguments.length; i < ii; ++i) {
          var source = arguments[i];
          if (source !== undefined && source !== null) {
              for (var key in source) {
                  if (source.hasOwnProperty(key)) {
                      output[key] = source[key];
                  }
              }
          }
      }
      return output;
  };
  /**
   * Removes all properties from an object.
   * @param {Object} object The object to clear.
   */
  function clear$1(object) {
      for (var property in object) {
          delete object[property];
      }
  }
  /**
   * Polyfill for Object.values().  Get an array of property values from an object.
   * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values
   *
   * @param {!Object<K,V>} object The object from which to get the values.
   * @return {!Array<V>} The property values.
   * @template K,V
   */
  var getValues = (typeof Object.values === 'function') ? Object.values : function (object) {
      var values = [];
      for (var property in object) {
          values.push(object[property]);
      }
      return values;
  };
  /**
   * Determine if an object has any properties.
   * @param {Object} object The object to check.
   * @return {boolean} The object is empty.
   */
  function isEmpty(object) {
      var property;
      for (property in object) {
          return false;
      }
      return !property;
  }

  /**
   * @module ol/math
   */
  /**
   * Takes a number and clamps it to within the provided bounds.
   * @param {number} value The input number.
   * @param {number} min The minimum value to return.
   * @param {number} max The maximum value to return.
   * @return {number} The input number if it is within bounds, or the nearest
   *     number within the bounds.
   */
  function clamp(value, min, max) {
      return Math.min(Math.max(value, min), max);
  }
  /**
   * Return the hyperbolic cosine of a given number. The method will use the
   * native `Math.cosh` function if it is available, otherwise the hyperbolic
   * cosine will be calculated via the reference implementation of the Mozilla
   * developer network.
   *
   * @param {number} x X.
   * @return {number} Hyperbolic cosine of x.
   */
  var cosh = (function () {
      // Wrapped in a iife, to save the overhead of checking for the native
      // implementation on every invocation.
      var cosh;
      if ('cosh' in Math) {
          // The environment supports the native Math.cosh function, use itâ¦
          cosh = Math.cosh;
      }
      else {
          // â¦ else, use the reference implementation of MDN:
          cosh = function (x) {
              var y = /** @type {Math} */ (Math).exp(x);
              return (y + 1 / y) / 2;
          };
      }
      return cosh;
  }());
  /**
   * Returns the square of the closest distance between the point (x, y) and the
   * line segment (x1, y1) to (x2, y2).
   * @param {number} x X.
   * @param {number} y Y.
   * @param {number} x1 X1.
   * @param {number} y1 Y1.
   * @param {number} x2 X2.
   * @param {number} y2 Y2.
   * @return {number} Squared distance.
   */
  function squaredSegmentDistance(x, y, x1, y1, x2, y2) {
      var dx = x2 - x1;
      var dy = y2 - y1;
      if (dx !== 0 || dy !== 0) {
          var t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);
          if (t > 1) {
              x1 = x2;
              y1 = y2;
          }
          else if (t > 0) {
              x1 += dx * t;
              y1 += dy * t;
          }
      }
      return squaredDistance(x, y, x1, y1);
  }
  /**
   * Returns the square of the distance between the points (x1, y1) and (x2, y2).
   * @param {number} x1 X1.
   * @param {number} y1 Y1.
   * @param {number} x2 X2.
   * @param {number} y2 Y2.
   * @return {number} Squared distance.
   */
  function squaredDistance(x1, y1, x2, y2) {
      var dx = x2 - x1;
      var dy = y2 - y1;
      return dx * dx + dy * dy;
  }
  /**
   * Solves system of linear equations using Gaussian elimination method.
   *
   * @param {Array<Array<number>>} mat Augmented matrix (n x n + 1 column)
   *                                     in row-major order.
   * @return {Array<number>} The resulting vector.
   */
  function solveLinearSystem(mat) {
      var n = mat.length;
      for (var i = 0; i < n; i++) {
          // Find max in the i-th column (ignoring i - 1 first rows)
          var maxRow = i;
          var maxEl = Math.abs(mat[i][i]);
          for (var r = i + 1; r < n; r++) {
              var absValue = Math.abs(mat[r][i]);
              if (absValue > maxEl) {
                  maxEl = absValue;
                  maxRow = r;
              }
          }
          if (maxEl === 0) {
              return null; // matrix is singular
          }
          // Swap max row with i-th (current) row
          var tmp = mat[maxRow];
          mat[maxRow] = mat[i];
          mat[i] = tmp;
          // Subtract the i-th row to make all the remaining rows 0 in the i-th column
          for (var j = i + 1; j < n; j++) {
              var coef = -mat[j][i] / mat[i][i];
              for (var k = i; k < n + 1; k++) {
                  if (i == k) {
                      mat[j][k] = 0;
                  }
                  else {
                      mat[j][k] += coef * mat[i][k];
                  }
              }
          }
      }
      // Solve Ax=b for upper triangular matrix A (mat)
      var x = new Array(n);
      for (var l = n - 1; l >= 0; l--) {
          x[l] = mat[l][n] / mat[l][l];
          for (var m = l - 1; m >= 0; m--) {
              mat[m][n] -= mat[m][l] * x[l];
          }
      }
      return x;
  }
  /**
   * Converts degrees to radians.
   *
   * @param {number} angleInDegrees Angle in degrees.
   * @return {number} Angle in radians.
   */
  function toRadians(angleInDegrees) {
      return angleInDegrees * Math.PI / 180;
  }
  /**
   * Returns the modulo of a / b, depending on the sign of b.
   *
   * @param {number} a Dividend.
   * @param {number} b Divisor.
   * @return {number} Modulo.
   */
  function modulo(a, b) {
      var r = a % b;
      return r * b < 0 ? r + b : r;
  }
  /**
   * Calculates the linearly interpolated value of x between a and b.
   *
   * @param {number} a Number
   * @param {number} b Number
   * @param {number} x Value to be interpolated.
   * @return {number} Interpolated value.
   */
  function lerp(a, b, x) {
      return a + x * (b - a);
  }

  /**
   * @module ol/geom/GeometryType
   */
  /**
   * The geometry type. One of `'Point'`, `'LineString'`, `'LinearRing'`,
   * `'Polygon'`, `'MultiPoint'`, `'MultiLineString'`, `'MultiPolygon'`,
   * `'GeometryCollection'`, `'Circle'`.
   * @enum {string}
   */
  var GeometryType = {
      POINT: 'Point',
      LINE_STRING: 'LineString',
      LINEAR_RING: 'LinearRing',
      POLYGON: 'Polygon',
      MULTI_POINT: 'MultiPoint',
      MULTI_LINE_STRING: 'MultiLineString',
      MULTI_POLYGON: 'MultiPolygon',
      GEOMETRY_COLLECTION: 'GeometryCollection',
      CIRCLE: 'Circle'
  };

  /**
   * @module ol/sphere
   */
  /**
   * Object literal with options for the {@link getLength} or {@link getArea}
   * functions.
   * @typedef {Object} SphereMetricOptions
   * @property {import("./proj.js").ProjectionLike} [projection='EPSG:3857']
   * Projection of the  geometry.  By default, the geometry is assumed to be in
   * Web Mercator.
   * @property {number} [radius=6371008.8] Sphere radius.  By default, the
   * [mean Earth radius](https://en.wikipedia.org/wiki/Earth_radius#Mean_radius)
   * for the WGS84 ellipsoid is used.
   */
  /**
   * The mean Earth radius (1/3 * (2a + b)) for the WGS84 ellipsoid.
   * https://en.wikipedia.org/wiki/Earth_radius#Mean_radius
   * @type {number}
   */
  var DEFAULT_RADIUS = 6371008.8;
  /**
   * Get the great circle distance (in meters) between two geographic coordinates.
   * @param {Array} c1 Starting coordinate.
   * @param {Array} c2 Ending coordinate.
   * @param {number=} opt_radius The sphere radius to use.  Defaults to the Earth's
   *     mean radius using the WGS84 ellipsoid.
   * @return {number} The great circle distance between the points (in meters).
   * @api
   */
  function getDistance(c1, c2, opt_radius) {
      var radius = opt_radius || DEFAULT_RADIUS;
      var lat1 = toRadians(c1[1]);
      var lat2 = toRadians(c2[1]);
      var deltaLatBy2 = (lat2 - lat1) / 2;
      var deltaLonBy2 = toRadians(c2[0] - c1[0]) / 2;
      var a = Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) +
          Math.sin(deltaLonBy2) * Math.sin(deltaLonBy2) *
              Math.cos(lat1) * Math.cos(lat2);
      return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  }

  /**
   * @module ol/util
   */
  /**
   * @return {?} Any return.
   */
  function abstract() {
      return /** @type {?} */ ((function () {
          throw new Error('Unimplemented abstract method.');
      })());
  }
  /**
   * Counter for getUid.
   * @type {number}
   * @private
   */
  var uidCounter_ = 0;
  /**
   * Gets a unique ID for an object. This mutates the object so that further calls
   * with the same object as a parameter returns the same value. Unique IDs are generated
   * as a strictly increasing sequence. Adapted from goog.getUid.
   *
   * @param {Object} obj The object to get the unique ID for.
   * @return {string} The unique ID for the object.
   * @api
   */
  function getUid(obj) {
      return obj.ol_uid || (obj.ol_uid = String(++uidCounter_));
  }
  /**
   * OpenLayers version.
   * @type {string}
   */
  var VERSION = '6.3.1';

  var __extends =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * Error object thrown when an assertion failed. This is an ECMA-262 Error,
   * extended with a `code` property.
   * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error.
   */
  var AssertionError = /** @class */ (function (_super) {
      __extends(AssertionError, _super);
      /**
       * @param {number} code Error code.
       */
      function AssertionError(code) {
          var _this = this;
          var path =  'v' + VERSION.split('-')[0];
          var message = 'Assertion failed. See https://openlayers.org/en/' + path +
              '/doc/errors/#' + code + ' for details.';
          _this = _super.call(this, message) || this;
          /**
           * Error code. The meaning of the code can be found on
           * https://openlayers.org/en/latest/doc/errors/ (replace `latest` with
           * the version found in the OpenLayers script's header comment if a version
           * other than the latest is used).
           * @type {number}
           * @api
           */
          _this.code = code;
          /**
           * @type {string}
           */
          _this.name = 'AssertionError';
          // Re-assign message, see https://github.com/Rich-Harris/buble/issues/40
          _this.message = message;
          return _this;
      }
      return AssertionError;
  }(Error));

  /**
   * @module ol/asserts
   */
  /**
   * @param {*} assertion Assertion we expected to be truthy.
   * @param {number} errorCode Error code.
   */
  function assert(assertion, errorCode) {
      if (!assertion) {
          throw new AssertionError(errorCode);
      }
  }

  /**
   * @module ol/extent/Corner
   */
  /**
   * Extent corner.
   * @enum {string}
   */
  var Corner = {
      BOTTOM_LEFT: 'bottom-left',
      BOTTOM_RIGHT: 'bottom-right',
      TOP_LEFT: 'top-left',
      TOP_RIGHT: 'top-right'
  };

  /**
   * @module ol/extent/Relationship
   */
  /**
   * Relationship to an extent.
   * @enum {number}
   */
  var Relationship = {
      UNKNOWN: 0,
      INTERSECTING: 1,
      ABOVE: 2,
      RIGHT: 4,
      BELOW: 8,
      LEFT: 16
  };

  /**
   * @module ol/extent
   */
  /**
   * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.
   * @typedef {Array<number>} Extent
   * @api
   */
  /**
   * Build an extent that includes all given coordinates.
   *
   * @param {Array<import("./coordinate.js").Coordinate>} coordinates Coordinates.
   * @return {Extent} Bounding extent.
   * @api
   */
  function boundingExtent(coordinates) {
      var extent = createEmpty();
      for (var i = 0, ii = coordinates.length; i < ii; ++i) {
          extendCoordinate(extent, coordinates[i]);
      }
      return extent;
  }
  /**
   * @param {Array<number>} xs Xs.
   * @param {Array<number>} ys Ys.
   * @param {Extent=} opt_extent Destination extent.
   * @private
   * @return {Extent} Extent.
   */
  function _boundingExtentXYs(xs, ys, opt_extent) {
      var minX = Math.min.apply(null, xs);
      var minY = Math.min.apply(null, ys);
      var maxX = Math.max.apply(null, xs);
      var maxY = Math.max.apply(null, ys);
      return createOrUpdate(minX, minY, maxX, maxY, opt_extent);
  }
  /**
   * Return extent increased by the provided value.
   * @param {Extent} extent Extent.
   * @param {number} value The amount by which the extent should be buffered.
   * @param {Extent=} opt_extent Extent.
   * @return {Extent} Extent.
   * @api
   */
  function buffer(extent, value, opt_extent) {
      if (opt_extent) {
          opt_extent[0] = extent[0] - value;
          opt_extent[1] = extent[1] - value;
          opt_extent[2] = extent[2] + value;
          opt_extent[3] = extent[3] + value;
          return opt_extent;
      }
      else {
          return [
              extent[0] - value,
              extent[1] - value,
              extent[2] + value,
              extent[3] + value
          ];
      }
  }
  /**
   * Creates a clone of an extent.
   *
   * @param {Extent} extent Extent to clone.
   * @param {Extent=} opt_extent Extent.
   * @return {Extent} The clone.
   */
  function clone(extent, opt_extent) {
      if (opt_extent) {
          opt_extent[0] = extent[0];
          opt_extent[1] = extent[1];
          opt_extent[2] = extent[2];
          opt_extent[3] = extent[3];
          return opt_extent;
      }
      else {
          return extent.slice();
      }
  }
  /**
   * @param {Extent} extent Extent.
   * @param {number} x X.
   * @param {number} y Y.
   * @return {number} Closest squared distance.
   */
  function closestSquaredDistanceXY(extent, x, y) {
      var dx, dy;
      if (x < extent[0]) {
          dx = extent[0] - x;
      }
      else if (extent[2] < x) {
          dx = x - extent[2];
      }
      else {
          dx = 0;
      }
      if (y < extent[1]) {
          dy = extent[1] - y;
      }
      else if (extent[3] < y) {
          dy = y - extent[3];
      }
      else {
          dy = 0;
      }
      return dx * dx + dy * dy;
  }
  /**
   * Check if the passed coordinate is contained or on the edge of the extent.
   *
   * @param {Extent} extent Extent.
   * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
   * @return {boolean} The coordinate is contained in the extent.
   * @api
   */
  function containsCoordinate(extent, coordinate) {
      return containsXY(extent, coordinate[0], coordinate[1]);
  }
  /**
   * Check if one extent contains another.
   *
   * An extent is deemed contained if it lies completely within the other extent,
   * including if they share one or more edges.
   *
   * @param {Extent} extent1 Extent 1.
   * @param {Extent} extent2 Extent 2.
   * @return {boolean} The second extent is contained by or on the edge of the
   *     first.
   * @api
   */
  function containsExtent(extent1, extent2) {
      return extent1[0] <= extent2[0] && extent2[2] <= extent1[2] &&
          extent1[1] <= extent2[1] && extent2[3] <= extent1[3];
  }
  /**
   * Check if the passed coordinate is contained or on the edge of the extent.
   *
   * @param {Extent} extent Extent.
   * @param {number} x X coordinate.
   * @param {number} y Y coordinate.
   * @return {boolean} The x, y values are contained in the extent.
   * @api
   */
  function containsXY(extent, x, y) {
      return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];
  }
  /**
   * Get the relationship between a coordinate and extent.
   * @param {Extent} extent The extent.
   * @param {import("./coordinate.js").Coordinate} coordinate The coordinate.
   * @return {Relationship} The relationship (bitwise compare with
   *     import("./extent/Relationship.js").Relationship).
   */
  function coordinateRelationship(extent, coordinate) {
      var minX = extent[0];
      var minY = extent[1];
      var maxX = extent[2];
      var maxY = extent[3];
      var x = coordinate[0];
      var y = coordinate[1];
      var relationship = Relationship.UNKNOWN;
      if (x < minX) {
          relationship = relationship | Relationship.LEFT;
      }
      else if (x > maxX) {
          relationship = relationship | Relationship.RIGHT;
      }
      if (y < minY) {
          relationship = relationship | Relationship.BELOW;
      }
      else if (y > maxY) {
          relationship = relationship | Relationship.ABOVE;
      }
      if (relationship === Relationship.UNKNOWN) {
          relationship = Relationship.INTERSECTING;
      }
      return relationship;
  }
  /**
   * Create an empty extent.
   * @return {Extent} Empty extent.
   * @api
   */
  function createEmpty() {
      return [Infinity, Infinity, -Infinity, -Infinity];
  }
  /**
   * Create a new extent or update the provided extent.
   * @param {number} minX Minimum X.
   * @param {number} minY Minimum Y.
   * @param {number} maxX Maximum X.
   * @param {number} maxY Maximum Y.
   * @param {Extent=} opt_extent Destination extent.
   * @return {Extent} Extent.
   */
  function createOrUpdate(minX, minY, maxX, maxY, opt_extent) {
      if (opt_extent) {
          opt_extent[0] = minX;
          opt_extent[1] = minY;
          opt_extent[2] = maxX;
          opt_extent[3] = maxY;
          return opt_extent;
      }
      else {
          return [minX, minY, maxX, maxY];
      }
  }
  /**
   * Create a new empty extent or make the provided one empty.
   * @param {Extent=} opt_extent Extent.
   * @return {Extent} Extent.
   */
  function createOrUpdateEmpty(opt_extent) {
      return createOrUpdate(Infinity, Infinity, -Infinity, -Infinity, opt_extent);
  }
  /**
   * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
   * @param {Extent=} opt_extent Extent.
   * @return {Extent} Extent.
   */
  function createOrUpdateFromCoordinate(coordinate, opt_extent) {
      var x = coordinate[0];
      var y = coordinate[1];
      return createOrUpdate(x, y, x, y, opt_extent);
  }
  /**
   * @param {Array<import("./coordinate.js").Coordinate>} coordinates Coordinates.
   * @param {Extent=} opt_extent Extent.
   * @return {Extent} Extent.
   */
  function createOrUpdateFromCoordinates(coordinates, opt_extent) {
      var extent = createOrUpdateEmpty(opt_extent);
      return extendCoordinates(extent, coordinates);
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {Extent=} opt_extent Extent.
   * @return {Extent} Extent.
   */
  function createOrUpdateFromFlatCoordinates(flatCoordinates, offset, end, stride, opt_extent) {
      var extent = createOrUpdateEmpty(opt_extent);
      return extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);
  }
  /**
   * Determine if two extents are equivalent.
   * @param {Extent} extent1 Extent 1.
   * @param {Extent} extent2 Extent 2.
   * @return {boolean} The two extents are equivalent.
   * @api
   */
  function equals(extent1, extent2) {
      return extent1[0] == extent2[0] && extent1[2] == extent2[2] &&
          extent1[1] == extent2[1] && extent1[3] == extent2[3];
  }
  /**
   * Modify an extent to include another extent.
   * @param {Extent} extent1 The extent to be modified.
   * @param {Extent} extent2 The extent that will be included in the first.
   * @return {Extent} A reference to the first (extended) extent.
   * @api
   */
  function extend(extent1, extent2) {
      if (extent2[0] < extent1[0]) {
          extent1[0] = extent2[0];
      }
      if (extent2[2] > extent1[2]) {
          extent1[2] = extent2[2];
      }
      if (extent2[1] < extent1[1]) {
          extent1[1] = extent2[1];
      }
      if (extent2[3] > extent1[3]) {
          extent1[3] = extent2[3];
      }
      return extent1;
  }
  /**
   * @param {Extent} extent Extent.
   * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
   */
  function extendCoordinate(extent, coordinate) {
      if (coordinate[0] < extent[0]) {
          extent[0] = coordinate[0];
      }
      if (coordinate[0] > extent[2]) {
          extent[2] = coordinate[0];
      }
      if (coordinate[1] < extent[1]) {
          extent[1] = coordinate[1];
      }
      if (coordinate[1] > extent[3]) {
          extent[3] = coordinate[1];
      }
  }
  /**
   * @param {Extent} extent Extent.
   * @param {Array<import("./coordinate.js").Coordinate>} coordinates Coordinates.
   * @return {Extent} Extent.
   */
  function extendCoordinates(extent, coordinates) {
      for (var i = 0, ii = coordinates.length; i < ii; ++i) {
          extendCoordinate(extent, coordinates[i]);
      }
      return extent;
  }
  /**
   * @param {Extent} extent Extent.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @return {Extent} Extent.
   */
  function extendFlatCoordinates(extent, flatCoordinates, offset, end, stride) {
      for (; offset < end; offset += stride) {
          extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);
      }
      return extent;
  }
  /**
   * @param {Extent} extent Extent.
   * @param {number} x X.
   * @param {number} y Y.
   */
  function extendXY(extent, x, y) {
      extent[0] = Math.min(extent[0], x);
      extent[1] = Math.min(extent[1], y);
      extent[2] = Math.max(extent[2], x);
      extent[3] = Math.max(extent[3], y);
  }
  /**
   * This function calls `callback` for each corner of the extent. If the
   * callback returns a truthy value the function returns that value
   * immediately. Otherwise the function returns `false`.
   * @param {Extent} extent Extent.
   * @param {function(import("./coordinate.js").Coordinate): S} callback Callback.
   * @return {S|boolean} Value.
   * @template S
   */
  function forEachCorner(extent, callback) {
      var val;
      val = callback(getBottomLeft(extent));
      if (val) {
          return val;
      }
      val = callback(getBottomRight(extent));
      if (val) {
          return val;
      }
      val = callback(getTopRight(extent));
      if (val) {
          return val;
      }
      val = callback(getTopLeft(extent));
      if (val) {
          return val;
      }
      return false;
  }
  /**
   * Get the size of an extent.
   * @param {Extent} extent Extent.
   * @return {number} Area.
   * @api
   */
  function getArea(extent) {
      var area = 0;
      if (!isEmpty$1(extent)) {
          area = getWidth(extent) * getHeight(extent);
      }
      return area;
  }
  /**
   * Get the bottom left coordinate of an extent.
   * @param {Extent} extent Extent.
   * @return {import("./coordinate.js").Coordinate} Bottom left coordinate.
   * @api
   */
  function getBottomLeft(extent) {
      return [extent[0], extent[1]];
  }
  /**
   * Get the bottom right coordinate of an extent.
   * @param {Extent} extent Extent.
   * @return {import("./coordinate.js").Coordinate} Bottom right coordinate.
   * @api
   */
  function getBottomRight(extent) {
      return [extent[2], extent[1]];
  }
  /**
   * Get the center coordinate of an extent.
   * @param {Extent} extent Extent.
   * @return {import("./coordinate.js").Coordinate} Center.
   * @api
   */
  function getCenter(extent) {
      return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];
  }
  /**
   * Get a corner coordinate of an extent.
   * @param {Extent} extent Extent.
   * @param {Corner} corner Corner.
   * @return {import("./coordinate.js").Coordinate} Corner coordinate.
   */
  function getCorner(extent, corner) {
      var coordinate;
      if (corner === Corner.BOTTOM_LEFT) {
          coordinate = getBottomLeft(extent);
      }
      else if (corner === Corner.BOTTOM_RIGHT) {
          coordinate = getBottomRight(extent);
      }
      else if (corner === Corner.TOP_LEFT) {
          coordinate = getTopLeft(extent);
      }
      else if (corner === Corner.TOP_RIGHT) {
          coordinate = getTopRight(extent);
      }
      else {
          assert(false, 13); // Invalid corner
      }
      return coordinate;
  }
  /**
   * @param {import("./coordinate.js").Coordinate} center Center.
   * @param {number} resolution Resolution.
   * @param {number} rotation Rotation.
   * @param {import("./size.js").Size} size Size.
   * @param {Extent=} opt_extent Destination extent.
   * @return {Extent} Extent.
   */
  function getForViewAndSize(center, resolution, rotation, size, opt_extent) {
      var dx = resolution * size[0] / 2;
      var dy = resolution * size[1] / 2;
      var cosRotation = Math.cos(rotation);
      var sinRotation = Math.sin(rotation);
      var xCos = dx * cosRotation;
      var xSin = dx * sinRotation;
      var yCos = dy * cosRotation;
      var ySin = dy * sinRotation;
      var x = center[0];
      var y = center[1];
      var x0 = x - xCos + ySin;
      var x1 = x - xCos - ySin;
      var x2 = x + xCos - ySin;
      var x3 = x + xCos + ySin;
      var y0 = y - xSin - yCos;
      var y1 = y - xSin + yCos;
      var y2 = y + xSin + yCos;
      var y3 = y + xSin - yCos;
      return createOrUpdate(Math.min(x0, x1, x2, x3), Math.min(y0, y1, y2, y3), Math.max(x0, x1, x2, x3), Math.max(y0, y1, y2, y3), opt_extent);
  }
  /**
   * Get the height of an extent.
   * @param {Extent} extent Extent.
   * @return {number} Height.
   * @api
   */
  function getHeight(extent) {
      return extent[3] - extent[1];
  }
  /**
   * Get the intersection of two extents.
   * @param {Extent} extent1 Extent 1.
   * @param {Extent} extent2 Extent 2.
   * @param {Extent=} opt_extent Optional extent to populate with intersection.
   * @return {Extent} Intersecting extent.
   * @api
   */
  function getIntersection(extent1, extent2, opt_extent) {
      var intersection = opt_extent ? opt_extent : createEmpty();
      if (intersects(extent1, extent2)) {
          if (extent1[0] > extent2[0]) {
              intersection[0] = extent1[0];
          }
          else {
              intersection[0] = extent2[0];
          }
          if (extent1[1] > extent2[1]) {
              intersection[1] = extent1[1];
          }
          else {
              intersection[1] = extent2[1];
          }
          if (extent1[2] < extent2[2]) {
              intersection[2] = extent1[2];
          }
          else {
              intersection[2] = extent2[2];
          }
          if (extent1[3] < extent2[3]) {
              intersection[3] = extent1[3];
          }
          else {
              intersection[3] = extent2[3];
          }
      }
      else {
          createOrUpdateEmpty(intersection);
      }
      return intersection;
  }
  /**
   * Get the top left coordinate of an extent.
   * @param {Extent} extent Extent.
   * @return {import("./coordinate.js").Coordinate} Top left coordinate.
   * @api
   */
  function getTopLeft(extent) {
      return [extent[0], extent[3]];
  }
  /**
   * Get the top right coordinate of an extent.
   * @param {Extent} extent Extent.
   * @return {import("./coordinate.js").Coordinate} Top right coordinate.
   * @api
   */
  function getTopRight(extent) {
      return [extent[2], extent[3]];
  }
  /**
   * Get the width of an extent.
   * @param {Extent} extent Extent.
   * @return {number} Width.
   * @api
   */
  function getWidth(extent) {
      return extent[2] - extent[0];
  }
  /**
   * Determine if one extent intersects another.
   * @param {Extent} extent1 Extent 1.
   * @param {Extent} extent2 Extent.
   * @return {boolean} The two extents intersect.
   * @api
   */
  function intersects(extent1, extent2) {
      return extent1[0] <= extent2[2] &&
          extent1[2] >= extent2[0] &&
          extent1[1] <= extent2[3] &&
          extent1[3] >= extent2[1];
  }
  /**
   * Determine if an extent is empty.
   * @param {Extent} extent Extent.
   * @return {boolean} Is empty.
   * @api
   */
  function isEmpty$1(extent) {
      return extent[2] < extent[0] || extent[3] < extent[1];
  }
  /**
   * @param {Extent} extent Extent.
   * @param {Extent=} opt_extent Extent.
   * @return {Extent} Extent.
   */
  function returnOrUpdate(extent, opt_extent) {
      if (opt_extent) {
          opt_extent[0] = extent[0];
          opt_extent[1] = extent[1];
          opt_extent[2] = extent[2];
          opt_extent[3] = extent[3];
          return opt_extent;
      }
      else {
          return extent;
      }
  }
  /**
   * @param {Extent} extent Extent.
   * @param {number} value Value.
   */
  function scaleFromCenter(extent, value) {
      var deltaX = ((extent[2] - extent[0]) / 2) * (value - 1);
      var deltaY = ((extent[3] - extent[1]) / 2) * (value - 1);
      extent[0] -= deltaX;
      extent[2] += deltaX;
      extent[1] -= deltaY;
      extent[3] += deltaY;
  }
  /**
   * Determine if the segment between two coordinates intersects (crosses,
   * touches, or is contained by) the provided extent.
   * @param {Extent} extent The extent.
   * @param {import("./coordinate.js").Coordinate} start Segment start coordinate.
   * @param {import("./coordinate.js").Coordinate} end Segment end coordinate.
   * @return {boolean} The segment intersects the extent.
   */
  function intersectsSegment(extent, start, end) {
      var intersects = false;
      var startRel = coordinateRelationship(extent, start);
      var endRel = coordinateRelationship(extent, end);
      if (startRel === Relationship.INTERSECTING ||
          endRel === Relationship.INTERSECTING) {
          intersects = true;
      }
      else {
          var minX = extent[0];
          var minY = extent[1];
          var maxX = extent[2];
          var maxY = extent[3];
          var startX = start[0];
          var startY = start[1];
          var endX = end[0];
          var endY = end[1];
          var slope = (endY - startY) / (endX - startX);
          var x = void 0, y = void 0;
          if (!!(endRel & Relationship.ABOVE) &&
              !(startRel & Relationship.ABOVE)) {
              // potentially intersects top
              x = endX - ((endY - maxY) / slope);
              intersects = x >= minX && x <= maxX;
          }
          if (!intersects && !!(endRel & Relationship.RIGHT) &&
              !(startRel & Relationship.RIGHT)) {
              // potentially intersects right
              y = endY - ((endX - maxX) * slope);
              intersects = y >= minY && y <= maxY;
          }
          if (!intersects && !!(endRel & Relationship.BELOW) &&
              !(startRel & Relationship.BELOW)) {
              // potentially intersects bottom
              x = endX - ((endY - minY) / slope);
              intersects = x >= minX && x <= maxX;
          }
          if (!intersects && !!(endRel & Relationship.LEFT) &&
              !(startRel & Relationship.LEFT)) {
              // potentially intersects left
              y = endY - ((endX - minX) * slope);
              intersects = y >= minY && y <= maxY;
          }
      }
      return intersects;
  }
  /**
   * Apply a transform function to the extent.
   * @param {Extent} extent Extent.
   * @param {import("./proj.js").TransformFunction} transformFn Transform function.
   * Called with `[minX, minY, maxX, maxY]` extent coordinates.
   * @param {Extent=} opt_extent Destination extent.
   * @param {number=} opt_stops Number of stops per side used for the transform.
   * By default only the corners are used.
   * @return {Extent} Extent.
   * @api
   */
  function applyTransform(extent, transformFn, opt_extent, opt_stops) {
      var coordinates = [];
      if (opt_stops > 1) {
          var width = extent[2] - extent[0];
          var height = extent[3] - extent[1];
          for (var i = 0; i < opt_stops; ++i) {
              coordinates.push(extent[0] + width * i / opt_stops, extent[1], extent[2], extent[1] + height * i / opt_stops, extent[2] - width * i / opt_stops, extent[3], extent[0], extent[3] - height * i / opt_stops);
          }
      }
      else {
          coordinates = [
              extent[0], extent[1],
              extent[2], extent[1],
              extent[2], extent[3],
              extent[0], extent[3]
          ];
      }
      transformFn(coordinates, coordinates, 2);
      var xs = [];
      var ys = [];
      for (var i = 0, l = coordinates.length; i < l; i += 2) {
          xs.push(coordinates[i]);
          ys.push(coordinates[i + 1]);
      }
      return _boundingExtentXYs(xs, ys, opt_extent);
  }
  /**
   * Modifies the provided extent in-place to be within the real world
   * extent.
   *
   * @param {Extent} extent Extent.
   * @param {import("./proj/Projection.js").default} projection Projection
   * @return {Extent} The extent within the real world extent.
   */
  function wrapX(extent, projection) {
      var projectionExtent = projection.getExtent();
      var center = getCenter(extent);
      if (projection.canWrapX() && (center[0] < projectionExtent[0] || center[0] >= projectionExtent[2])) {
          var worldWidth = getWidth(projectionExtent);
          var worldsAway = Math.floor((center[0] - projectionExtent[0]) / worldWidth);
          var offset = (worldsAway * worldWidth);
          extent[0] -= offset;
          extent[2] -= offset;
      }
      return extent;
  }

  /**
   * @module ol/proj/Units
   */
  /**
   * Projection units: `'degrees'`, `'ft'`, `'m'`, `'pixels'`, `'tile-pixels'` or
   * `'us-ft'`.
   * @enum {string}
   */
  var Units = {
      DEGREES: 'degrees',
      FEET: 'ft',
      METERS: 'm',
      PIXELS: 'pixels',
      TILE_PIXELS: 'tile-pixels',
      USFEET: 'us-ft'
  };
  /**
   * Meters per unit lookup table.
   * @const
   * @type {Object<Units, number>}
   * @api
   */
  var METERS_PER_UNIT = {};
  // use the radius of the Normal sphere
  METERS_PER_UNIT[Units.DEGREES] = 2 * Math.PI * 6370997 / 360;
  METERS_PER_UNIT[Units.FEET] = 0.3048;
  METERS_PER_UNIT[Units.METERS] = 1;
  METERS_PER_UNIT[Units.USFEET] = 1200 / 3937;

  /**
   * @module ol/proj/Projection
   */
  /**
   * @typedef {Object} Options
   * @property {string} code The SRS identifier code, e.g. `EPSG:4326`.
   * @property {import("./Units.js").default|string} [units] Units. Required unless a
   * proj4 projection is defined for `code`.
   * @property {import("../extent.js").Extent} [extent] The validity extent for the SRS.
   * @property {string} [axisOrientation='enu'] The axis orientation as specified in Proj4.
   * @property {boolean} [global=false] Whether the projection is valid for the whole globe.
   * @property {number} [metersPerUnit] The meters per unit for the SRS.
   * If not provided, the `units` are used to get the meters per unit from the {@link module:ol/proj/Units~METERS_PER_UNIT}
   * lookup table.
   * @property {import("../extent.js").Extent} [worldExtent] The world extent for the SRS.
   * @property {function(number, import("../coordinate.js").Coordinate):number} [getPointResolution]
   * Function to determine resolution at a point. The function is called with a
   * `{number}` view resolution and an `{import("../coordinate.js").Coordinate}` as arguments, and returns
   * the `{number}` resolution in projection units at the passed coordinate. If this is `undefined`,
   * the default {@link module:ol/proj#getPointResolution} function will be used.
   */
  /**
   * @classdesc
   * Projection definition class. One of these is created for each projection
   * supported in the application and stored in the {@link module:ol/proj} namespace.
   * You can use these in applications, but this is not required, as API params
   * and options use {@link module:ol/proj~ProjectionLike} which means the simple string
   * code will suffice.
   *
   * You can use {@link module:ol/proj~get} to retrieve the object for a particular
   * projection.
   *
   * The library includes definitions for `EPSG:4326` and `EPSG:3857`, together
   * with the following aliases:
   * * `EPSG:4326`: CRS:84, urn:ogc:def:crs:EPSG:6.6:4326,
   *     urn:ogc:def:crs:OGC:1.3:CRS84, urn:ogc:def:crs:OGC:2:84,
   *     http://www.opengis.net/gml/srs/epsg.xml#4326,
   *     urn:x-ogc:def:crs:EPSG:4326
   * * `EPSG:3857`: EPSG:102100, EPSG:102113, EPSG:900913,
   *     urn:ogc:def:crs:EPSG:6.18:3:3857,
   *     http://www.opengis.net/gml/srs/epsg.xml#3857
   *
   * If you use [proj4js](https://github.com/proj4js/proj4js), aliases can
   * be added using `proj4.defs()`. After all required projection definitions are
   * added, call the {@link module:ol/proj/proj4~register} function.
   *
   * @api
   */
  var Projection = /** @class */ (function () {
      /**
       * @param {Options} options Projection options.
       */
      function Projection(options) {
          /**
           * @private
           * @type {string}
           */
          this.code_ = options.code;
          /**
           * Units of projected coordinates. When set to `TILE_PIXELS`, a
           * `this.extent_` and `this.worldExtent_` must be configured properly for each
           * tile.
           * @private
           * @type {import("./Units.js").default}
           */
          this.units_ = /** @type {import("./Units.js").default} */ (options.units);
          /**
           * Validity extent of the projection in projected coordinates. For projections
           * with `TILE_PIXELS` units, this is the extent of the tile in
           * tile pixel space.
           * @private
           * @type {import("../extent.js").Extent}
           */
          this.extent_ = options.extent !== undefined ? options.extent : null;
          /**
           * Extent of the world in EPSG:4326. For projections with
           * `TILE_PIXELS` units, this is the extent of the tile in
           * projected coordinate space.
           * @private
           * @type {import("../extent.js").Extent}
           */
          this.worldExtent_ = options.worldExtent !== undefined ?
              options.worldExtent : null;
          /**
           * @private
           * @type {string}
           */
          this.axisOrientation_ = options.axisOrientation !== undefined ?
              options.axisOrientation : 'enu';
          /**
           * @private
           * @type {boolean}
           */
          this.global_ = options.global !== undefined ? options.global : false;
          /**
           * @private
           * @type {boolean}
           */
          this.canWrapX_ = !!(this.global_ && this.extent_);
          /**
           * @private
           * @type {function(number, import("../coordinate.js").Coordinate):number|undefined}
           */
          this.getPointResolutionFunc_ = options.getPointResolution;
          /**
           * @private
           * @type {import("../tilegrid/TileGrid.js").default}
           */
          this.defaultTileGrid_ = null;
          /**
           * @private
           * @type {number|undefined}
           */
          this.metersPerUnit_ = options.metersPerUnit;
      }
      /**
       * @return {boolean} The projection is suitable for wrapping the x-axis
       */
      Projection.prototype.canWrapX = function () {
          return this.canWrapX_;
      };
      /**
       * Get the code for this projection, e.g. 'EPSG:4326'.
       * @return {string} Code.
       * @api
       */
      Projection.prototype.getCode = function () {
          return this.code_;
      };
      /**
       * Get the validity extent for this projection.
       * @return {import("../extent.js").Extent} Extent.
       * @api
       */
      Projection.prototype.getExtent = function () {
          return this.extent_;
      };
      /**
       * Get the units of this projection.
       * @return {import("./Units.js").default} Units.
       * @api
       */
      Projection.prototype.getUnits = function () {
          return this.units_;
      };
      /**
       * Get the amount of meters per unit of this projection.  If the projection is
       * not configured with `metersPerUnit` or a units identifier, the return is
       * `undefined`.
       * @return {number|undefined} Meters.
       * @api
       */
      Projection.prototype.getMetersPerUnit = function () {
          return this.metersPerUnit_ || METERS_PER_UNIT[this.units_];
      };
      /**
       * Get the world extent for this projection.
       * @return {import("../extent.js").Extent} Extent.
       * @api
       */
      Projection.prototype.getWorldExtent = function () {
          return this.worldExtent_;
      };
      /**
       * Get the axis orientation of this projection.
       * Example values are:
       * enu - the default easting, northing, elevation.
       * neu - northing, easting, up - useful for "lat/long" geographic coordinates,
       *     or south orientated transverse mercator.
       * wnu - westing, northing, up - some planetary coordinate systems have
       *     "west positive" coordinate systems
       * @return {string} Axis orientation.
       * @api
       */
      Projection.prototype.getAxisOrientation = function () {
          return this.axisOrientation_;
      };
      /**
       * Is this projection a global projection which spans the whole world?
       * @return {boolean} Whether the projection is global.
       * @api
       */
      Projection.prototype.isGlobal = function () {
          return this.global_;
      };
      /**
       * Set if the projection is a global projection which spans the whole world
       * @param {boolean} global Whether the projection is global.
       * @api
       */
      Projection.prototype.setGlobal = function (global) {
          this.global_ = global;
          this.canWrapX_ = !!(global && this.extent_);
      };
      /**
       * @return {import("../tilegrid/TileGrid.js").default} The default tile grid.
       */
      Projection.prototype.getDefaultTileGrid = function () {
          return this.defaultTileGrid_;
      };
      /**
       * @param {import("../tilegrid/TileGrid.js").default} tileGrid The default tile grid.
       */
      Projection.prototype.setDefaultTileGrid = function (tileGrid) {
          this.defaultTileGrid_ = tileGrid;
      };
      /**
       * Set the validity extent for this projection.
       * @param {import("../extent.js").Extent} extent Extent.
       * @api
       */
      Projection.prototype.setExtent = function (extent) {
          this.extent_ = extent;
          this.canWrapX_ = !!(this.global_ && extent);
      };
      /**
       * Set the world extent for this projection.
       * @param {import("../extent.js").Extent} worldExtent World extent
       *     [minlon, minlat, maxlon, maxlat].
       * @api
       */
      Projection.prototype.setWorldExtent = function (worldExtent) {
          this.worldExtent_ = worldExtent;
      };
      /**
       * Set the getPointResolution function (see {@link module:ol/proj~getPointResolution}
       * for this projection.
       * @param {function(number, import("../coordinate.js").Coordinate):number} func Function
       * @api
       */
      Projection.prototype.setGetPointResolution = function (func) {
          this.getPointResolutionFunc_ = func;
      };
      /**
       * Get the custom point resolution function for this projection (if set).
       * @return {function(number, import("../coordinate.js").Coordinate):number|undefined} The custom point
       * resolution function (if set).
       */
      Projection.prototype.getPointResolutionFunc = function () {
          return this.getPointResolutionFunc_;
      };
      return Projection;
  }());

  var __extends$1 =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * Radius of WGS84 sphere
   *
   * @const
   * @type {number}
   */
  var RADIUS = 6378137;
  /**
   * @const
   * @type {number}
   */
  var HALF_SIZE = Math.PI * RADIUS;
  /**
   * @const
   * @type {import("../extent.js").Extent}
   */
  var EXTENT = [
      -HALF_SIZE, -HALF_SIZE,
      HALF_SIZE, HALF_SIZE
  ];
  /**
   * @const
   * @type {import("../extent.js").Extent}
   */
  var WORLD_EXTENT = [-180, -85, 180, 85];
  /**
   * @classdesc
   * Projection object for web/spherical Mercator (EPSG:3857).
   */
  var EPSG3857Projection = /** @class */ (function (_super) {
      __extends$1(EPSG3857Projection, _super);
      /**
       * @param {string} code Code.
       */
      function EPSG3857Projection(code) {
          return _super.call(this, {
              code: code,
              units: Units.METERS,
              extent: EXTENT,
              global: true,
              worldExtent: WORLD_EXTENT,
              getPointResolution: function (resolution, point) {
                  return resolution / cosh(point[1] / RADIUS);
              }
          }) || this;
      }
      return EPSG3857Projection;
  }(Projection));
  /**
   * Projections equal to EPSG:3857.
   *
   * @const
   * @type {Array<import("./Projection.js").default>}
   */
  var PROJECTIONS = [
      new EPSG3857Projection('EPSG:3857'),
      new EPSG3857Projection('EPSG:102100'),
      new EPSG3857Projection('EPSG:102113'),
      new EPSG3857Projection('EPSG:900913'),
      new EPSG3857Projection('urn:ogc:def:crs:EPSG:6.18:3:3857'),
      new EPSG3857Projection('urn:ogc:def:crs:EPSG::3857'),
      new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857')
  ];
  /**
   * Transformation from EPSG:4326 to EPSG:3857.
   *
   * @param {Array<number>} input Input array of coordinate values.
   * @param {Array<number>=} opt_output Output array of coordinate values.
   * @param {number=} opt_dimension Dimension (default is `2`).
   * @return {Array<number>} Output array of coordinate values.
   */
  function fromEPSG4326(input, opt_output, opt_dimension) {
      var length = input.length;
      var dimension = opt_dimension > 1 ? opt_dimension : 2;
      var output = opt_output;
      if (output === undefined) {
          if (dimension > 2) {
              // preserve values beyond second dimension
              output = input.slice();
          }
          else {
              output = new Array(length);
          }
      }
      var halfSize = HALF_SIZE;
      for (var i = 0; i < length; i += dimension) {
          output[i] = halfSize * input[i] / 180;
          var y = RADIUS *
              Math.log(Math.tan(Math.PI * (+input[i + 1] + 90) / 360));
          if (y > halfSize) {
              y = halfSize;
          }
          else if (y < -halfSize) {
              y = -halfSize;
          }
          output[i + 1] = y;
      }
      return output;
  }
  /**
   * Transformation from EPSG:3857 to EPSG:4326.
   *
   * @param {Array<number>} input Input array of coordinate values.
   * @param {Array<number>=} opt_output Output array of coordinate values.
   * @param {number=} opt_dimension Dimension (default is `2`).
   * @return {Array<number>} Output array of coordinate values.
   */
  function toEPSG4326(input, opt_output, opt_dimension) {
      var length = input.length;
      var dimension = opt_dimension > 1 ? opt_dimension : 2;
      var output = opt_output;
      if (output === undefined) {
          if (dimension > 2) {
              // preserve values beyond second dimension
              output = input.slice();
          }
          else {
              output = new Array(length);
          }
      }
      for (var i = 0; i < length; i += dimension) {
          output[i] = 180 * input[i] / HALF_SIZE;
          output[i + 1] = 360 * Math.atan(Math.exp(input[i + 1] / RADIUS)) / Math.PI - 90;
      }
      return output;
  }

  var __extends$2 =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * Semi-major radius of the WGS84 ellipsoid.
   *
   * @const
   * @type {number}
   */
  var RADIUS$1 = 6378137;
  /**
   * Extent of the EPSG:4326 projection which is the whole world.
   *
   * @const
   * @type {import("../extent.js").Extent}
   */
  var EXTENT$1 = [-180, -90, 180, 90];
  /**
   * @const
   * @type {number}
   */
  var METERS_PER_UNIT$1 = Math.PI * RADIUS$1 / 180;
  /**
   * @classdesc
   * Projection object for WGS84 geographic coordinates (EPSG:4326).
   *
   * Note that OpenLayers does not strictly comply with the EPSG definition.
   * The EPSG registry defines 4326 as a CRS for Latitude,Longitude (y,x).
   * OpenLayers treats EPSG:4326 as a pseudo-projection, with x,y coordinates.
   */
  var EPSG4326Projection = /** @class */ (function (_super) {
      __extends$2(EPSG4326Projection, _super);
      /**
       * @param {string} code Code.
       * @param {string=} opt_axisOrientation Axis orientation.
       */
      function EPSG4326Projection(code, opt_axisOrientation) {
          return _super.call(this, {
              code: code,
              units: Units.DEGREES,
              extent: EXTENT$1,
              axisOrientation: opt_axisOrientation,
              global: true,
              metersPerUnit: METERS_PER_UNIT$1,
              worldExtent: EXTENT$1
          }) || this;
      }
      return EPSG4326Projection;
  }(Projection));
  /**
   * Projections equal to EPSG:4326.
   *
   * @const
   * @type {Array<import("./Projection.js").default>}
   */
  var PROJECTIONS$1 = [
      new EPSG4326Projection('CRS:84'),
      new EPSG4326Projection('EPSG:4326', 'neu'),
      new EPSG4326Projection('urn:ogc:def:crs:EPSG::4326', 'neu'),
      new EPSG4326Projection('urn:ogc:def:crs:EPSG:6.6:4326', 'neu'),
      new EPSG4326Projection('urn:ogc:def:crs:OGC:1.3:CRS84'),
      new EPSG4326Projection('urn:ogc:def:crs:OGC:2:84'),
      new EPSG4326Projection('http://www.opengis.net/gml/srs/epsg.xml#4326', 'neu'),
      new EPSG4326Projection('urn:x-ogc:def:crs:EPSG:4326', 'neu')
  ];

  /**
   * @module ol/proj/transforms
   */
  /**
   * @private
   * @type {!Object<string, Object<string, import("../proj.js").TransformFunction>>}
   */
  var transforms = {};
  /**
   * Registers a conversion function to convert coordinates from the source
   * projection to the destination projection.
   *
   * @param {import("./Projection.js").default} source Source.
   * @param {import("./Projection.js").default} destination Destination.
   * @param {import("../proj.js").TransformFunction} transformFn Transform.
   */
  function add(source, destination, transformFn) {
      var sourceCode = source.getCode();
      var destinationCode = destination.getCode();
      if (!(sourceCode in transforms)) {
          transforms[sourceCode] = {};
      }
      transforms[sourceCode][destinationCode] = transformFn;
  }
  /**
   * Get a transform given a source code and a destination code.
   * @param {string} sourceCode The code for the source projection.
   * @param {string} destinationCode The code for the destination projection.
   * @return {import("../proj.js").TransformFunction|undefined} The transform function (if found).
   */
  function get$2(sourceCode, destinationCode) {
      var transform;
      if (sourceCode in transforms && destinationCode in transforms[sourceCode]) {
          transform = transforms[sourceCode][destinationCode];
      }
      return transform;
  }

  /**
   * @module ol/proj/projections
   */
  /**
   * @type {Object<string, import("./Projection.js").default>}
   */
  var cache$1 = {};
  /**
   * Get a cached projection by code.
   * @param {string} code The code for the projection.
   * @return {import("./Projection.js").default} The projection (if cached).
   */
  function get$3(code) {
      return cache$1[code] || null;
  }
  /**
   * Add a projection to the cache.
   * @param {string} code The projection code.
   * @param {import("./Projection.js").default} projection The projection to cache.
   */
  function add$1(code, projection) {
      cache$1[code] = projection;
  }

  /**
   * @module ol/proj
   */
  /**
   * @param {Array<number>} input Input coordinate array.
   * @param {Array<number>=} opt_output Output array of coordinate values.
   * @param {number=} opt_dimension Dimension.
   * @return {Array<number>} Output coordinate array (new array, same coordinate
   *     values).
   */
  function cloneTransform(input, opt_output, opt_dimension) {
      var output;
      if (opt_output !== undefined) {
          for (var i = 0, ii = input.length; i < ii; ++i) {
              opt_output[i] = input[i];
          }
          output = opt_output;
      }
      else {
          output = input.slice();
      }
      return output;
  }
  /**
   * @param {Array<number>} input Input coordinate array.
   * @param {Array<number>=} opt_output Output array of coordinate values.
   * @param {number=} opt_dimension Dimension.
   * @return {Array<number>} Input coordinate array (same array as input).
   */
  function identityTransform(input, opt_output, opt_dimension) {
      if (opt_output !== undefined && input !== opt_output) {
          for (var i = 0, ii = input.length; i < ii; ++i) {
              opt_output[i] = input[i];
          }
          input = opt_output;
      }
      return input;
  }
  /**
   * Add a Projection object to the list of supported projections that can be
   * looked up by their code.
   *
   * @param {Projection} projection Projection instance.
   * @api
   */
  function addProjection(projection) {
      add$1(projection.getCode(), projection);
      add(projection, projection, cloneTransform);
  }
  /**
   * @param {Array<Projection>} projections Projections.
   */
  function addProjections(projections) {
      projections.forEach(addProjection);
  }
  /**
   * Fetches a Projection object for the code specified.
   *
   * @param {ProjectionLike} projectionLike Either a code string which is
   *     a combination of authority and identifier such as "EPSG:4326", or an
   *     existing projection object, or undefined.
   * @return {Projection} Projection object, or null if not in list.
   * @api
   */
  function get$4(projectionLike) {
      return typeof projectionLike === 'string' ?
          get$3(/** @type {string} */ (projectionLike)) :
          ( /** @type {Projection} */(projectionLike) || null);
  }
  /**
   * Get the resolution of the point in degrees or distance units.
   * For projections with degrees as the unit this will simply return the
   * provided resolution. For other projections the point resolution is
   * by default estimated by transforming the 'point' pixel to EPSG:4326,
   * measuring its width and height on the normal sphere,
   * and taking the average of the width and height.
   * A custom function can be provided for a specific projection, either
   * by setting the `getPointResolution` option in the
   * {@link module:ol/proj/Projection~Projection} constructor or by using
   * {@link module:ol/proj/Projection~Projection#setGetPointResolution} to change an existing
   * projection object.
   * @param {ProjectionLike} projection The projection.
   * @param {number} resolution Nominal resolution in projection units.
   * @param {import("./coordinate.js").Coordinate} point Point to find adjusted resolution at.
   * @param {Units=} opt_units Units to get the point resolution in.
   * Default is the projection's units.
   * @return {number} Point resolution.
   * @api
   */
  function getPointResolution(projection, resolution, point, opt_units) {
      projection = get$4(projection);
      var pointResolution;
      var getter = projection.getPointResolutionFunc();
      if (getter) {
          pointResolution = getter(resolution, point);
          if (opt_units && opt_units !== projection.getUnits()) {
              var metersPerUnit = projection.getMetersPerUnit();
              if (metersPerUnit) {
                  pointResolution = pointResolution * metersPerUnit / METERS_PER_UNIT[opt_units];
              }
          }
      }
      else {
          var units = projection.getUnits();
          if (units == Units.DEGREES && !opt_units || opt_units == Units.DEGREES) {
              pointResolution = resolution;
          }
          else {
              // Estimate point resolution by transforming the center pixel to EPSG:4326,
              // measuring its width and height on the normal sphere, and taking the
              // average of the width and height.
              var toEPSG4326_1 = getTransformFromProjections(projection, get$4('EPSG:4326'));
              var vertices = [
                  point[0] - resolution / 2, point[1],
                  point[0] + resolution / 2, point[1],
                  point[0], point[1] - resolution / 2,
                  point[0], point[1] + resolution / 2
              ];
              vertices = toEPSG4326_1(vertices, vertices, 2);
              var width = getDistance(vertices.slice(0, 2), vertices.slice(2, 4));
              var height = getDistance(vertices.slice(4, 6), vertices.slice(6, 8));
              pointResolution = (width + height) / 2;
              var metersPerUnit = opt_units ?
                  METERS_PER_UNIT[opt_units] :
                  projection.getMetersPerUnit();
              if (metersPerUnit !== undefined) {
                  pointResolution /= metersPerUnit;
              }
          }
      }
      return pointResolution;
  }
  /**
   * Registers transformation functions that don't alter coordinates. Those allow
   * to transform between projections with equal meaning.
   *
   * @param {Array<Projection>} projections Projections.
   * @api
   */
  function addEquivalentProjections(projections) {
      addProjections(projections);
      projections.forEach(function (source) {
          projections.forEach(function (destination) {
              if (source !== destination) {
                  add(source, destination, cloneTransform);
              }
          });
      });
  }
  /**
   * Registers transformation functions to convert coordinates in any projection
   * in projection1 to any projection in projection2.
   *
   * @param {Array<Projection>} projections1 Projections with equal
   *     meaning.
   * @param {Array<Projection>} projections2 Projections with equal
   *     meaning.
   * @param {TransformFunction} forwardTransform Transformation from any
   *   projection in projection1 to any projection in projection2.
   * @param {TransformFunction} inverseTransform Transform from any projection
   *   in projection2 to any projection in projection1..
   */
  function addEquivalentTransforms(projections1, projections2, forwardTransform, inverseTransform) {
      projections1.forEach(function (projection1) {
          projections2.forEach(function (projection2) {
              add(projection1, projection2, forwardTransform);
              add(projection2, projection1, inverseTransform);
          });
      });
  }
  /**
   * @param {Projection|string|undefined} projection Projection.
   * @param {string} defaultCode Default code.
   * @return {Projection} Projection.
   */
  function createProjection(projection, defaultCode) {
      if (!projection) {
          return get$4(defaultCode);
      }
      else if (typeof projection === 'string') {
          return get$4(projection);
      }
      else {
          return (
          /** @type {Projection} */ (projection));
      }
  }
  /**
   * Creates a {@link module:ol/proj~TransformFunction} from a simple 2D coordinate transform
   * function.
   * @param {function(import("./coordinate.js").Coordinate): import("./coordinate.js").Coordinate} coordTransform Coordinate
   *     transform.
   * @return {TransformFunction} Transform function.
   */
  function createTransformFromCoordinateTransform(coordTransform) {
      return (
      /**
       * @param {Array<number>} input Input.
       * @param {Array<number>=} opt_output Output.
       * @param {number=} opt_dimension Dimension.
       * @return {Array<number>} Output.
       */
      function (input, opt_output, opt_dimension) {
          var length = input.length;
          var dimension = opt_dimension !== undefined ? opt_dimension : 2;
          var output = opt_output !== undefined ? opt_output : new Array(length);
          for (var i = 0; i < length; i += dimension) {
              var point = coordTransform([input[i], input[i + 1]]);
              output[i] = point[0];
              output[i + 1] = point[1];
              for (var j = dimension - 1; j >= 2; --j) {
                  output[i + j] = input[i + j];
              }
          }
          return output;
      });
  }
  /**
   * Registers coordinate transform functions to convert coordinates between the
   * source projection and the destination projection.
   * The forward and inverse functions convert coordinate pairs; this function
   * converts these into the functions used internally which also handle
   * extents and coordinate arrays.
   *
   * @param {ProjectionLike} source Source projection.
   * @param {ProjectionLike} destination Destination projection.
   * @param {function(import("./coordinate.js").Coordinate): import("./coordinate.js").Coordinate} forward The forward transform
   *     function (that is, from the source projection to the destination
   *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns
   *     the transformed {@link module:ol/coordinate~Coordinate}.
   * @param {function(import("./coordinate.js").Coordinate): import("./coordinate.js").Coordinate} inverse The inverse transform
   *     function (that is, from the destination projection to the source
   *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns
   *     the transformed {@link module:ol/coordinate~Coordinate}.
   * @api
   */
  function addCoordinateTransforms(source, destination, forward, inverse) {
      var sourceProj = get$4(source);
      var destProj = get$4(destination);
      add(sourceProj, destProj, createTransformFromCoordinateTransform(forward));
      add(destProj, sourceProj, createTransformFromCoordinateTransform(inverse));
  }
  /**
   * Transforms a coordinate from longitude/latitude to a different projection.
   * @param {import("./coordinate.js").Coordinate} coordinate Coordinate as longitude and latitude, i.e.
   *     an array with longitude as 1st and latitude as 2nd element.
   * @param {ProjectionLike=} opt_projection Target projection. The
   *     default is Web Mercator, i.e. 'EPSG:3857'.
   * @return {import("./coordinate.js").Coordinate} Coordinate projected to the target projection.
   * @api
   */
  function fromLonLat(coordinate, opt_projection) {
      return transform(coordinate, 'EPSG:4326', opt_projection !== undefined ? opt_projection : 'EPSG:3857');
  }
  /**
   * Checks if two projections are the same, that is every coordinate in one
   * projection does represent the same geographic point as the same coordinate in
   * the other projection.
   *
   * @param {Projection} projection1 Projection 1.
   * @param {Projection} projection2 Projection 2.
   * @return {boolean} Equivalent.
   * @api
   */
  function equivalent(projection1, projection2) {
      if (projection1 === projection2) {
          return true;
      }
      var equalUnits = projection1.getUnits() === projection2.getUnits();
      if (projection1.getCode() === projection2.getCode()) {
          return equalUnits;
      }
      else {
          var transformFunc = getTransformFromProjections(projection1, projection2);
          return transformFunc === cloneTransform && equalUnits;
      }
  }
  /**
   * Searches in the list of transform functions for the function for converting
   * coordinates from the source projection to the destination projection.
   *
   * @param {Projection} sourceProjection Source Projection object.
   * @param {Projection} destinationProjection Destination Projection
   *     object.
   * @return {TransformFunction} Transform function.
   */
  function getTransformFromProjections(sourceProjection, destinationProjection) {
      var sourceCode = sourceProjection.getCode();
      var destinationCode = destinationProjection.getCode();
      var transformFunc = get$2(sourceCode, destinationCode);
      if (!transformFunc) {
          transformFunc = identityTransform;
      }
      return transformFunc;
  }
  /**
   * Given the projection-like objects, searches for a transformation
   * function to convert a coordinates array from the source projection to the
   * destination projection.
   *
   * @param {ProjectionLike} source Source.
   * @param {ProjectionLike} destination Destination.
   * @return {TransformFunction} Transform function.
   * @api
   */
  function getTransform(source, destination) {
      var sourceProjection = get$4(source);
      var destinationProjection = get$4(destination);
      return getTransformFromProjections(sourceProjection, destinationProjection);
  }
  /**
   * Transforms a coordinate from source projection to destination projection.
   * This returns a new coordinate (and does not modify the original).
   *
   * See {@link module:ol/proj~transformExtent} for extent transformation.
   * See the transform method of {@link module:ol/geom/Geometry~Geometry} and its
   * subclasses for geometry transforms.
   *
   * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
   * @param {ProjectionLike} source Source projection-like.
   * @param {ProjectionLike} destination Destination projection-like.
   * @return {import("./coordinate.js").Coordinate} Coordinate.
   * @api
   */
  function transform(coordinate, source, destination) {
      var transformFunc = getTransform(source, destination);
      return transformFunc(coordinate, undefined, coordinate.length);
  }
  /**
   * Transforms an extent from source projection to destination projection.  This
   * returns a new extent (and does not modify the original).
   *
   * @param {import("./extent.js").Extent} extent The extent to transform.
   * @param {ProjectionLike} source Source projection-like.
   * @param {ProjectionLike} destination Destination projection-like.
   * @param {number=} opt_stops Number of stops per side used for the transform.
   * By default only the corners are used.
   * @return {import("./extent.js").Extent} The transformed extent.
   * @api
   */
  function transformExtent(extent, source, destination, opt_stops) {
      var transformFunc = getTransform(source, destination);
      return applyTransform(extent, transformFunc, undefined, opt_stops);
  }
  /**
   * @type {?Projection}
   */
  var userProjection = null;
  /**
   * Get the projection for coordinates supplied from and returned by API methods.
   * Note that this method is not yet a part of the stable API.  Support for user
   * projections is not yet complete and should be considered experimental.
   * @returns {?Projection} The user projection (or null if not set).
   */
  function getUserProjection() {
      return userProjection;
  }
  /**
   * Return a coordinate transformed into the user projection.  If no user projection
   * is set, the original coordinate is returned.
   * @param {Array<number>} coordinate Input coordinate.
   * @param {ProjectionLike} sourceProjection The input coordinate projection.
   * @returns {Array<number>} The input coordinate in the user projection.
   */
  function toUserCoordinate(coordinate, sourceProjection) {
      {
          return coordinate;
      }
  }
  /**
   * Return a coordinate transformed from the user projection.  If no user projection
   * is set, the original coordinate is returned.
   * @param {Array<number>} coordinate Input coordinate.
   * @param {ProjectionLike} destProjection The destination projection.
   * @returns {Array<number>} The input coordinate transformed.
   */
  function fromUserCoordinate(coordinate, destProjection) {
      {
          return coordinate;
      }
  }
  /**
   * Return an extent transformed into the user projection.  If no user projection
   * is set, the original extent is returned.
   * @param {import("./extent.js").Extent} extent Input extent.
   * @param {ProjectionLike} sourceProjection The input extent projection.
   * @returns {import("./extent.js").Extent} The input extent in the user projection.
   */
  function toUserExtent(extent, sourceProjection) {
      {
          return extent;
      }
  }
  /**
   * Return an extent transformed from the user projection.  If no user projection
   * is set, the original extent is returned.
   * @param {import("./extent.js").Extent} extent Input extent.
   * @param {ProjectionLike} destProjection The destination projection.
   * @returns {import("./extent.js").Extent} The input extent transformed.
   */
  function fromUserExtent(extent, destProjection) {
      {
          return extent;
      }
  }
  /**
   * Add transforms to and from EPSG:4326 and EPSG:3857.  This function is called
   * by when this module is executed and should only need to be called again after
   * `clearAllProjections()` is called (e.g. in tests).
   */
  function addCommon() {
      // Add transformations that don't alter coordinates to convert within set of
      // projections with equal meaning.
      addEquivalentProjections(PROJECTIONS);
      addEquivalentProjections(PROJECTIONS$1);
      // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like
      // coordinates and back.
      addEquivalentTransforms(PROJECTIONS$1, PROJECTIONS, fromEPSG4326, toEPSG4326);
  }
  addCommon();

  /**
   * @module ol/proj/proj4
   */
  /**
   * Make projections defined in proj4 (with `proj4.defs()`) available in
   * OpenLayers.
   *
   * This function should be called whenever changes are made to the proj4
   * registry, e.g. after calling `proj4.defs()`. Existing transforms will not be
   * modified by this function.
   *
   * @param {?} proj4 Proj4.
   * @api
   */
  function register(proj4) {
      var projCodes = Object.keys(proj4.defs);
      var len = projCodes.length;
      var i, j;
      for (i = 0; i < len; ++i) {
          var code = projCodes[i];
          if (!get$4(code)) {
              var def = proj4.defs(code);
              addProjection(new Projection({
                  code: code,
                  axisOrientation: def.axis,
                  metersPerUnit: def.to_meter,
                  units: def.units
              }));
          }
      }
      for (i = 0; i < len; ++i) {
          var code1 = projCodes[i];
          var proj1 = get$4(code1);
          for (j = 0; j < len; ++j) {
              var code2 = projCodes[j];
              var proj2 = get$4(code2);
              if (!get$2(code1, code2)) {
                  if (proj4.defs[code1] === proj4.defs[code2]) {
                      addEquivalentProjections([proj1, proj2]);
                  }
                  else {
                      var transform = proj4(code1, code2);
                      addCoordinateTransforms(proj1, proj2, transform.forward, transform.inverse);
                  }
              }
          }
      }
  }

  var proj4 = createCommonjsModule(function (module, exports) {
  !function(t,s){module.exports=s();}(commonjsGlobal,function(){function t(t,s){if(t[s])return t[s];for(var i,a=Object.keys(t),h=s.toLowerCase().replace(dt,""),e=-1;++e<a.length;)if(i=a[e],i.toLowerCase().replace(dt,"")===h)return t[i]}function s(t){if("string"!=typeof t)throw new Error("not a string");this.text=t.trim(),this.level=0,this.place=0,this.root=null,this.stack=[],this.currentObject=null,this.state=_t;}function i(t){return new s(t).output()}function a(t,s,i){Array.isArray(s)&&(i.unshift(s),s=null);var a=s?{}:t,e=i.reduce(function(t,s){return h(s,t),t},a);s&&(t[s]=e);}function h(t,s){if(Array.isArray(t)){var i=t.shift();if("PARAMETER"===i&&(i=t.shift()),1===t.length)return Array.isArray(t[0])?(s[i]={},void h(t[0],s[i])):void(s[i]=t[0]);if(t.length)if("TOWGS84"!==i){if("AXIS"===i)return i in s||(s[i]=[]),void s[i].push(t);Array.isArray(i)||(s[i]={});var e;switch(i){case"UNIT":case"PRIMEM":case"VERT_DATUM":return s[i]={name:t[0].toLowerCase(),convert:t[1]},void(3===t.length&&h(t[2],s[i]));case"SPHEROID":case"ELLIPSOID":return s[i]={name:t[0],a:t[1],rf:t[2]},void(4===t.length&&h(t[3],s[i]));case"PROJECTEDCRS":case"PROJCRS":case"GEOGCS":case"GEOCCS":case"PROJCS":case"LOCAL_CS":case"GEODCRS":case"GEODETICCRS":case"GEODETICDATUM":case"EDATUM":case"ENGINEERINGDATUM":case"VERT_CS":case"VERTCRS":case"VERTICALCRS":case"COMPD_CS":case"COMPOUNDCRS":case"ENGINEERINGCRS":case"ENGCRS":case"FITTED_CS":case"LOCAL_DATUM":case"DATUM":return t[0]=["name",t[0]],void a(s,i,t);default:for(e=-1;++e<t.length;)if(!Array.isArray(t[e]))return h(t,s[i]);return a(s,i,t)}}else s[i]=t;else s[i]=!0;}else s[t]=!0;}function e(t,s){var i=s[0],a=s[1];!(i in t)&&a in t&&(t[i]=t[a],3===s.length&&(t[i]=s[2](t[i])));}function n(t){return t*At}function r(t){function s(s){return s*(t.to_meter||1)}if("GEOGCS"===t.type?t.projName="longlat":"LOCAL_CS"===t.type?(t.projName="identity",t.local=!0):"object"==typeof t.PROJECTION?t.projName=Object.keys(t.PROJECTION)[0]:t.projName=t.PROJECTION,t.AXIS){for(var i="",a=0,h=t.AXIS.length;a<h;++a){var r=t.AXIS[a][0].toLowerCase();-1!==r.indexOf("north")?i+="n":-1!==r.indexOf("south")?i+="s":-1!==r.indexOf("east")?i+="e":-1!==r.indexOf("west")&&(i+="w");}2===i.length&&(i+="u"),3===i.length&&(t.axis=i);}t.UNIT&&(t.units=t.UNIT.name.toLowerCase(),"metre"===t.units&&(t.units="meter"),t.UNIT.convert&&("GEOGCS"===t.type?t.DATUM&&t.DATUM.SPHEROID&&(t.to_meter=t.UNIT.convert*t.DATUM.SPHEROID.a):t.to_meter=t.UNIT.convert));var o=t.GEOGCS;"GEOGCS"===t.type&&(o=t),o&&(o.DATUM?t.datumCode=o.DATUM.name.toLowerCase():t.datumCode=o.name.toLowerCase(),"d_"===t.datumCode.slice(0,2)&&(t.datumCode=t.datumCode.slice(2)),"new_zealand_geodetic_datum_1949"!==t.datumCode&&"new_zealand_1949"!==t.datumCode||(t.datumCode="nzgd49"),"wgs_1984"!==t.datumCode&&"world_geodetic_system_1984"!==t.datumCode||("Mercator_Auxiliary_Sphere"===t.PROJECTION&&(t.sphere=!0),t.datumCode="wgs84"),"_ferro"===t.datumCode.slice(-6)&&(t.datumCode=t.datumCode.slice(0,-6)),"_jakarta"===t.datumCode.slice(-8)&&(t.datumCode=t.datumCode.slice(0,-8)),~t.datumCode.indexOf("belge")&&(t.datumCode="rnb72"),o.DATUM&&o.DATUM.SPHEROID&&(t.ellps=o.DATUM.SPHEROID.name.replace("_19","").replace(/[Cc]larke\_18/,"clrk"),"international"===t.ellps.toLowerCase().slice(0,13)&&(t.ellps="intl"),t.a=o.DATUM.SPHEROID.a,t.rf=parseFloat(o.DATUM.SPHEROID.rf,10)),o.DATUM&&o.DATUM.TOWGS84&&(t.datum_params=o.DATUM.TOWGS84),~t.datumCode.indexOf("osgb_1936")&&(t.datumCode="osgb36"),~t.datumCode.indexOf("osni_1952")&&(t.datumCode="osni52"),(~t.datumCode.indexOf("tm65")||~t.datumCode.indexOf("geodetic_datum_of_1965"))&&(t.datumCode="ire65"),"ch1903+"===t.datumCode&&(t.datumCode="ch1903"),~t.datumCode.indexOf("israel")&&(t.datumCode="isr93")),t.b&&!isFinite(t.b)&&(t.b=t.a);[["standard_parallel_1","Standard_Parallel_1"],["standard_parallel_2","Standard_Parallel_2"],["false_easting","False_Easting"],["false_northing","False_Northing"],["central_meridian","Central_Meridian"],["latitude_of_origin","Latitude_Of_Origin"],["latitude_of_origin","Central_Parallel"],["scale_factor","Scale_Factor"],["k0","scale_factor"],["latitude_of_center","Latitude_Of_Center"],["latitude_of_center","Latitude_of_center"],["lat0","latitude_of_center",n],["longitude_of_center","Longitude_Of_Center"],["longitude_of_center","Longitude_of_center"],["longc","longitude_of_center",n],["x0","false_easting",s],["y0","false_northing",s],["long0","central_meridian",n],["lat0","latitude_of_origin",n],["lat0","standard_parallel_1",n],["lat1","standard_parallel_1",n],["lat2","standard_parallel_2",n],["azimuth","Azimuth"],["alpha","azimuth",n],["srsCode","name"]].forEach(function(s){return e(t,s)}),t.long0||!t.longc||"Albers_Conic_Equal_Area"!==t.projName&&"Lambert_Azimuthal_Equal_Area"!==t.projName||(t.long0=t.longc),t.lat_ts||!t.lat1||"Stereographic_South_Pole"!==t.projName&&"Polar Stereographic (variant B)"!==t.projName||(t.lat0=n(t.lat1>0?90:-90),t.lat_ts=t.lat1);}function o(t){var s=this;if(2===arguments.length){var i=arguments[1];"string"==typeof i?"+"===i.charAt(0)?o[t]=yt(arguments[1]):o[t]=Ct(arguments[1]):o[t]=i;}else if(1===arguments.length){if(Array.isArray(t))return t.map(function(t){Array.isArray(t)?o.apply(s,t):o(t);});if("string"==typeof t){if(t in o)return o[t]}else "EPSG"in t?o["EPSG:"+t.EPSG]=t:"ESRI"in t?o["ESRI:"+t.ESRI]=t:"IAU2000"in t?o["IAU2000:"+t.IAU2000]=t:console.log(t);return}}function l(t){return "string"==typeof t}function M(t){return t in o}function c(t){return Et.some(function(s){return t.indexOf(s)>-1})}function u(s){var i=t(s,"authority");if(i){var a=t(i,"epsg");return a&&Pt.indexOf(a)>-1}}function f(s){var i=t(s,"extension");if(i)return t(i,"proj4")}function m(t){return "+"===t[0]}function p(t){if(!l(t))return t;if(M(t))return o[t];if(c(t)){var s=Ct(t);if(u(s))return o["EPSG:3857"];var i=f(s);return i?yt(i):s}return m(t)?yt(t):void 0}function d(t){return t}function y(t,s){var i=Tt.length;return t.names?(Tt[i]=t,t.names.forEach(function(t){Gt[t.toLowerCase()]=i;}),this):(console.log(s),!0)}function _(t,s,i,a){var h=t*t,e=s*s,n=(h-e)/h,r=0;return a?(h=(t*=1-n*(et+n*(nt+n*rt)))*t,n=0):r=Math.sqrt(n),{es:n,e:r,ep2:(h-e)/e}}function x(s,i,a,h,e){if(!s){var n=t(zt,h);n||(n=Lt),s=n.a,i=n.b,a=n.rf;}return a&&!i&&(i=(1-1/a)*s),(0===a||Math.abs(s-i)<ot)&&(e=!0,i=s),{a:s,b:i,rf:a,sphere:e}}function v(t,s,i,a,h,e){var n={};return n.datum_type=void 0===t||"none"===t?it:st,s&&(n.datum_params=s.map(parseFloat),0===n.datum_params[0]&&0===n.datum_params[1]&&0===n.datum_params[2]||(n.datum_type=$),n.datum_params.length>3&&(0===n.datum_params[3]&&0===n.datum_params[4]&&0===n.datum_params[5]&&0===n.datum_params[6]||(n.datum_type=tt,n.datum_params[3]*=at,n.datum_params[4]*=at,n.datum_params[5]*=at,n.datum_params[6]=n.datum_params[6]/1e6+1))),n.a=i,n.b=a,n.es=h,n.ep2=e,n}function Projection(s,i){if(!(this instanceof Projection))return new Projection(s);i=i||function(t){if(t)throw t};var a=p(s);if("object"==typeof a){var h=Projection.projections.get(a.projName);if(h){if(a.datumCode&&"none"!==a.datumCode){var e=t(Dt,a.datumCode);e&&(a.datum_params=e.towgs84?e.towgs84.split(","):null,a.ellps=e.ellipse,a.datumName=e.datumName?e.datumName:a.datumCode);}a.k0=a.k0||1,a.axis=a.axis||"enu",a.ellps=a.ellps||"wgs84";var n=x(a.a,a.b,a.rf,a.ellps,a.sphere),r=_(n.a,n.b,n.rf,a.R_A),o=a.datum||v(a.datumCode,a.datum_params,n.a,n.b,r.es,r.ep2);Nt(this,a),Nt(this,h),this.a=n.a,this.b=n.b,this.rf=n.rf,this.sphere=n.sphere,this.es=r.es,this.e=r.e,this.ep2=r.ep2,this.datum=o,this.init(),i(null,this);}else i(s);}else i(s);}function g(t,s){return t.datum_type===s.datum_type&&(!(t.a!==s.a||Math.abs(t.es-s.es)>5e-11)&&(t.datum_type===$?t.datum_params[0]===s.datum_params[0]&&t.datum_params[1]===s.datum_params[1]&&t.datum_params[2]===s.datum_params[2]:t.datum_type!==tt||t.datum_params[0]===s.datum_params[0]&&t.datum_params[1]===s.datum_params[1]&&t.datum_params[2]===s.datum_params[2]&&t.datum_params[3]===s.datum_params[3]&&t.datum_params[4]===s.datum_params[4]&&t.datum_params[5]===s.datum_params[5]&&t.datum_params[6]===s.datum_params[6]))}function b(t,s,i){var a,h,e,n,r=t.x,o=t.y,l=t.z?t.z:0;if(o<-ht&&o>-1.001*ht)o=-ht;else if(o>ht&&o<1.001*ht)o=ht;else {if(o<-ht)return {x:-1/0,y:-1/0,z:t.z};if(o>ht)return {x:1/0,y:1/0,z:t.z}}return r>Math.PI&&(r-=2*Math.PI),h=Math.sin(o),n=Math.cos(o),e=h*h,a=i/Math.sqrt(1-s*e),{x:(a+l)*n*Math.cos(r),y:(a+l)*n*Math.sin(r),z:(a*(1-s)+l)*h}}function w(t,s,i,a){var h,e,n,r,o,l,M,c,u,f,m,p,d,y,_,x,v=t.x,g=t.y,b=t.z?t.z:0;if(h=Math.sqrt(v*v+g*g),e=Math.sqrt(v*v+g*g+b*b),h/i<1e-12){if(y=0,e/i<1e-12)return _=ht,x=-a,{x:t.x,y:t.y,z:t.z}}else y=Math.atan2(g,v);n=b/e,c=(r=h/e)*(1-s)*(o=1/Math.sqrt(1-s*(2-s)*r*r)),u=n*o,d=0;do{d++,l=s*(M=i/Math.sqrt(1-s*u*u))/(M+(x=h*c+b*u-M*(1-s*u*u))),p=(m=n*(o=1/Math.sqrt(1-l*(2-l)*r*r)))*c-(f=r*(1-l)*o)*u,c=f,u=m;}while(p*p>1e-24&&d<30);return _=Math.atan(m/Math.abs(f)),{x:y,y:_,z:x}}function A(t,s,i){if(s===$)return {x:t.x+i[0],y:t.y+i[1],z:t.z+i[2]};if(s===tt){var a=i[0],h=i[1],e=i[2],n=i[3],r=i[4],o=i[5],l=i[6];return {x:l*(t.x-o*t.y+r*t.z)+a,y:l*(o*t.x+t.y-n*t.z)+h,z:l*(-r*t.x+n*t.y+t.z)+e}}}function C(t,s,i){if(s===$)return {x:t.x-i[0],y:t.y-i[1],z:t.z-i[2]};if(s===tt){var a=i[0],h=i[1],e=i[2],n=i[3],r=i[4],o=i[5],l=i[6],M=(t.x-a)/l,c=(t.y-h)/l,u=(t.z-e)/l;return {x:M+o*c-r*u,y:-o*M+c+n*u,z:r*M-n*c+u}}}function E(t){return t===$||t===tt}function P(t){if("function"==typeof Number.isFinite){if(Number.isFinite(t))return;throw new TypeError("coordinates must be finite numbers")}if("number"!=typeof t||t!==t||!isFinite(t))throw new TypeError("coordinates must be finite numbers")}function N(t,s){return (t.datum.datum_type===$||t.datum.datum_type===tt)&&"WGS84"!==s.datumCode||(s.datum.datum_type===$||s.datum.datum_type===tt)&&"WGS84"!==t.datumCode}function S(t,s,i){var a;return Array.isArray(i)&&(i=Ft(i)),Qt(i),t.datum&&s.datum&&N(t,s)&&(i=S(t,a=new Projection("WGS84"),i),t=a),"enu"!==t.axis&&(i=Ut(t,!1,i)),"longlat"===t.projName?i={x:i.x*lt,y:i.y*lt,z:i.z||0}:(t.to_meter&&(i={x:i.x*t.to_meter,y:i.y*t.to_meter,z:i.z||0}),i=t.inverse(i)),t.from_greenwich&&(i.x+=t.from_greenwich),i=Bt(t.datum,s.datum,i),s.from_greenwich&&(i={x:i.x-s.from_greenwich,y:i.y,z:i.z||0}),"longlat"===s.projName?i={x:i.x*Mt,y:i.y*Mt,z:i.z||0}:(i=s.forward(i),s.to_meter&&(i={x:i.x/s.to_meter,y:i.y/s.to_meter,z:i.z||0})),"enu"!==s.axis?Ut(s,!0,i):i}function k(t,s,i){var a,h,e;return Array.isArray(i)?(a=S(t,s,i)||{x:NaN,y:NaN},i.length>2?void 0!==t.name&&"geocent"===t.name||void 0!==s.name&&"geocent"===s.name?"number"==typeof a.z?[a.x,a.y,a.z].concat(i.splice(3)):[a.x,a.y,i[2]].concat(i.splice(3)):[a.x,a.y].concat(i.splice(2)):[a.x,a.y]):(h=S(t,s,i),2===(e=Object.keys(i)).length?h:(e.forEach(function(a){if(void 0!==t.name&&"geocent"===t.name||void 0!==s.name&&"geocent"===s.name){if("x"===a||"y"===a||"z"===a)return}else if("x"===a||"y"===a)return;h[a]=i[a];}),h))}function q(t){return t instanceof Projection?t:t.oProj?t.oProj:Projection(t)}function I(t,s,i){t=q(t);var a,h=!1;return void 0===s?(s=t,t=Wt,h=!0):(void 0!==s.x||Array.isArray(s))&&(i=s,s=t,t=Wt,h=!0),s=q(s),i?k(t,s,i):(a={forward:function(i){return k(t,s,i)},inverse:function(i){return k(s,t,i)}},h&&(a.oProj=s),a)}function O(t,s){return s=s||5,D(j({lat:t[1],lon:t[0]}),s)}function R(t){var s=z(Q(t.toUpperCase()));return s.lat&&s.lon?[s.lon,s.lat]:[(s.left+s.right)/2,(s.top+s.bottom)/2]}function G(t){return t*(Math.PI/180)}function T(t){return t/Math.PI*180}function j(t){var s,i,a,h,e,n,r,o=t.lat,l=t.lon,M=6378137,c=G(o),u=G(l);r=Math.floor((l+180)/6)+1,180===l&&(r=60),o>=56&&o<64&&l>=3&&l<12&&(r=32),o>=72&&o<84&&(l>=0&&l<9?r=31:l>=9&&l<21?r=33:l>=21&&l<33?r=35:l>=33&&l<42&&(r=37)),n=G(6*(r-1)-180+3),s=M/Math.sqrt(1-.00669438*Math.sin(c)*Math.sin(c)),i=Math.tan(c)*Math.tan(c),a=.006739496752268451*Math.cos(c)*Math.cos(c);var f=.9996*s*((h=Math.cos(c)*(u-n))+(1-i+a)*h*h*h/6+(5-18*i+i*i+72*a-.39089081163157013)*h*h*h*h*h/120)+5e5,m=.9996*((e=M*(.9983242984503243*c-.002514607064228144*Math.sin(2*c)+2639046602129982e-21*Math.sin(4*c)-3.418046101696858e-9*Math.sin(6*c)))+s*Math.tan(c)*(h*h/2+(5-i+9*a+4*a*a)*h*h*h*h/24+(61-58*i+i*i+600*a-2.2240339282485886)*h*h*h*h*h*h/720));return o<0&&(m+=1e7),{northing:Math.round(m),easting:Math.round(f),zoneNumber:r,zoneLetter:L(o)}}function z(t){var s=t.northing,i=t.easting,a=t.zoneLetter,h=t.zoneNumber;if(h<0||h>60)return null;var e,n,r,o,l,M,c,u,f=6378137,m=(1-Math.sqrt(.99330562))/(1+Math.sqrt(.99330562)),p=i-5e5,d=s;a<"N"&&(d-=1e7),M=6*(h-1)-180+3,u=(c=d/.9996/6367449.145945056)+(3*m/2-27*m*m*m/32)*Math.sin(2*c)+(21*m*m/16-55*m*m*m*m/32)*Math.sin(4*c)+151*m*m*m/96*Math.sin(6*c),e=f/Math.sqrt(1-.00669438*Math.sin(u)*Math.sin(u)),n=Math.tan(u)*Math.tan(u),r=.006739496752268451*Math.cos(u)*Math.cos(u),o=.99330562*f/Math.pow(1-.00669438*Math.sin(u)*Math.sin(u),1.5),l=p/(.9996*e);var y=u-e*Math.tan(u)/o*(l*l/2-(5+3*n+10*r-4*r*r-.06065547077041606)*l*l*l*l/24+(61+90*n+298*r+45*n*n-1.6983531815716497-3*r*r)*l*l*l*l*l*l/720);y=T(y);var _=(l-(1+2*n+r)*l*l*l/6+(5-2*r+28*n-3*r*r+.05391597401814761+24*n*n)*l*l*l*l*l/120)/Math.cos(u);_=M+T(_);var x;if(t.accuracy){var v=z({northing:t.northing+t.accuracy,easting:t.easting+t.accuracy,zoneLetter:t.zoneLetter,zoneNumber:t.zoneNumber});x={top:v.lat,right:v.lon,bottom:y,left:_};}else x={lat:y,lon:_};return x}function L(t){var s="Z";return 84>=t&&t>=72?s="X":72>t&&t>=64?s="W":64>t&&t>=56?s="V":56>t&&t>=48?s="U":48>t&&t>=40?s="T":40>t&&t>=32?s="S":32>t&&t>=24?s="R":24>t&&t>=16?s="Q":16>t&&t>=8?s="P":8>t&&t>=0?s="N":0>t&&t>=-8?s="M":-8>t&&t>=-16?s="L":-16>t&&t>=-24?s="K":-24>t&&t>=-32?s="J":-32>t&&t>=-40?s="H":-40>t&&t>=-48?s="G":-48>t&&t>=-56?s="F":-56>t&&t>=-64?s="E":-64>t&&t>=-72?s="D":-72>t&&t>=-80&&(s="C"),s}function D(t,s){var i="00000"+t.easting,a="00000"+t.northing;return t.zoneNumber+t.zoneLetter+B(t.easting,t.northing,t.zoneNumber)+i.substr(i.length-5,s)+a.substr(a.length-5,s)}function B(t,s,i){var a=U(i);return F(Math.floor(t/1e5),Math.floor(s/1e5)%20,a)}function U(t){var s=t%Ht;return 0===s&&(s=Ht),s}function F(t,s,i){var a=i-1,h=Xt.charCodeAt(a),e=Kt.charCodeAt(a),n=h+t-1,r=e+s,o=!1;return n>$t&&(n=n-$t+Jt-1,o=!0),(n===Vt||h<Vt&&n>Vt||(n>Vt||h<Vt)&&o)&&n++,(n===Zt||h<Zt&&n>Zt||(n>Zt||h<Zt)&&o)&&++n===Vt&&n++,n>$t&&(n=n-$t+Jt-1),r>Yt?(r=r-Yt+Jt-1,o=!0):o=!1,(r===Vt||e<Vt&&r>Vt||(r>Vt||e<Vt)&&o)&&r++,(r===Zt||e<Zt&&r>Zt||(r>Zt||e<Zt)&&o)&&++r===Vt&&r++,r>Yt&&(r=r-Yt+Jt-1),String.fromCharCode(n)+String.fromCharCode(r)}function Q(t){if(t&&0===t.length)throw "MGRSPoint coverting from nothing";for(var s,i=t.length,a=null,h="",e=0;!/[A-Z]/.test(s=t.charAt(e));){if(e>=2)throw "MGRSPoint bad conversion from: "+t;h+=s,e++;}var n=parseInt(h,10);if(0===e||e+3>i)throw "MGRSPoint bad conversion from: "+t;var r=t.charAt(e++);if(r<="A"||"B"===r||"Y"===r||r>="Z"||"I"===r||"O"===r)throw "MGRSPoint zone letter "+r+" not handled: "+t;a=t.substring(e,e+=2);for(var o=U(n),l=W(a.charAt(0),o),M=H(a.charAt(1),o);M<X(r);)M+=2e6;var c=i-e;if(c%2!=0)throw "MGRSPoint has to have an even number \nof digits after the zone letter and two 100km letters - front \nhalf for easting meters, second half for \nnorthing meters"+t;var u,f,m,p,d,y=c/2,_=0,x=0;return y>0&&(u=1e5/Math.pow(10,y),f=t.substring(e,e+y),_=parseFloat(f)*u,m=t.substring(e+y),x=parseFloat(m)*u),p=_+l,d=x+M,{easting:p,northing:d,zoneLetter:r,zoneNumber:n,accuracy:u}}function W(t,s){for(var i=Xt.charCodeAt(s-1),a=1e5,h=!1;i!==t.charCodeAt(0);){if(++i===Vt&&i++,i===Zt&&i++,i>$t){if(h)throw "Bad character: "+t;i=Jt,h=!0;}a+=1e5;}return a}function H(t,s){if(t>"V")throw "MGRSPoint given invalid Northing "+t;for(var i=Kt.charCodeAt(s-1),a=0,h=!1;i!==t.charCodeAt(0);){if(++i===Vt&&i++,i===Zt&&i++,i>Yt){if(h)throw "Bad character: "+t;i=Jt,h=!0;}a+=1e5;}return a}function X(t){var s;switch(t){case"C":s=11e5;break;case"D":s=2e6;break;case"E":s=28e5;break;case"F":s=37e5;break;case"G":s=46e5;break;case"H":s=55e5;break;case"J":s=64e5;break;case"K":s=73e5;break;case"L":s=82e5;break;case"M":s=91e5;break;case"N":s=0;break;case"P":s=8e5;break;case"Q":s=17e5;break;case"R":s=26e5;break;case"S":s=35e5;break;case"T":s=44e5;break;case"U":s=53e5;break;case"V":s=62e5;break;case"W":s=7e6;break;case"X":s=79e5;break;default:s=-1;}if(s>=0)return s;throw "Invalid zone letter: "+t}function Point(t,s,i){if(!(this instanceof Point))return new Point(t,s,i);if(Array.isArray(t))this.x=t[0],this.y=t[1],this.z=t[2]||0;else if("object"==typeof t)this.x=t.x,this.y=t.y,this.z=t.z||0;else if("string"==typeof t&&void 0===s){var a=t.split(",");this.x=parseFloat(a[0],10),this.y=parseFloat(a[1],10),this.z=parseFloat(a[2],10)||0;}else this.x=t,this.y=s,this.z=i||0;console.warn("proj4.Point will be removed in version 3, use proj4.toPoint");}function K(t){var s,i=[];return i[0]=t*Ts,s=t*t,i[0]+=s*js,i[1]=s*Ls,s*=t,i[0]+=s*zs,i[1]+=s*Ds,i[2]=s*Bs,i}function J(t,s){var i=t+t;return t+s[0]*Math.sin(i)+s[1]*Math.sin(i+i)+s[2]*Math.sin(i+i+i)}function V(t,s,i,a){var h;return t<ot?(a.value=ri.AREA_0,h=0):(h=Math.atan2(s,i),Math.abs(h)<=ct?a.value=ri.AREA_0:h>ct&&h<=ht+ct?(a.value=ri.AREA_1,h-=ht):h>ht+ct||h<=-(ht+ct)?(a.value=ri.AREA_2,h=h>=0?h-ft:h+ft):(a.value=ri.AREA_3,h+=ht)),h}function Z(t,s){var i=t+s;return i<-ft?i+=ut:i>+ft&&(i-=ut),i}function Y(t,s,i,a){for(var h=s;a;--a){var e=t(h);if(h-=e,Math.abs(e)<i)break}return h}var $=1,tt=2,st=4,it=5,at=484813681109536e-20,ht=Math.PI/2,et=.16666666666666666,nt=.04722222222222222,rt=.022156084656084655,ot=1e-10,lt=.017453292519943295,Mt=57.29577951308232,ct=Math.PI/4,ut=2*Math.PI,ft=3.14159265359,mt={};mt.greenwich=0,mt.lisbon=-9.131906111111,mt.paris=2.337229166667,mt.bogota=-74.080916666667,mt.madrid=-3.687938888889,mt.rome=12.452333333333,mt.bern=7.439583333333,mt.jakarta=106.807719444444,mt.ferro=-17.666666666667,mt.brussels=4.367975,mt.stockholm=18.058277777778,mt.athens=23.7163375,mt.oslo=10.722916666667;var pt={ft:{to_meter:.3048},"us-ft":{to_meter:1200/3937}},dt=/[\s_\-\/\(\)]/g,yt=function(s){var i,a,h,e={},n=s.split("+").map(function(t){return t.trim()}).filter(function(t){return t}).reduce(function(t,s){var i=s.split("=");return i.push(!0),t[i[0].toLowerCase()]=i[1],t},{}),r={proj:"projName",datum:"datumCode",rf:function(t){e.rf=parseFloat(t);},lat_0:function(t){e.lat0=t*lt;},lat_1:function(t){e.lat1=t*lt;},lat_2:function(t){e.lat2=t*lt;},lat_ts:function(t){e.lat_ts=t*lt;},lon_0:function(t){e.long0=t*lt;},lon_1:function(t){e.long1=t*lt;},lon_2:function(t){e.long2=t*lt;},alpha:function(t){e.alpha=parseFloat(t)*lt;},lonc:function(t){e.longc=t*lt;},x_0:function(t){e.x0=parseFloat(t);},y_0:function(t){e.y0=parseFloat(t);},k_0:function(t){e.k0=parseFloat(t);},k:function(t){e.k0=parseFloat(t);},a:function(t){e.a=parseFloat(t);},b:function(t){e.b=parseFloat(t);},r_a:function(){e.R_A=!0;},zone:function(t){e.zone=parseInt(t,10);},south:function(){e.utmSouth=!0;},towgs84:function(t){e.datum_params=t.split(",").map(function(t){return parseFloat(t)});},to_meter:function(t){e.to_meter=parseFloat(t);},units:function(s){e.units=s;var i=t(pt,s);i&&(e.to_meter=i.to_meter);},from_greenwich:function(t){e.from_greenwich=t*lt;},pm:function(s){var i=t(mt,s);e.from_greenwich=(i||parseFloat(s))*lt;},nadgrids:function(t){"@null"===t?e.datumCode="none":e.nadgrids=t;},axis:function(t){3===t.length&&-1!=="ewnsud".indexOf(t.substr(0,1))&&-1!=="ewnsud".indexOf(t.substr(1,1))&&-1!=="ewnsud".indexOf(t.substr(2,1))&&(e.axis=t);}};for(i in n)a=n[i],i in r?"function"==typeof(h=r[i])?h(a):e[h]=a:e[i]=a;return "string"==typeof e.datumCode&&"WGS84"!==e.datumCode&&(e.datumCode=e.datumCode.toLowerCase()),e},_t=1,xt=/\s/,vt=/[A-Za-z]/,gt=/[A-Za-z84]/,bt=/[,\]]/,wt=/[\d\.E\-\+]/;s.prototype.readCharicter=function(){var t=this.text[this.place++];if(4!==this.state)for(;xt.test(t);){if(this.place>=this.text.length)return;t=this.text[this.place++];}switch(this.state){case _t:return this.neutral(t);case 2:return this.keyword(t);case 4:return this.quoted(t);case 5:return this.afterquote(t);case 3:return this.number(t);case-1:return}},s.prototype.afterquote=function(t){if('"'===t)return this.word+='"',void(this.state=4);if(bt.test(t))return this.word=this.word.trim(),void this.afterItem(t);throw new Error("havn't handled \""+t+'" in afterquote yet, index '+this.place)},s.prototype.afterItem=function(t){return ","===t?(null!==this.word&&this.currentObject.push(this.word),this.word=null,void(this.state=_t)):"]"===t?(this.level--,null!==this.word&&(this.currentObject.push(this.word),this.word=null),this.state=_t,this.currentObject=this.stack.pop(),void(this.currentObject||(this.state=-1))):void 0},s.prototype.number=function(t){if(!wt.test(t)){if(bt.test(t))return this.word=parseFloat(this.word),void this.afterItem(t);throw new Error("havn't handled \""+t+'" in number yet, index '+this.place)}this.word+=t;},s.prototype.quoted=function(t){'"'!==t?this.word+=t:this.state=5;},s.prototype.keyword=function(t){if(gt.test(t))this.word+=t;else {if("["===t){var s=[];return s.push(this.word),this.level++,null===this.root?this.root=s:this.currentObject.push(s),this.stack.push(this.currentObject),this.currentObject=s,void(this.state=_t)}if(!bt.test(t))throw new Error("havn't handled \""+t+'" in keyword yet, index '+this.place);this.afterItem(t);}},s.prototype.neutral=function(t){if(vt.test(t))return this.word=t,void(this.state=2);if('"'===t)return this.word="",void(this.state=4);if(wt.test(t))return this.word=t,void(this.state=3);{if(!bt.test(t))throw new Error("havn't handled \""+t+'" in neutral yet, index '+this.place);this.afterItem(t);}},s.prototype.output=function(){for(;this.place<this.text.length;)this.readCharicter();if(-1===this.state)return this.root;throw new Error('unable to parse string "'+this.text+'". State is '+this.state)};var At=.017453292519943295,Ct=function(t){var s=i(t),a=s.shift(),e=s.shift();s.unshift(["name",e]),s.unshift(["type",a]);var n={};return h(s,n),r(n),n};!function(t){t("EPSG:4326","+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees"),t("EPSG:4269","+title=NAD83 (long/lat) +proj=longlat +a=6378137.0 +b=6356752.31414036 +ellps=GRS80 +datum=NAD83 +units=degrees"),t("EPSG:3857","+title=WGS 84 / Pseudo-Mercator +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs"),t.WGS84=t["EPSG:4326"],t["EPSG:3785"]=t["EPSG:3857"],t.GOOGLE=t["EPSG:3857"],t["EPSG:900913"]=t["EPSG:3857"],t["EPSG:102113"]=t["EPSG:3857"];}(o);var Et=["PROJECTEDCRS","PROJCRS","GEOGCS","GEOCCS","PROJCS","LOCAL_CS","GEODCRS","GEODETICCRS","GEODETICDATUM","ENGCRS","ENGINEERINGCRS"],Pt=["3857","900913","3785","102113"],Nt=function(t,s){t=t||{};var i,a;if(!s)return t;for(a in s)void 0!==(i=s[a])&&(t[a]=i);return t},St=function(t,s,i){var a=t*s;return i/Math.sqrt(1-a*a)},kt=function(t){return t<0?-1:1},qt=function(t){return Math.abs(t)<=ft?t:t-kt(t)*ut},It=function(t,s,i){var a=t*i,h=.5*t;return a=Math.pow((1-a)/(1+a),h),Math.tan(.5*(ht-s))/a},Ot=function(t,s){for(var i,a,h=.5*t,e=ht-2*Math.atan(s),n=0;n<=15;n++)if(i=t*Math.sin(e),a=ht-2*Math.atan(s*Math.pow((1-i)/(1+i),h))-e,e+=a,Math.abs(a)<=1e-10)return e;return -9999},Rt=[{init:function(){var t=this.b/this.a;this.es=1-t*t,"x0"in this||(this.x0=0),"y0"in this||(this.y0=0),this.e=Math.sqrt(this.es),this.lat_ts?this.sphere?this.k0=Math.cos(this.lat_ts):this.k0=St(this.e,Math.sin(this.lat_ts),Math.cos(this.lat_ts)):this.k0||(this.k?this.k0=this.k:this.k0=1);},forward:function(t){var s=t.x,i=t.y;if(i*Mt>90&&i*Mt<-90&&s*Mt>180&&s*Mt<-180)return null;var a,h;if(Math.abs(Math.abs(i)-ht)<=ot)return null;if(this.sphere)a=this.x0+this.a*this.k0*qt(s-this.long0),h=this.y0+this.a*this.k0*Math.log(Math.tan(ct+.5*i));else {var e=Math.sin(i),n=It(this.e,i,e);a=this.x0+this.a*this.k0*qt(s-this.long0),h=this.y0-this.a*this.k0*Math.log(n);}return t.x=a,t.y=h,t},inverse:function(t){var s,i,a=t.x-this.x0,h=t.y-this.y0;if(this.sphere)i=ht-2*Math.atan(Math.exp(-h/(this.a*this.k0)));else {var e=Math.exp(-h/(this.a*this.k0));if(-9999===(i=Ot(this.e,e)))return null}return s=qt(this.long0+a/(this.a*this.k0)),t.x=s,t.y=i,t},names:["Mercator","Popular Visualisation Pseudo Mercator","Mercator_1SP","Mercator_Auxiliary_Sphere","merc"]},{init:function(){},forward:d,inverse:d,names:["longlat","identity"]}],Gt={},Tt=[],jt={start:function(){Rt.forEach(y);},add:y,get:function(t){if(!t)return !1;var s=t.toLowerCase();return void 0!==Gt[s]&&Tt[Gt[s]]?Tt[Gt[s]]:void 0}},zt={};zt.MERIT={a:6378137,rf:298.257,ellipseName:"MERIT 1983"},zt.SGS85={a:6378136,rf:298.257,ellipseName:"Soviet Geodetic System 85"},zt.GRS80={a:6378137,rf:298.257222101,ellipseName:"GRS 1980(IUGG, 1980)"},zt.IAU76={a:6378140,rf:298.257,ellipseName:"IAU 1976"},zt.airy={a:6377563.396,b:6356256.91,ellipseName:"Airy 1830"},zt.APL4={a:6378137,rf:298.25,ellipseName:"Appl. Physics. 1965"},zt.NWL9D={a:6378145,rf:298.25,ellipseName:"Naval Weapons Lab., 1965"},zt.mod_airy={a:6377340.189,b:6356034.446,ellipseName:"Modified Airy"},zt.andrae={a:6377104.43,rf:300,ellipseName:"Andrae 1876 (Den., Iclnd.)"},zt.aust_SA={a:6378160,rf:298.25,ellipseName:"Australian Natl & S. Amer. 1969"},zt.GRS67={a:6378160,rf:298.247167427,ellipseName:"GRS 67(IUGG 1967)"},zt.bessel={a:6377397.155,rf:299.1528128,ellipseName:"Bessel 1841"},zt.bess_nam={a:6377483.865,rf:299.1528128,ellipseName:"Bessel 1841 (Namibia)"},zt.clrk66={a:6378206.4,b:6356583.8,ellipseName:"Clarke 1866"},zt.clrk80={a:6378249.145,rf:293.4663,ellipseName:"Clarke 1880 mod."},zt.clrk58={a:6378293.645208759,rf:294.2606763692654,ellipseName:"Clarke 1858"},zt.CPM={a:6375738.7,rf:334.29,ellipseName:"Comm. des Poids et Mesures 1799"},zt.delmbr={a:6376428,rf:311.5,ellipseName:"Delambre 1810 (Belgium)"},zt.engelis={a:6378136.05,rf:298.2566,ellipseName:"Engelis 1985"},zt.evrst30={a:6377276.345,rf:300.8017,ellipseName:"Everest 1830"},zt.evrst48={a:6377304.063,rf:300.8017,ellipseName:"Everest 1948"},zt.evrst56={a:6377301.243,rf:300.8017,ellipseName:"Everest 1956"},zt.evrst69={a:6377295.664,rf:300.8017,ellipseName:"Everest 1969"},zt.evrstSS={a:6377298.556,rf:300.8017,ellipseName:"Everest (Sabah & Sarawak)"},zt.fschr60={a:6378166,rf:298.3,ellipseName:"Fischer (Mercury Datum) 1960"},zt.fschr60m={a:6378155,rf:298.3,ellipseName:"Fischer 1960"},zt.fschr68={a:6378150,rf:298.3,ellipseName:"Fischer 1968"},zt.helmert={a:6378200,rf:298.3,ellipseName:"Helmert 1906"},zt.hough={a:6378270,rf:297,ellipseName:"Hough"},zt.intl={a:6378388,rf:297,ellipseName:"International 1909 (Hayford)"},zt.kaula={a:6378163,rf:298.24,ellipseName:"Kaula 1961"},zt.lerch={a:6378139,rf:298.257,ellipseName:"Lerch 1979"},zt.mprts={a:6397300,rf:191,ellipseName:"Maupertius 1738"},zt.new_intl={a:6378157.5,b:6356772.2,ellipseName:"New International 1967"},zt.plessis={a:6376523,rf:6355863,ellipseName:"Plessis 1817 (France)"},zt.krass={a:6378245,rf:298.3,ellipseName:"Krassovsky, 1942"},zt.SEasia={a:6378155,b:6356773.3205,ellipseName:"Southeast Asia"},zt.walbeck={a:6376896,b:6355834.8467,ellipseName:"Walbeck"},zt.WGS60={a:6378165,rf:298.3,ellipseName:"WGS 60"},zt.WGS66={a:6378145,rf:298.25,ellipseName:"WGS 66"},zt.WGS7={a:6378135,rf:298.26,ellipseName:"WGS 72"};var Lt=zt.WGS84={a:6378137,rf:298.257223563,ellipseName:"WGS 84"};zt.sphere={a:6370997,b:6370997,ellipseName:"Normal Sphere (r=6370997)"};var Dt={};Dt.wgs84={towgs84:"0,0,0",ellipse:"WGS84",datumName:"WGS84"},Dt.ch1903={towgs84:"674.374,15.056,405.346",ellipse:"bessel",datumName:"swiss"},Dt.ggrs87={towgs84:"-199.87,74.79,246.62",ellipse:"GRS80",datumName:"Greek_Geodetic_Reference_System_1987"},Dt.nad83={towgs84:"0,0,0",ellipse:"GRS80",datumName:"North_American_Datum_1983"},Dt.nad27={nadgrids:"@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat",ellipse:"clrk66",datumName:"North_American_Datum_1927"},Dt.potsdam={towgs84:"606.0,23.0,413.0",ellipse:"bessel",datumName:"Potsdam Rauenberg 1950 DHDN"},Dt.carthage={towgs84:"-263.0,6.0,431.0",ellipse:"clark80",datumName:"Carthage 1934 Tunisia"},Dt.hermannskogel={towgs84:"653.0,-212.0,449.0",ellipse:"bessel",datumName:"Hermannskogel"},Dt.osni52={towgs84:"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15",ellipse:"airy",datumName:"Irish National"},Dt.ire65={towgs84:"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15",ellipse:"mod_airy",datumName:"Ireland 1965"},Dt.rassadiran={towgs84:"-133.63,-157.5,-158.62",ellipse:"intl",datumName:"Rassadiran"},Dt.nzgd49={towgs84:"59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993",ellipse:"intl",datumName:"New Zealand Geodetic Datum 1949"},Dt.osgb36={towgs84:"446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894",ellipse:"airy",datumName:"Airy 1830"},Dt.s_jtsk={towgs84:"589,76,480",ellipse:"bessel",datumName:"S-JTSK (Ferro)"},Dt.beduaram={towgs84:"-106,-87,188",ellipse:"clrk80",datumName:"Beduaram"},Dt.gunung_segara={towgs84:"-403,684,41",ellipse:"bessel",datumName:"Gunung Segara Jakarta"},Dt.rnb72={towgs84:"106.869,-52.2978,103.724,-0.33657,0.456955,-1.84218,1",ellipse:"intl",datumName:"Reseau National Belge 1972"},Projection.projections=jt,Projection.projections.start();var Bt=function(t,s,i){return g(t,s)?i:t.datum_type===it||s.datum_type===it?i:t.es!==s.es||t.a!==s.a||E(t.datum_type)||E(s.datum_type)?(i=b(i,t.es,t.a),E(t.datum_type)&&(i=A(i,t.datum_type,t.datum_params)),E(s.datum_type)&&(i=C(i,s.datum_type,s.datum_params)),w(i,s.es,s.a,s.b)):i},Ut=function(t,s,i){var a,h,e,n=i.x,r=i.y,o=i.z||0,l={};for(e=0;e<3;e++)if(!s||2!==e||void 0!==i.z)switch(0===e?(a=n,h=-1!=="ew".indexOf(t.axis[e])?"x":"y"):1===e?(a=r,h=-1!=="ns".indexOf(t.axis[e])?"y":"x"):(a=o,h="z"),t.axis[e]){case"e":case"w":case"n":case"s":l[h]=a;break;case"u":void 0!==i[h]&&(l.z=a);break;case"d":void 0!==i[h]&&(l.z=-a);break;default:return null}return l},Ft=function(t){var s={x:t[0],y:t[1]};return t.length>2&&(s.z=t[2]),t.length>3&&(s.m=t[3]),s},Qt=function(t){P(t.x),P(t.y);},Wt=Projection("WGS84"),Ht=6,Xt="AJSAJS",Kt="AFAFAF",Jt=65,Vt=73,Zt=79,Yt=86,$t=90,ts={forward:O,inverse:function(t){var s=z(Q(t.toUpperCase()));return s.lat&&s.lon?[s.lon,s.lat,s.lon,s.lat]:[s.left,s.bottom,s.right,s.top]},toPoint:R};Point.fromMGRS=function(t){return new Point(R(t))},Point.prototype.toMGRS=function(t){return O([this.x,this.y],t)};var ss=.01068115234375,is=function(t){var s=[];s[0]=1-t*(.25+t*(.046875+t*(.01953125+t*ss))),s[1]=t*(.75-t*(.046875+t*(.01953125+t*ss)));var i=t*t;return s[2]=i*(.46875-t*(.013020833333333334+.007120768229166667*t)),i*=t,s[3]=i*(.3645833333333333-.005696614583333333*t),s[4]=i*t*.3076171875,s},as=function(t,s,i,a){return i*=s,s*=s,a[0]*t-i*(a[1]+s*(a[2]+s*(a[3]+s*a[4])))},hs=function(t,s,i){for(var a=1/(1-s),h=t,e=20;e;--e){var n=Math.sin(h),r=1-s*n*n;if(r=(as(h,n,Math.cos(h),i)-t)*(r*Math.sqrt(r))*a,h-=r,Math.abs(r)<ot)return h}return h},es={init:function(){this.x0=void 0!==this.x0?this.x0:0,this.y0=void 0!==this.y0?this.y0:0,this.long0=void 0!==this.long0?this.long0:0,this.lat0=void 0!==this.lat0?this.lat0:0,this.es&&(this.en=is(this.es),this.ml0=as(this.lat0,Math.sin(this.lat0),Math.cos(this.lat0),this.en));},forward:function(t){var s,i,a,h=t.x,e=t.y,n=qt(h-this.long0),r=Math.sin(e),o=Math.cos(e);if(this.es){var l=o*n,M=Math.pow(l,2),c=this.ep2*Math.pow(o,2),u=Math.pow(c,2),f=Math.abs(o)>ot?Math.tan(e):0,m=Math.pow(f,2),p=Math.pow(m,2);s=1-this.es*Math.pow(r,2),l/=Math.sqrt(s);var d=as(e,r,o,this.en);i=this.a*(this.k0*l*(1+M/6*(1-m+c+M/20*(5-18*m+p+14*c-58*m*c+M/42*(61+179*p-p*m-479*m)))))+this.x0,a=this.a*(this.k0*(d-this.ml0+r*n*l/2*(1+M/12*(5-m+9*c+4*u+M/30*(61+p-58*m+270*c-330*m*c+M/56*(1385+543*p-p*m-3111*m))))))+this.y0;}else {var y=o*Math.sin(n);if(Math.abs(Math.abs(y)-1)<ot)return 93;if(i=.5*this.a*this.k0*Math.log((1+y)/(1-y))+this.x0,a=o*Math.cos(n)/Math.sqrt(1-Math.pow(y,2)),(y=Math.abs(a))>=1){if(y-1>ot)return 93;a=0;}else a=Math.acos(a);e<0&&(a=-a),a=this.a*this.k0*(a-this.lat0)+this.y0;}return t.x=i,t.y=a,t},inverse:function(t){var s,i,a,h,e=(t.x-this.x0)*(1/this.a),n=(t.y-this.y0)*(1/this.a);if(this.es)if(s=this.ml0+n/this.k0,i=hs(s,this.es,this.en),Math.abs(i)<ht){var r=Math.sin(i),o=Math.cos(i),l=Math.abs(o)>ot?Math.tan(i):0,M=this.ep2*Math.pow(o,2),c=Math.pow(M,2),u=Math.pow(l,2),f=Math.pow(u,2);s=1-this.es*Math.pow(r,2);var m=e*Math.sqrt(s)/this.k0,p=Math.pow(m,2);a=i-(s*=l)*p/(1-this.es)*.5*(1-p/12*(5+3*u-9*M*u+M-4*c-p/30*(61+90*u-252*M*u+45*f+46*M-p/56*(1385+3633*u+4095*f+1574*f*u)))),h=qt(this.long0+m*(1-p/6*(1+2*u+M-p/20*(5+28*u+24*f+8*M*u+6*M-p/42*(61+662*u+1320*f+720*f*u))))/o);}else a=ht*kt(n),h=0;else {var d=Math.exp(e/this.k0),y=.5*(d-1/d),_=this.lat0+n/this.k0,x=Math.cos(_);s=Math.sqrt((1-Math.pow(x,2))/(1+Math.pow(y,2))),a=Math.asin(s),n<0&&(a=-a),h=0===y&&0===x?0:qt(Math.atan2(y,x)+this.long0);}return t.x=h,t.y=a,t},names:["Transverse_Mercator","Transverse Mercator","tmerc"]},ns=function(t){var s=Math.exp(t);return s=(s-1/s)/2},rs=function(t,s){t=Math.abs(t),s=Math.abs(s);var i=Math.max(t,s),a=Math.min(t,s)/(i||1);return i*Math.sqrt(1+Math.pow(a,2))},os=function(t){var s=1+t,i=s-1;return 0===i?t:t*Math.log(s)/i},ls=function(t){var s=Math.abs(t);return s=os(s*(1+s/(rs(1,s)+1))),t<0?-s:s},Ms=function(t,s){for(var i,a=2*Math.cos(2*s),h=t.length-1,e=t[h],n=0;--h>=0;)i=a*e-n+t[h],n=e,e=i;return s+i*Math.sin(2*s)},cs=function(t,s){for(var i,a=2*Math.cos(s),h=t.length-1,e=t[h],n=0;--h>=0;)i=a*e-n+t[h],n=e,e=i;return Math.sin(s)*i},us=function(t){var s=Math.exp(t);return s=(s+1/s)/2},fs=function(t,s,i){for(var a,h,e=Math.sin(s),n=Math.cos(s),r=ns(i),o=us(i),l=2*n*o,M=-2*e*r,c=t.length-1,u=t[c],f=0,m=0,p=0;--c>=0;)a=m,h=f,u=l*(m=u)-a-M*(f=p)+t[c],p=M*m-h+l*f;return l=e*o,M=n*r,[l*u-M*p,l*p+M*u]},ms={init:function(){if(void 0===this.es||this.es<=0)throw new Error("incorrect elliptical usage");this.x0=void 0!==this.x0?this.x0:0,this.y0=void 0!==this.y0?this.y0:0,this.long0=void 0!==this.long0?this.long0:0,this.lat0=void 0!==this.lat0?this.lat0:0,this.cgb=[],this.cbg=[],this.utg=[],this.gtu=[];var t=this.es/(1+Math.sqrt(1-this.es)),s=t/(2-t),i=s;this.cgb[0]=s*(2+s*(-2/3+s*(s*(116/45+s*(26/45+s*(-2854/675)))-2))),this.cbg[0]=s*(s*(2/3+s*(4/3+s*(-82/45+s*(32/45+s*(4642/4725)))))-2),i*=s,this.cgb[1]=i*(7/3+s*(s*(-227/45+s*(2704/315+s*(2323/945)))-1.6)),this.cbg[1]=i*(5/3+s*(-16/15+s*(-13/9+s*(904/315+s*(-1522/945))))),i*=s,this.cgb[2]=i*(56/15+s*(-136/35+s*(-1262/105+s*(73814/2835)))),this.cbg[2]=i*(-26/15+s*(34/21+s*(1.6+s*(-12686/2835)))),i*=s,this.cgb[3]=i*(4279/630+s*(-332/35+s*(-399572/14175))),this.cbg[3]=i*(1237/630+s*(s*(-24832/14175)-2.4)),i*=s,this.cgb[4]=i*(4174/315+s*(-144838/6237)),this.cbg[4]=i*(-734/315+s*(109598/31185)),i*=s,this.cgb[5]=i*(601676/22275),this.cbg[5]=i*(444337/155925),i=Math.pow(s,2),this.Qn=this.k0/(1+s)*(1+i*(.25+i*(1/64+i/256))),this.utg[0]=s*(s*(2/3+s*(-37/96+s*(1/360+s*(81/512+s*(-96199/604800)))))-.5),this.gtu[0]=s*(.5+s*(-2/3+s*(5/16+s*(41/180+s*(-127/288+s*(7891/37800)))))),this.utg[1]=i*(-1/48+s*(-1/15+s*(437/1440+s*(-46/105+s*(1118711/3870720))))),this.gtu[1]=i*(13/48+s*(s*(557/1440+s*(281/630+s*(-1983433/1935360)))-.6)),i*=s,this.utg[2]=i*(-17/480+s*(37/840+s*(209/4480+s*(-5569/90720)))),this.gtu[2]=i*(61/240+s*(-103/140+s*(15061/26880+s*(167603/181440)))),i*=s,this.utg[3]=i*(-4397/161280+s*(11/504+s*(830251/7257600))),this.gtu[3]=i*(49561/161280+s*(-179/168+s*(6601661/7257600))),i*=s,this.utg[4]=i*(-4583/161280+s*(108847/3991680)),this.gtu[4]=i*(34729/80640+s*(-3418889/1995840)),i*=s,this.utg[5]=-.03233083094085698*i,this.gtu[5]=.6650675310896665*i;var a=Ms(this.cbg,this.lat0);this.Zb=-this.Qn*(a+cs(this.gtu,2*a));},forward:function(t){var s=qt(t.x-this.long0),i=t.y;i=Ms(this.cbg,i);var a=Math.sin(i),h=Math.cos(i),e=Math.sin(s),n=Math.cos(s);i=Math.atan2(a,n*h),s=Math.atan2(e*h,rs(a,h*n)),s=ls(Math.tan(s));var r=fs(this.gtu,2*i,2*s);i+=r[0],s+=r[1];var o,l;return Math.abs(s)<=2.623395162778?(o=this.a*(this.Qn*s)+this.x0,l=this.a*(this.Qn*i+this.Zb)+this.y0):(o=1/0,l=1/0),t.x=o,t.y=l,t},inverse:function(t){var s=(t.x-this.x0)*(1/this.a),i=(t.y-this.y0)*(1/this.a);i=(i-this.Zb)/this.Qn,s/=this.Qn;var a,h;if(Math.abs(s)<=2.623395162778){var e=fs(this.utg,2*i,2*s);i+=e[0],s+=e[1],s=Math.atan(ns(s));var n=Math.sin(i),r=Math.cos(i),o=Math.sin(s),l=Math.cos(s);i=Math.atan2(n*l,rs(o,l*r)),s=Math.atan2(o,l*r),a=qt(s+this.long0),h=Ms(this.cgb,i);}else a=1/0,h=1/0;return t.x=a,t.y=h,t},names:["Extended_Transverse_Mercator","Extended Transverse Mercator","etmerc"]},ps=function(t,s){if(void 0===t){if((t=Math.floor(30*(qt(s)+Math.PI)/Math.PI)+1)<0)return 0;if(t>60)return 60}return t},ds={init:function(){var t=ps(this.zone,this.long0);if(void 0===t)throw new Error("unknown utm zone");this.lat0=0,this.long0=(6*Math.abs(t)-183)*lt,this.x0=5e5,this.y0=this.utmSouth?1e7:0,this.k0=.9996,ms.init.apply(this),this.forward=ms.forward,this.inverse=ms.inverse;},names:["Universal Transverse Mercator System","utm"],dependsOn:"etmerc"},ys=function(t,s){return Math.pow((1-t)/(1+t),s)},_s=20,xs={init:function(){var t=Math.sin(this.lat0),s=Math.cos(this.lat0);s*=s,this.rc=Math.sqrt(1-this.es)/(1-this.es*t*t),this.C=Math.sqrt(1+this.es*s*s/(1-this.es)),this.phic0=Math.asin(t/this.C),this.ratexp=.5*this.C*this.e,this.K=Math.tan(.5*this.phic0+ct)/(Math.pow(Math.tan(.5*this.lat0+ct),this.C)*ys(this.e*t,this.ratexp));},forward:function(t){var s=t.x,i=t.y;return t.y=2*Math.atan(this.K*Math.pow(Math.tan(.5*i+ct),this.C)*ys(this.e*Math.sin(i),this.ratexp))-ht,t.x=this.C*s,t},inverse:function(t){for(var s=t.x/this.C,i=t.y,a=Math.pow(Math.tan(.5*i+ct)/this.K,1/this.C),h=_s;h>0&&(i=2*Math.atan(a*ys(this.e*Math.sin(t.y),-.5*this.e))-ht,!(Math.abs(i-t.y)<1e-14));--h)t.y=i;return h?(t.x=s,t.y=i,t):null},names:["gauss"]},vs={init:function(){xs.init.apply(this),this.rc&&(this.sinc0=Math.sin(this.phic0),this.cosc0=Math.cos(this.phic0),this.R2=2*this.rc,this.title||(this.title="Oblique Stereographic Alternative"));},forward:function(t){var s,i,a,h;return t.x=qt(t.x-this.long0),xs.forward.apply(this,[t]),s=Math.sin(t.y),i=Math.cos(t.y),a=Math.cos(t.x),h=this.k0*this.R2/(1+this.sinc0*s+this.cosc0*i*a),t.x=h*i*Math.sin(t.x),t.y=h*(this.cosc0*s-this.sinc0*i*a),t.x=this.a*t.x+this.x0,t.y=this.a*t.y+this.y0,t},inverse:function(t){var s,i,a,h,e;if(t.x=(t.x-this.x0)/this.a,t.y=(t.y-this.y0)/this.a,t.x/=this.k0,t.y/=this.k0,e=Math.sqrt(t.x*t.x+t.y*t.y)){var n=2*Math.atan2(e,this.R2);s=Math.sin(n),i=Math.cos(n),h=Math.asin(i*this.sinc0+t.y*s*this.cosc0/e),a=Math.atan2(t.x*s,e*this.cosc0*i-t.y*this.sinc0*s);}else h=this.phic0,a=0;return t.x=a,t.y=h,xs.inverse.apply(this,[t]),t.x=qt(t.x+this.long0),t},names:["Stereographic_North_Pole","Oblique_Stereographic","Polar_Stereographic","sterea","Oblique Stereographic Alternative","Double_Stereographic"]},gs={init:function(){this.coslat0=Math.cos(this.lat0),this.sinlat0=Math.sin(this.lat0),this.sphere?1===this.k0&&!isNaN(this.lat_ts)&&Math.abs(this.coslat0)<=ot&&(this.k0=.5*(1+kt(this.lat0)*Math.sin(this.lat_ts))):(Math.abs(this.coslat0)<=ot&&(this.lat0>0?this.con=1:this.con=-1),this.cons=Math.sqrt(Math.pow(1+this.e,1+this.e)*Math.pow(1-this.e,1-this.e)),1===this.k0&&!isNaN(this.lat_ts)&&Math.abs(this.coslat0)<=ot&&(this.k0=.5*this.cons*St(this.e,Math.sin(this.lat_ts),Math.cos(this.lat_ts))/It(this.e,this.con*this.lat_ts,this.con*Math.sin(this.lat_ts))),this.ms1=St(this.e,this.sinlat0,this.coslat0),this.X0=2*Math.atan(this.ssfn_(this.lat0,this.sinlat0,this.e))-ht,this.cosX0=Math.cos(this.X0),this.sinX0=Math.sin(this.X0));},forward:function(t){var s,i,a,h,e,n,r=t.x,o=t.y,l=Math.sin(o),M=Math.cos(o),c=qt(r-this.long0);return Math.abs(Math.abs(r-this.long0)-Math.PI)<=ot&&Math.abs(o+this.lat0)<=ot?(t.x=NaN,t.y=NaN,t):this.sphere?(s=2*this.k0/(1+this.sinlat0*l+this.coslat0*M*Math.cos(c)),t.x=this.a*s*M*Math.sin(c)+this.x0,t.y=this.a*s*(this.coslat0*l-this.sinlat0*M*Math.cos(c))+this.y0,t):(i=2*Math.atan(this.ssfn_(o,l,this.e))-ht,h=Math.cos(i),a=Math.sin(i),Math.abs(this.coslat0)<=ot?(e=It(this.e,o*this.con,this.con*l),n=2*this.a*this.k0*e/this.cons,t.x=this.x0+n*Math.sin(r-this.long0),t.y=this.y0-this.con*n*Math.cos(r-this.long0),t):(Math.abs(this.sinlat0)<ot?(s=2*this.a*this.k0/(1+h*Math.cos(c)),t.y=s*a):(s=2*this.a*this.k0*this.ms1/(this.cosX0*(1+this.sinX0*a+this.cosX0*h*Math.cos(c))),t.y=s*(this.cosX0*a-this.sinX0*h*Math.cos(c))+this.y0),t.x=s*h*Math.sin(c)+this.x0,t))},inverse:function(t){t.x-=this.x0,t.y-=this.y0;var s,i,a,h,e,n=Math.sqrt(t.x*t.x+t.y*t.y);if(this.sphere){var r=2*Math.atan(n/(2*this.a*this.k0));return s=this.long0,i=this.lat0,n<=ot?(t.x=s,t.y=i,t):(i=Math.asin(Math.cos(r)*this.sinlat0+t.y*Math.sin(r)*this.coslat0/n),s=qt(Math.abs(this.coslat0)<ot?this.lat0>0?this.long0+Math.atan2(t.x,-1*t.y):this.long0+Math.atan2(t.x,t.y):this.long0+Math.atan2(t.x*Math.sin(r),n*this.coslat0*Math.cos(r)-t.y*this.sinlat0*Math.sin(r))),t.x=s,t.y=i,t)}if(Math.abs(this.coslat0)<=ot){if(n<=ot)return i=this.lat0,s=this.long0,t.x=s,t.y=i,t;t.x*=this.con,t.y*=this.con,a=n*this.cons/(2*this.a*this.k0),i=this.con*Ot(this.e,a),s=this.con*qt(this.con*this.long0+Math.atan2(t.x,-1*t.y));}else h=2*Math.atan(n*this.cosX0/(2*this.a*this.k0*this.ms1)),s=this.long0,n<=ot?e=this.X0:(e=Math.asin(Math.cos(h)*this.sinX0+t.y*Math.sin(h)*this.cosX0/n),s=qt(this.long0+Math.atan2(t.x*Math.sin(h),n*this.cosX0*Math.cos(h)-t.y*this.sinX0*Math.sin(h)))),i=-1*Ot(this.e,Math.tan(.5*(ht+e)));return t.x=s,t.y=i,t},names:["stere","Stereographic_South_Pole","Polar Stereographic (variant B)"],ssfn_:function(t,s,i){return s*=i,Math.tan(.5*(ht+t))*Math.pow((1-s)/(1+s),.5*i)}},bs={init:function(){var t=this.lat0;this.lambda0=this.long0;var s=Math.sin(t),i=this.a,a=1/this.rf,h=2*a-Math.pow(a,2),e=this.e=Math.sqrt(h);this.R=this.k0*i*Math.sqrt(1-h)/(1-h*Math.pow(s,2)),this.alpha=Math.sqrt(1+h/(1-h)*Math.pow(Math.cos(t),4)),this.b0=Math.asin(s/this.alpha);var n=Math.log(Math.tan(Math.PI/4+this.b0/2)),r=Math.log(Math.tan(Math.PI/4+t/2)),o=Math.log((1+e*s)/(1-e*s));this.K=n-this.alpha*r+this.alpha*e/2*o;},forward:function(t){var s=Math.log(Math.tan(Math.PI/4-t.y/2)),i=this.e/2*Math.log((1+this.e*Math.sin(t.y))/(1-this.e*Math.sin(t.y))),a=-this.alpha*(s+i)+this.K,h=2*(Math.atan(Math.exp(a))-Math.PI/4),e=this.alpha*(t.x-this.lambda0),n=Math.atan(Math.sin(e)/(Math.sin(this.b0)*Math.tan(h)+Math.cos(this.b0)*Math.cos(e))),r=Math.asin(Math.cos(this.b0)*Math.sin(h)-Math.sin(this.b0)*Math.cos(h)*Math.cos(e));return t.y=this.R/2*Math.log((1+Math.sin(r))/(1-Math.sin(r)))+this.y0,t.x=this.R*n+this.x0,t},inverse:function(t){for(var s=t.x-this.x0,i=t.y-this.y0,a=s/this.R,h=2*(Math.atan(Math.exp(i/this.R))-Math.PI/4),e=Math.asin(Math.cos(this.b0)*Math.sin(h)+Math.sin(this.b0)*Math.cos(h)*Math.cos(a)),n=Math.atan(Math.sin(a)/(Math.cos(this.b0)*Math.cos(a)-Math.sin(this.b0)*Math.tan(h))),r=this.lambda0+n/this.alpha,o=0,l=e,M=-1e3,c=0;Math.abs(l-M)>1e-7;){if(++c>20)return;o=1/this.alpha*(Math.log(Math.tan(Math.PI/4+e/2))-this.K)+this.e*Math.log(Math.tan(Math.PI/4+Math.asin(this.e*Math.sin(l))/2)),M=l,l=2*Math.atan(Math.exp(o))-Math.PI/2;}return t.x=r,t.y=l,t},names:["somerc"]},ws={init:function(){this.no_off=this.no_off||!1,this.no_rot=this.no_rot||!1,isNaN(this.k0)&&(this.k0=1);var t=Math.sin(this.lat0),s=Math.cos(this.lat0),i=this.e*t;this.bl=Math.sqrt(1+this.es/(1-this.es)*Math.pow(s,4)),this.al=this.a*this.bl*this.k0*Math.sqrt(1-this.es)/(1-i*i);var a=It(this.e,this.lat0,t),h=this.bl/s*Math.sqrt((1-this.es)/(1-i*i));h*h<1&&(h=1);var e,n;if(isNaN(this.longc)){var r=It(this.e,this.lat1,Math.sin(this.lat1)),o=It(this.e,this.lat2,Math.sin(this.lat2));this.lat0>=0?this.el=(h+Math.sqrt(h*h-1))*Math.pow(a,this.bl):this.el=(h-Math.sqrt(h*h-1))*Math.pow(a,this.bl);var l=Math.pow(r,this.bl),M=Math.pow(o,this.bl);n=.5*((e=this.el/l)-1/e);var c=(this.el*this.el-M*l)/(this.el*this.el+M*l),u=(M-l)/(M+l),f=qt(this.long1-this.long2);this.long0=.5*(this.long1+this.long2)-Math.atan(c*Math.tan(.5*this.bl*f)/u)/this.bl,this.long0=qt(this.long0);var m=qt(this.long1-this.long0);this.gamma0=Math.atan(Math.sin(this.bl*m)/n),this.alpha=Math.asin(h*Math.sin(this.gamma0));}else e=this.lat0>=0?h+Math.sqrt(h*h-1):h-Math.sqrt(h*h-1),this.el=e*Math.pow(a,this.bl),n=.5*(e-1/e),this.gamma0=Math.asin(Math.sin(this.alpha)/h),this.long0=this.longc-Math.asin(n*Math.tan(this.gamma0))/this.bl;this.no_off?this.uc=0:this.lat0>=0?this.uc=this.al/this.bl*Math.atan2(Math.sqrt(h*h-1),Math.cos(this.alpha)):this.uc=-1*this.al/this.bl*Math.atan2(Math.sqrt(h*h-1),Math.cos(this.alpha));},forward:function(t){var s,i,a,h=t.x,e=t.y,n=qt(h-this.long0);if(Math.abs(Math.abs(e)-ht)<=ot)a=e>0?-1:1,i=this.al/this.bl*Math.log(Math.tan(ct+a*this.gamma0*.5)),s=-1*a*ht*this.al/this.bl;else {var r=It(this.e,e,Math.sin(e)),o=this.el/Math.pow(r,this.bl),l=.5*(o-1/o),M=.5*(o+1/o),c=Math.sin(this.bl*n),u=(l*Math.sin(this.gamma0)-c*Math.cos(this.gamma0))/M;i=Math.abs(Math.abs(u)-1)<=ot?Number.POSITIVE_INFINITY:.5*this.al*Math.log((1-u)/(1+u))/this.bl,s=Math.abs(Math.cos(this.bl*n))<=ot?this.al*this.bl*n:this.al*Math.atan2(l*Math.cos(this.gamma0)+c*Math.sin(this.gamma0),Math.cos(this.bl*n))/this.bl;}return this.no_rot?(t.x=this.x0+s,t.y=this.y0+i):(s-=this.uc,t.x=this.x0+i*Math.cos(this.alpha)+s*Math.sin(this.alpha),t.y=this.y0+s*Math.cos(this.alpha)-i*Math.sin(this.alpha)),t},inverse:function(t){var s,i;this.no_rot?(i=t.y-this.y0,s=t.x-this.x0):(i=(t.x-this.x0)*Math.cos(this.alpha)-(t.y-this.y0)*Math.sin(this.alpha),s=(t.y-this.y0)*Math.cos(this.alpha)+(t.x-this.x0)*Math.sin(this.alpha),s+=this.uc);var a=Math.exp(-1*this.bl*i/this.al),h=.5*(a-1/a),e=.5*(a+1/a),n=Math.sin(this.bl*s/this.al),r=(n*Math.cos(this.gamma0)+h*Math.sin(this.gamma0))/e,o=Math.pow(this.el/Math.sqrt((1+r)/(1-r)),1/this.bl);return Math.abs(r-1)<ot?(t.x=this.long0,t.y=ht):Math.abs(r+1)<ot?(t.x=this.long0,t.y=-1*ht):(t.y=Ot(this.e,o),t.x=qt(this.long0-Math.atan2(h*Math.cos(this.gamma0)-n*Math.sin(this.gamma0),Math.cos(this.bl*s/this.al))/this.bl)),t},names:["Hotine_Oblique_Mercator","Hotine Oblique Mercator","Hotine_Oblique_Mercator_Azimuth_Natural_Origin","Hotine_Oblique_Mercator_Azimuth_Center","omerc"]},As={init:function(){if(this.lat2||(this.lat2=this.lat1),this.k0||(this.k0=1),this.x0=this.x0||0,this.y0=this.y0||0,!(Math.abs(this.lat1+this.lat2)<ot)){var t=this.b/this.a;this.e=Math.sqrt(1-t*t);var s=Math.sin(this.lat1),i=Math.cos(this.lat1),a=St(this.e,s,i),h=It(this.e,this.lat1,s),e=Math.sin(this.lat2),n=Math.cos(this.lat2),r=St(this.e,e,n),o=It(this.e,this.lat2,e),l=It(this.e,this.lat0,Math.sin(this.lat0));Math.abs(this.lat1-this.lat2)>ot?this.ns=Math.log(a/r)/Math.log(h/o):this.ns=s,isNaN(this.ns)&&(this.ns=s),this.f0=a/(this.ns*Math.pow(h,this.ns)),this.rh=this.a*this.f0*Math.pow(l,this.ns),this.title||(this.title="Lambert Conformal Conic");}},forward:function(t){var s=t.x,i=t.y;Math.abs(2*Math.abs(i)-Math.PI)<=ot&&(i=kt(i)*(ht-2*ot));var a,h,e=Math.abs(Math.abs(i)-ht);if(e>ot)a=It(this.e,i,Math.sin(i)),h=this.a*this.f0*Math.pow(a,this.ns);else {if((e=i*this.ns)<=0)return null;h=0;}var n=this.ns*qt(s-this.long0);return t.x=this.k0*(h*Math.sin(n))+this.x0,t.y=this.k0*(this.rh-h*Math.cos(n))+this.y0,t},inverse:function(t){var s,i,a,h,e,n=(t.x-this.x0)/this.k0,r=this.rh-(t.y-this.y0)/this.k0;this.ns>0?(s=Math.sqrt(n*n+r*r),i=1):(s=-Math.sqrt(n*n+r*r),i=-1);var o=0;if(0!==s&&(o=Math.atan2(i*n,i*r)),0!==s||this.ns>0){if(i=1/this.ns,a=Math.pow(s/(this.a*this.f0),i),-9999===(h=Ot(this.e,a)))return null}else h=-ht;return e=qt(o/this.ns+this.long0),t.x=e,t.y=h,t},names:["Lambert Tangential Conformal Conic Projection","Lambert_Conformal_Conic","Lambert_Conformal_Conic_2SP","lcc"]},Cs={init:function(){this.a=6377397.155,this.es=.006674372230614,this.e=Math.sqrt(this.es),this.lat0||(this.lat0=.863937979737193),this.long0||(this.long0=.4334234309119251),this.k0||(this.k0=.9999),this.s45=.785398163397448,this.s90=2*this.s45,this.fi0=this.lat0,this.e2=this.es,this.e=Math.sqrt(this.e2),this.alfa=Math.sqrt(1+this.e2*Math.pow(Math.cos(this.fi0),4)/(1-this.e2)),this.uq=1.04216856380474,this.u0=Math.asin(Math.sin(this.fi0)/this.alfa),this.g=Math.pow((1+this.e*Math.sin(this.fi0))/(1-this.e*Math.sin(this.fi0)),this.alfa*this.e/2),this.k=Math.tan(this.u0/2+this.s45)/Math.pow(Math.tan(this.fi0/2+this.s45),this.alfa)*this.g,this.k1=this.k0,this.n0=this.a*Math.sqrt(1-this.e2)/(1-this.e2*Math.pow(Math.sin(this.fi0),2)),this.s0=1.37008346281555,this.n=Math.sin(this.s0),this.ro0=this.k1*this.n0/Math.tan(this.s0),this.ad=this.s90-this.uq;},forward:function(t){var s,i,a,h,e,n,r,o=t.x,l=t.y,M=qt(o-this.long0);return s=Math.pow((1+this.e*Math.sin(l))/(1-this.e*Math.sin(l)),this.alfa*this.e/2),i=2*(Math.atan(this.k*Math.pow(Math.tan(l/2+this.s45),this.alfa)/s)-this.s45),a=-M*this.alfa,h=Math.asin(Math.cos(this.ad)*Math.sin(i)+Math.sin(this.ad)*Math.cos(i)*Math.cos(a)),e=Math.asin(Math.cos(i)*Math.sin(a)/Math.cos(h)),n=this.n*e,r=this.ro0*Math.pow(Math.tan(this.s0/2+this.s45),this.n)/Math.pow(Math.tan(h/2+this.s45),this.n),t.y=r*Math.cos(n)/1,t.x=r*Math.sin(n)/1,this.czech||(t.y*=-1,t.x*=-1),t},inverse:function(t){var s,i,a,h,e,n,r,o=t.x;t.x=t.y,t.y=o,this.czech||(t.y*=-1,t.x*=-1),e=Math.sqrt(t.x*t.x+t.y*t.y),h=Math.atan2(t.y,t.x)/Math.sin(this.s0),a=2*(Math.atan(Math.pow(this.ro0/e,1/this.n)*Math.tan(this.s0/2+this.s45))-this.s45),s=Math.asin(Math.cos(this.ad)*Math.sin(a)-Math.sin(this.ad)*Math.cos(a)*Math.cos(h)),i=Math.asin(Math.cos(a)*Math.sin(h)/Math.cos(s)),t.x=this.long0-i/this.alfa,n=s,r=0;var l=0;do{t.y=2*(Math.atan(Math.pow(this.k,-1/this.alfa)*Math.pow(Math.tan(s/2+this.s45),1/this.alfa)*Math.pow((1+this.e*Math.sin(n))/(1-this.e*Math.sin(n)),this.e/2))-this.s45),Math.abs(n-t.y)<1e-10&&(r=1),n=t.y,l+=1;}while(0===r&&l<15);return l>=15?null:t},names:["Krovak","krovak"]},Es=function(t,s,i,a,h){return t*h-s*Math.sin(2*h)+i*Math.sin(4*h)-a*Math.sin(6*h)},Ps=function(t){return 1-.25*t*(1+t/16*(3+1.25*t))},Ns=function(t){return .375*t*(1+.25*t*(1+.46875*t))},Ss=function(t){return .05859375*t*t*(1+.75*t)},ks=function(t){return t*t*t*(35/3072)},qs=function(t,s,i){var a=s*i;return t/Math.sqrt(1-a*a)},Is=function(t){return Math.abs(t)<ht?t:t-kt(t)*Math.PI},Os=function(t,s,i,a,h){var e,n;e=t/s;for(var r=0;r<15;r++)if(n=(t-(s*e-i*Math.sin(2*e)+a*Math.sin(4*e)-h*Math.sin(6*e)))/(s-2*i*Math.cos(2*e)+4*a*Math.cos(4*e)-6*h*Math.cos(6*e)),e+=n,Math.abs(n)<=1e-10)return e;return NaN},Rs={init:function(){this.sphere||(this.e0=Ps(this.es),this.e1=Ns(this.es),this.e2=Ss(this.es),this.e3=ks(this.es),this.ml0=this.a*Es(this.e0,this.e1,this.e2,this.e3,this.lat0));},forward:function(t){var s,i,a=t.x,h=t.y;if(a=qt(a-this.long0),this.sphere)s=this.a*Math.asin(Math.cos(h)*Math.sin(a)),i=this.a*(Math.atan2(Math.tan(h),Math.cos(a))-this.lat0);else {var e=Math.sin(h),n=Math.cos(h),r=qs(this.a,this.e,e),o=Math.tan(h)*Math.tan(h),l=a*Math.cos(h),M=l*l,c=this.es*n*n/(1-this.es);s=r*l*(1-M*o*(1/6-(8-o+8*c)*M/120)),i=this.a*Es(this.e0,this.e1,this.e2,this.e3,h)-this.ml0+r*e/n*M*(.5+(5-o+6*c)*M/24);}return t.x=s+this.x0,t.y=i+this.y0,t},inverse:function(t){t.x-=this.x0,t.y-=this.y0;var s,i,a=t.x/this.a,h=t.y/this.a;if(this.sphere){var e=h+this.lat0;s=Math.asin(Math.sin(e)*Math.cos(a)),i=Math.atan2(Math.tan(a),Math.cos(e));}else {var n=this.ml0/this.a+h,r=Os(n,this.e0,this.e1,this.e2,this.e3);if(Math.abs(Math.abs(r)-ht)<=ot)return t.x=this.long0,t.y=ht,h<0&&(t.y*=-1),t;var o=qs(this.a,this.e,Math.sin(r)),l=o*o*o/this.a/this.a*(1-this.es),M=Math.pow(Math.tan(r),2),c=a*this.a/o,u=c*c;s=r-o*Math.tan(r)/l*c*c*(.5-(1+3*M)*c*c/24),i=c*(1-u*(M/3+(1+3*M)*M*u/15))/Math.cos(r);}return t.x=qt(i+this.long0),t.y=Is(s),t},names:["Cassini","Cassini_Soldner","cass"]},Gs=function(t,s){var i;return t>1e-7?(i=t*s,(1-t*t)*(s/(1-i*i)-.5/t*Math.log((1-i)/(1+i)))):2*s},Ts=.3333333333333333,js=.17222222222222222,zs=.10257936507936508,Ls=.06388888888888888,Ds=.0664021164021164,Bs=.016415012942191543,Us={init:function(){var t=Math.abs(this.lat0);if(Math.abs(t-ht)<ot?this.mode=this.lat0<0?this.S_POLE:this.N_POLE:Math.abs(t)<ot?this.mode=this.EQUIT:this.mode=this.OBLIQ,this.es>0){var s;switch(this.qp=Gs(this.e,1),this.mmf=.5/(1-this.es),this.apa=K(this.es),this.mode){case this.N_POLE:case this.S_POLE:this.dd=1;break;case this.EQUIT:this.rq=Math.sqrt(.5*this.qp),this.dd=1/this.rq,this.xmf=1,this.ymf=.5*this.qp;break;case this.OBLIQ:this.rq=Math.sqrt(.5*this.qp),s=Math.sin(this.lat0),this.sinb1=Gs(this.e,s)/this.qp,this.cosb1=Math.sqrt(1-this.sinb1*this.sinb1),this.dd=Math.cos(this.lat0)/(Math.sqrt(1-this.es*s*s)*this.rq*this.cosb1),this.ymf=(this.xmf=this.rq)/this.dd,this.xmf*=this.dd;}}else this.mode===this.OBLIQ&&(this.sinph0=Math.sin(this.lat0),this.cosph0=Math.cos(this.lat0));},forward:function(t){var s,i,a,h,e,n,r,o,l,M,c=t.x,u=t.y;if(c=qt(c-this.long0),this.sphere){if(e=Math.sin(u),M=Math.cos(u),a=Math.cos(c),this.mode===this.OBLIQ||this.mode===this.EQUIT){if((i=this.mode===this.EQUIT?1+M*a:1+this.sinph0*e+this.cosph0*M*a)<=ot)return null;s=(i=Math.sqrt(2/i))*M*Math.sin(c),i*=this.mode===this.EQUIT?e:this.cosph0*e-this.sinph0*M*a;}else if(this.mode===this.N_POLE||this.mode===this.S_POLE){if(this.mode===this.N_POLE&&(a=-a),Math.abs(u+this.phi0)<ot)return null;i=ct-.5*u,s=(i=2*(this.mode===this.S_POLE?Math.cos(i):Math.sin(i)))*Math.sin(c),i*=a;}}else {switch(r=0,o=0,l=0,a=Math.cos(c),h=Math.sin(c),e=Math.sin(u),n=Gs(this.e,e),this.mode!==this.OBLIQ&&this.mode!==this.EQUIT||(r=n/this.qp,o=Math.sqrt(1-r*r)),this.mode){case this.OBLIQ:l=1+this.sinb1*r+this.cosb1*o*a;break;case this.EQUIT:l=1+o*a;break;case this.N_POLE:l=ht+u,n=this.qp-n;break;case this.S_POLE:l=u-ht,n=this.qp+n;}if(Math.abs(l)<ot)return null;switch(this.mode){case this.OBLIQ:case this.EQUIT:l=Math.sqrt(2/l),i=this.mode===this.OBLIQ?this.ymf*l*(this.cosb1*r-this.sinb1*o*a):(l=Math.sqrt(2/(1+o*a)))*r*this.ymf,s=this.xmf*l*o*h;break;case this.N_POLE:case this.S_POLE:n>=0?(s=(l=Math.sqrt(n))*h,i=a*(this.mode===this.S_POLE?l:-l)):s=i=0;}}return t.x=this.a*s+this.x0,t.y=this.a*i+this.y0,t},inverse:function(t){t.x-=this.x0,t.y-=this.y0;var s,i,a,h,e,n,r,o=t.x/this.a,l=t.y/this.a;if(this.sphere){var M,c=0,u=0;if(M=Math.sqrt(o*o+l*l),(i=.5*M)>1)return null;switch(i=2*Math.asin(i),this.mode!==this.OBLIQ&&this.mode!==this.EQUIT||(u=Math.sin(i),c=Math.cos(i)),this.mode){case this.EQUIT:i=Math.abs(M)<=ot?0:Math.asin(l*u/M),o*=u,l=c*M;break;case this.OBLIQ:i=Math.abs(M)<=ot?this.phi0:Math.asin(c*this.sinph0+l*u*this.cosph0/M),o*=u*this.cosph0,l=(c-Math.sin(i)*this.sinph0)*M;break;case this.N_POLE:l=-l,i=ht-i;break;case this.S_POLE:i-=ht;}s=0!==l||this.mode!==this.EQUIT&&this.mode!==this.OBLIQ?Math.atan2(o,l):0;}else {if(r=0,this.mode===this.OBLIQ||this.mode===this.EQUIT){if(o/=this.dd,l*=this.dd,(n=Math.sqrt(o*o+l*l))<ot)return t.x=0,t.y=this.phi0,t;h=2*Math.asin(.5*n/this.rq),a=Math.cos(h),o*=h=Math.sin(h),this.mode===this.OBLIQ?(r=a*this.sinb1+l*h*this.cosb1/n,e=this.qp*r,l=n*this.cosb1*a-l*this.sinb1*h):(r=l*h/n,e=this.qp*r,l=n*a);}else if(this.mode===this.N_POLE||this.mode===this.S_POLE){if(this.mode===this.N_POLE&&(l=-l),!(e=o*o+l*l))return t.x=0,t.y=this.phi0,t;r=1-e/this.qp,this.mode===this.S_POLE&&(r=-r);}s=Math.atan2(o,l),i=J(Math.asin(r),this.apa);}return t.x=qt(this.long0+s),t.y=i,t},names:["Lambert Azimuthal Equal Area","Lambert_Azimuthal_Equal_Area","laea"],S_POLE:1,N_POLE:2,EQUIT:3,OBLIQ:4},Fs=function(t){return Math.abs(t)>1&&(t=t>1?1:-1),Math.asin(t)},Qs={init:function(){Math.abs(this.lat1+this.lat2)<ot||(this.temp=this.b/this.a,this.es=1-Math.pow(this.temp,2),this.e3=Math.sqrt(this.es),this.sin_po=Math.sin(this.lat1),this.cos_po=Math.cos(this.lat1),this.t1=this.sin_po,this.con=this.sin_po,this.ms1=St(this.e3,this.sin_po,this.cos_po),this.qs1=Gs(this.e3,this.sin_po,this.cos_po),this.sin_po=Math.sin(this.lat2),this.cos_po=Math.cos(this.lat2),this.t2=this.sin_po,this.ms2=St(this.e3,this.sin_po,this.cos_po),this.qs2=Gs(this.e3,this.sin_po,this.cos_po),this.sin_po=Math.sin(this.lat0),this.cos_po=Math.cos(this.lat0),this.t3=this.sin_po,this.qs0=Gs(this.e3,this.sin_po,this.cos_po),Math.abs(this.lat1-this.lat2)>ot?this.ns0=(this.ms1*this.ms1-this.ms2*this.ms2)/(this.qs2-this.qs1):this.ns0=this.con,this.c=this.ms1*this.ms1+this.ns0*this.qs1,this.rh=this.a*Math.sqrt(this.c-this.ns0*this.qs0)/this.ns0);},forward:function(t){var s=t.x,i=t.y;this.sin_phi=Math.sin(i),this.cos_phi=Math.cos(i);var a=Gs(this.e3,this.sin_phi,this.cos_phi),h=this.a*Math.sqrt(this.c-this.ns0*a)/this.ns0,e=this.ns0*qt(s-this.long0),n=h*Math.sin(e)+this.x0,r=this.rh-h*Math.cos(e)+this.y0;return t.x=n,t.y=r,t},inverse:function(t){var s,i,a,h,e,n;return t.x-=this.x0,t.y=this.rh-t.y+this.y0,this.ns0>=0?(s=Math.sqrt(t.x*t.x+t.y*t.y),a=1):(s=-Math.sqrt(t.x*t.x+t.y*t.y),a=-1),h=0,0!==s&&(h=Math.atan2(a*t.x,a*t.y)),a=s*this.ns0/this.a,this.sphere?n=Math.asin((this.c-a*a)/(2*this.ns0)):(i=(this.c-a*a)/this.ns0,n=this.phi1z(this.e3,i)),e=qt(h/this.ns0+this.long0),t.x=e,t.y=n,t},names:["Albers_Conic_Equal_Area","Albers","aea"],phi1z:function(t,s){var i,a,h,e,n,r=Fs(.5*s);if(t<ot)return r;for(var o=t*t,l=1;l<=25;l++)if(i=Math.sin(r),a=Math.cos(r),h=t*i,e=1-h*h,n=.5*e*e/a*(s/(1-o)-i/e+.5/t*Math.log((1-h)/(1+h))),r+=n,Math.abs(n)<=1e-7)return r;return null}},Ws={init:function(){this.sin_p14=Math.sin(this.lat0),this.cos_p14=Math.cos(this.lat0),this.infinity_dist=1e3*this.a,this.rc=1;},forward:function(t){var s,i,a,h,e,n,r,o=t.x,l=t.y;return a=qt(o-this.long0),s=Math.sin(l),i=Math.cos(l),h=Math.cos(a),(e=this.sin_p14*s+this.cos_p14*i*h)>0||Math.abs(e)<=ot?(n=this.x0+1*this.a*i*Math.sin(a)/e,r=this.y0+1*this.a*(this.cos_p14*s-this.sin_p14*i*h)/e):(n=this.x0+this.infinity_dist*i*Math.sin(a),r=this.y0+this.infinity_dist*(this.cos_p14*s-this.sin_p14*i*h)),t.x=n,t.y=r,t},inverse:function(t){var s,i,a,h,e,n;return t.x=(t.x-this.x0)/this.a,t.y=(t.y-this.y0)/this.a,t.x/=this.k0,t.y/=this.k0,(s=Math.sqrt(t.x*t.x+t.y*t.y))?(h=Math.atan2(s,this.rc),i=Math.sin(h),a=Math.cos(h),n=Fs(a*this.sin_p14+t.y*i*this.cos_p14/s),e=Math.atan2(t.x*i,s*this.cos_p14*a-t.y*this.sin_p14*i),e=qt(this.long0+e)):(n=this.phic0,e=0),t.x=e,t.y=n,t},names:["gnom"]},Hs=function(t,s){var i=1-(1-t*t)/(2*t)*Math.log((1-t)/(1+t));if(Math.abs(Math.abs(s)-i)<1e-6)return s<0?-1*ht:ht;for(var a,h,e,n,r=Math.asin(.5*s),o=0;o<30;o++)if(h=Math.sin(r),e=Math.cos(r),n=t*h,a=Math.pow(1-n*n,2)/(2*e)*(s/(1-t*t)-h/(1-n*n)+.5/t*Math.log((1-n)/(1+n))),r+=a,Math.abs(a)<=1e-10)return r;return NaN},Xs={init:function(){this.sphere||(this.k0=St(this.e,Math.sin(this.lat_ts),Math.cos(this.lat_ts)));},forward:function(t){var s,i,a=t.x,h=t.y,e=qt(a-this.long0);if(this.sphere)s=this.x0+this.a*e*Math.cos(this.lat_ts),i=this.y0+this.a*Math.sin(h)/Math.cos(this.lat_ts);else {var n=Gs(this.e,Math.sin(h));s=this.x0+this.a*this.k0*e,i=this.y0+this.a*n*.5/this.k0;}return t.x=s,t.y=i,t},inverse:function(t){t.x-=this.x0,t.y-=this.y0;var s,i;return this.sphere?(s=qt(this.long0+t.x/this.a/Math.cos(this.lat_ts)),i=Math.asin(t.y/this.a*Math.cos(this.lat_ts))):(i=Hs(this.e,2*t.y*this.k0/this.a),s=qt(this.long0+t.x/(this.a*this.k0))),t.x=s,t.y=i,t},names:["cea"]},Ks={init:function(){this.x0=this.x0||0,this.y0=this.y0||0,this.lat0=this.lat0||0,this.long0=this.long0||0,this.lat_ts=this.lat_ts||0,this.title=this.title||"Equidistant Cylindrical (Plate Carre)",this.rc=Math.cos(this.lat_ts);},forward:function(t){var s=t.x,i=t.y,a=qt(s-this.long0),h=Is(i-this.lat0);return t.x=this.x0+this.a*a*this.rc,t.y=this.y0+this.a*h,t},inverse:function(t){var s=t.x,i=t.y;return t.x=qt(this.long0+(s-this.x0)/(this.a*this.rc)),t.y=Is(this.lat0+(i-this.y0)/this.a),t},names:["Equirectangular","Equidistant_Cylindrical","eqc"]},Js=20,Vs={init:function(){this.temp=this.b/this.a,this.es=1-Math.pow(this.temp,2),this.e=Math.sqrt(this.es),this.e0=Ps(this.es),this.e1=Ns(this.es),this.e2=Ss(this.es),this.e3=ks(this.es),this.ml0=this.a*Es(this.e0,this.e1,this.e2,this.e3,this.lat0);},forward:function(t){var s,i,a,h=t.x,e=t.y,n=qt(h-this.long0);if(a=n*Math.sin(e),this.sphere)Math.abs(e)<=ot?(s=this.a*n,i=-1*this.a*this.lat0):(s=this.a*Math.sin(a)/Math.tan(e),i=this.a*(Is(e-this.lat0)+(1-Math.cos(a))/Math.tan(e)));else if(Math.abs(e)<=ot)s=this.a*n,i=-1*this.ml0;else {var r=qs(this.a,this.e,Math.sin(e))/Math.tan(e);s=r*Math.sin(a),i=this.a*Es(this.e0,this.e1,this.e2,this.e3,e)-this.ml0+r*(1-Math.cos(a));}return t.x=s+this.x0,t.y=i+this.y0,t},inverse:function(t){var s,i,a,h,e,n,r,o,l;if(a=t.x-this.x0,h=t.y-this.y0,this.sphere)if(Math.abs(h+this.a*this.lat0)<=ot)s=qt(a/this.a+this.long0),i=0;else {n=this.lat0+h/this.a,r=a*a/this.a/this.a+n*n,o=n;var M;for(e=Js;e;--e)if(M=Math.tan(o),l=-1*(n*(o*M+1)-o-.5*(o*o+r)*M)/((o-n)/M-1),o+=l,Math.abs(l)<=ot){i=o;break}s=qt(this.long0+Math.asin(a*Math.tan(o)/this.a)/Math.sin(i));}else if(Math.abs(h+this.ml0)<=ot)i=0,s=qt(this.long0+a/this.a);else {n=(this.ml0+h)/this.a,r=a*a/this.a/this.a+n*n,o=n;var c,u,f,m,p;for(e=Js;e;--e)if(p=this.e*Math.sin(o),c=Math.sqrt(1-p*p)*Math.tan(o),u=this.a*Es(this.e0,this.e1,this.e2,this.e3,o),f=this.e0-2*this.e1*Math.cos(2*o)+4*this.e2*Math.cos(4*o)-6*this.e3*Math.cos(6*o),m=u/this.a,l=(n*(c*m+1)-m-.5*c*(m*m+r))/(this.es*Math.sin(2*o)*(m*m+r-2*n*m)/(4*c)+(n-m)*(c*f-2/Math.sin(2*o))-f),o-=l,Math.abs(l)<=ot){i=o;break}c=Math.sqrt(1-this.es*Math.pow(Math.sin(i),2))*Math.tan(i),s=qt(this.long0+Math.asin(a*c/this.a)/Math.sin(i));}return t.x=s,t.y=i,t},names:["Polyconic","poly"]},Zs={init:function(){this.A=[],this.A[1]=.6399175073,this.A[2]=-.1358797613,this.A[3]=.063294409,this.A[4]=-.02526853,this.A[5]=.0117879,this.A[6]=-.0055161,this.A[7]=.0026906,this.A[8]=-.001333,this.A[9]=67e-5,this.A[10]=-34e-5,this.B_re=[],this.B_im=[],this.B_re[1]=.7557853228,this.B_im[1]=0,this.B_re[2]=.249204646,this.B_im[2]=.003371507,this.B_re[3]=-.001541739,this.B_im[3]=.04105856,this.B_re[4]=-.10162907,this.B_im[4]=.01727609,this.B_re[5]=-.26623489,this.B_im[5]=-.36249218,this.B_re[6]=-.6870983,this.B_im[6]=-1.1651967,this.C_re=[],this.C_im=[],this.C_re[1]=1.3231270439,this.C_im[1]=0,this.C_re[2]=-.577245789,this.C_im[2]=-.007809598,this.C_re[3]=.508307513,this.C_im[3]=-.112208952,this.C_re[4]=-.15094762,this.C_im[4]=.18200602,this.C_re[5]=1.01418179,this.C_im[5]=1.64497696,this.C_re[6]=1.9660549,this.C_im[6]=2.5127645,this.D=[],this.D[1]=1.5627014243,this.D[2]=.5185406398,this.D[3]=-.03333098,this.D[4]=-.1052906,this.D[5]=-.0368594,this.D[6]=.007317,this.D[7]=.0122,this.D[8]=.00394,this.D[9]=-.0013;},forward:function(t){var s,i=t.x,a=t.y-this.lat0,h=i-this.long0,e=a/at*1e-5,n=h,r=1,o=0;for(s=1;s<=10;s++)r*=e,o+=this.A[s]*r;var l,M=o,c=n,u=1,f=0,m=0,p=0;for(s=1;s<=6;s++)l=f*M+u*c,u=u*M-f*c,f=l,m=m+this.B_re[s]*u-this.B_im[s]*f,p=p+this.B_im[s]*u+this.B_re[s]*f;return t.x=p*this.a+this.x0,t.y=m*this.a+this.y0,t},inverse:function(t){var s,i,a=t.x,h=t.y,e=a-this.x0,n=(h-this.y0)/this.a,r=e/this.a,o=1,l=0,M=0,c=0;for(s=1;s<=6;s++)i=l*n+o*r,o=o*n-l*r,l=i,M=M+this.C_re[s]*o-this.C_im[s]*l,c=c+this.C_im[s]*o+this.C_re[s]*l;for(var u=0;u<this.iterations;u++){var f,m=M,p=c,d=n,y=r;for(s=2;s<=6;s++)f=p*M+m*c,m=m*M-p*c,p=f,d+=(s-1)*(this.B_re[s]*m-this.B_im[s]*p),y+=(s-1)*(this.B_im[s]*m+this.B_re[s]*p);m=1,p=0;var _=this.B_re[1],x=this.B_im[1];for(s=2;s<=6;s++)f=p*M+m*c,m=m*M-p*c,p=f,_+=s*(this.B_re[s]*m-this.B_im[s]*p),x+=s*(this.B_im[s]*m+this.B_re[s]*p);var v=_*_+x*x;M=(d*_+y*x)/v,c=(y*_-d*x)/v;}var g=M,b=c,w=1,A=0;for(s=1;s<=9;s++)w*=g,A+=this.D[s]*w;var C=this.lat0+A*at*1e5,E=this.long0+b;return t.x=E,t.y=C,t},names:["New_Zealand_Map_Grid","nzmg"]},Ys={init:function(){},forward:function(t){var s=t.x,i=t.y,a=qt(s-this.long0),h=this.x0+this.a*a,e=this.y0+this.a*Math.log(Math.tan(Math.PI/4+i/2.5))*1.25;return t.x=h,t.y=e,t},inverse:function(t){t.x-=this.x0,t.y-=this.y0;var s=qt(this.long0+t.x/this.a),i=2.5*(Math.atan(Math.exp(.8*t.y/this.a))-Math.PI/4);return t.x=s,t.y=i,t},names:["Miller_Cylindrical","mill"]},$s=20,ti={init:function(){this.sphere?(this.n=1,this.m=0,this.es=0,this.C_y=Math.sqrt((this.m+1)/this.n),this.C_x=this.C_y/(this.m+1)):this.en=is(this.es);},forward:function(t){var s,i,a=t.x,h=t.y;if(a=qt(a-this.long0),this.sphere){if(this.m)for(var e=this.n*Math.sin(h),n=$s;n;--n){var r=(this.m*h+Math.sin(h)-e)/(this.m+Math.cos(h));if(h-=r,Math.abs(r)<ot)break}else h=1!==this.n?Math.asin(this.n*Math.sin(h)):h;s=this.a*this.C_x*a*(this.m+Math.cos(h)),i=this.a*this.C_y*h;}else {var o=Math.sin(h),l=Math.cos(h);i=this.a*as(h,o,l,this.en),s=this.a*a*l/Math.sqrt(1-this.es*o*o);}return t.x=s,t.y=i,t},inverse:function(t){var s,i,a,h;return t.x-=this.x0,a=t.x/this.a,t.y-=this.y0,s=t.y/this.a,this.sphere?(s/=this.C_y,a/=this.C_x*(this.m+Math.cos(s)),this.m?s=Fs((this.m*s+Math.sin(s))/this.n):1!==this.n&&(s=Fs(Math.sin(s)/this.n)),a=qt(a+this.long0),s=Is(s)):(s=hs(t.y/this.a,this.es,this.en),(h=Math.abs(s))<ht?(h=Math.sin(s),i=this.long0+t.x*Math.sqrt(1-this.es*h*h)/(this.a*Math.cos(s)),a=qt(i)):h-ot<ht&&(a=this.long0)),t.x=a,t.y=s,t},names:["Sinusoidal","sinu"]},si={init:function(){},forward:function(t){for(var s=t.x,i=t.y,a=qt(s-this.long0),h=i,e=Math.PI*Math.sin(i);;){var n=-(h+Math.sin(h)-e)/(1+Math.cos(h));if(h+=n,Math.abs(n)<ot)break}h/=2,Math.PI/2-Math.abs(i)<ot&&(a=0);var r=.900316316158*this.a*a*Math.cos(h)+this.x0,o=1.4142135623731*this.a*Math.sin(h)+this.y0;return t.x=r,t.y=o,t},inverse:function(t){var s,i;t.x-=this.x0,t.y-=this.y0,i=t.y/(1.4142135623731*this.a),Math.abs(i)>.999999999999&&(i=.999999999999),s=Math.asin(i);var a=qt(this.long0+t.x/(.900316316158*this.a*Math.cos(s)));a<-Math.PI&&(a=-Math.PI),a>Math.PI&&(a=Math.PI),i=(2*s+Math.sin(2*s))/Math.PI,Math.abs(i)>1&&(i=1);var h=Math.asin(i);return t.x=a,t.y=h,t},names:["Mollweide","moll"]},ii={init:function(){Math.abs(this.lat1+this.lat2)<ot||(this.lat2=this.lat2||this.lat1,this.temp=this.b/this.a,this.es=1-Math.pow(this.temp,2),this.e=Math.sqrt(this.es),this.e0=Ps(this.es),this.e1=Ns(this.es),this.e2=Ss(this.es),this.e3=ks(this.es),this.sinphi=Math.sin(this.lat1),this.cosphi=Math.cos(this.lat1),this.ms1=St(this.e,this.sinphi,this.cosphi),this.ml1=Es(this.e0,this.e1,this.e2,this.e3,this.lat1),Math.abs(this.lat1-this.lat2)<ot?this.ns=this.sinphi:(this.sinphi=Math.sin(this.lat2),this.cosphi=Math.cos(this.lat2),this.ms2=St(this.e,this.sinphi,this.cosphi),this.ml2=Es(this.e0,this.e1,this.e2,this.e3,this.lat2),this.ns=(this.ms1-this.ms2)/(this.ml2-this.ml1)),this.g=this.ml1+this.ms1/this.ns,this.ml0=Es(this.e0,this.e1,this.e2,this.e3,this.lat0),this.rh=this.a*(this.g-this.ml0));},forward:function(t){var s,i=t.x,a=t.y;if(this.sphere)s=this.a*(this.g-a);else {var h=Es(this.e0,this.e1,this.e2,this.e3,a);s=this.a*(this.g-h);}var e=this.ns*qt(i-this.long0),n=this.x0+s*Math.sin(e),r=this.y0+this.rh-s*Math.cos(e);return t.x=n,t.y=r,t},inverse:function(t){t.x-=this.x0,t.y=this.rh-t.y+this.y0;var s,i,a,h;this.ns>=0?(i=Math.sqrt(t.x*t.x+t.y*t.y),s=1):(i=-Math.sqrt(t.x*t.x+t.y*t.y),s=-1);var e=0;if(0!==i&&(e=Math.atan2(s*t.x,s*t.y)),this.sphere)return h=qt(this.long0+e/this.ns),a=Is(this.g-i/this.a),t.x=h,t.y=a,t;var n=this.g-i/this.a;return a=Os(n,this.e0,this.e1,this.e2,this.e3),h=qt(this.long0+e/this.ns),t.x=h,t.y=a,t},names:["Equidistant_Conic","eqdc"]},ai={init:function(){this.R=this.a;},forward:function(t){var s,i,a=t.x,h=t.y,e=qt(a-this.long0);Math.abs(h)<=ot&&(s=this.x0+this.R*e,i=this.y0);var n=Fs(2*Math.abs(h/Math.PI));(Math.abs(e)<=ot||Math.abs(Math.abs(h)-ht)<=ot)&&(s=this.x0,i=h>=0?this.y0+Math.PI*this.R*Math.tan(.5*n):this.y0+Math.PI*this.R*-Math.tan(.5*n));var r=.5*Math.abs(Math.PI/e-e/Math.PI),o=r*r,l=Math.sin(n),M=Math.cos(n),c=M/(l+M-1),u=c*c,f=c*(2/l-1),m=f*f,p=Math.PI*this.R*(r*(c-m)+Math.sqrt(o*(c-m)*(c-m)-(m+o)*(u-m)))/(m+o);e<0&&(p=-p),s=this.x0+p;var d=o+c;return p=Math.PI*this.R*(f*d-r*Math.sqrt((m+o)*(o+1)-d*d))/(m+o),i=h>=0?this.y0+p:this.y0-p,t.x=s,t.y=i,t},inverse:function(t){var s,i,a,h,e,n,r,o,l,M,c,u,f;return t.x-=this.x0,t.y-=this.y0,c=Math.PI*this.R,a=t.x/c,h=t.y/c,e=a*a+h*h,n=-Math.abs(h)*(1+e),r=n-2*h*h+a*a,o=-2*n+1+2*h*h+e*e,f=h*h/o+(2*r*r*r/o/o/o-9*n*r/o/o)/27,l=(n-r*r/3/o)/o,M=2*Math.sqrt(-l/3),c=3*f/l/M,Math.abs(c)>1&&(c=c>=0?1:-1),u=Math.acos(c)/3,i=t.y>=0?(-M*Math.cos(u+Math.PI/3)-r/3/o)*Math.PI:-(-M*Math.cos(u+Math.PI/3)-r/3/o)*Math.PI,s=Math.abs(a)<ot?this.long0:qt(this.long0+Math.PI*(e-1+Math.sqrt(1+2*(a*a-h*h)+e*e))/2/a),t.x=s,t.y=i,t},names:["Van_der_Grinten_I","VanDerGrinten","vandg"]},hi={init:function(){this.sin_p12=Math.sin(this.lat0),this.cos_p12=Math.cos(this.lat0);},forward:function(t){var s,i,a,h,e,n,r,o,l,M,c,u,f,m,p,d,y,_,x,v,g,b,w,A=t.x,C=t.y,E=Math.sin(t.y),P=Math.cos(t.y),N=qt(A-this.long0);return this.sphere?Math.abs(this.sin_p12-1)<=ot?(t.x=this.x0+this.a*(ht-C)*Math.sin(N),t.y=this.y0-this.a*(ht-C)*Math.cos(N),t):Math.abs(this.sin_p12+1)<=ot?(t.x=this.x0+this.a*(ht+C)*Math.sin(N),t.y=this.y0+this.a*(ht+C)*Math.cos(N),t):(_=this.sin_p12*E+this.cos_p12*P*Math.cos(N),d=Math.acos(_),y=d/Math.sin(d),t.x=this.x0+this.a*y*P*Math.sin(N),t.y=this.y0+this.a*y*(this.cos_p12*E-this.sin_p12*P*Math.cos(N)),t):(s=Ps(this.es),i=Ns(this.es),a=Ss(this.es),h=ks(this.es),Math.abs(this.sin_p12-1)<=ot?(e=this.a*Es(s,i,a,h,ht),n=this.a*Es(s,i,a,h,C),t.x=this.x0+(e-n)*Math.sin(N),t.y=this.y0-(e-n)*Math.cos(N),t):Math.abs(this.sin_p12+1)<=ot?(e=this.a*Es(s,i,a,h,ht),n=this.a*Es(s,i,a,h,C),t.x=this.x0+(e+n)*Math.sin(N),t.y=this.y0+(e+n)*Math.cos(N),t):(r=E/P,o=qs(this.a,this.e,this.sin_p12),l=qs(this.a,this.e,E),M=Math.atan((1-this.es)*r+this.es*o*this.sin_p12/(l*P)),c=Math.atan2(Math.sin(N),this.cos_p12*Math.tan(M)-this.sin_p12*Math.cos(N)),x=0===c?Math.asin(this.cos_p12*Math.sin(M)-this.sin_p12*Math.cos(M)):Math.abs(Math.abs(c)-Math.PI)<=ot?-Math.asin(this.cos_p12*Math.sin(M)-this.sin_p12*Math.cos(M)):Math.asin(Math.sin(N)*Math.cos(M)/Math.sin(c)),u=this.e*this.sin_p12/Math.sqrt(1-this.es),f=this.e*this.cos_p12*Math.cos(c)/Math.sqrt(1-this.es),m=u*f,p=f*f,v=x*x,g=v*x,b=g*x,w=b*x,d=o*x*(1-v*p*(1-p)/6+g/8*m*(1-2*p)+b/120*(p*(4-7*p)-3*u*u*(1-7*p))-w/48*m),t.x=this.x0+d*Math.sin(c),t.y=this.y0+d*Math.cos(c),t))},inverse:function(t){t.x-=this.x0,t.y-=this.y0;var s,i,a,h,e,n,r,o,l,M,c,u,f,m,p,d,y,_,x,v,g,b,w;if(this.sphere){if((s=Math.sqrt(t.x*t.x+t.y*t.y))>2*ht*this.a)return;return i=s/this.a,a=Math.sin(i),h=Math.cos(i),e=this.long0,Math.abs(s)<=ot?n=this.lat0:(n=Fs(h*this.sin_p12+t.y*a*this.cos_p12/s),r=Math.abs(this.lat0)-ht,e=qt(Math.abs(r)<=ot?this.lat0>=0?this.long0+Math.atan2(t.x,-t.y):this.long0-Math.atan2(-t.x,t.y):this.long0+Math.atan2(t.x*a,s*this.cos_p12*h-t.y*this.sin_p12*a))),t.x=e,t.y=n,t}return o=Ps(this.es),l=Ns(this.es),M=Ss(this.es),c=ks(this.es),Math.abs(this.sin_p12-1)<=ot?(u=this.a*Es(o,l,M,c,ht),s=Math.sqrt(t.x*t.x+t.y*t.y),f=u-s,n=Os(f/this.a,o,l,M,c),e=qt(this.long0+Math.atan2(t.x,-1*t.y)),t.x=e,t.y=n,t):Math.abs(this.sin_p12+1)<=ot?(u=this.a*Es(o,l,M,c,ht),s=Math.sqrt(t.x*t.x+t.y*t.y),f=s-u,n=Os(f/this.a,o,l,M,c),e=qt(this.long0+Math.atan2(t.x,t.y)),t.x=e,t.y=n,t):(s=Math.sqrt(t.x*t.x+t.y*t.y),d=Math.atan2(t.x,t.y),m=qs(this.a,this.e,this.sin_p12),y=Math.cos(d),_=this.e*this.cos_p12*y,x=-_*_/(1-this.es),v=3*this.es*(1-x)*this.sin_p12*this.cos_p12*y/(1-this.es),g=s/m,b=g-x*(1+x)*Math.pow(g,3)/6-v*(1+3*x)*Math.pow(g,4)/24,w=1-x*b*b/2-g*b*b*b/6,p=Math.asin(this.sin_p12*Math.cos(b)+this.cos_p12*Math.sin(b)*y),e=qt(this.long0+Math.asin(Math.sin(d)*Math.sin(b)/Math.cos(p))),n=Math.atan((1-this.es*w*this.sin_p12/Math.sin(p))*Math.tan(p)/(1-this.es)),t.x=e,t.y=n,t)},names:["Azimuthal_Equidistant","aeqd"]},ei={init:function(){this.sin_p14=Math.sin(this.lat0),this.cos_p14=Math.cos(this.lat0);},forward:function(t){var s,i,a,h,e,n,r,o=t.x,l=t.y;return a=qt(o-this.long0),s=Math.sin(l),i=Math.cos(l),h=Math.cos(a),((e=this.sin_p14*s+this.cos_p14*i*h)>0||Math.abs(e)<=ot)&&(n=1*this.a*i*Math.sin(a),r=this.y0+1*this.a*(this.cos_p14*s-this.sin_p14*i*h)),t.x=n,t.y=r,t},inverse:function(t){var s,i,a,h,e,n,r;return t.x-=this.x0,t.y-=this.y0,s=Math.sqrt(t.x*t.x+t.y*t.y),i=Fs(s/this.a),a=Math.sin(i),h=Math.cos(i),n=this.long0,Math.abs(s)<=ot?(r=this.lat0,t.x=n,t.y=r,t):(r=Fs(h*this.sin_p14+t.y*a*this.cos_p14/s),e=Math.abs(this.lat0)-ht,Math.abs(e)<=ot?(n=qt(this.lat0>=0?this.long0+Math.atan2(t.x,-t.y):this.long0-Math.atan2(-t.x,t.y)),t.x=n,t.y=r,t):(n=qt(this.long0+Math.atan2(t.x*a,s*this.cos_p14*h-t.y*this.sin_p14*a)),t.x=n,t.y=r,t))},names:["ortho"]},ni={FRONT:1,RIGHT:2,BACK:3,LEFT:4,TOP:5,BOTTOM:6},ri={AREA_0:1,AREA_1:2,AREA_2:3,AREA_3:4},oi={init:function(){this.x0=this.x0||0,this.y0=this.y0||0,this.lat0=this.lat0||0,this.long0=this.long0||0,this.lat_ts=this.lat_ts||0,this.title=this.title||"Quadrilateralized Spherical Cube",this.lat0>=ht-ct/2?this.face=ni.TOP:this.lat0<=-(ht-ct/2)?this.face=ni.BOTTOM:Math.abs(this.long0)<=ct?this.face=ni.FRONT:Math.abs(this.long0)<=ht+ct?this.face=this.long0>0?ni.RIGHT:ni.LEFT:this.face=ni.BACK,0!==this.es&&(this.one_minus_f=1-(this.a-this.b)/this.a,this.one_minus_f_squared=this.one_minus_f*this.one_minus_f);},forward:function(t){var s,i,a,h,e,n,r={x:0,y:0},o={value:0};if(t.x-=this.long0,s=0!==this.es?Math.atan(this.one_minus_f_squared*Math.tan(t.y)):t.y,i=t.x,this.face===ni.TOP)h=ht-s,i>=ct&&i<=ht+ct?(o.value=ri.AREA_0,a=i-ht):i>ht+ct||i<=-(ht+ct)?(o.value=ri.AREA_1,a=i>0?i-ft:i+ft):i>-(ht+ct)&&i<=-ct?(o.value=ri.AREA_2,a=i+ht):(o.value=ri.AREA_3,a=i);else if(this.face===ni.BOTTOM)h=ht+s,i>=ct&&i<=ht+ct?(o.value=ri.AREA_0,a=-i+ht):i<ct&&i>=-ct?(o.value=ri.AREA_1,a=-i):i<-ct&&i>=-(ht+ct)?(o.value=ri.AREA_2,a=-i-ht):(o.value=ri.AREA_3,a=i>0?-i+ft:-i-ft);else {var l,M,c,u,f,m;this.face===ni.RIGHT?i=Z(i,+ht):this.face===ni.BACK?i=Z(i,+ft):this.face===ni.LEFT&&(i=Z(i,-ht)),u=Math.sin(s),f=Math.cos(s),m=Math.sin(i),l=f*Math.cos(i),M=f*m,c=u,this.face===ni.FRONT?a=V(h=Math.acos(l),c,M,o):this.face===ni.RIGHT?a=V(h=Math.acos(M),c,-l,o):this.face===ni.BACK?a=V(h=Math.acos(-l),c,-M,o):this.face===ni.LEFT?a=V(h=Math.acos(-M),c,l,o):(h=a=0,o.value=ri.AREA_0);}return n=Math.atan(12/ft*(a+Math.acos(Math.sin(a)*Math.cos(ct))-ht)),e=Math.sqrt((1-Math.cos(h))/(Math.cos(n)*Math.cos(n))/(1-Math.cos(Math.atan(1/Math.cos(a))))),o.value===ri.AREA_1?n+=ht:o.value===ri.AREA_2?n+=ft:o.value===ri.AREA_3&&(n+=1.5*ft),r.x=e*Math.cos(n),r.y=e*Math.sin(n),r.x=r.x*this.a+this.x0,r.y=r.y*this.a+this.y0,t.x=r.x,t.y=r.y,t},inverse:function(t){var s,i,a,h,e,n,r,o,l,M={lam:0,phi:0},c={value:0};if(t.x=(t.x-this.x0)/this.a,t.y=(t.y-this.y0)/this.a,i=Math.atan(Math.sqrt(t.x*t.x+t.y*t.y)),s=Math.atan2(t.y,t.x),t.x>=0&&t.x>=Math.abs(t.y)?c.value=ri.AREA_0:t.y>=0&&t.y>=Math.abs(t.x)?(c.value=ri.AREA_1,s-=ht):t.x<0&&-t.x>=Math.abs(t.y)?(c.value=ri.AREA_2,s=s<0?s+ft:s-ft):(c.value=ri.AREA_3,s+=ht),l=ft/12*Math.tan(s),e=Math.sin(l)/(Math.cos(l)-1/Math.sqrt(2)),n=Math.atan(e),a=Math.cos(s),h=Math.tan(i),(r=1-a*a*h*h*(1-Math.cos(Math.atan(1/Math.cos(n)))))<-1?r=-1:r>1&&(r=1),this.face===ni.TOP)o=Math.acos(r),M.phi=ht-o,c.value===ri.AREA_0?M.lam=n+ht:c.value===ri.AREA_1?M.lam=n<0?n+ft:n-ft:c.value===ri.AREA_2?M.lam=n-ht:M.lam=n;else if(this.face===ni.BOTTOM)o=Math.acos(r),M.phi=o-ht,c.value===ri.AREA_0?M.lam=-n+ht:c.value===ri.AREA_1?M.lam=-n:c.value===ri.AREA_2?M.lam=-n-ht:M.lam=n<0?-n-ft:-n+ft;else {var u,f,m;l=(u=r)*u,f=(l+=(m=l>=1?0:Math.sqrt(1-l)*Math.sin(n))*m)>=1?0:Math.sqrt(1-l),c.value===ri.AREA_1?(l=f,f=-m,m=l):c.value===ri.AREA_2?(f=-f,m=-m):c.value===ri.AREA_3&&(l=f,f=m,m=-l),this.face===ni.RIGHT?(l=u,u=-f,f=l):this.face===ni.BACK?(u=-u,f=-f):this.face===ni.LEFT&&(l=u,u=f,f=-l),M.phi=Math.acos(-m)-ht,M.lam=Math.atan2(f,u),this.face===ni.RIGHT?M.lam=Z(M.lam,-ht):this.face===ni.BACK?M.lam=Z(M.lam,-ft):this.face===ni.LEFT&&(M.lam=Z(M.lam,+ht));}if(0!==this.es){var p,d,y;p=M.phi<0?1:0,d=Math.tan(M.phi),y=this.b/Math.sqrt(d*d+this.one_minus_f_squared),M.phi=Math.atan(Math.sqrt(this.a*this.a-y*y)/(this.one_minus_f*y)),p&&(M.phi=-M.phi);}return M.lam+=this.long0,t.x=M.lam,t.y=M.phi,t},names:["Quadrilateralized Spherical Cube","Quadrilateralized_Spherical_Cube","qsc"]},li=[[1,2.2199e-17,-715515e-10,31103e-10],[.9986,-482243e-9,-24897e-9,-13309e-10],[.9954,-83103e-8,-448605e-10,-9.86701e-7],[.99,-.00135364,-59661e-9,36777e-10],[.9822,-.00167442,-449547e-11,-572411e-11],[.973,-.00214868,-903571e-10,1.8736e-8],[.96,-.00305085,-900761e-10,164917e-11],[.9427,-.00382792,-653386e-10,-26154e-10],[.9216,-.00467746,-10457e-8,481243e-11],[.8962,-.00536223,-323831e-10,-543432e-11],[.8679,-.00609363,-113898e-9,332484e-11],[.835,-.00698325,-640253e-10,9.34959e-7],[.7986,-.00755338,-500009e-10,9.35324e-7],[.7597,-.00798324,-35971e-9,-227626e-11],[.7186,-.00851367,-701149e-10,-86303e-10],[.6732,-.00986209,-199569e-9,191974e-10],[.6213,-.010418,883923e-10,624051e-11],[.5722,-.00906601,182e-6,624051e-11],[.5322,-.00677797,275608e-9,624051e-11]],Mi=[[-5.20417e-18,.0124,1.21431e-18,-8.45284e-11],[.062,.0124,-1.26793e-9,4.22642e-10],[.124,.0124,5.07171e-9,-1.60604e-9],[.186,.0123999,-1.90189e-8,6.00152e-9],[.248,.0124002,7.10039e-8,-2.24e-8],[.31,.0123992,-2.64997e-7,8.35986e-8],[.372,.0124029,9.88983e-7,-3.11994e-7],[.434,.0123893,-369093e-11,-4.35621e-7],[.4958,.0123198,-102252e-10,-3.45523e-7],[.5571,.0121916,-154081e-10,-5.82288e-7],[.6176,.0119938,-241424e-10,-5.25327e-7],[.6769,.011713,-320223e-10,-5.16405e-7],[.7346,.0113541,-397684e-10,-6.09052e-7],[.7903,.0109107,-489042e-10,-104739e-11],[.8435,.0103431,-64615e-9,-1.40374e-9],[.8936,.00969686,-64636e-9,-8547e-9],[.9394,.00840947,-192841e-9,-42106e-10],[.9761,.00616527,-256e-6,-42106e-10],[1,.00328947,-319159e-9,-42106e-10]],ci=.8487,ui=1.3523,fi=Mt/5,mi=1/fi,pi=18,di=function(t,s){return t[0]+s*(t[1]+s*(t[2]+s*t[3]))},yi=function(t,s){return t[1]+s*(2*t[2]+3*s*t[3])},_i={init:function(){this.x0=this.x0||0,this.y0=this.y0||0,this.long0=this.long0||0,this.es=0,this.title=this.title||"Robinson";},forward:function(t){var s=qt(t.x-this.long0),i=Math.abs(t.y),a=Math.floor(i*fi);a<0?a=0:a>=pi&&(a=pi-1),i=Mt*(i-mi*a);var h={x:di(li[a],i)*s,y:di(Mi[a],i)};return t.y<0&&(h.y=-h.y),h.x=h.x*this.a*ci+this.x0,h.y=h.y*this.a*ui+this.y0,h},inverse:function(t){var s={x:(t.x-this.x0)/(this.a*ci),y:Math.abs(t.y-this.y0)/(this.a*ui)};if(s.y>=1)s.x/=li[pi][0],s.y=t.y<0?-ht:ht;else {var i=Math.floor(s.y*pi);for(i<0?i=0:i>=pi&&(i=pi-1);;)if(Mi[i][0]>s.y)--i;else {if(!(Mi[i+1][0]<=s.y))break;++i;}var a=Mi[i],h=5*(s.y-a[0])/(Mi[i+1][0]-a[0]);h=Y(function(t){return (di(a,t)-s.y)/yi(a,t)},h,ot,100),s.x/=di(li[i],h),s.y=(5*i+h)*lt,t.y<0&&(s.y=-s.y);}return s.x=qt(s.x+this.long0),s},names:["Robinson","robin"]},xi={init:function(){this.name="geocent";},forward:function(t){return b(t,this.es,this.a)},inverse:function(t){return w(t,this.es,this.a,this.b)},names:["Geocentric","geocentric","geocent","Geocent"]};return I.defaultDatum="WGS84",I.Proj=Projection,I.WGS84=new I.Proj("WGS84"),I.Point=Point,I.toPoint=Ft,I.defs=o,I.transform=S,I.mgrs=ts,I.version="2.6.1",function(proj4){proj4.Proj.projections.add(es),proj4.Proj.projections.add(ms),proj4.Proj.projections.add(ds),proj4.Proj.projections.add(vs),proj4.Proj.projections.add(gs),proj4.Proj.projections.add(bs),proj4.Proj.projections.add(ws),proj4.Proj.projections.add(As),proj4.Proj.projections.add(Cs),proj4.Proj.projections.add(Rs),proj4.Proj.projections.add(Us),proj4.Proj.projections.add(Qs),proj4.Proj.projections.add(Ws),proj4.Proj.projections.add(Xs),proj4.Proj.projections.add(Ks),proj4.Proj.projections.add(Vs),proj4.Proj.projections.add(Zs),proj4.Proj.projections.add(Ys),proj4.Proj.projections.add(ti),proj4.Proj.projections.add(si),proj4.Proj.projections.add(ii),proj4.Proj.projections.add(ai),proj4.Proj.projections.add(hi),proj4.Proj.projections.add(ei),proj4.Proj.projections.add(oi),proj4.Proj.projections.add(_i),proj4.Proj.projections.add(xi);}(I),I});
  });

  var fontWeights = {
    thin: 100,
    hairline: 100,
    'ultra-light': 100,
    'extra-light': 100,
    light: 200,
    book: 300,
    regular: 400,
    normal: 400,
    plain: 400,
    roman: 400,
    standard: 400,
    medium: 500,
    'semi-bold': 600,
    'demi-bold': 600,
    bold: 700,
    heavy: 800,
    black: 800,
    'extra-bold': 800,
    'ultra-black': 900,
    'extra-black': 900,
    'ultra-bold': 900,
    'heavy-black': 900,
    fat: 900,
    poster: 900
  };
  var sp = ' ';
  var italicRE = /(italic|oblique)$/i;

  var fontCache = {};

  var mapboxToCssFont = function(fonts, size, lineHeight) {
    var cssData = fontCache[fonts];
    if (!cssData) {
      if (!Array.isArray(fonts)) {
        fonts = [fonts];
      }
      var weight = 400;
      var style = 'normal';
      var fontFamilies = [];
      var haveWeight, haveStyle;
      for (var i = 0, ii = fonts.length; i < ii; ++i) {
        var font = fonts[i];
        var parts = font.split(' ');
        var maybeWeight = parts[parts.length - 1].toLowerCase();
        if (maybeWeight == 'normal' || maybeWeight == 'italic' || maybeWeight == 'oblique') {
          style = haveStyle ? style : maybeWeight;
          parts.pop();
          maybeWeight = parts[parts.length - 1].toLowerCase();
        } else if (italicRE.test(maybeWeight)) {
          maybeWeight = maybeWeight.replace(italicRE, '');
          style = haveStyle ? style : parts[parts.length - 1].replace(maybeWeight, '');
        }
        for (var w in fontWeights) {
          if (maybeWeight == w || maybeWeight == w.replace('-', '') || maybeWeight == w.replace('-', sp)) {
            weight = haveWeight ? weight : fontWeights[w];
            parts.pop();
            break;
          }
        }
        if (!haveWeight && typeof maybeWeight == 'number') {
          weight = maybeWeight;
        }
        var fontFamily = parts.join(sp)
          .replace('Klokantech Noto Sans', 'Noto Sans');
        if (fontFamily.indexOf(sp) !== -1) {
          fontFamily = '"' + fontFamily + '"';
        }
        fontFamilies.push(fontFamily);
      }
      // CSS font property: font-style font-weight font-size/line-height font-family
      cssData = fontCache[fonts] = [style, weight, fontFamilies];
    }
    return cssData[0] + sp + cssData[1] + sp + size + 'px' + (lineHeight ? '/' + lineHeight : '') + sp + cssData[2];
  };

  /**
   * @module ol/color
   */
  /**
   * A color represented as a short array [red, green, blue, alpha].
   * red, green, and blue should be integers in the range 0..255 inclusive.
   * alpha should be a float in the range 0..1 inclusive. If no alpha value is
   * given then `1` will be used.
   * @typedef {Array<number>} Color
   * @api
   */
  /**
   * This RegExp matches # followed by 3, 4, 6, or 8 hex digits.
   * @const
   * @type {RegExp}
   * @private
   */
  var HEX_COLOR_RE_ = /^#([a-f0-9]{3}|[a-f0-9]{4}(?:[a-f0-9]{2}){0,2})$/i;
  /**
   * Regular expression for matching potential named color style strings.
   * @const
   * @type {RegExp}
   * @private
   */
  var NAMED_COLOR_RE_ = /^([a-z]*)$|^hsla?\(.*\)$/i;
  /**
   * Return the color as an rgba string.
   * @param {Color|string} color Color.
   * @return {string} Rgba string.
   * @api
   */
  function asString(color) {
      if (typeof color === 'string') {
          return color;
      }
      else {
          return toString$1(color);
      }
  }
  /**
   * Return named color as an rgba string.
   * @param {string} color Named color.
   * @return {string} Rgb string.
   */
  function fromNamed(color) {
      var el = document.createElement('div');
      el.style.color = color;
      if (el.style.color !== '') {
          document.body.appendChild(el);
          var rgb = getComputedStyle(el).color;
          document.body.removeChild(el);
          return rgb;
      }
      else {
          return '';
      }
  }
  /**
   * @param {string} s String.
   * @return {Color} Color.
   */
  var fromString = (function () {
      // We maintain a small cache of parsed strings.  To provide cheap LRU-like
      // semantics, whenever the cache grows too large we simply delete an
      // arbitrary 25% of the entries.
      /**
       * @const
       * @type {number}
       */
      var MAX_CACHE_SIZE = 1024;
      /**
       * @type {Object<string, Color>}
       */
      var cache = {};
      /**
       * @type {number}
       */
      var cacheSize = 0;
      return (
      /**
       * @param {string} s String.
       * @return {Color} Color.
       */
      function (s) {
          var color;
          if (cache.hasOwnProperty(s)) {
              color = cache[s];
          }
          else {
              if (cacheSize >= MAX_CACHE_SIZE) {
                  var i = 0;
                  for (var key in cache) {
                      if ((i++ & 3) === 0) {
                          delete cache[key];
                          --cacheSize;
                      }
                  }
              }
              color = fromStringInternal_(s);
              cache[s] = color;
              ++cacheSize;
          }
          return color;
      });
  })();
  /**
   * Return the color as an array. This function maintains a cache of calculated
   * arrays which means the result should not be modified.
   * @param {Color|string} color Color.
   * @return {Color} Color.
   * @api
   */
  function asArray(color) {
      if (Array.isArray(color)) {
          return color;
      }
      else {
          return fromString(color);
      }
  }
  /**
   * @param {string} s String.
   * @private
   * @return {Color} Color.
   */
  function fromStringInternal_(s) {
      var r, g, b, a, color;
      if (NAMED_COLOR_RE_.exec(s)) {
          s = fromNamed(s);
      }
      if (HEX_COLOR_RE_.exec(s)) { // hex
          var n = s.length - 1; // number of hex digits
          var d = // number of digits per channel
           void 0; // number of digits per channel
          if (n <= 4) {
              d = 1;
          }
          else {
              d = 2;
          }
          var hasAlpha = n === 4 || n === 8;
          r = parseInt(s.substr(1 + 0 * d, d), 16);
          g = parseInt(s.substr(1 + 1 * d, d), 16);
          b = parseInt(s.substr(1 + 2 * d, d), 16);
          if (hasAlpha) {
              a = parseInt(s.substr(1 + 3 * d, d), 16);
          }
          else {
              a = 255;
          }
          if (d == 1) {
              r = (r << 4) + r;
              g = (g << 4) + g;
              b = (b << 4) + b;
              if (hasAlpha) {
                  a = (a << 4) + a;
              }
          }
          color = [r, g, b, a / 255];
      }
      else if (s.indexOf('rgba(') == 0) { // rgba()
          color = s.slice(5, -1).split(',').map(Number);
          normalize$1(color);
      }
      else if (s.indexOf('rgb(') == 0) { // rgb()
          color = s.slice(4, -1).split(',').map(Number);
          color.push(1);
          normalize$1(color);
      }
      else {
          assert(false, 14); // Invalid color
      }
      return color;
  }
  /**
   * TODO this function is only used in the test, we probably shouldn't export it
   * @param {Color} color Color.
   * @return {Color} Clamped color.
   */
  function normalize$1(color) {
      color[0] = clamp((color[0] + 0.5) | 0, 0, 255);
      color[1] = clamp((color[1] + 0.5) | 0, 0, 255);
      color[2] = clamp((color[2] + 0.5) | 0, 0, 255);
      color[3] = clamp(color[3], 0, 1);
      return color;
  }
  /**
   * @param {Color} color Color.
   * @return {string} String.
   */
  function toString$1(color) {
      var r = color[0];
      if (r != (r | 0)) {
          r = (r + 0.5) | 0;
      }
      var g = color[1];
      if (g != (g | 0)) {
          g = (g + 0.5) | 0;
      }
      var b = color[2];
      if (b != (b | 0)) {
          b = (b + 0.5) | 0;
      }
      var a = color[3] === undefined ? 1 : color[3];
      return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';
  }

  /**
   * @module ol/colorlike
   */
  /**
   * A type accepted by CanvasRenderingContext2D.fillStyle
   * or CanvasRenderingContext2D.strokeStyle.
   * Represents a color, pattern, or gradient. The origin for patterns and
   * gradients as fill style is an increment of 512 css pixels from map coordinate
   * `[0, 0]`. For seamless repeat patterns, width and height of the pattern image
   * must be a factor of two (2, 4, 8, ..., 512).
   *
   * @typedef {string|CanvasPattern|CanvasGradient} ColorLike
   * @api
   */
  /**
   * @param {import("./color.js").Color|ColorLike} color Color.
   * @return {ColorLike} The color as an {@link ol/colorlike~ColorLike}.
   * @api
   */
  function asColorLike(color) {
      if (Array.isArray(color)) {
          return toString$1(color);
      }
      else {
          return color;
      }
  }

  /**
   * @module ol/has
   */
  var ua = typeof navigator !== 'undefined' ?
      navigator.userAgent.toLowerCase() : '';
  /**
   * User agent string says we are dealing with Firefox as browser.
   * @type {boolean}
   */
  var FIREFOX = ua.indexOf('firefox') !== -1;
  /**
   * User agent string says we are dealing with Safari as browser.
   * @type {boolean}
   */
  var SAFARI = ua.indexOf('safari') !== -1 && ua.indexOf('chrom') == -1;
  /**
   * User agent string says we are dealing with a WebKit engine.
   * @type {boolean}
   */
  var WEBKIT = ua.indexOf('webkit') !== -1 && ua.indexOf('edge') == -1;
  /**
   * User agent string says we are dealing with a Mac as platform.
   * @type {boolean}
   */
  var MAC = ua.indexOf('macintosh') !== -1;
  /**
   * The ratio between physical pixels and device-independent pixels
   * (dips) on the device (`window.devicePixelRatio`).
   * @const
   * @type {number}
   * @api
   */
  var DEVICE_PIXEL_RATIO = typeof devicePixelRatio !== 'undefined' ? devicePixelRatio : 1;
  /**
   * The execution context is a worker with OffscreenCanvas available.
   * @const
   * @type {boolean}
   */
  var WORKER_OFFSCREEN_CANVAS = typeof WorkerGlobalScope !== 'undefined' && typeof OffscreenCanvas !== 'undefined' &&
      self instanceof WorkerGlobalScope; //eslint-disable-line
  /**
   * Image.prototype.decode() is supported.
   * @type {boolean}
   */
  var IMAGE_DECODE = typeof Image !== 'undefined' && Image.prototype.decode;
  /**
   * @type {boolean}
   */
  var PASSIVE_EVENT_LISTENERS = (function () {
      var passive = false;
      try {
          var options = Object.defineProperty({}, 'passive', {
              get: function () {
                  passive = true;
              }
          });
          window.addEventListener('_', null, options);
          window.removeEventListener('_', null, options);
      }
      catch (error) {
          // passive not supported
      }
      return passive;
  })();

  /**
   * @module ol/dom
   */
  //FIXME Move this function to the canvas module
  /**
   * Create an html canvas element and returns its 2d context.
   * @param {number=} opt_width Canvas width.
   * @param {number=} opt_height Canvas height.
   * @param {Array<HTMLCanvasElement>=} opt_canvasPool Canvas pool to take existing canvas from.
   * @return {CanvasRenderingContext2D} The context.
   */
  function createCanvasContext2D(opt_width, opt_height, opt_canvasPool) {
      var canvas = opt_canvasPool && opt_canvasPool.length ?
          opt_canvasPool.shift() :
          WORKER_OFFSCREEN_CANVAS ?
              new OffscreenCanvas(opt_width || 300, opt_height || 300) :
              document.createElement('canvas');
      if (opt_width) {
          canvas.width = opt_width;
      }
      if (opt_height) {
          canvas.height = opt_height;
      }
      //FIXME Allow OffscreenCanvasRenderingContext2D as return type
      return /** @type {CanvasRenderingContext2D} */ (canvas.getContext('2d'));
  }
  /**
   * @param {Node} newNode Node to replace old node
   * @param {Node} oldNode The node to be replaced
   */
  function replaceNode(newNode, oldNode) {
      var parent = oldNode.parentNode;
      if (parent) {
          parent.replaceChild(newNode, oldNode);
      }
  }
  /**
   * @param {Node} node The node to remove.
   * @returns {Node} The node that was removed or null.
   */
  function removeNode(node) {
      return node && node.parentNode ? node.parentNode.removeChild(node) : null;
  }
  /**
   * @param {Node} node The node to remove the children from.
   */
  function removeChildren(node) {
      while (node.lastChild) {
          node.removeChild(node.lastChild);
      }
  }
  /**
   * Transform the children of a parent node so they match the
   * provided list of children.  This function aims to efficiently
   * remove, add, and reorder child nodes while maintaining a simple
   * implementation (it is not guaranteed to minimize DOM operations).
   * @param {Node} node The parent node whose children need reworking.
   * @param {Array<Node>} children The desired children.
   */
  function replaceChildren(node, children) {
      var oldChildren = node.childNodes;
      for (var i = 0; true; ++i) {
          var oldChild = oldChildren[i];
          var newChild = children[i];
          // check if our work is done
          if (!oldChild && !newChild) {
              break;
          }
          // check if children match
          if (oldChild === newChild) {
              continue;
          }
          // check if a new child needs to be added
          if (!oldChild) {
              node.appendChild(newChild);
              continue;
          }
          // check if an old child needs to be removed
          if (!newChild) {
              node.removeChild(oldChild);
              --i;
              continue;
          }
          // reorder
          node.insertBefore(newChild, oldChild);
      }
  }

  /**
   * @module ol/ImageState
   */
  /**
   * @enum {number}
   */
  var ImageState = {
      IDLE: 0,
      LOADING: 1,
      LOADED: 2,
      ERROR: 3,
      EMPTY: 4
  };

  /**
   * @module ol/css
   */
  /**
   * @typedef {Object} FontParameters
   * @property {string} style
   * @property {string} variant
   * @property {string} weight
   * @property {string} size
   * @property {string} lineHeight
   * @property {string} family
   * @property {Array<string>} families
   */
  /**
   * The CSS class for hidden feature.
   *
   * @const
   * @type {string}
   */
  var CLASS_HIDDEN = 'ol-hidden';
  /**
   * The CSS class that we'll give the DOM elements to have them unselectable.
   *
   * @const
   * @type {string}
   */
  var CLASS_UNSELECTABLE = 'ol-unselectable';
  /**
   * The CSS class for unsupported feature.
   *
   * @const
   * @type {string}
   */
  var CLASS_UNSUPPORTED = 'ol-unsupported';
  /**
   * The CSS class for controls.
   *
   * @const
   * @type {string}
   */
  var CLASS_CONTROL = 'ol-control';
  /**
   * The CSS class that we'll give the DOM elements that are collapsed, i.e.
   * to those elements which usually can be expanded.
   *
   * @const
   * @type {string}
   */
  var CLASS_COLLAPSED = 'ol-collapsed';
  /**
   * From http://stackoverflow.com/questions/10135697/regex-to-parse-any-css-font
   * @type {RegExp}
   */
  var fontRegEx = new RegExp([
      '^\\s*(?=(?:(?:[-a-z]+\\s*){0,2}(italic|oblique))?)',
      '(?=(?:(?:[-a-z]+\\s*){0,2}(small-caps))?)',
      '(?=(?:(?:[-a-z]+\\s*){0,2}(bold(?:er)?|lighter|[1-9]00 ))?)',
      '(?:(?:normal|\\1|\\2|\\3)\\s*){0,3}((?:xx?-)?',
      '(?:small|large)|medium|smaller|larger|[\\.\\d]+(?:\\%|in|[cem]m|ex|p[ctx]))',
      '(?:\\s*\\/\\s*(normal|[\\.\\d]+(?:\\%|in|[cem]m|ex|p[ctx])?))',
      '?\\s*([-,\\"\\\'\\sa-z]+?)\\s*$'
  ].join(''), 'i');
  var fontRegExMatchIndex = [
      'style',
      'variant',
      'weight',
      'size',
      'lineHeight',
      'family'
  ];
  /**
   * Get the list of font families from a font spec.  Note that this doesn't work
   * for font families that have commas in them.
   * @param {string} fontSpec The CSS font property.
   * @return {FontParameters} The font parameters (or null if the input spec is invalid).
   */
  var getFontParameters = function (fontSpec) {
      var match = fontSpec.match(fontRegEx);
      if (!match) {
          return null;
      }
      var style = /** @type {FontParameters} */ ({
          lineHeight: 'normal',
          size: '1.2em',
          style: 'normal',
          weight: 'normal',
          variant: 'normal'
      });
      for (var i = 0, ii = fontRegExMatchIndex.length; i < ii; ++i) {
          var value = match[i + 1];
          if (value !== undefined) {
              style[fontRegExMatchIndex[i]] = value;
          }
      }
      style.families = style.family.split(/,\s?/);
      return style;
  };

  /**
   * @module ol/ObjectEventType
   */
  /**
   * @enum {string}
   */
  var ObjectEventType = {
      /**
       * Triggered when a property is changed.
       * @event module:ol/Object.ObjectEvent#propertychange
       * @api
       */
      PROPERTYCHANGE: 'propertychange'
  };

  /**
   * @module ol/events
   */
  /**
   * Key to use with {@link module:ol/Observable~Observable#unByKey}.
   * @typedef {Object} EventsKey
   * @property {ListenerFunction} listener
   * @property {import("./events/Target.js").EventTargetLike} target
   * @property {string} type
   * @api
   */
  /**
   * Listener function. This function is called with an event object as argument.
   * When the function returns `false`, event propagation will stop.
   *
   * @typedef {function((Event|import("./events/Event.js").default)): (void|boolean)} ListenerFunction
   * @api
   */
  /**
   * @typedef {Object} ListenerObject
   * @property {ListenerFunction} handleEvent
   */
  /**
   * @typedef {ListenerFunction|ListenerObject} Listener
   */
  /**
   * Registers an event listener on an event target. Inspired by
   * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
   *
   * This function efficiently binds a `listener` to a `this` object, and returns
   * a key for use with {@link module:ol/events~unlistenByKey}.
   *
   * @param {import("./events/Target.js").EventTargetLike} target Event target.
   * @param {string} type Event type.
   * @param {ListenerFunction} listener Listener.
   * @param {Object=} opt_this Object referenced by the `this` keyword in the
   *     listener. Default is the `target`.
   * @param {boolean=} opt_once If true, add the listener as one-off listener.
   * @return {EventsKey} Unique key for the listener.
   */
  function listen(target, type, listener, opt_this, opt_once) {
      if (opt_this && opt_this !== target) {
          listener = listener.bind(opt_this);
      }
      if (opt_once) {
          var originalListener_1 = listener;
          listener = function () {
              target.removeEventListener(type, listener);
              originalListener_1.apply(this, arguments);
          };
      }
      var eventsKey = {
          target: target,
          type: type,
          listener: listener
      };
      target.addEventListener(type, listener);
      return eventsKey;
  }
  /**
   * Registers a one-off event listener on an event target. Inspired by
   * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
   *
   * This function efficiently binds a `listener` as self-unregistering listener
   * to a `this` object, and returns a key for use with
   * {@link module:ol/events~unlistenByKey} in case the listener needs to be
   * unregistered before it is called.
   *
   * When {@link module:ol/events~listen} is called with the same arguments after this
   * function, the self-unregistering listener will be turned into a permanent
   * listener.
   *
   * @param {import("./events/Target.js").EventTargetLike} target Event target.
   * @param {string} type Event type.
   * @param {ListenerFunction} listener Listener.
   * @param {Object=} opt_this Object referenced by the `this` keyword in the
   *     listener. Default is the `target`.
   * @return {EventsKey} Key for unlistenByKey.
   */
  function listenOnce(target, type, listener, opt_this) {
      return listen(target, type, listener, opt_this, true);
  }
  /**
   * Unregisters event listeners on an event target. Inspired by
   * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
   *
   * The argument passed to this function is the key returned from
   * {@link module:ol/events~listen} or {@link module:ol/events~listenOnce}.
   *
   * @param {EventsKey} key The key.
   */
  function unlistenByKey(key) {
      if (key && key.target) {
          key.target.removeEventListener(key.type, key.listener);
          clear$1(key);
      }
  }

  /**
   * @module ol/Disposable
   */
  /**
   * @classdesc
   * Objects that need to clean up after themselves.
   */
  var Disposable = /** @class */ (function () {
      function Disposable() {
          /**
           * The object has already been disposed.
           * @type {boolean}
           * @private
           */
          this.disposed_ = false;
      }
      /**
       * Clean up.
       */
      Disposable.prototype.dispose = function () {
          if (!this.disposed_) {
              this.disposed_ = true;
              this.disposeInternal();
          }
      };
      /**
       * Extension point for disposable objects.
       * @protected
       */
      Disposable.prototype.disposeInternal = function () { };
      return Disposable;
  }());

  /**
   * @module ol/array
   */
  /**
   * Performs a binary search on the provided sorted list and returns the index of the item if found. If it can't be found it'll return -1.
   * https://github.com/darkskyapp/binary-search
   *
   * @param {Array<*>} haystack Items to search through.
   * @param {*} needle The item to look for.
   * @param {Function=} opt_comparator Comparator function.
   * @return {number} The index of the item if found, -1 if not.
   */
  function binarySearch(haystack, needle, opt_comparator) {
      var mid, cmp;
      var comparator = opt_comparator || numberSafeCompareFunction;
      var low = 0;
      var high = haystack.length;
      var found = false;
      while (low < high) {
          /* Note that "(low + high) >>> 1" may overflow, and results in a typecast
           * to double (which gives the wrong results). */
          mid = low + (high - low >> 1);
          cmp = +comparator(haystack[mid], needle);
          if (cmp < 0.0) { /* Too low. */
              low = mid + 1;
          }
          else { /* Key found or too high */
              high = mid;
              found = !cmp;
          }
      }
      /* Key not found. */
      return found ? low : ~low;
  }
  /**
   * Compare function for array sort that is safe for numbers.
   * @param {*} a The first object to be compared.
   * @param {*} b The second object to be compared.
   * @return {number} A negative number, zero, or a positive number as the first
   *     argument is less than, equal to, or greater than the second.
   */
  function numberSafeCompareFunction(a, b) {
      return a > b ? 1 : a < b ? -1 : 0;
  }
  /**
   * Whether the array contains the given object.
   * @param {Array<*>} arr The array to test for the presence of the element.
   * @param {*} obj The object for which to test.
   * @return {boolean} The object is in the array.
   */
  function includes(arr, obj) {
      return arr.indexOf(obj) >= 0;
  }
  /**
   * @param {Array<number>} arr Array.
   * @param {number} target Target.
   * @param {number} direction 0 means return the nearest, > 0
   *    means return the largest nearest, < 0 means return the
   *    smallest nearest.
   * @return {number} Index.
   */
  function linearFindNearest(arr, target, direction) {
      var n = arr.length;
      if (arr[0] <= target) {
          return 0;
      }
      else if (target <= arr[n - 1]) {
          return n - 1;
      }
      else {
          var i = void 0;
          if (direction > 0) {
              for (i = 1; i < n; ++i) {
                  if (arr[i] < target) {
                      return i - 1;
                  }
              }
          }
          else if (direction < 0) {
              for (i = 1; i < n; ++i) {
                  if (arr[i] <= target) {
                      return i;
                  }
              }
          }
          else {
              for (i = 1; i < n; ++i) {
                  if (arr[i] == target) {
                      return i;
                  }
                  else if (arr[i] < target) {
                      if (arr[i - 1] - target < target - arr[i]) {
                          return i - 1;
                      }
                      else {
                          return i;
                      }
                  }
              }
          }
          return n - 1;
      }
  }
  /**
   * @param {Array<*>} arr Array.
   * @param {number} begin Begin index.
   * @param {number} end End index.
   */
  function reverseSubArray(arr, begin, end) {
      while (begin < end) {
          var tmp = arr[begin];
          arr[begin] = arr[end];
          arr[end] = tmp;
          ++begin;
          --end;
      }
  }
  /**
   * @param {Array<VALUE>} arr The array to modify.
   * @param {!Array<VALUE>|VALUE} data The elements or arrays of elements to add to arr.
   * @template VALUE
   */
  function extend$1(arr, data) {
      var extension = Array.isArray(data) ? data : [data];
      var length = extension.length;
      for (var i = 0; i < length; i++) {
          arr[arr.length] = extension[i];
      }
  }
  /**
   * @param {Array<VALUE>} arr The array to search in.
   * @param {function(VALUE, number, ?) : boolean} func The function to compare.
   * @template VALUE
   * @return {VALUE|null} The element found or null.
   */
  function find(arr, func) {
      var length = arr.length >>> 0;
      var value;
      for (var i = 0; i < length; i++) {
          value = arr[i];
          if (func(value, i, arr)) {
              return value;
          }
      }
      return null;
  }
  /**
   * @param {Array|Uint8ClampedArray} arr1 The first array to compare.
   * @param {Array|Uint8ClampedArray} arr2 The second array to compare.
   * @return {boolean} Whether the two arrays are equal.
   */
  function equals$1(arr1, arr2) {
      var len1 = arr1.length;
      if (len1 !== arr2.length) {
          return false;
      }
      for (var i = 0; i < len1; i++) {
          if (arr1[i] !== arr2[i]) {
              return false;
          }
      }
      return true;
  }
  /**
   * @param {Array<*>} arr The array to search in.
   * @param {Function} func Comparison function.
   * @return {number} Return index.
   */
  function findIndex(arr, func) {
      var index;
      var found = !arr.every(function (el, idx) {
          index = idx;
          return !func(el, idx, arr);
      });
      return found ? index : -1;
  }
  /**
   * @param {Array<*>} arr The array to test.
   * @param {Function=} opt_func Comparison function.
   * @param {boolean=} opt_strict Strictly sorted (default false).
   * @return {boolean} Return index.
   */
  function isSorted(arr, opt_func, opt_strict) {
      var compare = opt_func || numberSafeCompareFunction;
      return arr.every(function (currentVal, index) {
          if (index === 0) {
              return true;
          }
          var res = compare(arr[index - 1], currentVal);
          return !(res > 0 || opt_strict && res === 0);
      });
  }

  /**
   * @module ol/functions
   */
  /**
   * Always returns true.
   * @returns {boolean} true.
   */
  function TRUE() {
      return true;
  }
  /**
   * Always returns false.
   * @returns {boolean} false.
   */
  function FALSE() {
      return false;
  }
  /**
   * A reusable function, used e.g. as a default for callbacks.
   *
   * @return {void} Nothing.
   */
  function VOID() { }
  /**
   * Wrap a function in another function that remembers the last return.  If the
   * returned function is called twice in a row with the same arguments and the same
   * this object, it will return the value from the first call in the second call.
   *
   * @param {function(...any): ReturnType} fn The function to memoize.
   * @return {function(...any): ReturnType} The memoized function.
   * @template ReturnType
   */
  function memoizeOne(fn) {
      var called = false;
      /** @type {ReturnType} */
      var lastResult;
      /** @type {Array<any>} */
      var lastArgs;
      var lastThis;
      return function () {
          var nextArgs = Array.prototype.slice.call(arguments);
          if (!called || this !== lastThis || !equals$1(nextArgs, lastArgs)) {
              called = true;
              lastThis = this;
              lastArgs = nextArgs;
              lastResult = fn.apply(this, arguments);
          }
          return lastResult;
      };
  }

  /**
   * @module ol/events/Event
   */
  /**
   * @classdesc
   * Stripped down implementation of the W3C DOM Level 2 Event interface.
   * See https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-interface.
   *
   * This implementation only provides `type` and `target` properties, and
   * `stopPropagation` and `preventDefault` methods. It is meant as base class
   * for higher level events defined in the library, and works with
   * {@link module:ol/events/Target~Target}.
   */
  var BaseEvent = /** @class */ (function () {
      /**
       * @param {string} type Type.
       */
      function BaseEvent(type) {
          /**
           * @type {boolean}
           */
          this.propagationStopped;
          /**
           * The event type.
           * @type {string}
           * @api
           */
          this.type = type;
          /**
           * The event target.
           * @type {Object}
           * @api
           */
          this.target = null;
      }
      /**
       * Stop event propagation.
       * @api
       */
      BaseEvent.prototype.preventDefault = function () {
          this.propagationStopped = true;
      };
      /**
       * Stop event propagation.
       * @api
       */
      BaseEvent.prototype.stopPropagation = function () {
          this.propagationStopped = true;
      };
      return BaseEvent;
  }());

  var __extends$3 =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {EventTarget|Target} EventTargetLike
   */
  /**
   * @classdesc
   * A simplified implementation of the W3C DOM Level 2 EventTarget interface.
   * See https://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-EventTarget.
   *
   * There are two important simplifications compared to the specification:
   *
   * 1. The handling of `useCapture` in `addEventListener` and
   *    `removeEventListener`. There is no real capture model.
   * 2. The handling of `stopPropagation` and `preventDefault` on `dispatchEvent`.
   *    There is no event target hierarchy. When a listener calls
   *    `stopPropagation` or `preventDefault` on an event object, it means that no
   *    more listeners after this one will be called. Same as when the listener
   *    returns false.
   */
  var Target = /** @class */ (function (_super) {
      __extends$3(Target, _super);
      /**
       * @param {*=} opt_target Default event target for dispatched events.
       */
      function Target(opt_target) {
          var _this = _super.call(this) || this;
          /**
           * @private
           * @type {*}
           */
          _this.eventTarget_ = opt_target;
          /**
           * @private
           * @type {!Object<string, number>}
           */
          _this.pendingRemovals_ = {};
          /**
           * @private
           * @type {!Object<string, number>}
           */
          _this.dispatching_ = {};
          /**
           * @private
           * @type {!Object<string, Array<import("../events.js").Listener>>}
           */
          _this.listeners_ = {};
          return _this;
      }
      /**
       * @param {string} type Type.
       * @param {import("../events.js").Listener} listener Listener.
       */
      Target.prototype.addEventListener = function (type, listener) {
          if (!type || !listener) {
              return;
          }
          var listeners = this.listeners_[type];
          if (!listeners) {
              listeners = [];
              this.listeners_[type] = listeners;
          }
          if (listeners.indexOf(listener) === -1) {
              listeners.push(listener);
          }
      };
      /**
       * Dispatches an event and calls all listeners listening for events
       * of this type. The event parameter can either be a string or an
       * Object with a `type` property.
       *
       * @param {import("./Event.js").default|string} event Event object.
       * @return {boolean|undefined} `false` if anyone called preventDefault on the
       *     event object or if any of the listeners returned false.
       * @api
       */
      Target.prototype.dispatchEvent = function (event) {
          /** @type {import("./Event.js").default|Event} */
          var evt = typeof event === 'string' ? new BaseEvent(event) : event;
          var type = evt.type;
          if (!evt.target) {
              evt.target = this.eventTarget_ || this;
          }
          var listeners = this.listeners_[type];
          var propagate;
          if (listeners) {
              if (!(type in this.dispatching_)) {
                  this.dispatching_[type] = 0;
                  this.pendingRemovals_[type] = 0;
              }
              ++this.dispatching_[type];
              for (var i = 0, ii = listeners.length; i < ii; ++i) {
                  if ('handleEvent' in listeners[i]) {
                      propagate = /** @type {import("../events.js").ListenerObject} */ (listeners[i]).handleEvent(evt);
                  }
                  else {
                      propagate = /** @type {import("../events.js").ListenerFunction} */ (listeners[i]).call(this, evt);
                  }
                  if (propagate === false || evt.propagationStopped) {
                      propagate = false;
                      break;
                  }
              }
              --this.dispatching_[type];
              if (this.dispatching_[type] === 0) {
                  var pendingRemovals = this.pendingRemovals_[type];
                  delete this.pendingRemovals_[type];
                  while (pendingRemovals--) {
                      this.removeEventListener(type, VOID);
                  }
                  delete this.dispatching_[type];
              }
              return propagate;
          }
      };
      /**
       * @inheritDoc
       */
      Target.prototype.disposeInternal = function () {
          clear$1(this.listeners_);
      };
      /**
       * Get the listeners for a specified event type. Listeners are returned in the
       * order that they will be called in.
       *
       * @param {string} type Type.
       * @return {Array<import("../events.js").Listener>} Listeners.
       */
      Target.prototype.getListeners = function (type) {
          return this.listeners_[type];
      };
      /**
       * @param {string=} opt_type Type. If not provided,
       *     `true` will be returned if this event target has any listeners.
       * @return {boolean} Has listeners.
       */
      Target.prototype.hasListener = function (opt_type) {
          return opt_type ?
              opt_type in this.listeners_ :
              Object.keys(this.listeners_).length > 0;
      };
      /**
       * @param {string} type Type.
       * @param {import("../events.js").Listener} listener Listener.
       */
      Target.prototype.removeEventListener = function (type, listener) {
          var listeners = this.listeners_[type];
          if (listeners) {
              var index = listeners.indexOf(listener);
              if (index !== -1) {
                  if (type in this.pendingRemovals_) {
                      // make listener a no-op, and remove later in #dispatchEvent()
                      listeners[index] = VOID;
                      ++this.pendingRemovals_[type];
                  }
                  else {
                      listeners.splice(index, 1);
                      if (listeners.length === 0) {
                          delete this.listeners_[type];
                      }
                  }
              }
          }
      };
      return Target;
  }(Disposable));

  /**
   * @module ol/events/EventType
   */
  /**
   * @enum {string}
   * @const
   */
  var EventType = {
      /**
       * Generic change event. Triggered when the revision counter is increased.
       * @event module:ol/events/Event~BaseEvent#change
       * @api
       */
      CHANGE: 'change',
      /**
       * Generic error event. Triggered when an error occurs.
       * @event module:ol/events/Event~BaseEvent#error
       * @api
       */
      ERROR: 'error',
      BLUR: 'blur',
      CLEAR: 'clear',
      CONTEXTMENU: 'contextmenu',
      CLICK: 'click',
      DBLCLICK: 'dblclick',
      DRAGENTER: 'dragenter',
      DRAGOVER: 'dragover',
      DROP: 'drop',
      FOCUS: 'focus',
      KEYDOWN: 'keydown',
      KEYPRESS: 'keypress',
      LOAD: 'load',
      RESIZE: 'resize',
      TOUCHMOVE: 'touchmove',
      WHEEL: 'wheel'
  };

  var __extends$4 =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * An event target providing convenient methods for listener registration
   * and unregistration. A generic `change` event is always available through
   * {@link module:ol/Observable~Observable#changed}.
   *
   * @fires import("./events/Event.js").default
   * @api
   */
  var Observable = /** @class */ (function (_super) {
      __extends$4(Observable, _super);
      function Observable() {
          var _this = _super.call(this) || this;
          /**
           * @private
           * @type {number}
           */
          _this.revision_ = 0;
          return _this;
      }
      /**
       * Increases the revision counter and dispatches a 'change' event.
       * @api
       */
      Observable.prototype.changed = function () {
          ++this.revision_;
          this.dispatchEvent(EventType.CHANGE);
      };
      /**
       * Get the version number for this object.  Each time the object is modified,
       * its version number will be incremented.
       * @return {number} Revision.
       * @api
       */
      Observable.prototype.getRevision = function () {
          return this.revision_;
      };
      /**
       * Listen for a certain type of event.
       * @param {string|Array<string>} type The event type or array of event types.
       * @param {import("./events.js").ListenerFunction} listener The listener function.
       * @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Unique key for the listener. If
       *     called with an array of event types as the first argument, the return
       *     will be an array of keys.
       * @api
       */
      Observable.prototype.on = function (type, listener) {
          if (Array.isArray(type)) {
              var len = type.length;
              var keys = new Array(len);
              for (var i = 0; i < len; ++i) {
                  keys[i] = listen(this, type[i], listener);
              }
              return keys;
          }
          else {
              return listen(this, /** @type {string} */ (type), listener);
          }
      };
      /**
       * Listen once for a certain type of event.
       * @param {string|Array<string>} type The event type or array of event types.
       * @param {function(?): ?} listener The listener function.
       * @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Unique key for the listener. If
       *     called with an array of event types as the first argument, the return
       *     will be an array of keys.
       * @api
       */
      Observable.prototype.once = function (type, listener) {
          if (Array.isArray(type)) {
              var len = type.length;
              var keys = new Array(len);
              for (var i = 0; i < len; ++i) {
                  keys[i] = listenOnce(this, type[i], listener);
              }
              return keys;
          }
          else {
              return listenOnce(this, /** @type {string} */ (type), listener);
          }
      };
      /**
       * Unlisten for a certain type of event.
       * @param {string|Array<string>} type The event type or array of event types.
       * @param {function(?): ?} listener The listener function.
       * @api
       */
      Observable.prototype.un = function (type, listener) {
          if (Array.isArray(type)) {
              for (var i = 0, ii = type.length; i < ii; ++i) {
                  this.removeEventListener(type[i], listener);
              }
          }
          else {
              this.removeEventListener(type, listener);
          }
      };
      return Observable;
  }(Target));
  /**
   * Removes an event listener using the key returned by `on()` or `once()`.
   * @param {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} key The key returned by `on()`
   *     or `once()` (or an array of keys).
   * @api
   */
  function unByKey(key) {
      if (Array.isArray(key)) {
          for (var i = 0, ii = key.length; i < ii; ++i) {
              unlistenByKey(key[i]);
          }
      }
      else {
          unlistenByKey(/** @type {import("./events.js").EventsKey} */ (key));
      }
  }

  var __extends$5 =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @classdesc
   * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.
   */
  var ObjectEvent = /** @class */ (function (_super) {
      __extends$5(ObjectEvent, _super);
      /**
       * @param {string} type The event type.
       * @param {string} key The property name.
       * @param {*} oldValue The old value for `key`.
       */
      function ObjectEvent(type, key, oldValue) {
          var _this = _super.call(this, type) || this;
          /**
           * The name of the property whose value is changing.
           * @type {string}
           * @api
           */
          _this.key = key;
          /**
           * The old value. To get the new value use `e.target.get(e.key)` where
           * `e` is the event object.
           * @type {*}
           * @api
           */
          _this.oldValue = oldValue;
          return _this;
      }
      return ObjectEvent;
  }(BaseEvent));
  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Most non-trivial classes inherit from this.
   *
   * This extends {@link module:ol/Observable} with observable
   * properties, where each property is observable as well as the object as a
   * whole.
   *
   * Classes that inherit from this have pre-defined properties, to which you can
   * add your owns. The pre-defined properties are listed in this documentation as
   * 'Observable Properties', and have their own accessors; for example,
   * {@link module:ol/Map~Map} has a `target` property, accessed with
   * `getTarget()` and changed with `setTarget()`. Not all properties are however
   * settable. There are also general-purpose accessors `get()` and `set()`. For
   * example, `get('target')` is equivalent to `getTarget()`.
   *
   * The `set` accessors trigger a change event, and you can monitor this by
   * registering a listener. For example, {@link module:ol/View~View} has a
   * `center` property, so `view.on('change:center', function(evt) {...});` would
   * call the function whenever the value of the center property changes. Within
   * the function, `evt.target` would be the view, so `evt.target.getCenter()`
   * would return the new center.
   *
   * You can add your own observable properties with
   * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.
   * You can listen for changes on that property value with
   * `object.on('change:prop', listener)`. You can get a list of all
   * properties with {@link module:ol/Object~BaseObject#getProperties}.
   *
   * Note that the observable properties are separate from standard JS properties.
   * You can, for example, give your map object a title with
   * `map.title='New title'` and with `map.set('title', 'Another title')`. The
   * first will be a `hasOwnProperty`; the second will appear in
   * `getProperties()`. Only the second is observable.
   *
   * Properties can be deleted by using the unset method. E.g.
   * object.unset('foo').
   *
   * @fires ObjectEvent
   * @api
   */
  var BaseObject = /** @class */ (function (_super) {
      __extends$5(BaseObject, _super);
      /**
       * @param {Object<string, *>=} opt_values An object with key-value pairs.
       */
      function BaseObject(opt_values) {
          var _this = _super.call(this) || this;
          // Call {@link module:ol/util~getUid} to ensure that the order of objects' ids is
          // the same as the order in which they were created.  This also helps to
          // ensure that object properties are always added in the same order, which
          // helps many JavaScript engines generate faster code.
          getUid(_this);
          /**
           * @private
           * @type {!Object<string, *>}
           */
          _this.values_ = {};
          if (opt_values !== undefined) {
              _this.setProperties(opt_values);
          }
          return _this;
      }
      /**
       * Gets a value.
       * @param {string} key Key name.
       * @return {*} Value.
       * @api
       */
      BaseObject.prototype.get = function (key) {
          var value;
          if (this.values_.hasOwnProperty(key)) {
              value = this.values_[key];
          }
          return value;
      };
      /**
       * Get a list of object property names.
       * @return {Array<string>} List of property names.
       * @api
       */
      BaseObject.prototype.getKeys = function () {
          return Object.keys(this.values_);
      };
      /**
       * Get an object of all property names and values.
       * @return {Object<string, *>} Object.
       * @api
       */
      BaseObject.prototype.getProperties = function () {
          return assign({}, this.values_);
      };
      /**
       * @param {string} key Key name.
       * @param {*} oldValue Old value.
       */
      BaseObject.prototype.notify = function (key, oldValue) {
          var eventType;
          eventType = getChangeEventType(key);
          this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));
          eventType = ObjectEventType.PROPERTYCHANGE;
          this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));
      };
      /**
       * Sets a value.
       * @param {string} key Key name.
       * @param {*} value Value.
       * @param {boolean=} opt_silent Update without triggering an event.
       * @api
       */
      BaseObject.prototype.set = function (key, value, opt_silent) {
          if (opt_silent) {
              this.values_[key] = value;
          }
          else {
              var oldValue = this.values_[key];
              this.values_[key] = value;
              if (oldValue !== value) {
                  this.notify(key, oldValue);
              }
          }
      };
      /**
       * Sets a collection of key-value pairs.  Note that this changes any existing
       * properties and adds new ones (it does not remove any existing properties).
       * @param {Object<string, *>} values Values.
       * @param {boolean=} opt_silent Update without triggering an event.
       * @api
       */
      BaseObject.prototype.setProperties = function (values, opt_silent) {
          for (var key in values) {
              this.set(key, values[key], opt_silent);
          }
      };
      /**
       * Unsets a property.
       * @param {string} key Key name.
       * @param {boolean=} opt_silent Unset without triggering an event.
       * @api
       */
      BaseObject.prototype.unset = function (key, opt_silent) {
          if (key in this.values_) {
              var oldValue = this.values_[key];
              delete this.values_[key];
              if (!opt_silent) {
                  this.notify(key, oldValue);
              }
          }
      };
      return BaseObject;
  }(Observable));
  /**
   * @type {Object<string, string>}
   */
  var changeEventTypeCache = {};
  /**
   * @param {string} key Key name.
   * @return {string} Change name.
   */
  function getChangeEventType(key) {
      return changeEventTypeCache.hasOwnProperty(key) ?
          changeEventTypeCache[key] :
          (changeEventTypeCache[key] = 'change:' + key);
  }

  /**
   * @module ol/transform
   */
  /**
   * An array representing an affine 2d transformation for use with
   * {@link module:ol/transform} functions. The array has 6 elements.
   * @typedef {!Array<number>} Transform
   * @api
   */
  /**
   * Collection of affine 2d transformation functions. The functions work on an
   * array of 6 elements. The element order is compatible with the [SVGMatrix
   * interface](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix) and is
   * a subset (elements a to f) of a 3Ã3 matrix:
   * ```
   * [ a c e ]
   * [ b d f ]
   * [ 0 0 1 ]
   * ```
   */
  /**
   * @private
   * @type {Transform}
   */
  var tmp_ = new Array(6);
  /**
   * Create an identity transform.
   * @return {!Transform} Identity transform.
   */
  function create() {
      return [1, 0, 0, 1, 0, 0];
  }
  /**
   * Resets the given transform to an identity transform.
   * @param {!Transform} transform Transform.
   * @return {!Transform} Transform.
   */
  function reset(transform) {
      return set$2(transform, 1, 0, 0, 1, 0, 0);
  }
  /**
   * Multiply the underlying matrices of two transforms and return the result in
   * the first transform.
   * @param {!Transform} transform1 Transform parameters of matrix 1.
   * @param {!Transform} transform2 Transform parameters of matrix 2.
   * @return {!Transform} transform1 multiplied with transform2.
   */
  function multiply(transform1, transform2) {
      var a1 = transform1[0];
      var b1 = transform1[1];
      var c1 = transform1[2];
      var d1 = transform1[3];
      var e1 = transform1[4];
      var f1 = transform1[5];
      var a2 = transform2[0];
      var b2 = transform2[1];
      var c2 = transform2[2];
      var d2 = transform2[3];
      var e2 = transform2[4];
      var f2 = transform2[5];
      transform1[0] = a1 * a2 + c1 * b2;
      transform1[1] = b1 * a2 + d1 * b2;
      transform1[2] = a1 * c2 + c1 * d2;
      transform1[3] = b1 * c2 + d1 * d2;
      transform1[4] = a1 * e2 + c1 * f2 + e1;
      transform1[5] = b1 * e2 + d1 * f2 + f1;
      return transform1;
  }
  /**
   * Set the transform components a-f on a given transform.
   * @param {!Transform} transform Transform.
   * @param {number} a The a component of the transform.
   * @param {number} b The b component of the transform.
   * @param {number} c The c component of the transform.
   * @param {number} d The d component of the transform.
   * @param {number} e The e component of the transform.
   * @param {number} f The f component of the transform.
   * @return {!Transform} Matrix with transform applied.
   */
  function set$2(transform, a, b, c, d, e, f) {
      transform[0] = a;
      transform[1] = b;
      transform[2] = c;
      transform[3] = d;
      transform[4] = e;
      transform[5] = f;
      return transform;
  }
  /**
   * Set transform on one matrix from another matrix.
   * @param {!Transform} transform1 Matrix to set transform to.
   * @param {!Transform} transform2 Matrix to set transform from.
   * @return {!Transform} transform1 with transform from transform2 applied.
   */
  function setFromArray(transform1, transform2) {
      transform1[0] = transform2[0];
      transform1[1] = transform2[1];
      transform1[2] = transform2[2];
      transform1[3] = transform2[3];
      transform1[4] = transform2[4];
      transform1[5] = transform2[5];
      return transform1;
  }
  /**
   * Transforms the given coordinate with the given transform returning the
   * resulting, transformed coordinate. The coordinate will be modified in-place.
   *
   * @param {Transform} transform The transformation.
   * @param {import("./coordinate.js").Coordinate|import("./pixel.js").Pixel} coordinate The coordinate to transform.
   * @return {import("./coordinate.js").Coordinate|import("./pixel.js").Pixel} return coordinate so that operations can be
   *     chained together.
   */
  function apply(transform, coordinate) {
      var x = coordinate[0];
      var y = coordinate[1];
      coordinate[0] = transform[0] * x + transform[2] * y + transform[4];
      coordinate[1] = transform[1] * x + transform[3] * y + transform[5];
      return coordinate;
  }
  /**
   * Applies scale to a given transform.
   * @param {!Transform} transform Transform.
   * @param {number} x Scale factor x.
   * @param {number} y Scale factor y.
   * @return {!Transform} The scaled transform.
   */
  function scale(transform, x, y) {
      return multiply(transform, set$2(tmp_, x, 0, 0, y, 0, 0));
  }
  /**
   * Creates a scale transform.
   * @param {!Transform} target Transform to overwrite.
   * @param {number} x Scale factor x.
   * @param {number} y Scale factor y.
   * @return {!Transform} The scale transform.
   */
  function makeScale(target, x, y) {
      return set$2(target, x, 0, 0, y, 0, 0);
  }
  /**
   * Applies translation to the given transform.
   * @param {!Transform} transform Transform.
   * @param {number} dx Translation x.
   * @param {number} dy Translation y.
   * @return {!Transform} The translated transform.
   */
  function translate(transform, dx, dy) {
      return multiply(transform, set$2(tmp_, 1, 0, 0, 1, dx, dy));
  }
  /**
   * Creates a composite transform given an initial translation, scale, rotation, and
   * final translation (in that order only, not commutative).
   * @param {!Transform} transform The transform (will be modified in place).
   * @param {number} dx1 Initial translation x.
   * @param {number} dy1 Initial translation y.
   * @param {number} sx Scale factor x.
   * @param {number} sy Scale factor y.
   * @param {number} angle Rotation (in counter-clockwise radians).
   * @param {number} dx2 Final translation x.
   * @param {number} dy2 Final translation y.
   * @return {!Transform} The composite transform.
   */
  function compose(transform, dx1, dy1, sx, sy, angle, dx2, dy2) {
      var sin = Math.sin(angle);
      var cos = Math.cos(angle);
      transform[0] = sx * cos;
      transform[1] = sy * sin;
      transform[2] = -sx * sin;
      transform[3] = sy * cos;
      transform[4] = dx2 * sx * cos - dy2 * sx * sin + dx1;
      transform[5] = dx2 * sy * sin + dy2 * sy * cos + dy1;
      return transform;
  }
  /**
   * Invert the given transform.
   * @param {!Transform} target Transform to be set as the inverse of
   *     the source transform.
   * @param {!Transform} source The source transform to invert.
   * @return {!Transform} The inverted (target) transform.
   */
  function makeInverse(target, source) {
      var det = determinant(source);
      assert(det !== 0, 32); // Transformation matrix cannot be inverted
      var a = source[0];
      var b = source[1];
      var c = source[2];
      var d = source[3];
      var e = source[4];
      var f = source[5];
      target[0] = d / det;
      target[1] = -b / det;
      target[2] = -c / det;
      target[3] = a / det;
      target[4] = (c * f - d * e) / det;
      target[5] = -(a * f - b * e) / det;
      return target;
  }
  /**
   * Returns the determinant of the given matrix.
   * @param {!Transform} mat Matrix.
   * @return {number} Determinant.
   */
  function determinant(mat) {
      return mat[0] * mat[3] - mat[1] * mat[2];
  }
  /**
   * A string version of the transform.  This can be used
   * for CSS transforms.
   * @param {!Transform} mat Matrix.
   * @return {string} The transform as a string.
   */
  function toString$2(mat) {
      return 'matrix(' + mat.join(', ') + ')';
  }

  /**
   * @module ol/render/canvas
   */
  /**
   * @typedef {Object} FillState
   * @property {import("../colorlike.js").ColorLike} fillStyle
   */
  /**
   * @typedef Label
   * @property {number} width
   * @property {number} height
   * @property {Array<string|number>} contextInstructions
   */
  /**
   * @typedef {Object} FillStrokeState
   * @property {import("../colorlike.js").ColorLike} [currentFillStyle]
   * @property {import("../colorlike.js").ColorLike} [currentStrokeStyle]
   * @property {CanvasLineCap} [currentLineCap]
   * @property {Array<number>} currentLineDash
   * @property {number} [currentLineDashOffset]
   * @property {CanvasLineJoin} [currentLineJoin]
   * @property {number} [currentLineWidth]
   * @property {number} [currentMiterLimit]
   * @property {number} [lastStroke]
   * @property {import("../colorlike.js").ColorLike} [fillStyle]
   * @property {import("../colorlike.js").ColorLike} [strokeStyle]
   * @property {CanvasLineCap} [lineCap]
   * @property {Array<number>} lineDash
   * @property {number} [lineDashOffset]
   * @property {CanvasLineJoin} [lineJoin]
   * @property {number} [lineWidth]
   * @property {number} [miterLimit]
   */
  /**
   * @typedef {Object} StrokeState
   * @property {CanvasLineCap} lineCap
   * @property {Array<number>} lineDash
   * @property {number} lineDashOffset
   * @property {CanvasLineJoin} lineJoin
   * @property {number} lineWidth
   * @property {number} miterLimit
   * @property {import("../colorlike.js").ColorLike} strokeStyle
   */
  /**
   * @typedef {Object} TextState
   * @property {string} font
   * @property {string} [textAlign]
   * @property {string} textBaseline
   * @property {string} [placement]
   * @property {number} [maxAngle]
   * @property {boolean} [overflow]
   * @property {import("../style/Fill.js").default} [backgroundFill]
   * @property {import("../style/Stroke.js").default} [backgroundStroke]
   * @property {number} [scale]
   * @property {Array<number>} [padding]
   */
  /**
   * Container for decluttered replay instructions that need to be rendered or
   * omitted together, i.e. when styles render both an image and text, or for the
   * characters that form text along lines. The basic elements of this array are
   * `[minX, minY, maxX, maxY, count]`, where the first four entries are the
   * rendered extent of the group in pixel space. `count` is the number of styles
   * in the group, i.e. 2 when an image and a text are grouped, or 1 otherwise.
   * In addition to these four elements, declutter instruction arrays (i.e. the
   * arguments to {@link module:ol/render/canvas~drawImage} are appended to the array.
   * @typedef {Array<*>} DeclutterGroup
   */
  /**
   * Declutter groups for support of multi geometries.
   * @typedef {Array<DeclutterGroup>} DeclutterGroups
   */
  /**
   * @const
   * @type {string}
   */
  var defaultFont = '10px sans-serif';
  /**
   * @const
   * @type {import("../colorlike.js").ColorLike}
   */
  var defaultFillStyle = '#000';
  /**
   * @const
   * @type {CanvasLineCap}
   */
  var defaultLineCap = 'round';
  /**
   * @const
   * @type {Array<number>}
   */
  var defaultLineDash = [];
  /**
   * @const
   * @type {number}
   */
  var defaultLineDashOffset = 0;
  /**
   * @const
   * @type {CanvasLineJoin}
   */
  var defaultLineJoin = 'round';
  /**
   * @const
   * @type {number}
   */
  var defaultMiterLimit = 10;
  /**
   * @const
   * @type {import("../colorlike.js").ColorLike}
   */
  var defaultStrokeStyle = '#000';
  /**
   * @const
   * @type {string}
   */
  var defaultTextAlign = 'center';
  /**
   * @const
   * @type {string}
   */
  var defaultTextBaseline = 'middle';
  /**
   * @const
   * @type {Array<number>}
   */
  var defaultPadding = [0, 0, 0, 0];
  /**
   * @const
   * @type {number}
   */
  var defaultLineWidth = 1;
  /**
   * @type {BaseObject}
   */
  var checkedFonts = new BaseObject();
  /**
   * The label cache for text rendering. To change the default cache size of 2048
   * entries, use {@link module:ol/structs/LRUCache#setSize}.
   * Deprecated - there is no label cache any more.
   * @type {?}
   * @api
   * @deprecated
   */
  var labelCache = new Target();
  labelCache.setSize = function () {
      console.warn('labelCache is deprecated.'); //eslint-disable-line
  };
  /**
   * @type {CanvasRenderingContext2D}
   */
  var measureContext = null;
  /**
   * @type {string}
   */
  var measureFont;
  /**
   * @type {!Object<string, number>}
   */
  var textHeights = {};
  /**
   * Clears the label cache when a font becomes available.
   * @param {string} fontSpec CSS font spec.
   */
  var registerFont = (function () {
      var retries = 100;
      var size = '32px ';
      var referenceFonts = ['monospace', 'serif'];
      var len = referenceFonts.length;
      var text = 'wmytzilWMYTZIL@#/&?$%10\uF013';
      var interval, referenceWidth;
      /**
       * @param {string} fontStyle Css font-style
       * @param {string} fontWeight Css font-weight
       * @param {*} fontFamily Css font-family
       * @return {boolean} Font with style and weight is available
       */
      function isAvailable(fontStyle, fontWeight, fontFamily) {
          var available = true;
          for (var i = 0; i < len; ++i) {
              var referenceFont = referenceFonts[i];
              referenceWidth = measureTextWidth(fontStyle + ' ' + fontWeight + ' ' + size + referenceFont, text);
              if (fontFamily != referenceFont) {
                  var width = measureTextWidth(fontStyle + ' ' + fontWeight + ' ' + size + fontFamily + ',' + referenceFont, text);
                  // If width and referenceWidth are the same, then the fallback was used
                  // instead of the font we wanted, so the font is not available.
                  available = available && width != referenceWidth;
              }
          }
          if (available) {
              return true;
          }
          return false;
      }
      function check() {
          var done = true;
          var fonts = checkedFonts.getKeys();
          for (var i = 0, ii = fonts.length; i < ii; ++i) {
              var font = fonts[i];
              if (checkedFonts.get(font) < retries) {
                  if (isAvailable.apply(this, font.split('\n'))) {
                      clear$1(textHeights);
                      // Make sure that loaded fonts are picked up by Safari
                      measureContext = null;
                      measureFont = undefined;
                      checkedFonts.set(font, retries);
                  }
                  else {
                      checkedFonts.set(font, checkedFonts.get(font) + 1, true);
                      done = false;
                  }
              }
          }
          if (done) {
              clearInterval(interval);
              interval = undefined;
          }
      }
      return function (fontSpec) {
          var font = getFontParameters(fontSpec);
          if (!font) {
              return;
          }
          var families = font.families;
          for (var i = 0, ii = families.length; i < ii; ++i) {
              var family = families[i];
              var key = font.style + '\n' + font.weight + '\n' + family;
              if (checkedFonts.get(key) === undefined) {
                  checkedFonts.set(key, retries, true);
                  if (!isAvailable(font.style, font.weight, family)) {
                      checkedFonts.set(key, 0, true);
                      if (interval === undefined) {
                          interval = setInterval(check, 32);
                      }
                  }
              }
          }
      };
  })();
  /**
   * @param {string} font Font to use for measuring.
   * @return {import("../size.js").Size} Measurement.
   */
  var measureTextHeight = (function () {
      /**
       * @type {HTMLDivElement}
       */
      var div;
      var heights = textHeights;
      return function (fontSpec) {
          var height = heights[fontSpec];
          if (height == undefined) {
              if (WORKER_OFFSCREEN_CANVAS) {
                  var font = getFontParameters(fontSpec);
                  var metrics = measureText(fontSpec, 'Å½g');
                  var lineHeight = isNaN(Number(font.lineHeight)) ? 1.2 : Number(font.lineHeight);
                  textHeights[fontSpec] = lineHeight * (metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent);
              }
              else {
                  if (!div) {
                      div = document.createElement('div');
                      div.innerHTML = 'M';
                      div.style.margin = '0 !important';
                      div.style.padding = '0 !important';
                      div.style.position = 'absolute !important';
                      div.style.left = '-99999px !important';
                  }
                  div.style.font = fontSpec;
                  document.body.appendChild(div);
                  height = div.offsetHeight;
                  heights[fontSpec] = height;
                  document.body.removeChild(div);
              }
          }
          return height;
      };
  })();
  /**
   * @param {string} font Font.
   * @param {string} text Text.
   * @return {TextMetrics} Text metrics.
   */
  function measureText(font, text) {
      if (!measureContext) {
          measureContext = createCanvasContext2D(1, 1);
      }
      if (font != measureFont) {
          measureContext.font = font;
          measureFont = measureContext.font;
      }
      return measureContext.measureText(text);
  }
  /**
   * @param {string} font Font.
   * @param {string} text Text.
   * @return {number} Width.
   */
  function measureTextWidth(font, text) {
      return measureText(font, text).width;
  }
  /**
   * Measure text width using a cache.
   * @param {string} font The font.
   * @param {string} text The text to measure.
   * @param {Object<string, number>} cache A lookup of cached widths by text.
   * @returns {number} The text width.
   */
  function measureAndCacheTextWidth(font, text, cache) {
      if (text in cache) {
          return cache[text];
      }
      var width = measureTextWidth(font, text);
      cache[text] = width;
      return width;
  }
  /**
   * @param {string} font Font to use for measuring.
   * @param {Array<string>} lines Lines to measure.
   * @param {Array<number>} widths Array will be populated with the widths of
   * each line.
   * @return {number} Width of the whole text.
   */
  function measureTextWidths(font, lines, widths) {
      var numLines = lines.length;
      var width = 0;
      for (var i = 0; i < numLines; ++i) {
          var currentWidth = measureTextWidth(font, lines[i]);
          width = Math.max(width, currentWidth);
          widths.push(currentWidth);
      }
      return width;
  }
  /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {number} rotation Rotation.
   * @param {number} offsetX X offset.
   * @param {number} offsetY Y offset.
   */
  function rotateAtOffset(context, rotation, offsetX, offsetY) {
      if (rotation !== 0) {
          context.translate(offsetX, offsetY);
          context.rotate(rotation);
          context.translate(-offsetX, -offsetY);
      }
  }
  /**
   * @param {CanvasRenderingContext2D} context Context.
   * @param {import("../transform.js").Transform|null} transform Transform.
   * @param {number} opacity Opacity.
   * @param {Label|HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} labelOrImage Label.
   * @param {number} originX Origin X.
   * @param {number} originY Origin Y.
   * @param {number} w Width.
   * @param {number} h Height.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {number} scale Scale.
   */
  function drawImageOrLabel(context, transform, opacity, labelOrImage, originX, originY, w, h, x, y, scale) {
      context.save();
      if (opacity !== 1) {
          context.globalAlpha *= opacity;
      }
      if (transform) {
          context.setTransform.apply(context, transform);
      }
      if (( /** @type {*} */(labelOrImage).contextInstructions)) {
          // label
          context.translate(x, y);
          context.scale(scale, scale);
          executeLabelInstructions(/** @type {Label} */ (labelOrImage), context);
      }
      else {
          // image
          context.drawImage(/** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ (labelOrImage), originX, originY, w, h, x, y, w * scale, h * scale);
      }
      context.restore();
  }
  /**
   * @param {Label} label Label.
   * @param {CanvasRenderingContext2D} context Context.
   */
  function executeLabelInstructions(label, context) {
      var contextInstructions = label.contextInstructions;
      for (var i = 0, ii = contextInstructions.length; i < ii; i += 2) {
          if (Array.isArray(contextInstructions[i + 1])) {
              context[contextInstructions[i]].apply(context, contextInstructions[i + 1]);
          }
          else {
              context[contextInstructions[i]] = contextInstructions[i + 1];
          }
      }
  }
  /**
   * @type {HTMLCanvasElement}
   * @private
   */
  var createTransformStringCanvas = null;
  /**
   * @param {import("../transform.js").Transform} transform Transform.
   * @return {string} CSS transform.
   */
  function createTransformString(transform) {
      if (WORKER_OFFSCREEN_CANVAS) {
          return toString$2(transform);
      }
      else {
          if (!createTransformStringCanvas) {
              createTransformStringCanvas = createCanvasContext2D(1, 1).canvas;
          }
          createTransformStringCanvas.style.transform = toString$2(transform);
          return createTransformStringCanvas.style.transform;
      }
  }

  /**
   * @module ol/style/Image
   */
  /**
   * @typedef {Object} Options
   * @property {number} opacity
   * @property {boolean} rotateWithView
   * @property {number} rotation
   * @property {number} scale
   * @property {Array<number>} displacement
   */
  /**
   * @classdesc
   * A base class used for creating subclasses and not instantiated in
   * apps. Base class for {@link module:ol/style/Icon~Icon}, {@link module:ol/style/Circle~CircleStyle} and
   * {@link module:ol/style/RegularShape~RegularShape}.
   * @abstract
   * @api
   */
  var ImageStyle = /** @class */ (function () {
      /**
       * @param {Options} options Options.
       */
      function ImageStyle(options) {
          /**
           * @private
           * @type {number}
           */
          this.opacity_ = options.opacity;
          /**
           * @private
           * @type {boolean}
           */
          this.rotateWithView_ = options.rotateWithView;
          /**
           * @private
           * @type {number}
           */
          this.rotation_ = options.rotation;
          /**
           * @private
           * @type {number}
           */
          this.scale_ = options.scale;
          /**
           * @private
           * @type {Array<number>}
           */
          this.displacement_ = options.displacement;
      }
      /**
       * Clones the style.
       * @return {ImageStyle} The cloned style.
       * @api
       */
      ImageStyle.prototype.clone = function () {
          return new ImageStyle({
              opacity: this.getOpacity(),
              scale: this.getScale(),
              rotation: this.getRotation(),
              rotateWithView: this.getRotateWithView(),
              displacement: this.getDisplacement().slice()
          });
      };
      /**
       * Get the symbolizer opacity.
       * @return {number} Opacity.
       * @api
       */
      ImageStyle.prototype.getOpacity = function () {
          return this.opacity_;
      };
      /**
       * Determine whether the symbolizer rotates with the map.
       * @return {boolean} Rotate with map.
       * @api
       */
      ImageStyle.prototype.getRotateWithView = function () {
          return this.rotateWithView_;
      };
      /**
       * Get the symoblizer rotation.
       * @return {number} Rotation.
       * @api
       */
      ImageStyle.prototype.getRotation = function () {
          return this.rotation_;
      };
      /**
       * Get the symbolizer scale.
       * @return {number} Scale.
       * @api
       */
      ImageStyle.prototype.getScale = function () {
          return this.scale_;
      };
      /**
       * Get the displacement of the shape
       * @return {Array<number>} Shape's center displacement
       * @api
       */
      ImageStyle.prototype.getDisplacement = function () {
          return this.displacement_;
      };
      /**
       * Get the anchor point in pixels. The anchor determines the center point for the
       * symbolizer.
       * @abstract
       * @return {Array<number>} Anchor.
       */
      ImageStyle.prototype.getAnchor = function () {
          return abstract();
      };
      /**
       * Get the image element for the symbolizer.
       * @abstract
       * @param {number} pixelRatio Pixel ratio.
       * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.
       */
      ImageStyle.prototype.getImage = function (pixelRatio) {
          return abstract();
      };
      /**
       * @abstract
       * @param {number} pixelRatio Pixel ratio.
       * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.
       */
      ImageStyle.prototype.getHitDetectionImage = function (pixelRatio) {
          return abstract();
      };
      /**
       * @abstract
       * @return {import("../ImageState.js").default} Image state.
       */
      ImageStyle.prototype.getImageState = function () {
          return abstract();
      };
      /**
       * @abstract
       * @return {import("../size.js").Size} Image size.
       */
      ImageStyle.prototype.getImageSize = function () {
          return abstract();
      };
      /**
       * @abstract
       * @return {import("../size.js").Size} Size of the hit-detection image.
       */
      ImageStyle.prototype.getHitDetectionImageSize = function () {
          return abstract();
      };
      /**
       * Get the origin of the symbolizer.
       * @abstract
       * @return {Array<number>} Origin.
       */
      ImageStyle.prototype.getOrigin = function () {
          return abstract();
      };
      /**
       * Get the size of the symbolizer (in pixels).
       * @abstract
       * @return {import("../size.js").Size} Size.
       */
      ImageStyle.prototype.getSize = function () {
          return abstract();
      };
      /**
       * Set the opacity.
       *
       * @param {number} opacity Opacity.
       * @api
       */
      ImageStyle.prototype.setOpacity = function (opacity) {
          this.opacity_ = opacity;
      };
      /**
       * Set whether to rotate the style with the view.
       *
       * @param {boolean} rotateWithView Rotate with map.
       * @api
       */
      ImageStyle.prototype.setRotateWithView = function (rotateWithView) {
          this.rotateWithView_ = rotateWithView;
      };
      /**
       * Set the rotation.
       *
       * @param {number} rotation Rotation.
       * @api
       */
      ImageStyle.prototype.setRotation = function (rotation) {
          this.rotation_ = rotation;
      };
      /**
       * Set the scale.
       *
       * @param {number} scale Scale.
       * @api
       */
      ImageStyle.prototype.setScale = function (scale) {
          this.scale_ = scale;
      };
      /**
       * @abstract
       * @param {function(import("../events/Event.js").default): void} listener Listener function.
       * @template T
       */
      ImageStyle.prototype.listenImageChange = function (listener) {
          abstract();
      };
      /**
       * Load not yet loaded URI.
       * @abstract
       */
      ImageStyle.prototype.load = function () {
          abstract();
      };
      /**
       * @abstract
       * @param {function(import("../events/Event.js").default): void} listener Listener function.
       * @template T
       */
      ImageStyle.prototype.unlistenImageChange = function (listener) {
          abstract();
      };
      return ImageStyle;
  }());

  /**
   * @module ol/style/RegularShape
   */
  var __extends$6 =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * Specify radius for regular polygons, or radius1 and radius2 for stars.
   * @typedef {Object} Options
   * @property {import("./Fill.js").default} [fill] Fill style.
   * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points
   * is the number of sides.
   * @property {number} [radius] Radius of a regular polygon.
   * @property {number} [radius1] Outer radius of a star.
   * @property {number} [radius2] Inner radius of a star.
   * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's point facing up.
   * @property {Array<number>} [displacement=[0,0]] Displacement of the shape
   * @property {import("./Stroke.js").default} [stroke] Stroke style.
   * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).
   * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.
   */
  /**
   * @typedef {Object} RenderOptions
   * @property {import("../colorlike.js").ColorLike} [strokeStyle]
   * @property {number} strokeWidth
   * @property {number} size
   * @property {CanvasLineCap} lineCap
   * @property {Array<number>} lineDash
   * @property {number} lineDashOffset
   * @property {CanvasLineJoin} lineJoin
   * @property {number} miterLimit
   */
  /**
   * @classdesc
   * Set regular shape style for vector features. The resulting shape will be
   * a regular polygon when `radius` is provided, or a star when `radius1` and
   * `radius2` are provided.
   * @api
   */
  var RegularShape = /** @class */ (function (_super) {
      __extends$6(RegularShape, _super);
      /**
       * @param {Options} options Options.
       */
      function RegularShape(options) {
          var _this = this;
          /**
           * @type {boolean}
           */
          var rotateWithView = options.rotateWithView !== undefined ?
              options.rotateWithView : false;
          _this = _super.call(this, {
              opacity: 1,
              rotateWithView: rotateWithView,
              rotation: options.rotation !== undefined ? options.rotation : 0,
              scale: 1,
              displacement: options.displacement !== undefined ? options.displacement : [0, 0]
          }) || this;
          /**
           * @private
           * @type {HTMLCanvasElement}
           */
          _this.canvas_ = null;
          /**
           * @private
           * @type {HTMLCanvasElement}
           */
          _this.hitDetectionCanvas_ = null;
          /**
           * @private
           * @type {import("./Fill.js").default}
           */
          _this.fill_ = options.fill !== undefined ? options.fill : null;
          /**
           * @private
           * @type {Array<number>}
           */
          _this.origin_ = [0, 0];
          /**
           * @private
           * @type {number}
           */
          _this.points_ = options.points;
          /**
           * @protected
           * @type {number}
           */
          _this.radius_ = options.radius !== undefined ? options.radius : options.radius1;
          /**
           * @private
           * @type {number|undefined}
           */
          _this.radius2_ = options.radius2;
          /**
           * @private
           * @type {number}
           */
          _this.angle_ = options.angle !== undefined ? options.angle : 0;
          /**
           * @private
           * @type {import("./Stroke.js").default}
           */
          _this.stroke_ = options.stroke !== undefined ? options.stroke : null;
          /**
           * @private
           * @type {Array<number>}
           */
          _this.anchor_ = null;
          /**
           * @private
           * @type {import("../size.js").Size}
           */
          _this.size_ = null;
          /**
           * @private
           * @type {import("../size.js").Size}
           */
          _this.imageSize_ = null;
          /**
           * @private
           * @type {import("../size.js").Size}
           */
          _this.hitDetectionImageSize_ = null;
          _this.render();
          return _this;
      }
      /**
       * Clones the style.
       * @return {RegularShape} The cloned style.
       * @api
       */
      RegularShape.prototype.clone = function () {
          var style = new RegularShape({
              fill: this.getFill() ? this.getFill().clone() : undefined,
              points: this.getPoints(),
              radius: this.getRadius(),
              radius2: this.getRadius2(),
              angle: this.getAngle(),
              stroke: this.getStroke() ? this.getStroke().clone() : undefined,
              rotation: this.getRotation(),
              rotateWithView: this.getRotateWithView(),
              displacement: this.getDisplacement().slice()
          });
          style.setOpacity(this.getOpacity());
          style.setScale(this.getScale());
          return style;
      };
      /**
       * @inheritDoc
       * @api
       */
      RegularShape.prototype.getAnchor = function () {
          return this.anchor_;
      };
      /**
       * Get the angle used in generating the shape.
       * @return {number} Shape's rotation in radians.
       * @api
       */
      RegularShape.prototype.getAngle = function () {
          return this.angle_;
      };
      /**
       * Get the fill style for the shape.
       * @return {import("./Fill.js").default} Fill style.
       * @api
       */
      RegularShape.prototype.getFill = function () {
          return this.fill_;
      };
      /**
       * @inheritDoc
       */
      RegularShape.prototype.getHitDetectionImage = function (pixelRatio) {
          return this.hitDetectionCanvas_;
      };
      /**
       * @inheritDoc
       * @api
       */
      RegularShape.prototype.getImage = function (pixelRatio) {
          return this.canvas_;
      };
      /**
       * @inheritDoc
       */
      RegularShape.prototype.getImageSize = function () {
          return this.imageSize_;
      };
      /**
       * @inheritDoc
       */
      RegularShape.prototype.getHitDetectionImageSize = function () {
          return this.hitDetectionImageSize_;
      };
      /**
       * @inheritDoc
       */
      RegularShape.prototype.getImageState = function () {
          return ImageState.LOADED;
      };
      /**
       * @inheritDoc
       * @api
       */
      RegularShape.prototype.getOrigin = function () {
          return this.origin_;
      };
      /**
       * Get the number of points for generating the shape.
       * @return {number} Number of points for stars and regular polygons.
       * @api
       */
      RegularShape.prototype.getPoints = function () {
          return this.points_;
      };
      /**
       * Get the (primary) radius for the shape.
       * @return {number} Radius.
       * @api
       */
      RegularShape.prototype.getRadius = function () {
          return this.radius_;
      };
      /**
       * Get the secondary radius for the shape.
       * @return {number|undefined} Radius2.
       * @api
       */
      RegularShape.prototype.getRadius2 = function () {
          return this.radius2_;
      };
      /**
       * @inheritDoc
       * @api
       */
      RegularShape.prototype.getSize = function () {
          return this.size_;
      };
      /**
       * Get the stroke style for the shape.
       * @return {import("./Stroke.js").default} Stroke style.
       * @api
       */
      RegularShape.prototype.getStroke = function () {
          return this.stroke_;
      };
      /**
       * @inheritDoc
       */
      RegularShape.prototype.listenImageChange = function (listener) { };
      /**
       * @inheritDoc
       */
      RegularShape.prototype.load = function () { };
      /**
       * @inheritDoc
       */
      RegularShape.prototype.unlistenImageChange = function (listener) { };
      /**
       * @protected
       */
      RegularShape.prototype.render = function () {
          var lineCap = defaultLineCap;
          var lineJoin = defaultLineJoin;
          var miterLimit = 0;
          var lineDash = null;
          var lineDashOffset = 0;
          var strokeStyle;
          var strokeWidth = 0;
          if (this.stroke_) {
              strokeStyle = this.stroke_.getColor();
              if (strokeStyle === null) {
                  strokeStyle = defaultStrokeStyle;
              }
              strokeStyle = asColorLike(strokeStyle);
              strokeWidth = this.stroke_.getWidth();
              if (strokeWidth === undefined) {
                  strokeWidth = defaultLineWidth;
              }
              lineDash = this.stroke_.getLineDash();
              lineDashOffset = this.stroke_.getLineDashOffset();
              lineJoin = this.stroke_.getLineJoin();
              if (lineJoin === undefined) {
                  lineJoin = defaultLineJoin;
              }
              lineCap = this.stroke_.getLineCap();
              if (lineCap === undefined) {
                  lineCap = defaultLineCap;
              }
              miterLimit = this.stroke_.getMiterLimit();
              if (miterLimit === undefined) {
                  miterLimit = defaultMiterLimit;
              }
          }
          var size = 2 * (this.radius_ + strokeWidth) + 1;
          var renderOptions = {
              strokeStyle: strokeStyle,
              strokeWidth: strokeWidth,
              size: size,
              lineCap: lineCap,
              lineDash: lineDash,
              lineDashOffset: lineDashOffset,
              lineJoin: lineJoin,
              miterLimit: miterLimit
          };
          var context = createCanvasContext2D(size, size);
          this.canvas_ = context.canvas;
          // canvas.width and height are rounded to the closest integer
          size = this.canvas_.width;
          var imageSize = size;
          var displacement = this.getDisplacement();
          this.draw_(renderOptions, context, 0, 0);
          this.createHitDetectionCanvas_(renderOptions);
          this.anchor_ = [size / 2 - displacement[0], size / 2 + displacement[1]];
          this.size_ = [size, size];
          this.imageSize_ = [imageSize, imageSize];
      };
      /**
       * @private
       * @param {RenderOptions} renderOptions Render options.
       * @param {CanvasRenderingContext2D} context The rendering context.
       * @param {number} x The origin for the symbol (x).
       * @param {number} y The origin for the symbol (y).
       */
      RegularShape.prototype.draw_ = function (renderOptions, context, x, y) {
          var i, angle0, radiusC;
          // reset transform
          context.setTransform(1, 0, 0, 1, 0, 0);
          // then move to (x, y)
          context.translate(x, y);
          context.beginPath();
          var points = this.points_;
          if (points === Infinity) {
              context.arc(renderOptions.size / 2, renderOptions.size / 2, this.radius_, 0, 2 * Math.PI, true);
          }
          else {
              var radius2 = (this.radius2_ !== undefined) ? this.radius2_
                  : this.radius_;
              if (radius2 !== this.radius_) {
                  points = 2 * points;
              }
              for (i = 0; i <= points; i++) {
                  angle0 = i * 2 * Math.PI / points - Math.PI / 2 + this.angle_;
                  radiusC = i % 2 === 0 ? this.radius_ : radius2;
                  context.lineTo(renderOptions.size / 2 + radiusC * Math.cos(angle0), renderOptions.size / 2 + radiusC * Math.sin(angle0));
              }
          }
          if (this.fill_) {
              var color = this.fill_.getColor();
              if (color === null) {
                  color = defaultFillStyle;
              }
              context.fillStyle = asColorLike(color);
              context.fill();
          }
          if (this.stroke_) {
              context.strokeStyle = renderOptions.strokeStyle;
              context.lineWidth = renderOptions.strokeWidth;
              if (context.setLineDash && renderOptions.lineDash) {
                  context.setLineDash(renderOptions.lineDash);
                  context.lineDashOffset = renderOptions.lineDashOffset;
              }
              context.lineCap = renderOptions.lineCap;
              context.lineJoin = renderOptions.lineJoin;
              context.miterLimit = renderOptions.miterLimit;
              context.stroke();
          }
          context.closePath();
      };
      /**
       * @private
       * @param {RenderOptions} renderOptions Render options.
       */
      RegularShape.prototype.createHitDetectionCanvas_ = function (renderOptions) {
          this.hitDetectionImageSize_ = [renderOptions.size, renderOptions.size];
          this.hitDetectionCanvas_ = this.canvas_;
          if (this.fill_) {
              var color = this.fill_.getColor();
              // determine if fill is transparent (or pattern or gradient)
              var opacity = 0;
              if (typeof color === 'string') {
                  color = asArray(color);
              }
              if (color === null) {
                  opacity = 1;
              }
              else if (Array.isArray(color)) {
                  opacity = color.length === 4 ? color[3] : 1;
              }
              if (opacity === 0) {
                  // if a transparent fill style is set, create an extra hit-detection image
                  // with a default fill style
                  var context = createCanvasContext2D(renderOptions.size, renderOptions.size);
                  this.hitDetectionCanvas_ = context.canvas;
                  this.drawHitDetectionCanvas_(renderOptions, context, 0, 0);
              }
          }
      };
      /**
       * @private
       * @param {RenderOptions} renderOptions Render options.
       * @param {CanvasRenderingContext2D} context The context.
       * @param {number} x The origin for the symbol (x).
       * @param {number} y The origin for the symbol (y).
       */
      RegularShape.prototype.drawHitDetectionCanvas_ = function (renderOptions, context, x, y) {
          // reset transform
          context.setTransform(1, 0, 0, 1, 0, 0);
          // then move to (x, y)
          context.translate(x, y);
          context.beginPath();
          var points = this.points_;
          if (points === Infinity) {
              context.arc(renderOptions.size / 2, renderOptions.size / 2, this.radius_, 0, 2 * Math.PI, true);
          }
          else {
              var radius2 = (this.radius2_ !== undefined) ? this.radius2_
                  : this.radius_;
              if (radius2 !== this.radius_) {
                  points = 2 * points;
              }
              var i = void 0, radiusC = void 0, angle0 = void 0;
              for (i = 0; i <= points; i++) {
                  angle0 = i * 2 * Math.PI / points - Math.PI / 2 + this.angle_;
                  radiusC = i % 2 === 0 ? this.radius_ : radius2;
                  context.lineTo(renderOptions.size / 2 + radiusC * Math.cos(angle0), renderOptions.size / 2 + radiusC * Math.sin(angle0));
              }
          }
          context.fillStyle = defaultFillStyle;
          context.fill();
          if (this.stroke_) {
              context.strokeStyle = renderOptions.strokeStyle;
              context.lineWidth = renderOptions.strokeWidth;
              if (renderOptions.lineDash) {
                  context.setLineDash(renderOptions.lineDash);
                  context.lineDashOffset = renderOptions.lineDashOffset;
              }
              context.stroke();
          }
          context.closePath();
      };
      return RegularShape;
  }(ImageStyle));

  /**
   * @module ol/style/Circle
   */
  var __extends$7 =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {Object} Options
   * @property {import("./Fill.js").default} [fill] Fill style.
   * @property {number} radius Circle radius.
   * @property {import("./Stroke.js").default} [stroke] Stroke style.
   * @property {Array<number>} [displacement=[0,0]] displacement
   */
  /**
   * @classdesc
   * Set circle style for vector features.
   * @api
   */
  var CircleStyle = /** @class */ (function (_super) {
      __extends$7(CircleStyle, _super);
      /**
       * @param {Options=} opt_options Options.
       */
      function CircleStyle(opt_options) {
          var _this = this;
          var options = opt_options ? opt_options : {};
          _this = _super.call(this, {
              points: Infinity,
              fill: options.fill,
              radius: options.radius,
              stroke: options.stroke,
              displacement: options.displacement !== undefined ? options.displacement : [0, 0]
          }) || this;
          return _this;
      }
      /**
      * Clones the style.
      * @return {CircleStyle} The cloned style.
      * @override
      * @api
      */
      CircleStyle.prototype.clone = function () {
          var style = new CircleStyle({
              fill: this.getFill() ? this.getFill().clone() : undefined,
              stroke: this.getStroke() ? this.getStroke().clone() : undefined,
              radius: this.getRadius(),
              displacement: this.getDisplacement().slice()
          });
          style.setOpacity(this.getOpacity());
          style.setScale(this.getScale());
          return style;
      };
      /**
       * Set the circle radius.
       *
       * @param {number} radius Circle radius.
       * @api
       */
      CircleStyle.prototype.setRadius = function (radius) {
          this.radius_ = radius;
          this.render();
      };
      return CircleStyle;
  }(RegularShape));

  /**
   * @module ol/style/Fill
   */
  /**
   * @typedef {Object} Options
   * @property {import("../color.js").Color|import("../colorlike.js").ColorLike} [color=null] A color, gradient or pattern.
   * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.
   * Default null; if null, the Canvas/renderer default black will be used.
   */
  /**
   * @classdesc
   * Set fill style for vector features.
   * @api
   */
  var Fill = /** @class */ (function () {
      /**
       * @param {Options=} opt_options Options.
       */
      function Fill(opt_options) {
          var options = opt_options || {};
          /**
           * @private
           * @type {import("../color.js").Color|import("../colorlike.js").ColorLike}
           */
          this.color_ = options.color !== undefined ? options.color : null;
      }
      /**
       * Clones the style. The color is not cloned if it is an {@link module:ol/colorlike~ColorLike}.
       * @return {Fill} The cloned style.
       * @api
       */
      Fill.prototype.clone = function () {
          var color = this.getColor();
          return new Fill({
              color: Array.isArray(color) ? color.slice() : color || undefined
          });
      };
      /**
       * Get the fill color.
       * @return {import("../color.js").Color|import("../colorlike.js").ColorLike} Color.
       * @api
       */
      Fill.prototype.getColor = function () {
          return this.color_;
      };
      /**
       * Set the color.
       *
       * @param {import("../color.js").Color|import("../colorlike.js").ColorLike} color Color.
       * @api
       */
      Fill.prototype.setColor = function (color) {
          this.color_ = color;
      };
      return Fill;
  }());

  /**
   * @module ol/style/Stroke
   */
  /**
   * @typedef {Object} Options
   * @property {import("../color.js").Color|import("../colorlike.js").ColorLike} [color] A color, gradient or pattern.
   * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.
   * Default null; if null, the Canvas/renderer default black will be used.
   * @property {CanvasLineCap} [lineCap='round'] Line cap style: `butt`, `round`, or `square`.
   * @property {CanvasLineJoin} [lineJoin='round'] Line join style: `bevel`, `round`, or `miter`.
   * @property {Array<number>} [lineDash] Line dash pattern. Default is `null` (no dash).
   * Please note that Internet Explorer 10 and lower do not support the `setLineDash` method on
   * the `CanvasRenderingContext2D` and therefore this option will have no visual effect in these browsers.
   * @property {number} [lineDashOffset=0] Line dash offset.
   * @property {number} [miterLimit=10] Miter limit.
   * @property {number} [width] Width.
   */
  /**
   * @classdesc
   * Set stroke style for vector features.
   * Note that the defaults given are the Canvas defaults, which will be used if
   * option is not defined. The `get` functions return whatever was entered in
   * the options; they will not return the default.
   * @api
   */
  var Stroke = /** @class */ (function () {
      /**
       * @param {Options=} opt_options Options.
       */
      function Stroke(opt_options) {
          var options = opt_options || {};
          /**
           * @private
           * @type {import("../color.js").Color|import("../colorlike.js").ColorLike}
           */
          this.color_ = options.color !== undefined ? options.color : null;
          /**
           * @private
           * @type {CanvasLineCap|undefined}
           */
          this.lineCap_ = options.lineCap;
          /**
           * @private
           * @type {Array<number>}
           */
          this.lineDash_ = options.lineDash !== undefined ? options.lineDash : null;
          /**
           * @private
           * @type {number|undefined}
           */
          this.lineDashOffset_ = options.lineDashOffset;
          /**
           * @private
           * @type {CanvasLineJoin|undefined}
           */
          this.lineJoin_ = options.lineJoin;
          /**
           * @private
           * @type {number|undefined}
           */
          this.miterLimit_ = options.miterLimit;
          /**
           * @private
           * @type {number|undefined}
           */
          this.width_ = options.width;
      }
      /**
       * Clones the style.
       * @return {Stroke} The cloned style.
       * @api
       */
      Stroke.prototype.clone = function () {
          var color = this.getColor();
          return new Stroke({
              color: Array.isArray(color) ? color.slice() : color || undefined,
              lineCap: this.getLineCap(),
              lineDash: this.getLineDash() ? this.getLineDash().slice() : undefined,
              lineDashOffset: this.getLineDashOffset(),
              lineJoin: this.getLineJoin(),
              miterLimit: this.getMiterLimit(),
              width: this.getWidth()
          });
      };
      /**
       * Get the stroke color.
       * @return {import("../color.js").Color|import("../colorlike.js").ColorLike} Color.
       * @api
       */
      Stroke.prototype.getColor = function () {
          return this.color_;
      };
      /**
       * Get the line cap type for the stroke.
       * @return {CanvasLineCap|undefined} Line cap.
       * @api
       */
      Stroke.prototype.getLineCap = function () {
          return this.lineCap_;
      };
      /**
       * Get the line dash style for the stroke.
       * @return {Array<number>} Line dash.
       * @api
       */
      Stroke.prototype.getLineDash = function () {
          return this.lineDash_;
      };
      /**
       * Get the line dash offset for the stroke.
       * @return {number|undefined} Line dash offset.
       * @api
       */
      Stroke.prototype.getLineDashOffset = function () {
          return this.lineDashOffset_;
      };
      /**
       * Get the line join type for the stroke.
       * @return {CanvasLineJoin|undefined} Line join.
       * @api
       */
      Stroke.prototype.getLineJoin = function () {
          return this.lineJoin_;
      };
      /**
       * Get the miter limit for the stroke.
       * @return {number|undefined} Miter limit.
       * @api
       */
      Stroke.prototype.getMiterLimit = function () {
          return this.miterLimit_;
      };
      /**
       * Get the stroke width.
       * @return {number|undefined} Width.
       * @api
       */
      Stroke.prototype.getWidth = function () {
          return this.width_;
      };
      /**
       * Set the color.
       *
       * @param {import("../color.js").Color|import("../colorlike.js").ColorLike} color Color.
       * @api
       */
      Stroke.prototype.setColor = function (color) {
          this.color_ = color;
      };
      /**
       * Set the line cap.
       *
       * @param {CanvasLineCap|undefined} lineCap Line cap.
       * @api
       */
      Stroke.prototype.setLineCap = function (lineCap) {
          this.lineCap_ = lineCap;
      };
      /**
       * Set the line dash.
       *
       * Please note that Internet Explorer 10 and lower [do not support][mdn] the
       * `setLineDash` method on the `CanvasRenderingContext2D` and therefore this
       * property will have no visual effect in these browsers.
       *
       * [mdn]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility
       *
       * @param {Array<number>} lineDash Line dash.
       * @api
       */
      Stroke.prototype.setLineDash = function (lineDash) {
          this.lineDash_ = lineDash;
      };
      /**
       * Set the line dash offset.
       *
       * @param {number|undefined} lineDashOffset Line dash offset.
       * @api
       */
      Stroke.prototype.setLineDashOffset = function (lineDashOffset) {
          this.lineDashOffset_ = lineDashOffset;
      };
      /**
       * Set the line join.
       *
       * @param {CanvasLineJoin|undefined} lineJoin Line join.
       * @api
       */
      Stroke.prototype.setLineJoin = function (lineJoin) {
          this.lineJoin_ = lineJoin;
      };
      /**
       * Set the miter limit.
       *
       * @param {number|undefined} miterLimit Miter limit.
       * @api
       */
      Stroke.prototype.setMiterLimit = function (miterLimit) {
          this.miterLimit_ = miterLimit;
      };
      /**
       * Set the width.
       *
       * @param {number|undefined} width Width.
       * @api
       */
      Stroke.prototype.setWidth = function (width) {
          this.width_ = width;
      };
      return Stroke;
  }());

  /**
   * @module ol/style/Style
   */
  /**
   * A function that takes an {@link module:ol/Feature} and a `{number}`
   * representing the view's resolution. The function should return a
   * {@link module:ol/style/Style} or an array of them. This way e.g. a
   * vector layer can be styled. If the function returns `undefined`, the
   * feature will not be rendered.
   *
   * @typedef {function(import("../Feature.js").FeatureLike, number):(Style|Array<Style>|void)} StyleFunction
   */
  /**
   * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.
   * @typedef {Style|Array<Style>|StyleFunction} StyleLike
   */
  /**
   * A function that takes an {@link module:ol/Feature} as argument and returns an
   * {@link module:ol/geom/Geometry} that will be rendered and styled for the feature.
   *
   * @typedef {function(import("../Feature.js").FeatureLike):
   *     (import("../geom/Geometry.js").default|import("../render/Feature.js").default|undefined)} GeometryFunction
   */
  /**
   * Custom renderer function. Takes two arguments:
   *
   * 1. The pixel coordinates of the geometry in GeoJSON notation.
   * 2. The {@link module:ol/render~State} of the layer renderer.
   *
   * @typedef {function((import("../coordinate.js").Coordinate|Array<import("../coordinate.js").Coordinate>|Array<Array<import("../coordinate.js").Coordinate>>),import("../render.js").State): void}
   * RenderFunction
   */
  /**
   * @typedef {Object} Options
   * @property {string|import("../geom/Geometry.js").default|GeometryFunction} [geometry] Feature property or geometry
   * or function returning a geometry to render for this style.
   * @property {import("./Fill.js").default} [fill] Fill style.
   * @property {import("./Image.js").default} [image] Image style.
   * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be
   * ignored, and the provided function will be called with each render frame for each geometry.
   * @property {import("./Stroke.js").default} [stroke] Stroke style.
   * @property {import("./Text.js").default} [text] Text style.
   * @property {number} [zIndex] Z index.
   */
  /**
   * @classdesc
   * Container for vector feature rendering styles. Any changes made to the style
   * or its children through `set*()` methods will not take effect until the
   * feature or layer that uses the style is re-rendered.
   *
   * ## Feature styles
   *
   * If no style is defined, the following default style is used:
   * ```js
   *  import {Fill, Stroke, Circle, Style} from 'ol/style';
   *
   *  var fill = new Fill({
   *    color: 'rgba(255,255,255,0.4)'
   *  });
   *  var stroke = new Stroke({
   *    color: '#3399CC',
   *    width: 1.25
   *  });
   *  var styles = [
   *    new Style({
   *      image: new Circle({
   *        fill: fill,
   *        stroke: stroke,
   *        radius: 5
   *      }),
   *      fill: fill,
   *      stroke: stroke
   *    })
   *  ];
   * ```
   *
   * A separate editing style has the following defaults:
   * ```js
   *  import {Fill, Stroke, Circle, Style} from 'ol/style';
   *  import GeometryType from 'ol/geom/GeometryType';
   *
   *  var white = [255, 255, 255, 1];
   *  var blue = [0, 153, 255, 1];
   *  var width = 3;
   *  styles[GeometryType.POLYGON] = [
   *    new Style({
   *      fill: new Fill({
   *        color: [255, 255, 255, 0.5]
   *      })
   *    })
   *  ];
   *  styles[GeometryType.MULTI_POLYGON] =
   *      styles[GeometryType.POLYGON];
   *  styles[GeometryType.LINE_STRING] = [
   *    new Style({
   *      stroke: new Stroke({
   *        color: white,
   *        width: width + 2
   *      })
   *    }),
   *    new Style({
   *      stroke: new Stroke({
   *        color: blue,
   *        width: width
   *      })
   *    })
   *  ];
   *  styles[GeometryType.MULTI_LINE_STRING] =
   *      styles[GeometryType.LINE_STRING];
   *  styles[GeometryType.POINT] = [
   *    new Style({
   *      image: new Circle({
   *        radius: width * 2,
   *        fill: new Fill({
   *          color: blue
   *        }),
   *        stroke: new Stroke({
   *          color: white,
   *          width: width / 2
   *        })
   *      }),
   *      zIndex: Infinity
   *    })
   *  ];
   *  styles[GeometryType.MULTI_POINT] =
   *      styles[GeometryType.POINT];
   *  styles[GeometryType.GEOMETRY_COLLECTION] =
   *      styles[GeometryType.POLYGON].concat(
   *          styles[GeometryType.LINE_STRING],
   *          styles[GeometryType.POINT]
   *      );
   * ```
   *
   * @api
   */
  var Style = /** @class */ (function () {
      /**
       * @param {Options=} opt_options Style options.
       */
      function Style(opt_options) {
          var options = opt_options || {};
          /**
           * @private
           * @type {string|import("../geom/Geometry.js").default|GeometryFunction}
           */
          this.geometry_ = null;
          /**
           * @private
           * @type {!GeometryFunction}
           */
          this.geometryFunction_ = defaultGeometryFunction;
          if (options.geometry !== undefined) {
              this.setGeometry(options.geometry);
          }
          /**
           * @private
           * @type {import("./Fill.js").default}
           */
          this.fill_ = options.fill !== undefined ? options.fill : null;
          /**
             * @private
             * @type {import("./Image.js").default}
             */
          this.image_ = options.image !== undefined ? options.image : null;
          /**
           * @private
           * @type {RenderFunction|null}
           */
          this.renderer_ = options.renderer !== undefined ? options.renderer : null;
          /**
           * @private
           * @type {import("./Stroke.js").default}
           */
          this.stroke_ = options.stroke !== undefined ? options.stroke : null;
          /**
           * @private
           * @type {import("./Text.js").default}
           */
          this.text_ = options.text !== undefined ? options.text : null;
          /**
           * @private
           * @type {number|undefined}
           */
          this.zIndex_ = options.zIndex;
      }
      /**
       * Clones the style.
       * @return {Style} The cloned style.
       * @api
       */
      Style.prototype.clone = function () {
          var geometry = this.getGeometry();
          if (geometry && typeof geometry === 'object') {
              geometry = /** @type {import("../geom/Geometry.js").default} */ (geometry).clone();
          }
          return new Style({
              geometry: geometry,
              fill: this.getFill() ? this.getFill().clone() : undefined,
              image: this.getImage() ? this.getImage().clone() : undefined,
              stroke: this.getStroke() ? this.getStroke().clone() : undefined,
              text: this.getText() ? this.getText().clone() : undefined,
              zIndex: this.getZIndex()
          });
      };
      /**
       * Get the custom renderer function that was configured with
       * {@link #setRenderer} or the `renderer` constructor option.
       * @return {RenderFunction|null} Custom renderer function.
       * @api
       */
      Style.prototype.getRenderer = function () {
          return this.renderer_;
      };
      /**
       * Sets a custom renderer function for this style. When set, `fill`, `stroke`
       * and `image` options of the style will be ignored.
       * @param {RenderFunction|null} renderer Custom renderer function.
       * @api
       */
      Style.prototype.setRenderer = function (renderer) {
          this.renderer_ = renderer;
      };
      /**
       * Get the geometry to be rendered.
       * @return {string|import("../geom/Geometry.js").default|GeometryFunction}
       * Feature property or geometry or function that returns the geometry that will
       * be rendered with this style.
       * @api
       */
      Style.prototype.getGeometry = function () {
          return this.geometry_;
      };
      /**
       * Get the function used to generate a geometry for rendering.
       * @return {!GeometryFunction} Function that is called with a feature
       * and returns the geometry to render instead of the feature's geometry.
       * @api
       */
      Style.prototype.getGeometryFunction = function () {
          return this.geometryFunction_;
      };
      /**
       * Get the fill style.
       * @return {import("./Fill.js").default} Fill style.
       * @api
       */
      Style.prototype.getFill = function () {
          return this.fill_;
      };
      /**
       * Set the fill style.
       * @param {import("./Fill.js").default} fill Fill style.
       * @api
       */
      Style.prototype.setFill = function (fill) {
          this.fill_ = fill;
      };
      /**
       * Get the image style.
       * @return {import("./Image.js").default} Image style.
       * @api
       */
      Style.prototype.getImage = function () {
          return this.image_;
      };
      /**
       * Set the image style.
       * @param {import("./Image.js").default} image Image style.
       * @api
       */
      Style.prototype.setImage = function (image) {
          this.image_ = image;
      };
      /**
       * Get the stroke style.
       * @return {import("./Stroke.js").default} Stroke style.
       * @api
       */
      Style.prototype.getStroke = function () {
          return this.stroke_;
      };
      /**
       * Set the stroke style.
       * @param {import("./Stroke.js").default} stroke Stroke style.
       * @api
       */
      Style.prototype.setStroke = function (stroke) {
          this.stroke_ = stroke;
      };
      /**
       * Get the text style.
       * @return {import("./Text.js").default} Text style.
       * @api
       */
      Style.prototype.getText = function () {
          return this.text_;
      };
      /**
       * Set the text style.
       * @param {import("./Text.js").default} text Text style.
       * @api
       */
      Style.prototype.setText = function (text) {
          this.text_ = text;
      };
      /**
       * Get the z-index for the style.
       * @return {number|undefined} ZIndex.
       * @api
       */
      Style.prototype.getZIndex = function () {
          return this.zIndex_;
      };
      /**
       * Set a geometry that is rendered instead of the feature's geometry.
       *
       * @param {string|import("../geom/Geometry.js").default|GeometryFunction} geometry
       *     Feature property or geometry or function returning a geometry to render
       *     for this style.
       * @api
       */
      Style.prototype.setGeometry = function (geometry) {
          if (typeof geometry === 'function') {
              this.geometryFunction_ = geometry;
          }
          else if (typeof geometry === 'string') {
              this.geometryFunction_ = function (feature) {
                  return (
                  /** @type {import("../geom/Geometry.js").default} */ (feature.get(geometry)));
              };
          }
          else if (!geometry) {
              this.geometryFunction_ = defaultGeometryFunction;
          }
          else if (geometry !== undefined) {
              this.geometryFunction_ = function () {
                  return (
                  /** @type {import("../geom/Geometry.js").default} */ (geometry));
              };
          }
          this.geometry_ = geometry;
      };
      /**
       * Set the z-index.
       *
       * @param {number|undefined} zIndex ZIndex.
       * @api
       */
      Style.prototype.setZIndex = function (zIndex) {
          this.zIndex_ = zIndex;
      };
      return Style;
  }());
  /**
   * Convert the provided object into a style function.  Functions passed through
   * unchanged.  Arrays of Style or single style objects wrapped in a
   * new style function.
   * @param {StyleFunction|Array<Style>|Style} obj
   *     A style function, a single style, or an array of styles.
   * @return {StyleFunction} A style function.
   */
  function toFunction(obj) {
      var styleFunction;
      if (typeof obj === 'function') {
          styleFunction = obj;
      }
      else {
          /**
           * @type {Array<Style>}
           */
          var styles_1;
          if (Array.isArray(obj)) {
              styles_1 = obj;
          }
          else {
              assert(typeof /** @type {?} */ (obj).getZIndex === 'function', 41); // Expected an `Style` or an array of `Style`
              var style = /** @type {Style} */ (obj);
              styles_1 = [style];
          }
          styleFunction = function () {
              return styles_1;
          };
      }
      return styleFunction;
  }
  /**
   * @type {Array<Style>}
   */
  var defaultStyles = null;
  /**
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {number} resolution Resolution.
   * @return {Array<Style>} Style.
   */
  function createDefaultStyle(feature, resolution) {
      // We don't use an immediately-invoked function
      // and a closure so we don't get an error at script evaluation time in
      // browsers that do not support Canvas. (import("./Circle.js").CircleStyle does
      // canvas.getContext('2d') at construction time, which will cause an.error
      // in such browsers.)
      if (!defaultStyles) {
          var fill = new Fill({
              color: 'rgba(255,255,255,0.4)'
          });
          var stroke = new Stroke({
              color: '#3399CC',
              width: 1.25
          });
          defaultStyles = [
              new Style({
                  image: new CircleStyle({
                      fill: fill,
                      stroke: stroke,
                      radius: 5
                  }),
                  fill: fill,
                  stroke: stroke
              })
          ];
      }
      return defaultStyles;
  }
  /**
   * Function that is called with a feature and returns its default geometry.
   * @param {import("../Feature.js").FeatureLike} feature Feature to get the geometry for.
   * @return {import("../geom/Geometry.js").default|import("../render/Feature.js").default|undefined} Geometry to render.
   */
  function defaultGeometryFunction(feature) {
      return feature.getGeometry();
  }

  /**
   * @module ol/style/IconAnchorUnits
   */
  /**
   * Icon anchor units. One of 'fraction', 'pixels'.
   * @enum {string}
   */
  var IconAnchorUnits = {
      /**
       * Anchor is a fraction
       * @api
       */
      FRACTION: 'fraction',
      /**
       * Anchor is in pixels
       * @api
       */
      PIXELS: 'pixels'
  };

  /**
   * @module ol/style/IconImageCache
   */
  /**
   * @classdesc
   * Singleton class. Available through {@link module:ol/style/IconImageCache~shared}.
   */
  var IconImageCache = /** @class */ (function () {
      function IconImageCache() {
          /**
          * @type {!Object<string, import("./IconImage.js").default>}
          * @private
          */
          this.cache_ = {};
          /**
          * @type {number}
          * @private
          */
          this.cacheSize_ = 0;
          /**
          * @type {number}
          * @private
          */
          this.maxCacheSize_ = 32;
      }
      /**
      * FIXME empty description for jsdoc
      */
      IconImageCache.prototype.clear = function () {
          this.cache_ = {};
          this.cacheSize_ = 0;
      };
      /**
       * @return {boolean} Can expire cache.
       */
      IconImageCache.prototype.canExpireCache = function () {
          return this.cacheSize_ > this.maxCacheSize_;
      };
      /**
      * FIXME empty description for jsdoc
      */
      IconImageCache.prototype.expire = function () {
          if (this.canExpireCache()) {
              var i = 0;
              for (var key in this.cache_) {
                  var iconImage = this.cache_[key];
                  if ((i++ & 3) === 0 && !iconImage.hasListener()) {
                      delete this.cache_[key];
                      --this.cacheSize_;
                  }
              }
          }
      };
      /**
      * @param {string} src Src.
      * @param {?string} crossOrigin Cross origin.
      * @param {import("../color.js").Color} color Color.
      * @return {import("./IconImage.js").default} Icon image.
      */
      IconImageCache.prototype.get = function (src, crossOrigin, color) {
          var key = getKey(src, crossOrigin, color);
          return key in this.cache_ ? this.cache_[key] : null;
      };
      /**
      * @param {string} src Src.
      * @param {?string} crossOrigin Cross origin.
      * @param {import("../color.js").Color} color Color.
      * @param {import("./IconImage.js").default} iconImage Icon image.
      */
      IconImageCache.prototype.set = function (src, crossOrigin, color, iconImage) {
          var key = getKey(src, crossOrigin, color);
          this.cache_[key] = iconImage;
          ++this.cacheSize_;
      };
      /**
      * Set the cache size of the icon cache. Default is `32`. Change this value when
      * your map uses more than 32 different icon images and you are not caching icon
      * styles on the application level.
      * @param {number} maxCacheSize Cache max size.
      * @api
      */
      IconImageCache.prototype.setSize = function (maxCacheSize) {
          this.maxCacheSize_ = maxCacheSize;
          this.expire();
      };
      return IconImageCache;
  }());
  /**
   * @param {string} src Src.
   * @param {?string} crossOrigin Cross origin.
   * @param {import("../color.js").Color} color Color.
   * @return {string} Cache key.
   */
  function getKey(src, crossOrigin, color) {
      var colorString = color ? asString(color) : 'null';
      return crossOrigin + ':' + src + ':' + colorString;
  }
  /**
   * The {@link module:ol/style/IconImageCache~IconImageCache} for
   * {@link module:ol/style/Icon~Icon} images.
   * @api
   */
  var shared$1 = new IconImageCache();

  var __extends$8 =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @abstract
   */
  var ImageBase = /** @class */ (function (_super) {
      __extends$8(ImageBase, _super);
      /**
       * @param {import("./extent.js").Extent} extent Extent.
       * @param {number|undefined} resolution Resolution.
       * @param {number} pixelRatio Pixel ratio.
       * @param {import("./ImageState.js").default} state State.
       */
      function ImageBase(extent, resolution, pixelRatio, state) {
          var _this = _super.call(this) || this;
          /**
           * @protected
           * @type {import("./extent.js").Extent}
           */
          _this.extent = extent;
          /**
           * @private
           * @type {number}
           */
          _this.pixelRatio_ = pixelRatio;
          /**
           * @protected
           * @type {number|undefined}
           */
          _this.resolution = resolution;
          /**
           * @protected
           * @type {import("./ImageState.js").default}
           */
          _this.state = state;
          return _this;
      }
      /**
       * @protected
       */
      ImageBase.prototype.changed = function () {
          this.dispatchEvent(EventType.CHANGE);
      };
      /**
       * @return {import("./extent.js").Extent} Extent.
       */
      ImageBase.prototype.getExtent = function () {
          return this.extent;
      };
      /**
       * @abstract
       * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
       */
      ImageBase.prototype.getImage = function () {
          return abstract();
      };
      /**
       * @return {number} PixelRatio.
       */
      ImageBase.prototype.getPixelRatio = function () {
          return this.pixelRatio_;
      };
      /**
       * @return {number} Resolution.
       */
      ImageBase.prototype.getResolution = function () {
          return /** @type {number} */ (this.resolution);
      };
      /**
       * @return {import("./ImageState.js").default} State.
       */
      ImageBase.prototype.getState = function () {
          return this.state;
      };
      /**
       * Load not yet loaded URI.
       * @abstract
       */
      ImageBase.prototype.load = function () {
          abstract();
      };
      return ImageBase;
  }(Target));

  var __extends$9 =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * A function that takes an {@link module:ol/Image~Image} for the image and a
   * `{string}` for the src as arguments. It is supposed to make it so the
   * underlying image {@link module:ol/Image~Image#getImage} is assigned the
   * content specified by the src. If not specified, the default is
   *
   *     function(image, src) {
   *       image.getImage().src = src;
   *     }
   *
   * Providing a custom `imageLoadFunction` can be useful to load images with
   * post requests or - in general - through XHR requests, where the src of the
   * image element would be set to a data URI when the content is loaded.
   *
   * @typedef {function(ImageWrapper, string): void} LoadFunction
   * @api
   */
  var ImageWrapper = /** @class */ (function (_super) {
      __extends$9(ImageWrapper, _super);
      /**
       * @param {import("./extent.js").Extent} extent Extent.
       * @param {number|undefined} resolution Resolution.
       * @param {number} pixelRatio Pixel ratio.
       * @param {string} src Image source URI.
       * @param {?string} crossOrigin Cross origin.
       * @param {LoadFunction} imageLoadFunction Image load function.
       */
      function ImageWrapper(extent, resolution, pixelRatio, src, crossOrigin, imageLoadFunction) {
          var _this = _super.call(this, extent, resolution, pixelRatio, ImageState.IDLE) || this;
          /**
           * @private
           * @type {string}
           */
          _this.src_ = src;
          /**
           * @private
           * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}
           */
          _this.image_ = new Image();
          if (crossOrigin !== null) {
              _this.image_.crossOrigin = crossOrigin;
          }
          /**
           * @private
           * @type {?function():void}
           */
          _this.unlisten_ = null;
          /**
           * @protected
           * @type {ImageState}
           */
          _this.state = ImageState.IDLE;
          /**
           * @private
           * @type {LoadFunction}
           */
          _this.imageLoadFunction_ = imageLoadFunction;
          return _this;
      }
      /**
       * @inheritDoc
       * @api
       */
      ImageWrapper.prototype.getImage = function () {
          return this.image_;
      };
      /**
       * Tracks loading or read errors.
       *
       * @private
       */
      ImageWrapper.prototype.handleImageError_ = function () {
          this.state = ImageState.ERROR;
          this.unlistenImage_();
          this.changed();
      };
      /**
       * Tracks successful image load.
       *
       * @private
       */
      ImageWrapper.prototype.handleImageLoad_ = function () {
          if (this.resolution === undefined) {
              this.resolution = getHeight(this.extent) / this.image_.height;
          }
          this.state = ImageState.LOADED;
          this.unlistenImage_();
          this.changed();
      };
      /**
       * Load the image or retry if loading previously failed.
       * Loading is taken care of by the tile queue, and calling this method is
       * only needed for preloading or for reloading in case of an error.
       * @override
       * @api
       */
      ImageWrapper.prototype.load = function () {
          if (this.state == ImageState.IDLE || this.state == ImageState.ERROR) {
              this.state = ImageState.LOADING;
              this.changed();
              this.imageLoadFunction_(this, this.src_);
              this.unlisten_ = listenImage(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this));
          }
      };
      /**
       * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.
       */
      ImageWrapper.prototype.setImage = function (image) {
          this.image_ = image;
      };
      /**
       * Discards event handlers which listen for load completion or errors.
       *
       * @private
       */
      ImageWrapper.prototype.unlistenImage_ = function () {
          if (this.unlisten_) {
              this.unlisten_();
              this.unlisten_ = null;
          }
      };
      return ImageWrapper;
  }(ImageBase));
  /**
   * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image element.
   * @param {function():any} loadHandler Load callback function.
   * @param {function():any} errorHandler Error callback function.
   * @return {function():void} Callback to stop listening.
   */
  function listenImage(image, loadHandler, errorHandler) {
      var img = /** @type {HTMLImageElement} */ (image);
      if (img.src && IMAGE_DECODE) {
          var promise = img.decode();
          var listening_1 = true;
          var unlisten = function () {
              listening_1 = false;
          };
          promise.then(function () {
              if (listening_1) {
                  loadHandler();
              }
          }).catch(function (error) {
              if (listening_1) {
                  // FIXME: Unconditionally call errorHandler() when this bug is fixed upstream:
                  //        https://bugs.webkit.org/show_bug.cgi?id=198527
                  if (error.name === 'EncodingError' && error.message === 'Invalid image type.') {
                      loadHandler();
                  }
                  else {
                      errorHandler();
                  }
              }
          });
          return unlisten;
      }
      var listenerKeys = [
          listenOnce(img, EventType.LOAD, loadHandler),
          listenOnce(img, EventType.ERROR, errorHandler)
      ];
      return function unlisten() {
          listenerKeys.forEach(unlistenByKey);
      };
  }

  /**
   * @module ol/style/IconImage
   */
  var __extends$a =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  var IconImage = /** @class */ (function (_super) {
      __extends$a(IconImage, _super);
      /**
       * @param {HTMLImageElement|HTMLCanvasElement} image Image.
       * @param {string|undefined} src Src.
       * @param {import("../size.js").Size} size Size.
       * @param {?string} crossOrigin Cross origin.
       * @param {import("../ImageState.js").default} imageState Image state.
       * @param {import("../color.js").Color} color Color.
       */
      function IconImage(image, src, size, crossOrigin, imageState, color) {
          var _this = _super.call(this) || this;
          /**
           * @private
           * @type {HTMLImageElement|HTMLCanvasElement}
           */
          _this.hitDetectionImage_ = null;
          /**
           * @private
           * @type {HTMLImageElement|HTMLCanvasElement}
           */
          _this.image_ = !image ? new Image() : image;
          if (crossOrigin !== null) {
              /** @type {HTMLImageElement} */ (_this.image_).crossOrigin = crossOrigin;
          }
          /**
           * @private
           * @type {HTMLCanvasElement}
           */
          _this.canvas_ = color ? document.createElement('canvas') : null;
          /**
           * @private
           * @type {import("../color.js").Color}
           */
          _this.color_ = color;
          /**
           * @private
           * @type {?function():void}
           */
          _this.unlisten_ = null;
          /**
           * @private
           * @type {import("../ImageState.js").default}
           */
          _this.imageState_ = imageState;
          /**
           * @private
           * @type {import("../size.js").Size}
           */
          _this.size_ = size;
          /**
           * @private
           * @type {string|undefined}
           */
          _this.src_ = src;
          /**
           * @private
           * @type {boolean|undefined}
           */
          _this.tainted_;
          return _this;
      }
      /**
       * @private
       * @param {CanvasRenderingContext2D=} context A context with the image already drawn into.
       * @return {boolean} The image canvas is tainted.
       */
      IconImage.prototype.isTainted_ = function (context) {
          if (this.tainted_ === undefined && this.imageState_ === ImageState.LOADED) {
              if (!context) {
                  context = createCanvasContext2D(1, 1);
                  context.drawImage(this.image_, 0, 0);
              }
              try {
                  context.getImageData(0, 0, 1, 1);
                  this.tainted_ = false;
              }
              catch (e) {
                  this.tainted_ = true;
              }
          }
          return this.tainted_ === true;
      };
      /**
       * @private
       */
      IconImage.prototype.dispatchChangeEvent_ = function () {
          this.dispatchEvent(EventType.CHANGE);
      };
      /**
       * @private
       */
      IconImage.prototype.handleImageError_ = function () {
          this.imageState_ = ImageState.ERROR;
          this.unlistenImage_();
          this.dispatchChangeEvent_();
      };
      /**
       * @private
       */
      IconImage.prototype.handleImageLoad_ = function () {
          this.imageState_ = ImageState.LOADED;
          if (this.size_) {
              this.image_.width = this.size_[0];
              this.image_.height = this.size_[1];
          }
          this.size_ = [this.image_.width, this.image_.height];
          this.unlistenImage_();
          this.replaceColor_();
          this.dispatchChangeEvent_();
      };
      /**
       * @param {number} pixelRatio Pixel ratio.
       * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.
       */
      IconImage.prototype.getImage = function (pixelRatio) {
          return this.canvas_ ? this.canvas_ : this.image_;
      };
      /**
       * @return {import("../ImageState.js").default} Image state.
       */
      IconImage.prototype.getImageState = function () {
          return this.imageState_;
      };
      /**
       * @param {number} pixelRatio Pixel ratio.
       * @return {HTMLImageElement|HTMLCanvasElement} Image element.
       */
      IconImage.prototype.getHitDetectionImage = function (pixelRatio) {
          if (!this.hitDetectionImage_) {
              if (this.isTainted_()) {
                  var width = this.size_[0];
                  var height = this.size_[1];
                  var context = createCanvasContext2D(width, height);
                  context.fillRect(0, 0, width, height);
                  this.hitDetectionImage_ = context.canvas;
              }
              else {
                  this.hitDetectionImage_ = this.image_;
              }
          }
          return this.hitDetectionImage_;
      };
      /**
       * @return {import("../size.js").Size} Image size.
       */
      IconImage.prototype.getSize = function () {
          return this.size_;
      };
      /**
       * @return {string|undefined} Image src.
       */
      IconImage.prototype.getSrc = function () {
          return this.src_;
      };
      /**
       * Load not yet loaded URI.
       */
      IconImage.prototype.load = function () {
          if (this.imageState_ == ImageState.IDLE) {
              this.imageState_ = ImageState.LOADING;
              try {
                  /** @type {HTMLImageElement} */ (this.image_).src = this.src_;
              }
              catch (e) {
                  this.handleImageError_();
              }
              this.unlisten_ = listenImage(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this));
          }
      };
      /**
       * @private
       */
      IconImage.prototype.replaceColor_ = function () {
          if (!this.color_) {
              return;
          }
          this.canvas_.width = this.image_.width;
          this.canvas_.height = this.image_.height;
          var ctx = this.canvas_.getContext('2d');
          ctx.drawImage(this.image_, 0, 0);
          if (this.isTainted_(ctx)) {
              // If reading from the canvas throws a SecurityError the same effect can be
              // achieved with globalCompositeOperation.
              // This could be used as the default, but it is not fully supported by all
              // browsers. E. g. Internet Explorer 11 does not support the multiply
              // operation and the resulting image shape will be completelly filled with
              // the provided color.
              // So this is only used as a fallback. It is still better than having no icon
              // at all.
              var c = this.color_;
              ctx.globalCompositeOperation = 'multiply';
              ctx.fillStyle = 'rgb(' + c[0] + ',' + c[1] + ',' + c[2] + ')';
              ctx.fillRect(0, 0, this.image_.width, this.image_.height);
              ctx.globalCompositeOperation = 'destination-in';
              ctx.drawImage(this.image_, 0, 0);
              return;
          }
          var imgData = ctx.getImageData(0, 0, this.image_.width, this.image_.height);
          var data = imgData.data;
          var r = this.color_[0] / 255.0;
          var g = this.color_[1] / 255.0;
          var b = this.color_[2] / 255.0;
          for (var i = 0, ii = data.length; i < ii; i += 4) {
              data[i] *= r;
              data[i + 1] *= g;
              data[i + 2] *= b;
          }
          ctx.putImageData(imgData, 0, 0);
      };
      /**
       * Discards event handlers which listen for load completion or errors.
       *
       * @private
       */
      IconImage.prototype.unlistenImage_ = function () {
          if (this.unlisten_) {
              this.unlisten_();
              this.unlisten_ = null;
          }
      };
      return IconImage;
  }(Target));
  /**
   * @param {HTMLImageElement|HTMLCanvasElement} image Image.
   * @param {string} src Src.
   * @param {import("../size.js").Size} size Size.
   * @param {?string} crossOrigin Cross origin.
   * @param {import("../ImageState.js").default} imageState Image state.
   * @param {import("../color.js").Color} color Color.
   * @return {IconImage} Icon image.
   */
  function get$5(image, src, size, crossOrigin, imageState, color) {
      var iconImage = shared$1.get(src, crossOrigin, color);
      if (!iconImage) {
          iconImage = new IconImage(image, src, size, crossOrigin, imageState, color);
          shared$1.set(src, crossOrigin, color, iconImage);
      }
      return iconImage;
  }

  /**
   * @module ol/style/IconOrigin
   */
  /**
   * Icon origin. One of 'bottom-left', 'bottom-right', 'top-left', 'top-right'.
   * @enum {string}
   */
  var IconOrigin = {
      /**
       * Origin is at bottom left
       * @api
       */
      BOTTOM_LEFT: 'bottom-left',
      /**
       * Origin is at bottom right
       * @api
       */
      BOTTOM_RIGHT: 'bottom-right',
      /**
       * Origin is at top left
       * @api
       */
      TOP_LEFT: 'top-left',
      /**
       * Origin is at top right
       * @api
       */
      TOP_RIGHT: 'top-right'
  };

  var __extends$b =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {Object} Options
   * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.
   * @property {import("./IconOrigin.js").default} [anchorOrigin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,
   * `top-left` or `top-right`.
   * @property {import("./IconAnchorUnits.js").default} [anchorXUnits='fraction'] Units in which the anchor x value is
   * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates
   * the x value in pixels.
   * @property {import("./IconAnchorUnits.js").default} [anchorYUnits='fraction'] Units in which the anchor y value is
   * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates
   * the y value in pixels.
   * @property {import("../color.js").Color|string} [color] Color to tint the icon. If not specified,
   * the icon will be left as is.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a
   * `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {HTMLImageElement|HTMLCanvasElement} [img] Image object for the icon. If the `src` option is not provided then the
   * provided image must already be loaded. And in that case, it is required
   * to provide the size of the image, with the `imgSize` option.
   * @property {Array<number>} [offset=[0, 0]] Offset, which, together with the size and the offset origin, define the
   * sub-rectangle to use from the original icon image.
   * @property {Array<number>} [displacement=[0,0]] Displacement the icon
   * @property {import("./IconOrigin.js").default} [offsetOrigin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,
   * `top-left` or `top-right`.
   * @property {number} [opacity=1] Opacity of the icon.
   * @property {number} [scale=1] Scale.
   * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.
   * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).
   * @property {import("../size.js").Size} [size] Icon size in pixel. Can be used together with `offset` to define the
   * sub-rectangle to use from the origin (sprite) icon image.
   * @property {import("../size.js").Size} [imgSize] Image size in pixels. Only required if `img` is set and `src` is not, and
   * for SVG images in Internet Explorer 11. The provided `imgSize` needs to match the actual size of the image.
   * @property {string} [src] Image source URI.
   */
  /**
   * @classdesc
   * Set icon style for vector features.
   * @api
   */
  var Icon = /** @class */ (function (_super) {
      __extends$b(Icon, _super);
      /**
       * @param {Options=} opt_options Options.
       */
      function Icon(opt_options) {
          var _this = this;
          var options = opt_options || {};
          /**
           * @type {number}
           */
          var opacity = options.opacity !== undefined ? options.opacity : 1;
          /**
           * @type {number}
           */
          var rotation = options.rotation !== undefined ? options.rotation : 0;
          /**
           * @type {number}
           */
          var scale = options.scale !== undefined ? options.scale : 1;
          /**
           * @type {boolean}
           */
          var rotateWithView = options.rotateWithView !== undefined ?
              options.rotateWithView : false;
          _this = _super.call(this, {
              opacity: opacity,
              rotation: rotation,
              scale: scale,
              displacement: options.displacement !== undefined ? options.displacement : [0, 0],
              rotateWithView: rotateWithView
          }) || this;
          /**
           * @private
           * @type {Array<number>}
           */
          _this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];
          /**
           * @private
           * @type {Array<number>}
           */
          _this.normalizedAnchor_ = null;
          /**
           * @private
           * @type {import("./IconOrigin.js").default}
           */
          _this.anchorOrigin_ = options.anchorOrigin !== undefined ?
              options.anchorOrigin : IconOrigin.TOP_LEFT;
          /**
           * @private
           * @type {import("./IconAnchorUnits.js").default}
           */
          _this.anchorXUnits_ = options.anchorXUnits !== undefined ?
              options.anchorXUnits : IconAnchorUnits.FRACTION;
          /**
           * @private
           * @type {import("./IconAnchorUnits.js").default}
           */
          _this.anchorYUnits_ = options.anchorYUnits !== undefined ?
              options.anchorYUnits : IconAnchorUnits.FRACTION;
          /**
           * @private
           * @type {?string}
           */
          _this.crossOrigin_ =
              options.crossOrigin !== undefined ? options.crossOrigin : null;
          /**
           * @type {HTMLImageElement|HTMLCanvasElement}
           */
          var image = options.img !== undefined ? options.img : null;
          /**
           * @type {import("../size.js").Size}
           */
          var imgSize = options.imgSize !== undefined ? options.imgSize : null;
          /**
           * @type {string|undefined}
           */
          var src = options.src;
          assert(!(src !== undefined && image), 4); // `image` and `src` cannot be provided at the same time
          assert(!image || (image && imgSize), 5); // `imgSize` must be set when `image` is provided
          if ((src === undefined || src.length === 0) && image) {
              src = /** @type {HTMLImageElement} */ (image).src || getUid(image);
          }
          assert(src !== undefined && src.length > 0, 6); // A defined and non-empty `src` or `image` must be provided
          /**
           * @type {import("../ImageState.js").default}
           */
          var imageState = options.src !== undefined ?
              ImageState.IDLE : ImageState.LOADED;
          /**
           * @private
           * @type {import("../color.js").Color}
           */
          _this.color_ = options.color !== undefined ? asArray(options.color) : null;
          /**
           * @private
           * @type {import("./IconImage.js").default}
           */
          _this.iconImage_ = get$5(image, /** @type {string} */ (src), imgSize, _this.crossOrigin_, imageState, _this.color_);
          /**
           * @private
           * @type {Array<number>}
           */
          _this.offset_ = options.offset !== undefined ? options.offset : [0, 0];
          /**
           * @private
           * @type {import("./IconOrigin.js").default}
           */
          _this.offsetOrigin_ = options.offsetOrigin !== undefined ?
              options.offsetOrigin : IconOrigin.TOP_LEFT;
          /**
           * @private
           * @type {Array<number>}
           */
          _this.origin_ = null;
          /**
           * @private
           * @type {import("../size.js").Size}
           */
          _this.size_ = options.size !== undefined ? options.size : null;
          return _this;
      }
      /**
       * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.
       * @return {Icon} The cloned style.
       * @api
       */
      Icon.prototype.clone = function () {
          return new Icon({
              anchor: this.anchor_.slice(),
              anchorOrigin: this.anchorOrigin_,
              anchorXUnits: this.anchorXUnits_,
              anchorYUnits: this.anchorYUnits_,
              crossOrigin: this.crossOrigin_,
              color: (this.color_ && this.color_.slice) ? this.color_.slice() : this.color_ || undefined,
              src: this.getSrc(),
              offset: this.offset_.slice(),
              offsetOrigin: this.offsetOrigin_,
              size: this.size_ !== null ? this.size_.slice() : undefined,
              opacity: this.getOpacity(),
              scale: this.getScale(),
              rotation: this.getRotation(),
              rotateWithView: this.getRotateWithView()
          });
      };
      /**
       * @inheritDoc
       * @api
       */
      Icon.prototype.getAnchor = function () {
          if (this.normalizedAnchor_) {
              return this.normalizedAnchor_;
          }
          var anchor = this.anchor_;
          var size = this.getSize();
          if (this.anchorXUnits_ == IconAnchorUnits.FRACTION ||
              this.anchorYUnits_ == IconAnchorUnits.FRACTION) {
              if (!size) {
                  return null;
              }
              anchor = this.anchor_.slice();
              if (this.anchorXUnits_ == IconAnchorUnits.FRACTION) {
                  anchor[0] *= size[0];
              }
              if (this.anchorYUnits_ == IconAnchorUnits.FRACTION) {
                  anchor[1] *= size[1];
              }
          }
          if (this.anchorOrigin_ != IconOrigin.TOP_LEFT) {
              if (!size) {
                  return null;
              }
              if (anchor === this.anchor_) {
                  anchor = this.anchor_.slice();
              }
              if (this.anchorOrigin_ == IconOrigin.TOP_RIGHT ||
                  this.anchorOrigin_ == IconOrigin.BOTTOM_RIGHT) {
                  anchor[0] = -anchor[0] + size[0];
              }
              if (this.anchorOrigin_ == IconOrigin.BOTTOM_LEFT ||
                  this.anchorOrigin_ == IconOrigin.BOTTOM_RIGHT) {
                  anchor[1] = -anchor[1] + size[1];
              }
          }
          this.normalizedAnchor_ = anchor;
          return this.normalizedAnchor_;
      };
      /**
       * Set the anchor point. The anchor determines the center point for the
       * symbolizer.
       *
       * @param {Array<number>} anchor Anchor.
       * @api
       */
      Icon.prototype.setAnchor = function (anchor) {
          this.anchor_ = anchor;
          this.normalizedAnchor_ = null;
      };
      /**
       * Get the icon color.
       * @return {import("../color.js").Color} Color.
       * @api
       */
      Icon.prototype.getColor = function () {
          return this.color_;
      };
      /**
       * Get the image icon.
       * @param {number} pixelRatio Pixel ratio.
       * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.
       * @override
       * @api
       */
      Icon.prototype.getImage = function (pixelRatio) {
          return this.iconImage_.getImage(pixelRatio);
      };
      /**
       * @override
       */
      Icon.prototype.getImageSize = function () {
          return this.iconImage_.getSize();
      };
      /**
       * @override
       */
      Icon.prototype.getHitDetectionImageSize = function () {
          return this.getImageSize();
      };
      /**
       * @override
       */
      Icon.prototype.getImageState = function () {
          return this.iconImage_.getImageState();
      };
      /**
       * @override
       */
      Icon.prototype.getHitDetectionImage = function (pixelRatio) {
          return this.iconImage_.getHitDetectionImage(pixelRatio);
      };
      /**
       * @inheritDoc
       * @api
       */
      Icon.prototype.getOrigin = function () {
          if (this.origin_) {
              return this.origin_;
          }
          var offset = this.offset_;
          var displacement = this.getDisplacement();
          if (this.offsetOrigin_ != IconOrigin.TOP_LEFT) {
              var size = this.getSize();
              var iconImageSize = this.iconImage_.getSize();
              if (!size || !iconImageSize) {
                  return null;
              }
              offset = offset.slice();
              if (this.offsetOrigin_ == IconOrigin.TOP_RIGHT ||
                  this.offsetOrigin_ == IconOrigin.BOTTOM_RIGHT) {
                  offset[0] = iconImageSize[0] - size[0] - offset[0];
              }
              if (this.offsetOrigin_ == IconOrigin.BOTTOM_LEFT ||
                  this.offsetOrigin_ == IconOrigin.BOTTOM_RIGHT) {
                  offset[1] = iconImageSize[1] - size[1] - offset[1];
              }
          }
          offset[0] += displacement[0];
          offset[1] += displacement[1];
          this.origin_ = offset;
          return this.origin_;
      };
      /**
       * Get the image URL.
       * @return {string|undefined} Image src.
       * @api
       */
      Icon.prototype.getSrc = function () {
          return this.iconImage_.getSrc();
      };
      /**
       * @inheritDoc
       * @api
       */
      Icon.prototype.getSize = function () {
          return !this.size_ ? this.iconImage_.getSize() : this.size_;
      };
      /**
       * @override
       */
      Icon.prototype.listenImageChange = function (listener) {
          this.iconImage_.addEventListener(EventType.CHANGE, listener);
      };
      /**
       * Load not yet loaded URI.
       * When rendering a feature with an icon style, the vector renderer will
       * automatically call this method. However, you might want to call this
       * method yourself for preloading or other purposes.
       * @override
       * @api
       */
      Icon.prototype.load = function () {
          this.iconImage_.load();
      };
      /**
       * @override
       */
      Icon.prototype.unlistenImageChange = function (listener) {
          this.iconImage_.removeEventListener(EventType.CHANGE, listener);
      };
      return Icon;
  }(ImageStyle));

  /**
   * @module ol/style/TextPlacement
   */
  /**
   * Text placement. One of `'point'`, `'line'`. Default is `'point'`. Note that
   * `'line'` requires the underlying geometry to be a {@link module:ol/geom/LineString~LineString},
   * {@link module:ol/geom/Polygon~Polygon}, {@link module:ol/geom/MultiLineString~MultiLineString} or
   * {@link module:ol/geom/MultiPolygon~MultiPolygon}.
   * @enum {string}
   */
  var TextPlacement = {
      POINT: 'point',
      LINE: 'line'
  };

  /**
   * @module ol/style/Text
   */
  /**
   * The default fill color to use if no fill was set at construction time; a
   * blackish `#333`.
   *
   * @const {string}
   */
  var DEFAULT_FILL_COLOR = '#333';
  /**
   * @typedef {Object} Options
   * @property {string} [font] Font style as CSS 'font' value, see:
   * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font. Default is '10px sans-serif'
   * @property {number} [maxAngle=Math.PI/4] When `placement` is set to `'line'`, allow a maximum angle between adjacent characters.
   * The expected value is in radians, and the default is 45Â° (`Math.PI / 4`).
   * @property {number} [offsetX=0] Horizontal text offset in pixels. A positive will shift the text right.
   * @property {number} [offsetY=0] Vertical text offset in pixels. A positive will shift the text down.
   * @property {boolean} [overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed
   * the width of the polygon at the label position or the length of the path that it follows.
   * @property {import("./TextPlacement.js").default|string} [placement='point'] Text placement.
   * @property {number} [scale] Scale.
   * @property {boolean} [rotateWithView=false] Whether to rotate the text with the view.
   * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).
   * @property {string} [text] Text content.
   * @property {string} [textAlign] Text alignment. Possible values: 'left', 'right', 'center', 'end' or 'start'.
   * Default is 'center' for `placement: 'point'`. For `placement: 'line'`, the default is to let the renderer choose a
   * placement where `maxAngle` is not exceeded.
   * @property {string} [textBaseline='middle'] Text base line. Possible values: 'bottom', 'top', 'middle', 'alphabetic',
   * 'hanging', 'ideographic'.
   * @property {import("./Fill.js").default} [fill] Fill style. If none is provided, we'll use a dark fill-style (#333).
   * @property {import("./Stroke.js").default} [stroke] Stroke style.
   * @property {import("./Fill.js").default} [backgroundFill] Fill style for the text background when `placement` is
   * `'point'`. Default is no fill.
   * @property {import("./Stroke.js").default} [backgroundStroke] Stroke style for the text background  when `placement`
   * is `'point'`. Default is no stroke.
   * @property {Array<number>} [padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of
   * values in the array is `[top, right, bottom, left]`.
   */
  /**
   * @classdesc
   * Set text style for vector features.
   * @api
   */
  var Text = /** @class */ (function () {
      /**
       * @param {Options=} opt_options Options.
       */
      function Text(opt_options) {
          var options = opt_options || {};
          /**
           * @private
           * @type {string|undefined}
           */
          this.font_ = options.font;
          /**
           * @private
           * @type {number|undefined}
           */
          this.rotation_ = options.rotation;
          /**
           * @private
           * @type {boolean|undefined}
           */
          this.rotateWithView_ = options.rotateWithView;
          /**
           * @private
           * @type {number|undefined}
           */
          this.scale_ = options.scale;
          /**
           * @private
           * @type {string|undefined}
           */
          this.text_ = options.text;
          /**
           * @private
           * @type {string|undefined}
           */
          this.textAlign_ = options.textAlign;
          /**
           * @private
           * @type {string|undefined}
           */
          this.textBaseline_ = options.textBaseline;
          /**
           * @private
           * @type {import("./Fill.js").default}
           */
          this.fill_ = options.fill !== undefined ? options.fill :
              new Fill({ color: DEFAULT_FILL_COLOR });
          /**
           * @private
           * @type {number}
           */
          this.maxAngle_ = options.maxAngle !== undefined ? options.maxAngle : Math.PI / 4;
          /**
           * @private
           * @type {import("./TextPlacement.js").default|string}
           */
          this.placement_ = options.placement !== undefined ? options.placement : TextPlacement.POINT;
          /**
           * @private
           * @type {boolean}
           */
          this.overflow_ = !!options.overflow;
          /**
           * @private
           * @type {import("./Stroke.js").default}
           */
          this.stroke_ = options.stroke !== undefined ? options.stroke : null;
          /**
           * @private
           * @type {number}
           */
          this.offsetX_ = options.offsetX !== undefined ? options.offsetX : 0;
          /**
           * @private
           * @type {number}
           */
          this.offsetY_ = options.offsetY !== undefined ? options.offsetY : 0;
          /**
           * @private
           * @type {import("./Fill.js").default}
           */
          this.backgroundFill_ = options.backgroundFill ? options.backgroundFill : null;
          /**
           * @private
           * @type {import("./Stroke.js").default}
           */
          this.backgroundStroke_ = options.backgroundStroke ? options.backgroundStroke : null;
          /**
           * @private
           * @type {Array<number>}
           */
          this.padding_ = options.padding === undefined ? null : options.padding;
      }
      /**
       * Clones the style.
       * @return {Text} The cloned style.
       * @api
       */
      Text.prototype.clone = function () {
          return new Text({
              font: this.getFont(),
              placement: this.getPlacement(),
              maxAngle: this.getMaxAngle(),
              overflow: this.getOverflow(),
              rotation: this.getRotation(),
              rotateWithView: this.getRotateWithView(),
              scale: this.getScale(),
              text: this.getText(),
              textAlign: this.getTextAlign(),
              textBaseline: this.getTextBaseline(),
              fill: this.getFill() ? this.getFill().clone() : undefined,
              stroke: this.getStroke() ? this.getStroke().clone() : undefined,
              offsetX: this.getOffsetX(),
              offsetY: this.getOffsetY(),
              backgroundFill: this.getBackgroundFill() ? this.getBackgroundFill().clone() : undefined,
              backgroundStroke: this.getBackgroundStroke() ? this.getBackgroundStroke().clone() : undefined,
              padding: this.getPadding()
          });
      };
      /**
       * Get the `overflow` configuration.
       * @return {boolean} Let text overflow the length of the path they follow.
       * @api
       */
      Text.prototype.getOverflow = function () {
          return this.overflow_;
      };
      /**
       * Get the font name.
       * @return {string|undefined} Font.
       * @api
       */
      Text.prototype.getFont = function () {
          return this.font_;
      };
      /**
       * Get the maximum angle between adjacent characters.
       * @return {number} Angle in radians.
       * @api
       */
      Text.prototype.getMaxAngle = function () {
          return this.maxAngle_;
      };
      /**
       * Get the label placement.
       * @return {import("./TextPlacement.js").default|string} Text placement.
       * @api
       */
      Text.prototype.getPlacement = function () {
          return this.placement_;
      };
      /**
       * Get the x-offset for the text.
       * @return {number} Horizontal text offset.
       * @api
       */
      Text.prototype.getOffsetX = function () {
          return this.offsetX_;
      };
      /**
       * Get the y-offset for the text.
       * @return {number} Vertical text offset.
       * @api
       */
      Text.prototype.getOffsetY = function () {
          return this.offsetY_;
      };
      /**
       * Get the fill style for the text.
       * @return {import("./Fill.js").default} Fill style.
       * @api
       */
      Text.prototype.getFill = function () {
          return this.fill_;
      };
      /**
       * Determine whether the text rotates with the map.
       * @return {boolean|undefined} Rotate with map.
       * @api
       */
      Text.prototype.getRotateWithView = function () {
          return this.rotateWithView_;
      };
      /**
       * Get the text rotation.
       * @return {number|undefined} Rotation.
       * @api
       */
      Text.prototype.getRotation = function () {
          return this.rotation_;
      };
      /**
       * Get the text scale.
       * @return {number|undefined} Scale.
       * @api
       */
      Text.prototype.getScale = function () {
          return this.scale_;
      };
      /**
       * Get the stroke style for the text.
       * @return {import("./Stroke.js").default} Stroke style.
       * @api
       */
      Text.prototype.getStroke = function () {
          return this.stroke_;
      };
      /**
       * Get the text to be rendered.
       * @return {string|undefined} Text.
       * @api
       */
      Text.prototype.getText = function () {
          return this.text_;
      };
      /**
       * Get the text alignment.
       * @return {string|undefined} Text align.
       * @api
       */
      Text.prototype.getTextAlign = function () {
          return this.textAlign_;
      };
      /**
       * Get the text baseline.
       * @return {string|undefined} Text baseline.
       * @api
       */
      Text.prototype.getTextBaseline = function () {
          return this.textBaseline_;
      };
      /**
       * Get the background fill style for the text.
       * @return {import("./Fill.js").default} Fill style.
       * @api
       */
      Text.prototype.getBackgroundFill = function () {
          return this.backgroundFill_;
      };
      /**
       * Get the background stroke style for the text.
       * @return {import("./Stroke.js").default} Stroke style.
       * @api
       */
      Text.prototype.getBackgroundStroke = function () {
          return this.backgroundStroke_;
      };
      /**
       * Get the padding for the text.
       * @return {Array<number>} Padding.
       * @api
       */
      Text.prototype.getPadding = function () {
          return this.padding_;
      };
      /**
       * Set the `overflow` property.
       *
       * @param {boolean} overflow Let text overflow the path that it follows.
       * @api
       */
      Text.prototype.setOverflow = function (overflow) {
          this.overflow_ = overflow;
      };
      /**
       * Set the font.
       *
       * @param {string|undefined} font Font.
       * @api
       */
      Text.prototype.setFont = function (font) {
          this.font_ = font;
      };
      /**
       * Set the maximum angle between adjacent characters.
       *
       * @param {number} maxAngle Angle in radians.
       * @api
       */
      Text.prototype.setMaxAngle = function (maxAngle) {
          this.maxAngle_ = maxAngle;
      };
      /**
       * Set the x offset.
       *
       * @param {number} offsetX Horizontal text offset.
       * @api
       */
      Text.prototype.setOffsetX = function (offsetX) {
          this.offsetX_ = offsetX;
      };
      /**
       * Set the y offset.
       *
       * @param {number} offsetY Vertical text offset.
       * @api
       */
      Text.prototype.setOffsetY = function (offsetY) {
          this.offsetY_ = offsetY;
      };
      /**
       * Set the text placement.
       *
       * @param {import("./TextPlacement.js").default|string} placement Placement.
       * @api
       */
      Text.prototype.setPlacement = function (placement) {
          this.placement_ = placement;
      };
      /**
       * Set whether to rotate the text with the view.
       *
       * @param {boolean} rotateWithView Rotate with map.
       * @api
       */
      Text.prototype.setRotateWithView = function (rotateWithView) {
          this.rotateWithView_ = rotateWithView;
      };
      /**
       * Set the fill.
       *
       * @param {import("./Fill.js").default} fill Fill style.
       * @api
       */
      Text.prototype.setFill = function (fill) {
          this.fill_ = fill;
      };
      /**
       * Set the rotation.
       *
       * @param {number|undefined} rotation Rotation.
       * @api
       */
      Text.prototype.setRotation = function (rotation) {
          this.rotation_ = rotation;
      };
      /**
       * Set the scale.
       *
       * @param {number|undefined} scale Scale.
       * @api
       */
      Text.prototype.setScale = function (scale) {
          this.scale_ = scale;
      };
      /**
       * Set the stroke.
       *
       * @param {import("./Stroke.js").default} stroke Stroke style.
       * @api
       */
      Text.prototype.setStroke = function (stroke) {
          this.stroke_ = stroke;
      };
      /**
       * Set the text.
       *
       * @param {string|undefined} text Text.
       * @api
       */
      Text.prototype.setText = function (text) {
          this.text_ = text;
      };
      /**
       * Set the text alignment.
       *
       * @param {string|undefined} textAlign Text align.
       * @api
       */
      Text.prototype.setTextAlign = function (textAlign) {
          this.textAlign_ = textAlign;
      };
      /**
       * Set the text baseline.
       *
       * @param {string|undefined} textBaseline Text baseline.
       * @api
       */
      Text.prototype.setTextBaseline = function (textBaseline) {
          this.textBaseline_ = textBaseline;
      };
      /**
       * Set the background fill.
       *
       * @param {import("./Fill.js").default} fill Fill style.
       * @api
       */
      Text.prototype.setBackgroundFill = function (fill) {
          this.backgroundFill_ = fill;
      };
      /**
       * Set the background stroke.
       *
       * @param {import("./Stroke.js").default} stroke Stroke style.
       * @api
       */
      Text.prototype.setBackgroundStroke = function (stroke) {
          this.backgroundStroke_ = stroke;
      };
      /**
       * Set the padding (`[top, right, bottom, left]`).
       *
       * @param {!Array<number>} padding Padding.
       * @api
       */
      Text.prototype.setPadding = function (padding) {
          this.padding_ = padding;
      };
      return Text;
  }());

  /**
   * @module ol/geom/flat/center
   */
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @return {Array<number>} Flat centers.
   */
  function linearRingss(flatCoordinates, offset, endss, stride) {
      var flatCenters = [];
      var extent = createEmpty();
      for (var i = 0, ii = endss.length; i < ii; ++i) {
          var ends = endss[i];
          extent = createOrUpdateFromFlatCoordinates(flatCoordinates, offset, ends[0], stride);
          flatCenters.push((extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2);
          offset = ends[ends.length - 1];
      }
      return flatCenters;
  }

  /**
   * @module ol/geom/flat/contains
   */
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @return {boolean} Contains extent.
   */
  function linearRingContainsExtent(flatCoordinates, offset, end, stride, extent) {
      var outside = forEachCorner(extent, 
      /**
       * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
       * @return {boolean} Contains (x, y).
       */
      function (coordinate) {
          return !linearRingContainsXY(flatCoordinates, offset, end, stride, coordinate[0], coordinate[1]);
      });
      return !outside;
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} x X.
   * @param {number} y Y.
   * @return {boolean} Contains (x, y).
   */
  function linearRingContainsXY(flatCoordinates, offset, end, stride, x, y) {
      // http://geomalgorithms.com/a03-_inclusion.html
      // Copyright 2000 softSurfer, 2012 Dan Sunday
      // This code may be freely used and modified for any purpose
      // providing that this copyright notice is included with it.
      // SoftSurfer makes no warranty for this code, and cannot be held
      // liable for any real or imagined damage resulting from its use.
      // Users of this code must verify correctness for their application.
      var wn = 0;
      var x1 = flatCoordinates[end - stride];
      var y1 = flatCoordinates[end - stride + 1];
      for (; offset < end; offset += stride) {
          var x2 = flatCoordinates[offset];
          var y2 = flatCoordinates[offset + 1];
          if (y1 <= y) {
              if (y2 > y && ((x2 - x1) * (y - y1)) - ((x - x1) * (y2 - y1)) > 0) {
                  wn++;
              }
          }
          else if (y2 <= y && ((x2 - x1) * (y - y1)) - ((x - x1) * (y2 - y1)) < 0) {
              wn--;
          }
          x1 = x2;
          y1 = y2;
      }
      return wn !== 0;
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {number} x X.
   * @param {number} y Y.
   * @return {boolean} Contains (x, y).
   */
  function linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y) {
      if (ends.length === 0) {
          return false;
      }
      if (!linearRingContainsXY(flatCoordinates, offset, ends[0], stride, x, y)) {
          return false;
      }
      for (var i = 1, ii = ends.length; i < ii; ++i) {
          if (linearRingContainsXY(flatCoordinates, ends[i - 1], ends[i], stride, x, y)) {
              return false;
          }
      }
      return true;
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {number} x X.
   * @param {number} y Y.
   * @return {boolean} Contains (x, y).
   */
  function linearRingssContainsXY(flatCoordinates, offset, endss, stride, x, y) {
      if (endss.length === 0) {
          return false;
      }
      for (var i = 0, ii = endss.length; i < ii; ++i) {
          var ends = endss[i];
          if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {
              return true;
          }
          offset = ends[ends.length - 1];
      }
      return false;
  }

  /**
   * @module ol/geom/flat/interiorpoint
   */
  /**
   * Calculates a point that is likely to lie in the interior of the linear rings.
   * Inspired by JTS's com.vividsolutions.jts.geom.Geometry#getInteriorPoint.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {Array<number>} flatCenters Flat centers.
   * @param {number} flatCentersOffset Flat center offset.
   * @param {Array<number>=} opt_dest Destination.
   * @return {Array<number>} Destination point as XYM coordinate, where M is the
   * length of the horizontal intersection that the point belongs to.
   */
  function getInteriorPointOfArray(flatCoordinates, offset, ends, stride, flatCenters, flatCentersOffset, opt_dest) {
      var i, ii, x, x1, x2, y1, y2;
      var y = flatCenters[flatCentersOffset + 1];
      /** @type {Array<number>} */
      var intersections = [];
      // Calculate intersections with the horizontal line
      for (var r = 0, rr = ends.length; r < rr; ++r) {
          var end = ends[r];
          x1 = flatCoordinates[end - stride];
          y1 = flatCoordinates[end - stride + 1];
          for (i = offset; i < end; i += stride) {
              x2 = flatCoordinates[i];
              y2 = flatCoordinates[i + 1];
              if ((y <= y1 && y2 <= y) || (y1 <= y && y <= y2)) {
                  x = (y - y1) / (y2 - y1) * (x2 - x1) + x1;
                  intersections.push(x);
              }
              x1 = x2;
              y1 = y2;
          }
      }
      // Find the longest segment of the horizontal line that has its center point
      // inside the linear ring.
      var pointX = NaN;
      var maxSegmentLength = -Infinity;
      intersections.sort(numberSafeCompareFunction);
      x1 = intersections[0];
      for (i = 1, ii = intersections.length; i < ii; ++i) {
          x2 = intersections[i];
          var segmentLength = Math.abs(x2 - x1);
          if (segmentLength > maxSegmentLength) {
              x = (x1 + x2) / 2;
              if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {
                  pointX = x;
                  maxSegmentLength = segmentLength;
              }
          }
          x1 = x2;
      }
      if (isNaN(pointX)) {
          // There is no horizontal line that has its center point inside the linear
          // ring.  Use the center of the the linear ring's extent.
          pointX = flatCenters[flatCentersOffset];
      }
      if (opt_dest) {
          opt_dest.push(pointX, y, maxSegmentLength);
          return opt_dest;
      }
      else {
          return [pointX, y, maxSegmentLength];
      }
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {Array<number>} flatCenters Flat centers.
   * @return {Array<number>} Interior points as XYM coordinates, where M is the
   * length of the horizontal intersection that the point belongs to.
   */
  function getInteriorPointsOfMultiArray(flatCoordinates, offset, endss, stride, flatCenters) {
      var interiorPoints = [];
      for (var i = 0, ii = endss.length; i < ii; ++i) {
          var ends = endss[i];
          interiorPoints = getInteriorPointOfArray(flatCoordinates, offset, ends, stride, flatCenters, 2 * i, interiorPoints);
          offset = ends[ends.length - 1];
      }
      return interiorPoints;
  }

  /**
   * @module ol/geom/flat/interpolate
   */
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} fraction Fraction.
   * @param {Array<number>=} opt_dest Destination.
   * @return {Array<number>} Destination.
   */
  function interpolatePoint(flatCoordinates, offset, end, stride, fraction, opt_dest) {
      var pointX = NaN;
      var pointY = NaN;
      var n = (end - offset) / stride;
      if (n === 1) {
          pointX = flatCoordinates[offset];
          pointY = flatCoordinates[offset + 1];
      }
      else if (n == 2) {
          pointX = (1 - fraction) * flatCoordinates[offset] +
              fraction * flatCoordinates[offset + stride];
          pointY = (1 - fraction) * flatCoordinates[offset + 1] +
              fraction * flatCoordinates[offset + stride + 1];
      }
      else if (n !== 0) {
          var x1 = flatCoordinates[offset];
          var y1 = flatCoordinates[offset + 1];
          var length_1 = 0;
          var cumulativeLengths = [0];
          for (var i = offset + stride; i < end; i += stride) {
              var x2 = flatCoordinates[i];
              var y2 = flatCoordinates[i + 1];
              length_1 += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
              cumulativeLengths.push(length_1);
              x1 = x2;
              y1 = y2;
          }
          var target = fraction * length_1;
          var index = binarySearch(cumulativeLengths, target);
          if (index < 0) {
              var t = (target - cumulativeLengths[-index - 2]) /
                  (cumulativeLengths[-index - 1] - cumulativeLengths[-index - 2]);
              var o = offset + (-index - 2) * stride;
              pointX = lerp(flatCoordinates[o], flatCoordinates[o + stride], t);
              pointY = lerp(flatCoordinates[o + 1], flatCoordinates[o + stride + 1], t);
          }
          else {
              pointX = flatCoordinates[offset + index * stride];
              pointY = flatCoordinates[offset + index * stride + 1];
          }
      }
      if (opt_dest) {
          opt_dest[0] = pointX;
          opt_dest[1] = pointY;
          return opt_dest;
      }
      else {
          return [pointX, pointY];
      }
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} m M.
   * @param {boolean} extrapolate Extrapolate.
   * @return {import("../../coordinate.js").Coordinate} Coordinate.
   */
  function lineStringCoordinateAtM(flatCoordinates, offset, end, stride, m, extrapolate) {
      if (end == offset) {
          return null;
      }
      var coordinate;
      if (m < flatCoordinates[offset + stride - 1]) {
          if (extrapolate) {
              coordinate = flatCoordinates.slice(offset, offset + stride);
              coordinate[stride - 1] = m;
              return coordinate;
          }
          else {
              return null;
          }
      }
      else if (flatCoordinates[end - 1] < m) {
          if (extrapolate) {
              coordinate = flatCoordinates.slice(end - stride, end);
              coordinate[stride - 1] = m;
              return coordinate;
          }
          else {
              return null;
          }
      }
      // FIXME use O(1) search
      if (m == flatCoordinates[offset + stride - 1]) {
          return flatCoordinates.slice(offset, offset + stride);
      }
      var lo = offset / stride;
      var hi = end / stride;
      while (lo < hi) {
          var mid = (lo + hi) >> 1;
          if (m < flatCoordinates[(mid + 1) * stride - 1]) {
              hi = mid;
          }
          else {
              lo = mid + 1;
          }
      }
      var m0 = flatCoordinates[lo * stride - 1];
      if (m == m0) {
          return flatCoordinates.slice((lo - 1) * stride, (lo - 1) * stride + stride);
      }
      var m1 = flatCoordinates[(lo + 1) * stride - 1];
      var t = (m - m0) / (m1 - m0);
      coordinate = [];
      for (var i = 0; i < stride - 1; ++i) {
          coordinate.push(lerp(flatCoordinates[(lo - 1) * stride + i], flatCoordinates[lo * stride + i], t));
      }
      coordinate.push(m);
      return coordinate;
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {number} m M.
   * @param {boolean} extrapolate Extrapolate.
   * @param {boolean} interpolate Interpolate.
   * @return {import("../../coordinate.js").Coordinate} Coordinate.
   */
  function lineStringsCoordinateAtM(flatCoordinates, offset, ends, stride, m, extrapolate, interpolate) {
      if (interpolate) {
          return lineStringCoordinateAtM(flatCoordinates, offset, ends[ends.length - 1], stride, m, extrapolate);
      }
      var coordinate;
      if (m < flatCoordinates[stride - 1]) {
          if (extrapolate) {
              coordinate = flatCoordinates.slice(0, stride);
              coordinate[stride - 1] = m;
              return coordinate;
          }
          else {
              return null;
          }
      }
      if (flatCoordinates[flatCoordinates.length - 1] < m) {
          if (extrapolate) {
              coordinate = flatCoordinates.slice(flatCoordinates.length - stride);
              coordinate[stride - 1] = m;
              return coordinate;
          }
          else {
              return null;
          }
      }
      for (var i = 0, ii = ends.length; i < ii; ++i) {
          var end = ends[i];
          if (offset == end) {
              continue;
          }
          if (m < flatCoordinates[offset + stride - 1]) {
              return null;
          }
          else if (m <= flatCoordinates[end - 1]) {
              return lineStringCoordinateAtM(flatCoordinates, offset, end, stride, m, false);
          }
          offset = end;
      }
      return null;
  }

  /**
   * @module ol/geom/flat/transform
   */
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {import("../../transform.js").Transform} transform Transform.
   * @param {Array<number>=} opt_dest Destination.
   * @return {Array<number>} Transformed coordinates.
   */
  function transform2D(flatCoordinates, offset, end, stride, transform, opt_dest) {
      var dest = opt_dest ? opt_dest : [];
      var i = 0;
      for (var j = offset; j < end; j += stride) {
          var x = flatCoordinates[j];
          var y = flatCoordinates[j + 1];
          dest[i++] = transform[0] * x + transform[2] * y + transform[4];
          dest[i++] = transform[1] * x + transform[3] * y + transform[5];
      }
      if (opt_dest && dest.length != i) {
          dest.length = i;
      }
      return dest;
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} angle Angle.
   * @param {Array<number>} anchor Rotation anchor point.
   * @param {Array<number>=} opt_dest Destination.
   * @return {Array<number>} Transformed coordinates.
   */
  function rotate(flatCoordinates, offset, end, stride, angle, anchor, opt_dest) {
      var dest = opt_dest ? opt_dest : [];
      var cos = Math.cos(angle);
      var sin = Math.sin(angle);
      var anchorX = anchor[0];
      var anchorY = anchor[1];
      var i = 0;
      for (var j = offset; j < end; j += stride) {
          var deltaX = flatCoordinates[j] - anchorX;
          var deltaY = flatCoordinates[j + 1] - anchorY;
          dest[i++] = anchorX + deltaX * cos - deltaY * sin;
          dest[i++] = anchorY + deltaX * sin + deltaY * cos;
          for (var k = j + 2; k < j + stride; ++k) {
              dest[i++] = flatCoordinates[k];
          }
      }
      if (opt_dest && dest.length != i) {
          dest.length = i;
      }
      return dest;
  }
  /**
   * Scale the coordinates.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} sx Scale factor in the x-direction.
   * @param {number} sy Scale factor in the y-direction.
   * @param {Array<number>} anchor Scale anchor point.
   * @param {Array<number>=} opt_dest Destination.
   * @return {Array<number>} Transformed coordinates.
   */
  function scale$1(flatCoordinates, offset, end, stride, sx, sy, anchor, opt_dest) {
      var dest = opt_dest ? opt_dest : [];
      var anchorX = anchor[0];
      var anchorY = anchor[1];
      var i = 0;
      for (var j = offset; j < end; j += stride) {
          var deltaX = flatCoordinates[j] - anchorX;
          var deltaY = flatCoordinates[j + 1] - anchorY;
          dest[i++] = anchorX + sx * deltaX;
          dest[i++] = anchorY + sy * deltaY;
          for (var k = j + 2; k < j + stride; ++k) {
              dest[i++] = flatCoordinates[k];
          }
      }
      if (opt_dest && dest.length != i) {
          dest.length = i;
      }
      return dest;
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} deltaX Delta X.
   * @param {number} deltaY Delta Y.
   * @param {Array<number>=} opt_dest Destination.
   * @return {Array<number>} Transformed coordinates.
   */
  function translate$1(flatCoordinates, offset, end, stride, deltaX, deltaY, opt_dest) {
      var dest = opt_dest ? opt_dest : [];
      var i = 0;
      for (var j = offset; j < end; j += stride) {
          dest[i++] = flatCoordinates[j] + deltaX;
          dest[i++] = flatCoordinates[j + 1] + deltaY;
          for (var k = j + 2; k < j + stride; ++k) {
              dest[i++] = flatCoordinates[k];
          }
      }
      if (opt_dest && dest.length != i) {
          dest.length = i;
      }
      return dest;
  }

  /**
   * @module ol/render/Feature
   */
  /**
   * @type {import("../transform.js").Transform}
   */
  var tmpTransform = create();
  /**
   * Lightweight, read-only, {@link module:ol/Feature~Feature} and {@link module:ol/geom/Geometry~Geometry} like
   * structure, optimized for vector tile rendering and styling. Geometry access
   * through the API is limited to getting the type and extent of the geometry.
   */
  var RenderFeature = /** @class */ (function () {
      /**
       * @param {GeometryType} type Geometry type.
       * @param {Array<number>} flatCoordinates Flat coordinates. These always need
       *     to be right-handed for polygons.
       * @param {Array<number>|Array<Array<number>>} ends Ends or Endss.
       * @param {Object<string, *>} properties Properties.
       * @param {number|string|undefined} id Feature id.
       */
      function RenderFeature(type, flatCoordinates, ends, properties, id) {
          /**
           * @private
           * @type {import("../extent.js").Extent|undefined}
           */
          this.extent_;
          /**
           * @private
           * @type {number|string|undefined}
           */
          this.id_ = id;
          /**
           * @private
           * @type {GeometryType}
           */
          this.type_ = type;
          /**
           * @private
           * @type {Array<number>}
           */
          this.flatCoordinates_ = flatCoordinates;
          /**
           * @private
           * @type {Array<number>}
           */
          this.flatInteriorPoints_ = null;
          /**
           * @private
           * @type {Array<number>}
           */
          this.flatMidpoints_ = null;
          /**
           * @private
           * @type {Array<number>|Array<Array<number>>}
           */
          this.ends_ = ends;
          /**
           * @private
           * @type {Object<string, *>}
           */
          this.properties_ = properties;
      }
      /**
       * Get a feature property by its key.
       * @param {string} key Key
       * @return {*} Value for the requested key.
       * @api
       */
      RenderFeature.prototype.get = function (key) {
          return this.properties_[key];
      };
      /**
       * Get the extent of this feature's geometry.
       * @return {import("../extent.js").Extent} Extent.
       * @api
       */
      RenderFeature.prototype.getExtent = function () {
          if (!this.extent_) {
              this.extent_ = this.type_ === GeometryType.POINT ?
                  createOrUpdateFromCoordinate(this.flatCoordinates_) :
                  createOrUpdateFromFlatCoordinates(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2);
          }
          return this.extent_;
      };
      /**
       * @return {Array<number>} Flat interior points.
       */
      RenderFeature.prototype.getFlatInteriorPoint = function () {
          if (!this.flatInteriorPoints_) {
              var flatCenter = getCenter(this.getExtent());
              this.flatInteriorPoints_ = getInteriorPointOfArray(this.flatCoordinates_, 0, /** @type {Array<number>} */ (this.ends_), 2, flatCenter, 0);
          }
          return this.flatInteriorPoints_;
      };
      /**
       * @return {Array<number>} Flat interior points.
       */
      RenderFeature.prototype.getFlatInteriorPoints = function () {
          if (!this.flatInteriorPoints_) {
              var flatCenters = linearRingss(this.flatCoordinates_, 0, /** @type {Array<Array<number>>} */ (this.ends_), 2);
              this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(this.flatCoordinates_, 0, /** @type {Array<Array<number>>} */ (this.ends_), 2, flatCenters);
          }
          return this.flatInteriorPoints_;
      };
      /**
       * @return {Array<number>} Flat midpoint.
       */
      RenderFeature.prototype.getFlatMidpoint = function () {
          if (!this.flatMidpoints_) {
              this.flatMidpoints_ = interpolatePoint(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2, 0.5);
          }
          return this.flatMidpoints_;
      };
      /**
       * @return {Array<number>} Flat midpoints.
       */
      RenderFeature.prototype.getFlatMidpoints = function () {
          if (!this.flatMidpoints_) {
              this.flatMidpoints_ = [];
              var flatCoordinates = this.flatCoordinates_;
              var offset = 0;
              var ends = /** @type {Array<number>} */ (this.ends_);
              for (var i = 0, ii = ends.length; i < ii; ++i) {
                  var end = ends[i];
                  var midpoint = interpolatePoint(flatCoordinates, offset, end, 2, 0.5);
                  extend$1(this.flatMidpoints_, midpoint);
                  offset = end;
              }
          }
          return this.flatMidpoints_;
      };
      /**
       * Get the feature identifier.  This is a stable identifier for the feature and
       * is set when reading data from a remote source.
       * @return {number|string|undefined} Id.
       * @api
       */
      RenderFeature.prototype.getId = function () {
          return this.id_;
      };
      /**
       * @return {Array<number>} Flat coordinates.
       */
      RenderFeature.prototype.getOrientedFlatCoordinates = function () {
          return this.flatCoordinates_;
      };
      /**
       * For API compatibility with {@link module:ol/Feature~Feature}, this method is useful when
       * determining the geometry type in style function (see {@link #getType}).
       * @return {RenderFeature} Feature.
       * @api
       */
      RenderFeature.prototype.getGeometry = function () {
          return this;
      };
      /**
       * @param {number} squaredTolerance Squared tolerance.
       * @return {RenderFeature} Simplified geometry.
       */
      RenderFeature.prototype.getSimplifiedGeometry = function (squaredTolerance) {
          return this;
      };
      /**
       * Get a transformed and simplified version of the geometry.
       * @abstract
       * @param {number} squaredTolerance Squared tolerance.
       * @param {import("../proj.js").TransformFunction} [opt_transform] Optional transform function.
       * @return {RenderFeature} Simplified geometry.
       */
      RenderFeature.prototype.simplifyTransformed = function (squaredTolerance, opt_transform) {
          return this;
      };
      /**
       * Get the feature properties.
       * @return {Object<string, *>} Feature properties.
       * @api
       */
      RenderFeature.prototype.getProperties = function () {
          return this.properties_;
      };
      /**
       * @return {number} Stride.
       */
      RenderFeature.prototype.getStride = function () {
          return 2;
      };
      /**
       * @return {undefined}
       */
      RenderFeature.prototype.getStyleFunction = function () {
          return undefined;
      };
      /**
       * Get the type of this feature's geometry.
       * @return {GeometryType} Geometry type.
       * @api
       */
      RenderFeature.prototype.getType = function () {
          return this.type_;
      };
      /**
       * Transform geometry coordinates from tile pixel space to projected.
       * The SRS of the source and destination are expected to be the same.
       *
       * @param {import("../proj.js").ProjectionLike} source The current projection
       * @param {import("../proj.js").ProjectionLike} destination The desired projection.
       */
      RenderFeature.prototype.transform = function (source, destination) {
          source = get$4(source);
          var pixelExtent = source.getExtent();
          var projectedExtent = source.getWorldExtent();
          var scale = getHeight(projectedExtent) / getHeight(pixelExtent);
          compose(tmpTransform, projectedExtent[0], projectedExtent[3], scale, -scale, 0, 0, 0);
          transform2D(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2, tmpTransform, this.flatCoordinates_);
      };
      return RenderFeature;
  }());
  /**
   * @return {Array<number>|Array<Array<number>>} Ends or endss.
   */
  RenderFeature.prototype.getEnds = function () {
      return this.ends_;
  };
  RenderFeature.prototype.getEndss = RenderFeature.prototype.getEnds;
  /**
   * @return {Array<number>} Flat coordinates.
   */
  RenderFeature.prototype.getFlatCoordinates =
      RenderFeature.prototype.getOrientedFlatCoordinates;

  var $version = 8;
  var $root = {
  	version: {
  		required: true,
  		type: "enum",
  		values: [
  			8
  		],
  		doc: "Style specification version number. Must be 8.",
  		example: 8
  	},
  	name: {
  		type: "string",
  		doc: "A human-readable name for the style.",
  		example: "Bright"
  	},
  	metadata: {
  		type: "*",
  		doc: "Arbitrary properties useful to track with the stylesheet, but do not influence rendering. Properties should be prefixed to avoid collisions, like 'mapbox:'."
  	},
  	center: {
  		type: "array",
  		value: "number",
  		doc: "Default map center in longitude and latitude.  The style center will be used only if the map has not been positioned by other means (e.g. map options or user interaction).",
  		example: [
  			-73.9749,
  			40.7736
  		]
  	},
  	zoom: {
  		type: "number",
  		doc: "Default zoom level.  The style zoom will be used only if the map has not been positioned by other means (e.g. map options or user interaction).",
  		example: 12.5
  	},
  	bearing: {
  		type: "number",
  		"default": 0,
  		period: 360,
  		units: "degrees",
  		doc: "Default bearing, in degrees. The bearing is the compass direction that is \"up\"; for example, a bearing of 90Â° orients the map so that east is up. This value will be used only if the map has not been positioned by other means (e.g. map options or user interaction).",
  		example: 29
  	},
  	pitch: {
  		type: "number",
  		"default": 0,
  		units: "degrees",
  		doc: "Default pitch, in degrees. Zero is perpendicular to the surface, for a look straight down at the map, while a greater value like 60 looks ahead towards the horizon. The style pitch will be used only if the map has not been positioned by other means (e.g. map options or user interaction).",
  		example: 50
  	},
  	light: {
  		type: "light",
  		doc: "The global light source.",
  		example: {
  			anchor: "viewport",
  			color: "white",
  			intensity: 0.4
  		}
  	},
  	sources: {
  		required: true,
  		type: "sources",
  		doc: "Data source specifications.",
  		example: {
  			"mapbox-streets": {
  				type: "vector",
  				url: "mapbox://mapbox.mapbox-streets-v6"
  			}
  		}
  	},
  	sprite: {
  		type: "string",
  		doc: "A base URL for retrieving the sprite image and metadata. The extensions `.png`, `.json` and scale factor `@2x.png` will be automatically appended. This property is required if any layer uses the `background-pattern`, `fill-pattern`, `line-pattern`, `fill-extrusion-pattern`, or `icon-image` properties. The URL must be absolute, containing the [scheme, authority and path components](https://en.wikipedia.org/wiki/URL#Syntax).",
  		example: "mapbox://sprites/mapbox/bright-v8"
  	},
  	glyphs: {
  		type: "string",
  		doc: "A URL template for loading signed-distance-field glyph sets in PBF format. The URL must include `{fontstack}` and `{range}` tokens. This property is required if any layer uses the `text-field` layout property. The URL must be absolute, containing the [scheme, authority and path components](https://en.wikipedia.org/wiki/URL#Syntax).",
  		example: "mapbox://fonts/mapbox/{fontstack}/{range}.pbf"
  	},
  	transition: {
  		type: "transition",
  		doc: "A global transition definition to use as a default across properties, to be used for timing transitions between one value and the next when no property-specific transition is set. Collision-based symbol fading is controlled independently of the style's `transition` property.",
  		example: {
  			duration: 300,
  			delay: 0
  		}
  	},
  	layers: {
  		required: true,
  		type: "array",
  		value: "layer",
  		doc: "Layers will be drawn in the order of this array.",
  		example: [
  			{
  				id: "water",
  				source: "mapbox-streets",
  				"source-layer": "water",
  				type: "fill",
  				paint: {
  					"fill-color": "#00ffff"
  				}
  			}
  		]
  	}
  };
  var sources = {
  	"*": {
  		type: "source",
  		doc: "Specification of a data source. For vector and raster sources, either TileJSON or a URL to a TileJSON must be provided. For image and video sources, a URL must be provided. For GeoJSON sources, a URL or inline GeoJSON must be provided."
  	}
  };
  var source = [
  	"source_vector",
  	"source_raster",
  	"source_raster_dem",
  	"source_geojson",
  	"source_video",
  	"source_image"
  ];
  var source_vector = {
  	type: {
  		required: true,
  		type: "enum",
  		values: {
  			vector: {
  				doc: "A vector tile source."
  			}
  		},
  		doc: "The type of the source."
  	},
  	url: {
  		type: "string",
  		doc: "A URL to a TileJSON resource. Supported protocols are `http:`, `https:`, and `mapbox://<Tileset ID>`."
  	},
  	tiles: {
  		type: "array",
  		value: "string",
  		doc: "An array of one or more tile source URLs, as in the TileJSON spec."
  	},
  	bounds: {
  		type: "array",
  		value: "number",
  		length: 4,
  		"default": [
  			-180,
  			-85.051129,
  			180,
  			85.051129
  		],
  		doc: "An array containing the longitude and latitude of the southwest and northeast corners of the source's bounding box in the following order: `[sw.lng, sw.lat, ne.lng, ne.lat]`. When this property is included in a source, no tiles outside of the given bounds are requested by Mapbox GL."
  	},
  	scheme: {
  		type: "enum",
  		values: {
  			xyz: {
  				doc: "Slippy map tilenames scheme."
  			},
  			tms: {
  				doc: "OSGeo spec scheme."
  			}
  		},
  		"default": "xyz",
  		doc: "Influences the y direction of the tile coordinates. The global-mercator (aka Spherical Mercator) profile is assumed."
  	},
  	minzoom: {
  		type: "number",
  		"default": 0,
  		doc: "Minimum zoom level for which tiles are available, as in the TileJSON spec."
  	},
  	maxzoom: {
  		type: "number",
  		"default": 22,
  		doc: "Maximum zoom level for which tiles are available, as in the TileJSON spec. Data from tiles at the maxzoom are used when displaying the map at higher zoom levels."
  	},
  	attribution: {
  		type: "string",
  		doc: "Contains an attribution to be displayed when the map is shown to a user."
  	},
  	promoteId: {
  		type: "promoteId",
  		doc: "A property to use as a feature id (for feature state). Either a property name, or an object of the form `{<sourceLayer>: <propertyName>}`. If specified as a string for a vector tile source, the same property is used across all its source layers."
  	},
  	"*": {
  		type: "*",
  		doc: "Other keys to configure the data source."
  	}
  };
  var source_raster = {
  	type: {
  		required: true,
  		type: "enum",
  		values: {
  			raster: {
  				doc: "A raster tile source."
  			}
  		},
  		doc: "The type of the source."
  	},
  	url: {
  		type: "string",
  		doc: "A URL to a TileJSON resource. Supported protocols are `http:`, `https:`, and `mapbox://<Tileset ID>`."
  	},
  	tiles: {
  		type: "array",
  		value: "string",
  		doc: "An array of one or more tile source URLs, as in the TileJSON spec."
  	},
  	bounds: {
  		type: "array",
  		value: "number",
  		length: 4,
  		"default": [
  			-180,
  			-85.051129,
  			180,
  			85.051129
  		],
  		doc: "An array containing the longitude and latitude of the southwest and northeast corners of the source's bounding box in the following order: `[sw.lng, sw.lat, ne.lng, ne.lat]`. When this property is included in a source, no tiles outside of the given bounds are requested by Mapbox GL."
  	},
  	minzoom: {
  		type: "number",
  		"default": 0,
  		doc: "Minimum zoom level for which tiles are available, as in the TileJSON spec."
  	},
  	maxzoom: {
  		type: "number",
  		"default": 22,
  		doc: "Maximum zoom level for which tiles are available, as in the TileJSON spec. Data from tiles at the maxzoom are used when displaying the map at higher zoom levels."
  	},
  	tileSize: {
  		type: "number",
  		"default": 512,
  		units: "pixels",
  		doc: "The minimum visual size to display tiles for this layer. Only configurable for raster layers."
  	},
  	scheme: {
  		type: "enum",
  		values: {
  			xyz: {
  				doc: "Slippy map tilenames scheme."
  			},
  			tms: {
  				doc: "OSGeo spec scheme."
  			}
  		},
  		"default": "xyz",
  		doc: "Influences the y direction of the tile coordinates. The global-mercator (aka Spherical Mercator) profile is assumed."
  	},
  	attribution: {
  		type: "string",
  		doc: "Contains an attribution to be displayed when the map is shown to a user."
  	},
  	"*": {
  		type: "*",
  		doc: "Other keys to configure the data source."
  	}
  };
  var source_raster_dem = {
  	type: {
  		required: true,
  		type: "enum",
  		values: {
  			"raster-dem": {
  				doc: "A RGB-encoded raster DEM source"
  			}
  		},
  		doc: "The type of the source."
  	},
  	url: {
  		type: "string",
  		doc: "A URL to a TileJSON resource. Supported protocols are `http:`, `https:`, and `mapbox://<Tileset ID>`."
  	},
  	tiles: {
  		type: "array",
  		value: "string",
  		doc: "An array of one or more tile source URLs, as in the TileJSON spec."
  	},
  	bounds: {
  		type: "array",
  		value: "number",
  		length: 4,
  		"default": [
  			-180,
  			-85.051129,
  			180,
  			85.051129
  		],
  		doc: "An array containing the longitude and latitude of the southwest and northeast corners of the source's bounding box in the following order: `[sw.lng, sw.lat, ne.lng, ne.lat]`. When this property is included in a source, no tiles outside of the given bounds are requested by Mapbox GL."
  	},
  	minzoom: {
  		type: "number",
  		"default": 0,
  		doc: "Minimum zoom level for which tiles are available, as in the TileJSON spec."
  	},
  	maxzoom: {
  		type: "number",
  		"default": 22,
  		doc: "Maximum zoom level for which tiles are available, as in the TileJSON spec. Data from tiles at the maxzoom are used when displaying the map at higher zoom levels."
  	},
  	tileSize: {
  		type: "number",
  		"default": 512,
  		units: "pixels",
  		doc: "The minimum visual size to display tiles for this layer. Only configurable for raster layers."
  	},
  	attribution: {
  		type: "string",
  		doc: "Contains an attribution to be displayed when the map is shown to a user."
  	},
  	encoding: {
  		type: "enum",
  		values: {
  			terrarium: {
  				doc: "Terrarium format PNG tiles. See https://aws.amazon.com/es/public-datasets/terrain/ for more info."
  			},
  			mapbox: {
  				doc: "Mapbox Terrain RGB tiles. See https://www.mapbox.com/help/access-elevation-data/#mapbox-terrain-rgb for more info."
  			}
  		},
  		"default": "mapbox",
  		doc: "The encoding used by this source. Mapbox Terrain RGB is used by default"
  	},
  	"*": {
  		type: "*",
  		doc: "Other keys to configure the data source."
  	}
  };
  var source_geojson = {
  	type: {
  		required: true,
  		type: "enum",
  		values: {
  			geojson: {
  				doc: "A GeoJSON data source."
  			}
  		},
  		doc: "The data type of the GeoJSON source."
  	},
  	data: {
  		type: "*",
  		doc: "A URL to a GeoJSON file, or inline GeoJSON."
  	},
  	maxzoom: {
  		type: "number",
  		"default": 18,
  		doc: "Maximum zoom level at which to create vector tiles (higher means greater detail at high zoom levels)."
  	},
  	attribution: {
  		type: "string",
  		doc: "Contains an attribution to be displayed when the map is shown to a user."
  	},
  	buffer: {
  		type: "number",
  		"default": 128,
  		maximum: 512,
  		minimum: 0,
  		doc: "Size of the tile buffer on each side. A value of 0 produces no buffer. A value of 512 produces a buffer as wide as the tile itself. Larger values produce fewer rendering artifacts near tile edges and slower performance."
  	},
  	tolerance: {
  		type: "number",
  		"default": 0.375,
  		doc: "Douglas-Peucker simplification tolerance (higher means simpler geometries and faster performance)."
  	},
  	cluster: {
  		type: "boolean",
  		"default": false,
  		doc: "If the data is a collection of point features, setting this to true clusters the points by radius into groups. Cluster groups become new `Point` features in the source with additional properties:\n * `cluster` Is `true` if the point is a cluster \n * `cluster_id` A unqiue id for the cluster to be used in conjunction with the [cluster inspection methods](https://www.mapbox.com/mapbox-gl-js/api/#geojsonsource#getclusterexpansionzoom)\n * `point_count` Number of original points grouped into this cluster\n * `point_count_abbreviated` An abbreviated point count"
  	},
  	clusterRadius: {
  		type: "number",
  		"default": 50,
  		minimum: 0,
  		doc: "Radius of each cluster if clustering is enabled. A value of 512 indicates a radius equal to the width of a tile."
  	},
  	clusterMaxZoom: {
  		type: "number",
  		doc: "Max zoom on which to cluster points if clustering is enabled. Defaults to one zoom less than maxzoom (so that last zoom features are not clustered)."
  	},
  	clusterProperties: {
  		type: "*",
  		doc: "An object defining custom properties on the generated clusters if clustering is enabled, aggregating values from clustered points. Has the form `{\"property_name\": [operator, map_expression]}`. `operator` is any expression function that accepts at least 2 operands (e.g. `\"+\"` or `\"max\"`) â it accumulates the property value from clusters/points the cluster contains; `map_expression` produces the value of a single point.\n\nExample: `{\"sum\": [\"+\", [\"get\", \"scalerank\"]]}`.\n\nFor more advanced use cases, in place of `operator`, you can use a custom reduce expression that references a special `[\"accumulated\"]` value, e.g.:\n`{\"sum\": [[\"+\", [\"accumulated\"], [\"get\", \"sum\"]], [\"get\", \"scalerank\"]]}`"
  	},
  	lineMetrics: {
  		type: "boolean",
  		"default": false,
  		doc: "Whether to calculate line distance metrics. This is required for line layers that specify `line-gradient` values."
  	},
  	generateId: {
  		type: "boolean",
  		"default": false,
  		doc: "Whether to generate ids for the geojson features. When enabled, the `feature.id` property will be auto assigned based on its index in the `features` array, over-writing any previous values."
  	},
  	promoteId: {
  		type: "promoteId",
  		doc: "A property to use as a feature id (for feature state). Either a property name, or an object of the form `{<sourceLayer>: <propertyName>}`."
  	}
  };
  var source_video = {
  	type: {
  		required: true,
  		type: "enum",
  		values: {
  			video: {
  				doc: "A video data source."
  			}
  		},
  		doc: "The data type of the video source."
  	},
  	urls: {
  		required: true,
  		type: "array",
  		value: "string",
  		doc: "URLs to video content in order of preferred format."
  	},
  	coordinates: {
  		required: true,
  		doc: "Corners of video specified in longitude, latitude pairs.",
  		type: "array",
  		length: 4,
  		value: {
  			type: "array",
  			length: 2,
  			value: "number",
  			doc: "A single longitude, latitude pair."
  		}
  	}
  };
  var source_image = {
  	type: {
  		required: true,
  		type: "enum",
  		values: {
  			image: {
  				doc: "An image data source."
  			}
  		},
  		doc: "The data type of the image source."
  	},
  	url: {
  		required: true,
  		type: "string",
  		doc: "URL that points to an image."
  	},
  	coordinates: {
  		required: true,
  		doc: "Corners of image specified in longitude, latitude pairs.",
  		type: "array",
  		length: 4,
  		value: {
  			type: "array",
  			length: 2,
  			value: "number",
  			doc: "A single longitude, latitude pair."
  		}
  	}
  };
  var layer = {
  	id: {
  		type: "string",
  		doc: "Unique layer name.",
  		required: true
  	},
  	type: {
  		type: "enum",
  		values: {
  			fill: {
  				doc: "A filled polygon with an optional stroked border.",
  				"sdk-support": {
  					"basic functionality": {
  						js: "0.10.0",
  						android: "2.0.1",
  						ios: "2.0.0",
  						macos: "0.1.0"
  					}
  				}
  			},
  			line: {
  				doc: "A stroked line.",
  				"sdk-support": {
  					"basic functionality": {
  						js: "0.10.0",
  						android: "2.0.1",
  						ios: "2.0.0",
  						macos: "0.1.0"
  					}
  				}
  			},
  			symbol: {
  				doc: "An icon or a text label.",
  				"sdk-support": {
  					"basic functionality": {
  						js: "0.10.0",
  						android: "2.0.1",
  						ios: "2.0.0",
  						macos: "0.1.0"
  					}
  				}
  			},
  			circle: {
  				doc: "A filled circle.",
  				"sdk-support": {
  					"basic functionality": {
  						js: "0.10.0",
  						android: "2.0.1",
  						ios: "2.0.0",
  						macos: "0.1.0"
  					}
  				}
  			},
  			heatmap: {
  				doc: "A heatmap.",
  				"sdk-support": {
  					"basic functionality": {
  						js: "0.41.0",
  						android: "6.0.0",
  						ios: "4.0.0",
  						macos: "0.7.0"
  					}
  				}
  			},
  			"fill-extrusion": {
  				doc: "An extruded (3D) polygon.",
  				"sdk-support": {
  					"basic functionality": {
  						js: "0.27.0",
  						android: "5.1.0",
  						ios: "3.6.0",
  						macos: "0.5.0"
  					}
  				}
  			},
  			raster: {
  				doc: "Raster map textures such as satellite imagery.",
  				"sdk-support": {
  					"basic functionality": {
  						js: "0.10.0",
  						android: "2.0.1",
  						ios: "2.0.0",
  						macos: "0.1.0"
  					}
  				}
  			},
  			hillshade: {
  				doc: "Client-side hillshading visualization based on DEM data. Currently, the implementation only supports Mapbox Terrain RGB and Mapzen Terrarium tiles.",
  				"sdk-support": {
  					"basic functionality": {
  						js: "0.43.0",
  						android: "6.0.0",
  						ios: "4.0.0",
  						macos: "0.7.0"
  					}
  				}
  			},
  			background: {
  				doc: "The background color or pattern of the map.",
  				"sdk-support": {
  					"basic functionality": {
  						js: "0.10.0",
  						android: "2.0.1",
  						ios: "2.0.0",
  						macos: "0.1.0"
  					}
  				}
  			}
  		},
  		doc: "Rendering type of this layer.",
  		required: true
  	},
  	metadata: {
  		type: "*",
  		doc: "Arbitrary properties useful to track with the layer, but do not influence rendering. Properties should be prefixed to avoid collisions, like 'mapbox:'."
  	},
  	source: {
  		type: "string",
  		doc: "Name of a source description to be used for this layer. Required for all layer types except `background`."
  	},
  	"source-layer": {
  		type: "string",
  		doc: "Layer to use from a vector tile source. Required for vector tile sources; prohibited for all other source types, including GeoJSON sources."
  	},
  	minzoom: {
  		type: "number",
  		minimum: 0,
  		maximum: 24,
  		doc: "The minimum zoom level for the layer. At zoom levels less than the minzoom, the layer will be hidden."
  	},
  	maxzoom: {
  		type: "number",
  		minimum: 0,
  		maximum: 24,
  		doc: "The maximum zoom level for the layer. At zoom levels equal to or greater than the maxzoom, the layer will be hidden."
  	},
  	filter: {
  		type: "filter",
  		doc: "A expression specifying conditions on source features. Only features that match the filter are displayed. Zoom expressions in filters are only evaluated at integer zoom levels. The `feature-state` expression is not supported in filter expressions."
  	},
  	layout: {
  		type: "layout",
  		doc: "Layout properties for the layer."
  	},
  	paint: {
  		type: "paint",
  		doc: "Default paint properties for this layer."
  	}
  };
  var layout = [
  	"layout_fill",
  	"layout_line",
  	"layout_circle",
  	"layout_heatmap",
  	"layout_fill-extrusion",
  	"layout_symbol",
  	"layout_raster",
  	"layout_hillshade",
  	"layout_background"
  ];
  var layout_background = {
  	visibility: {
  		type: "enum",
  		values: {
  			visible: {
  				doc: "The layer is shown."
  			},
  			none: {
  				doc: "The layer is not shown."
  			}
  		},
  		"default": "visible",
  		doc: "Whether this layer is displayed.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		"property-type": "constant"
  	}
  };
  var layout_fill = {
  	"fill-sort-key": {
  		type: "number",
  		doc: "Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "1.2.0"
  			},
  			"data-driven styling": {
  				js: "1.2.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom",
  				"feature"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	visibility: {
  		type: "enum",
  		values: {
  			visible: {
  				doc: "The layer is shown."
  			},
  			none: {
  				doc: "The layer is not shown."
  			}
  		},
  		"default": "visible",
  		doc: "Whether this layer is displayed.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		"property-type": "constant"
  	}
  };
  var layout_circle = {
  	"circle-sort-key": {
  		type: "number",
  		doc: "Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "1.2.0"
  			},
  			"data-driven styling": {
  				js: "1.2.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom",
  				"feature"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	visibility: {
  		type: "enum",
  		values: {
  			visible: {
  				doc: "The layer is shown."
  			},
  			none: {
  				doc: "The layer is not shown."
  			}
  		},
  		"default": "visible",
  		doc: "Whether this layer is displayed.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		"property-type": "constant"
  	}
  };
  var layout_heatmap = {
  	visibility: {
  		type: "enum",
  		values: {
  			visible: {
  				doc: "The layer is shown."
  			},
  			none: {
  				doc: "The layer is not shown."
  			}
  		},
  		"default": "visible",
  		doc: "Whether this layer is displayed.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.41.0",
  				android: "6.0.0",
  				ios: "4.0.0",
  				macos: "0.7.0"
  			}
  		},
  		"property-type": "constant"
  	}
  };
  var layout_line = {
  	"line-cap": {
  		type: "enum",
  		values: {
  			butt: {
  				doc: "A cap with a squared-off end which is drawn to the exact endpoint of the line."
  			},
  			round: {
  				doc: "A cap with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line's width and centered on the endpoint of the line."
  			},
  			square: {
  				doc: "A cap with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line's width."
  			}
  		},
  		"default": "butt",
  		doc: "The display of line endings.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"line-join": {
  		type: "enum",
  		values: {
  			bevel: {
  				doc: "A join with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line's width."
  			},
  			round: {
  				doc: "A join with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line's width and centered on the endpoint of the line."
  			},
  			miter: {
  				doc: "A join with a sharp, angled corner which is drawn with the outer sides beyond the endpoint of the path until they meet."
  			}
  		},
  		"default": "miter",
  		doc: "The display of lines when joining.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.40.0",
  				android: "5.2.0",
  				ios: "3.7.0",
  				macos: "0.6.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom",
  				"feature"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"line-miter-limit": {
  		type: "number",
  		"default": 2,
  		doc: "Used to automatically convert miter joins to bevel joins for sharp angles.",
  		requires: [
  			{
  				"line-join": "miter"
  			}
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"line-round-limit": {
  		type: "number",
  		"default": 1.05,
  		doc: "Used to automatically convert round joins to miter joins for shallow angles.",
  		requires: [
  			{
  				"line-join": "round"
  			}
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"line-sort-key": {
  		type: "number",
  		doc: "Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "1.2.0"
  			},
  			"data-driven styling": {
  				js: "1.2.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom",
  				"feature"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	visibility: {
  		type: "enum",
  		values: {
  			visible: {
  				doc: "The layer is shown."
  			},
  			none: {
  				doc: "The layer is not shown."
  			}
  		},
  		"default": "visible",
  		doc: "Whether this layer is displayed.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		"property-type": "constant"
  	}
  };
  var layout_symbol = {
  	"symbol-placement": {
  		type: "enum",
  		values: {
  			point: {
  				doc: "The label is placed at the point where the geometry is located."
  			},
  			line: {
  				doc: "The label is placed along the line of the geometry. Can only be used on `LineString` and `Polygon` geometries."
  			},
  			"line-center": {
  				doc: "The label is placed at the center of the line of the geometry. Can only be used on `LineString` and `Polygon` geometries. Note that a single feature in a vector tile may contain multiple line geometries."
  			}
  		},
  		"default": "point",
  		doc: "Label placement relative to its geometry.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"`line-center` value": {
  				js: "0.47.0",
  				android: "6.4.0",
  				ios: "4.3.0",
  				macos: "0.10.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"symbol-spacing": {
  		type: "number",
  		"default": 250,
  		minimum: 1,
  		units: "pixels",
  		doc: "Distance between two symbol anchors.",
  		requires: [
  			{
  				"symbol-placement": "line"
  			}
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"symbol-avoid-edges": {
  		type: "boolean",
  		"default": false,
  		doc: "If true, the symbols will not cross tile edges to avoid mutual collisions. Recommended in layers that don't have enough padding in the vector tile to prevent collisions, or if it is a point symbol layer placed after a line symbol layer. When using a client that supports global collision detection, like Mapbox GL JS version 0.42.0 or greater, enabling this property is not needed to prevent clipped labels at tile boundaries.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"symbol-sort-key": {
  		type: "number",
  		doc: "Sorts features in ascending order based on this value. Features with lower sort keys are drawn and placed first.  When `icon-allow-overlap` or `text-allow-overlap` is `false`, features with a lower sort key will have priority during placement. When `icon-allow-overlap` or `text-allow-overlap` is set to `true`, features with a higher sort key will overlap over features with a lower sort key.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.53.0",
  				android: "7.4.0",
  				ios: "4.11.0",
  				macos: "0.14.0"
  			},
  			"data-driven styling": {
  				js: "0.53.0",
  				android: "7.4.0",
  				ios: "4.11.0",
  				macos: "0.14.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom",
  				"feature"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"symbol-z-order": {
  		type: "enum",
  		values: {
  			auto: {
  				doc: "If `symbol-sort-key` is set, sort based on that. Otherwise sort symbols by their y-position relative to the viewport."
  			},
  			"viewport-y": {
  				doc: "Symbols will be sorted by their y-position relative to the viewport."
  			},
  			source: {
  				doc: "Symbols will be rendered in the same order as the source data with no sorting applied."
  			}
  		},
  		"default": "auto",
  		doc: "Controls the order in which overlapping symbols in the same layer are rendered",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.49.0",
  				android: "6.6.0",
  				ios: "4.5.0",
  				macos: "0.12.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"icon-allow-overlap": {
  		type: "boolean",
  		"default": false,
  		doc: "If true, the icon will be visible even if it collides with other previously drawn symbols.",
  		requires: [
  			"icon-image"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"icon-ignore-placement": {
  		type: "boolean",
  		"default": false,
  		doc: "If true, other symbols can be visible even if they collide with the icon.",
  		requires: [
  			"icon-image"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"icon-optional": {
  		type: "boolean",
  		"default": false,
  		doc: "If true, text will display without their corresponding icons when the icon collides with other symbols and the text does not.",
  		requires: [
  			"icon-image",
  			"text-field"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"icon-rotation-alignment": {
  		type: "enum",
  		values: {
  			map: {
  				doc: "When `symbol-placement` is set to `point`, aligns icons east-west. When `symbol-placement` is set to `line` or `line-center`, aligns icon x-axes with the line."
  			},
  			viewport: {
  				doc: "Produces icons whose x-axes are aligned with the x-axis of the viewport, regardless of the value of `symbol-placement`."
  			},
  			auto: {
  				doc: "When `symbol-placement` is set to `point`, this is equivalent to `viewport`. When `symbol-placement` is set to `line` or `line-center`, this is equivalent to `map`."
  			}
  		},
  		"default": "auto",
  		doc: "In combination with `symbol-placement`, determines the rotation behavior of icons.",
  		requires: [
  			"icon-image"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"`auto` value": {
  				js: "0.25.0",
  				android: "4.2.0",
  				ios: "3.4.0",
  				macos: "0.3.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"icon-size": {
  		type: "number",
  		"default": 1,
  		minimum: 0,
  		units: "factor of the original icon size",
  		doc: "Scales the original size of the icon by the provided factor. The new pixel size of the image will be the original pixel size multiplied by `icon-size`. 1 is the original size; 3 triples the size of the image.",
  		requires: [
  			"icon-image"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.35.0",
  				android: "5.1.0",
  				ios: "3.6.0",
  				macos: "0.5.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"icon-text-fit": {
  		type: "enum",
  		values: {
  			none: {
  				doc: "The icon is displayed at its intrinsic aspect ratio."
  			},
  			width: {
  				doc: "The icon is scaled in the x-dimension to fit the width of the text."
  			},
  			height: {
  				doc: "The icon is scaled in the y-dimension to fit the height of the text."
  			},
  			both: {
  				doc: "The icon is scaled in both x- and y-dimensions."
  			}
  		},
  		"default": "none",
  		doc: "Scales the icon to fit around the associated text.",
  		requires: [
  			"icon-image",
  			"text-field"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.21.0",
  				android: "4.2.0",
  				ios: "3.4.0",
  				macos: "0.2.1"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"icon-text-fit-padding": {
  		type: "array",
  		value: "number",
  		length: 4,
  		"default": [
  			0,
  			0,
  			0,
  			0
  		],
  		units: "pixels",
  		doc: "Size of the additional area added to dimensions determined by `icon-text-fit`, in clockwise order: top, right, bottom, left.",
  		requires: [
  			"icon-image",
  			"text-field",
  			{
  				"icon-text-fit": [
  					"both",
  					"width",
  					"height"
  				]
  			}
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.21.0",
  				android: "4.2.0",
  				ios: "3.4.0",
  				macos: "0.2.1"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"icon-image": {
  		type: "resolvedImage",
  		doc: "Name of image in sprite to use for drawing an image background.",
  		tokens: true,
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.35.0",
  				android: "5.1.0",
  				ios: "3.6.0",
  				macos: "0.5.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom",
  				"feature"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"icon-rotate": {
  		type: "number",
  		"default": 0,
  		period: 360,
  		units: "degrees",
  		doc: "Rotates the icon clockwise.",
  		requires: [
  			"icon-image"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.21.0",
  				android: "5.0.0",
  				ios: "3.5.0",
  				macos: "0.4.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"icon-padding": {
  		type: "number",
  		"default": 2,
  		minimum: 0,
  		units: "pixels",
  		doc: "Size of the additional area around the icon bounding box used for detecting symbol collisions.",
  		requires: [
  			"icon-image"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"icon-keep-upright": {
  		type: "boolean",
  		"default": false,
  		doc: "If true, the icon may be flipped to prevent it from being rendered upside-down.",
  		requires: [
  			"icon-image",
  			{
  				"icon-rotation-alignment": "map"
  			},
  			{
  				"symbol-placement": [
  					"line",
  					"line-center"
  				]
  			}
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"icon-offset": {
  		type: "array",
  		value: "number",
  		length: 2,
  		"default": [
  			0,
  			0
  		],
  		doc: "Offset distance of icon from its anchor. Positive values indicate right and down, while negative values indicate left and up. Each component is multiplied by the value of `icon-size` to obtain the final offset in pixels. When combined with `icon-rotate` the offset will be as if the rotated direction was up.",
  		requires: [
  			"icon-image"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.29.0",
  				android: "5.0.0",
  				ios: "3.5.0",
  				macos: "0.4.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"icon-anchor": {
  		type: "enum",
  		values: {
  			center: {
  				doc: "The center of the icon is placed closest to the anchor."
  			},
  			left: {
  				doc: "The left side of the icon is placed closest to the anchor."
  			},
  			right: {
  				doc: "The right side of the icon is placed closest to the anchor."
  			},
  			top: {
  				doc: "The top of the icon is placed closest to the anchor."
  			},
  			bottom: {
  				doc: "The bottom of the icon is placed closest to the anchor."
  			},
  			"top-left": {
  				doc: "The top left corner of the icon is placed closest to the anchor."
  			},
  			"top-right": {
  				doc: "The top right corner of the icon is placed closest to the anchor."
  			},
  			"bottom-left": {
  				doc: "The bottom left corner of the icon is placed closest to the anchor."
  			},
  			"bottom-right": {
  				doc: "The bottom right corner of the icon is placed closest to the anchor."
  			}
  		},
  		"default": "center",
  		doc: "Part of the icon placed closest to the anchor.",
  		requires: [
  			"icon-image"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.40.0",
  				android: "5.2.0",
  				ios: "3.7.0",
  				macos: "0.6.0"
  			},
  			"data-driven styling": {
  				js: "0.40.0",
  				android: "5.2.0",
  				ios: "3.7.0",
  				macos: "0.6.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom",
  				"feature"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"icon-pitch-alignment": {
  		type: "enum",
  		values: {
  			map: {
  				doc: "The icon is aligned to the plane of the map."
  			},
  			viewport: {
  				doc: "The icon is aligned to the plane of the viewport."
  			},
  			auto: {
  				doc: "Automatically matches the value of `icon-rotation-alignment`."
  			}
  		},
  		"default": "auto",
  		doc: "Orientation of icon when map is pitched.",
  		requires: [
  			"icon-image"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.39.0",
  				android: "5.2.0",
  				ios: "3.7.0",
  				macos: "0.6.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"text-pitch-alignment": {
  		type: "enum",
  		values: {
  			map: {
  				doc: "The text is aligned to the plane of the map."
  			},
  			viewport: {
  				doc: "The text is aligned to the plane of the viewport."
  			},
  			auto: {
  				doc: "Automatically matches the value of `text-rotation-alignment`."
  			}
  		},
  		"default": "auto",
  		doc: "Orientation of text when map is pitched.",
  		requires: [
  			"text-field"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.21.0",
  				android: "4.2.0",
  				ios: "3.4.0",
  				macos: "0.2.1"
  			},
  			"`auto` value": {
  				js: "0.25.0",
  				android: "4.2.0",
  				ios: "3.4.0",
  				macos: "0.3.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"text-rotation-alignment": {
  		type: "enum",
  		values: {
  			map: {
  				doc: "When `symbol-placement` is set to `point`, aligns text east-west. When `symbol-placement` is set to `line` or `line-center`, aligns text x-axes with the line."
  			},
  			viewport: {
  				doc: "Produces glyphs whose x-axes are aligned with the x-axis of the viewport, regardless of the value of `symbol-placement`."
  			},
  			auto: {
  				doc: "When `symbol-placement` is set to `point`, this is equivalent to `viewport`. When `symbol-placement` is set to `line` or `line-center`, this is equivalent to `map`."
  			}
  		},
  		"default": "auto",
  		doc: "In combination with `symbol-placement`, determines the rotation behavior of the individual glyphs forming the text.",
  		requires: [
  			"text-field"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"`auto` value": {
  				js: "0.25.0",
  				android: "4.2.0",
  				ios: "3.4.0",
  				macos: "0.3.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"text-field": {
  		type: "formatted",
  		"default": "",
  		tokens: true,
  		doc: "Value to use for a text label. If a plain `string` is provided, it will be treated as a `formatted` with default/inherited formatting options.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.33.0",
  				android: "5.0.0",
  				ios: "3.5.0",
  				macos: "0.4.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom",
  				"feature"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"text-font": {
  		type: "array",
  		value: "string",
  		"default": [
  			"Open Sans Regular",
  			"Arial Unicode MS Regular"
  		],
  		doc: "Font stack to use for displaying text.",
  		requires: [
  			"text-field"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.43.0",
  				android: "6.0.0",
  				ios: "4.0.0",
  				macos: "0.7.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom",
  				"feature"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"text-size": {
  		type: "number",
  		"default": 16,
  		minimum: 0,
  		units: "pixels",
  		doc: "Font size.",
  		requires: [
  			"text-field"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.35.0",
  				android: "5.1.0",
  				ios: "3.6.0",
  				macos: "0.5.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"text-max-width": {
  		type: "number",
  		"default": 10,
  		minimum: 0,
  		units: "ems",
  		doc: "The maximum line width for text wrapping.",
  		requires: [
  			"text-field"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.40.0",
  				android: "5.2.0",
  				ios: "3.7.0",
  				macos: "0.6.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"text-line-height": {
  		type: "number",
  		"default": 1.2,
  		units: "ems",
  		doc: "Text leading value for multi-line text.",
  		requires: [
  			"text-field"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"text-letter-spacing": {
  		type: "number",
  		"default": 0,
  		units: "ems",
  		doc: "Text tracking amount.",
  		requires: [
  			"text-field"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.40.0",
  				android: "5.2.0",
  				ios: "3.7.0",
  				macos: "0.6.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"text-justify": {
  		type: "enum",
  		values: {
  			auto: {
  				doc: "The text is aligned towards the anchor position."
  			},
  			left: {
  				doc: "The text is aligned to the left."
  			},
  			center: {
  				doc: "The text is centered."
  			},
  			right: {
  				doc: "The text is aligned to the right."
  			}
  		},
  		"default": "center",
  		doc: "Text justification options.",
  		requires: [
  			"text-field"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.39.0",
  				android: "5.2.0",
  				ios: "3.7.0",
  				macos: "0.6.0"
  			},
  			auto: {
  				js: "0.54.0",
  				android: "7.4.0",
  				ios: "4.10.0",
  				macos: "0.14.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom",
  				"feature"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"text-radial-offset": {
  		type: "number",
  		units: "ems",
  		"default": 0,
  		doc: "Radial offset of text, in the direction of the symbol's anchor. Useful in combination with `text-variable-anchor`, which defaults to using the two-dimensional `text-offset` if present.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.54.0",
  				android: "7.4.0",
  				ios: "4.10.0",
  				macos: "0.14.0"
  			},
  			"data-driven styling": {
  				js: "0.54.0",
  				android: "7.4.0",
  				ios: "4.10.0",
  				macos: "0.14.0"
  			}
  		},
  		requires: [
  			"text-field"
  		],
  		"property-type": "data-driven",
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature"
  			]
  		}
  	},
  	"text-variable-anchor": {
  		type: "array",
  		value: "enum",
  		values: {
  			center: {
  				doc: "The center of the text is placed closest to the anchor."
  			},
  			left: {
  				doc: "The left side of the text is placed closest to the anchor."
  			},
  			right: {
  				doc: "The right side of the text is placed closest to the anchor."
  			},
  			top: {
  				doc: "The top of the text is placed closest to the anchor."
  			},
  			bottom: {
  				doc: "The bottom of the text is placed closest to the anchor."
  			},
  			"top-left": {
  				doc: "The top left corner of the text is placed closest to the anchor."
  			},
  			"top-right": {
  				doc: "The top right corner of the text is placed closest to the anchor."
  			},
  			"bottom-left": {
  				doc: "The bottom left corner of the text is placed closest to the anchor."
  			},
  			"bottom-right": {
  				doc: "The bottom right corner of the text is placed closest to the anchor."
  			}
  		},
  		requires: [
  			"text-field",
  			{
  				"symbol-placement": [
  					"point"
  				]
  			}
  		],
  		doc: "To increase the chance of placing high-priority labels on the map, you can provide an array of `text-anchor` locations: the renderer will attempt to place the label at each location, in order, before moving onto the next label. Use `text-justify: auto` to choose justification based on anchor position. To apply an offset, use the `text-radial-offset` or the two-dimensional `text-offset`.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.54.0",
  				android: "7.4.0",
  				ios: "4.10.0",
  				macos: "0.14.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"text-anchor": {
  		type: "enum",
  		values: {
  			center: {
  				doc: "The center of the text is placed closest to the anchor."
  			},
  			left: {
  				doc: "The left side of the text is placed closest to the anchor."
  			},
  			right: {
  				doc: "The right side of the text is placed closest to the anchor."
  			},
  			top: {
  				doc: "The top of the text is placed closest to the anchor."
  			},
  			bottom: {
  				doc: "The bottom of the text is placed closest to the anchor."
  			},
  			"top-left": {
  				doc: "The top left corner of the text is placed closest to the anchor."
  			},
  			"top-right": {
  				doc: "The top right corner of the text is placed closest to the anchor."
  			},
  			"bottom-left": {
  				doc: "The bottom left corner of the text is placed closest to the anchor."
  			},
  			"bottom-right": {
  				doc: "The bottom right corner of the text is placed closest to the anchor."
  			}
  		},
  		"default": "center",
  		doc: "Part of the text placed closest to the anchor.",
  		requires: [
  			"text-field",
  			{
  				"!": "text-variable-anchor"
  			}
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.39.0",
  				android: "5.2.0",
  				ios: "3.7.0",
  				macos: "0.6.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom",
  				"feature"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"text-max-angle": {
  		type: "number",
  		"default": 45,
  		units: "degrees",
  		doc: "Maximum angle change between adjacent characters.",
  		requires: [
  			"text-field",
  			{
  				"symbol-placement": [
  					"line",
  					"line-center"
  				]
  			}
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"text-writing-mode": {
  		type: "array",
  		value: "enum",
  		values: {
  			horizontal: {
  				doc: "If a text's language supports horizontal writing mode, symbols with point placement would be laid out horizontally."
  			},
  			vertical: {
  				doc: "If a text's language supports vertical writing mode, symbols with point placement would be laid out vertically."
  			}
  		},
  		doc: "The property allows control over a symbol's orientation. Note that the property values act as a hint, so that a symbol whose language doesnât support the provided orientation will be laid out in its natural orientation. Example: English point symbol will be rendered horizontally even if array value contains single 'vertical' enum value. The order of elements in an array define priority order for the placement of an orientation variant.",
  		requires: [
  			"text-field",
  			{
  				"symbol-placement": [
  					"point"
  				]
  			}
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "1.3.0",
  				android: "8.3.0",
  				ios: "5.3.0",
  				macos: "0.14.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"text-rotate": {
  		type: "number",
  		"default": 0,
  		period: 360,
  		units: "degrees",
  		doc: "Rotates the text clockwise.",
  		requires: [
  			"text-field"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.35.0",
  				android: "5.1.0",
  				ios: "3.6.0",
  				macos: "0.5.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"text-padding": {
  		type: "number",
  		"default": 2,
  		minimum: 0,
  		units: "pixels",
  		doc: "Size of the additional area around the text bounding box used for detecting symbol collisions.",
  		requires: [
  			"text-field"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"text-keep-upright": {
  		type: "boolean",
  		"default": true,
  		doc: "If true, the text may be flipped vertically to prevent it from being rendered upside-down.",
  		requires: [
  			"text-field",
  			{
  				"text-rotation-alignment": "map"
  			},
  			{
  				"symbol-placement": [
  					"line",
  					"line-center"
  				]
  			}
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"text-transform": {
  		type: "enum",
  		values: {
  			none: {
  				doc: "The text is not altered."
  			},
  			uppercase: {
  				doc: "Forces all letters to be displayed in uppercase."
  			},
  			lowercase: {
  				doc: "Forces all letters to be displayed in lowercase."
  			}
  		},
  		"default": "none",
  		doc: "Specifies how to capitalize text, similar to the CSS `text-transform` property.",
  		requires: [
  			"text-field"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.33.0",
  				android: "5.0.0",
  				ios: "3.5.0",
  				macos: "0.4.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom",
  				"feature"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"text-offset": {
  		type: "array",
  		doc: "Offset distance of text from its anchor. Positive values indicate right and down, while negative values indicate left and up. If used with text-variable-anchor, input values will be taken as absolute values. Offsets along the x- and y-axis will be applied automatically based on the anchor position.",
  		value: "number",
  		units: "ems",
  		length: 2,
  		"default": [
  			0,
  			0
  		],
  		requires: [
  			"text-field",
  			{
  				"!": "text-radial-offset"
  			}
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.35.0",
  				android: "5.1.0",
  				ios: "3.6.0",
  				macos: "0.5.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"text-allow-overlap": {
  		type: "boolean",
  		"default": false,
  		doc: "If true, the text will be visible even if it collides with other previously drawn symbols.",
  		requires: [
  			"text-field"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"text-ignore-placement": {
  		type: "boolean",
  		"default": false,
  		doc: "If true, other symbols can be visible even if they collide with the text.",
  		requires: [
  			"text-field"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"text-optional": {
  		type: "boolean",
  		"default": false,
  		doc: "If true, icons will display without their corresponding text when the text collides with other symbols and the icon does not.",
  		requires: [
  			"text-field",
  			"icon-image"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	visibility: {
  		type: "enum",
  		values: {
  			visible: {
  				doc: "The layer is shown."
  			},
  			none: {
  				doc: "The layer is not shown."
  			}
  		},
  		"default": "visible",
  		doc: "Whether this layer is displayed.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		"property-type": "constant"
  	}
  };
  var layout_raster = {
  	visibility: {
  		type: "enum",
  		values: {
  			visible: {
  				doc: "The layer is shown."
  			},
  			none: {
  				doc: "The layer is not shown."
  			}
  		},
  		"default": "visible",
  		doc: "Whether this layer is displayed.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		"property-type": "constant"
  	}
  };
  var layout_hillshade = {
  	visibility: {
  		type: "enum",
  		values: {
  			visible: {
  				doc: "The layer is shown."
  			},
  			none: {
  				doc: "The layer is not shown."
  			}
  		},
  		"default": "visible",
  		doc: "Whether this layer is displayed.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.43.0",
  				android: "6.0.0",
  				ios: "4.0.0",
  				macos: "0.7.0"
  			}
  		},
  		"property-type": "constant"
  	}
  };
  var filter = {
  	type: "array",
  	value: "*",
  	doc: "A filter selects specific features from a layer."
  };
  var filter_operator = {
  	type: "enum",
  	values: {
  		"==": {
  			doc: "`[\"==\", key, value]` equality: `feature[key] = value`"
  		},
  		"!=": {
  			doc: "`[\"!=\", key, value]` inequality: `feature[key] â  value`"
  		},
  		">": {
  			doc: "`[\">\", key, value]` greater than: `feature[key] > value`"
  		},
  		">=": {
  			doc: "`[\">=\", key, value]` greater than or equal: `feature[key] â¥ value`"
  		},
  		"<": {
  			doc: "`[\"<\", key, value]` less than: `feature[key] < value`"
  		},
  		"<=": {
  			doc: "`[\"<=\", key, value]` less than or equal: `feature[key] â¤ value`"
  		},
  		"in": {
  			doc: "`[\"in\", key, v0, ..., vn]` set inclusion: `feature[key] â {v0, ..., vn}`"
  		},
  		"!in": {
  			doc: "`[\"!in\", key, v0, ..., vn]` set exclusion: `feature[key] â {v0, ..., vn}`"
  		},
  		all: {
  			doc: "`[\"all\", f0, ..., fn]` logical `AND`: `f0 â§ ... â§ fn`"
  		},
  		any: {
  			doc: "`[\"any\", f0, ..., fn]` logical `OR`: `f0 â¨ ... â¨ fn`"
  		},
  		none: {
  			doc: "`[\"none\", f0, ..., fn]` logical `NOR`: `Â¬f0 â§ ... â§ Â¬fn`"
  		},
  		has: {
  			doc: "`[\"has\", key]` `feature[key]` exists"
  		},
  		"!has": {
  			doc: "`[\"!has\", key]` `feature[key]` does not exist"
  		}
  	},
  	doc: "The filter operator."
  };
  var geometry_type = {
  	type: "enum",
  	values: {
  		Point: {
  			doc: "Filter to point geometries."
  		},
  		LineString: {
  			doc: "Filter to line geometries."
  		},
  		Polygon: {
  			doc: "Filter to polygon geometries."
  		}
  	},
  	doc: "The geometry type for the filter to select."
  };
  var function_stop = {
  	type: "array",
  	minimum: 0,
  	maximum: 24,
  	value: [
  		"number",
  		"color"
  	],
  	length: 2,
  	doc: "Zoom level and value pair."
  };
  var expression = {
  	type: "array",
  	value: "*",
  	minimum: 1,
  	doc: "An expression defines a function that can be used for data-driven style properties or feature filters."
  };
  var expression_name = {
  	doc: "",
  	type: "enum",
  	values: {
  		"let": {
  			doc: "Binds expressions to named variables, which can then be referenced in the result expression using [\"var\", \"variable_name\"].",
  			group: "Variable binding",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		"var": {
  			doc: "References variable bound using \"let\".",
  			group: "Variable binding",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		literal: {
  			doc: "Provides a literal array or object value.",
  			group: "Types",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		array: {
  			doc: "Asserts that the input is an array (optionally with a specific item type and length).  If, when the input expression is evaluated, it is not of the asserted type, then this assertion will cause the whole expression to be aborted.",
  			group: "Types",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		at: {
  			doc: "Retrieves an item from an array.",
  			group: "Lookup",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		"in": {
  			doc: "Determines whether an item exists in an array or a substring exists in a string.",
  			group: "Lookup",
  			"sdk-support": {
  				"basic functionality": {
  					js: "1.6.0"
  				}
  			}
  		},
  		"case": {
  			doc: "Selects the first output whose corresponding test condition evaluates to true, or the fallback value otherwise.",
  			group: "Decision",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		match: {
  			doc: "Selects the output whose label value matches the input value, or the fallback value if no match is found. The input can be any expression (e.g. `[\"get\", \"building_type\"]`). Each label must be either:\n * a single literal value; or\n * an array of literal values, whose values must be all strings or all numbers (e.g. `[100, 101]` or `[\"c\", \"b\"]`). The input matches if any of the values in the array matches, similar to the `\"in\"` operator.\n\nEach label must be unique. If the input type does not match the type of the labels, the result will be the fallback value.",
  			group: "Decision",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		coalesce: {
  			doc: "Evaluates each expression in turn until the first non-null value is obtained, and returns that value.",
  			group: "Decision",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		step: {
  			doc: "Produces discrete, stepped results by evaluating a piecewise-constant function defined by pairs of input and output values (\"stops\"). The `input` may be any numeric expression (e.g., `[\"get\", \"population\"]`). Stop inputs must be numeric literals in strictly ascending order. Returns the output value of the stop just less than the input, or the first output if the input is less than the first stop.",
  			group: "Ramps, scales, curves",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.42.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		interpolate: {
  			doc: "Produces continuous, smooth results by interpolating between pairs of input and output values (\"stops\"). The `input` may be any numeric expression (e.g., `[\"get\", \"population\"]`). Stop inputs must be numeric literals in strictly ascending order. The output type must be `number`, `array<number>`, or `color`.\n\nInterpolation types:\n- `[\"linear\"]`: interpolates linearly between the pair of stops just less than and just greater than the input.\n- `[\"exponential\", base]`: interpolates exponentially between the stops just less than and just greater than the input. `base` controls the rate at which the output increases: higher values make the output increase more towards the high end of the range. With values close to 1 the output increases linearly.\n- `[\"cubic-bezier\", x1, y1, x2, y2]`: interpolates using the cubic bezier curve defined by the given control points.",
  			group: "Ramps, scales, curves",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.42.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		"interpolate-hcl": {
  			doc: "Produces continuous, smooth results by interpolating between pairs of input and output values (\"stops\"). Works like `interpolate`, but the output type must be `color`, and the interpolation is performed in the Hue-Chroma-Luminance color space.",
  			group: "Ramps, scales, curves",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.49.0"
  				}
  			}
  		},
  		"interpolate-lab": {
  			doc: "Produces continuous, smooth results by interpolating between pairs of input and output values (\"stops\"). Works like `interpolate`, but the output type must be `color`, and the interpolation is performed in the CIELAB color space.",
  			group: "Ramps, scales, curves",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.49.0"
  				}
  			}
  		},
  		ln2: {
  			doc: "Returns mathematical constant ln(2).",
  			group: "Math",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		pi: {
  			doc: "Returns the mathematical constant pi.",
  			group: "Math",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		e: {
  			doc: "Returns the mathematical constant e.",
  			group: "Math",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		"typeof": {
  			doc: "Returns a string describing the type of the given value.",
  			group: "Types",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		string: {
  			doc: "Asserts that the input value is a string. If multiple values are provided, each one is evaluated in order until a string is obtained. If none of the inputs are strings, the expression is an error.",
  			group: "Types",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		number: {
  			doc: "Asserts that the input value is a number. If multiple values are provided, each one is evaluated in order until a number is obtained. If none of the inputs are numbers, the expression is an error.",
  			group: "Types",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		boolean: {
  			doc: "Asserts that the input value is a boolean. If multiple values are provided, each one is evaluated in order until a boolean is obtained. If none of the inputs are booleans, the expression is an error.",
  			group: "Types",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		object: {
  			doc: "Asserts that the input value is an object. If multiple values are provided, each one is evaluated in order until an object is obtained. If none of the inputs are objects, the expression is an error.",
  			group: "Types",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		collator: {
  			doc: "Returns a `collator` for use in locale-dependent comparison operations. The `case-sensitive` and `diacritic-sensitive` options default to `false`. The `locale` argument specifies the IETF language tag of the locale to use. If none is provided, the default locale is used. If the requested locale is not available, the `collator` will use a system-defined fallback locale. Use `resolved-locale` to test the results of locale fallback behavior.",
  			group: "Types",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.45.0",
  					android: "6.5.0",
  					ios: "4.2.0",
  					macos: "0.9.0"
  				}
  			}
  		},
  		format: {
  			doc: "Returns `formatted` text containing annotations for use in mixed-format `text-field` entries. For a `text-field` entries of a string type, following option object's properties are supported: If set, the `text-font` value overrides the font specified by the root layout properties. If set, the `font-scale` value specifies a scaling factor relative to the `text-size` specified in the root layout properties. If set, the `text-color` value overrides the color specified by the root paint properties for this layer.",
  			group: "Types",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.48.0",
  					android: "6.7.0",
  					ios: "4.6.0",
  					macos: "0.12.0"
  				},
  				"text-font": {
  					js: "0.48.0",
  					android: "6.7.0",
  					ios: "4.6.0",
  					macos: "0.12.0"
  				},
  				"font-scale": {
  					js: "0.48.0",
  					android: "6.7.0",
  					ios: "4.6.0",
  					macos: "0.12.0"
  				},
  				"text-color": {
  					js: "1.3.0",
  					android: "7.3.0",
  					ios: "4.10.0",
  					macos: "0.14.0"
  				},
  				image: {
  					js: "1.6.0"
  				}
  			}
  		},
  		image: {
  			doc: "Returns an `image` type for use in `icon-image`, `*-pattern` entries and as a section in the `format` expression. If set, the `image` argument will check that the requested image exists in the style and will return either the resolved image name or `null`, depending on whether or not the image is currently in the style. This validation process is synchronous and requires the image to have been added to the style before requesting it in the `image` argument.",
  			group: "Types",
  			"sdk-support": {
  				"basic functionality": {
  					js: "1.4.0",
  					android: "8.6.0",
  					ios: "5.6.0"
  				}
  			}
  		},
  		"number-format": {
  			doc: "Converts the input number into a string representation using the providing formatting rules. If set, the `locale` argument specifies the locale to use, as a BCP 47 language tag. If set, the `currency` argument specifies an ISO 4217 code to use for currency-style formatting. If set, the `min-fraction-digits` and `max-fraction-digits` arguments specify the minimum and maximum number of fractional digits to include.",
  			group: "Types",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.54.0"
  				}
  			}
  		},
  		"to-string": {
  			doc: "Converts the input value to a string. If the input is `null`, the result is `\"\"`. If the input is a boolean, the result is `\"true\"` or `\"false\"`. If the input is a number, it is converted to a string as specified by the [\"NumberToString\" algorithm](https://tc39.github.io/ecma262/#sec-tostring-applied-to-the-number-type) of the ECMAScript Language Specification. If the input is a color, it is converted to a string of the form `\"rgba(r,g,b,a)\"`, where `r`, `g`, and `b` are numerals ranging from 0 to 255, and `a` ranges from 0 to 1. Otherwise, the input is converted to a string in the format specified by the [`JSON.stringify`](https://tc39.github.io/ecma262/#sec-json.stringify) function of the ECMAScript Language Specification.",
  			group: "Types",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		"to-number": {
  			doc: "Converts the input value to a number, if possible. If the input is `null` or `false`, the result is 0. If the input is `true`, the result is 1. If the input is a string, it is converted to a number as specified by the [\"ToNumber Applied to the String Type\" algorithm](https://tc39.github.io/ecma262/#sec-tonumber-applied-to-the-string-type) of the ECMAScript Language Specification. If multiple values are provided, each one is evaluated in order until the first successful conversion is obtained. If none of the inputs can be converted, the expression is an error.",
  			group: "Types",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		"to-boolean": {
  			doc: "Converts the input value to a boolean. The result is `false` when then input is an empty string, 0, `false`, `null`, or `NaN`; otherwise it is `true`.",
  			group: "Types",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		"to-rgba": {
  			doc: "Returns a four-element array containing the input color's red, green, blue, and alpha components, in that order.",
  			group: "Color",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		"to-color": {
  			doc: "Converts the input value to a color. If multiple values are provided, each one is evaluated in order until the first successful conversion is obtained. If none of the inputs can be converted, the expression is an error.",
  			group: "Types",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		rgb: {
  			doc: "Creates a color value from red, green, and blue components, which must range between 0 and 255, and an alpha component of 1. If any component is out of range, the expression is an error.",
  			group: "Color",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		rgba: {
  			doc: "Creates a color value from red, green, blue components, which must range between 0 and 255, and an alpha component which must range between 0 and 1. If any component is out of range, the expression is an error.",
  			group: "Color",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		get: {
  			doc: "Retrieves a property value from the current feature's properties, or from another object if a second argument is provided. Returns null if the requested property is missing.",
  			group: "Lookup",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		has: {
  			doc: "Tests for the presence of an property value in the current feature's properties, or from another object if a second argument is provided.",
  			group: "Lookup",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		length: {
  			doc: "Gets the length of an array or string.",
  			group: "Lookup",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		properties: {
  			doc: "Gets the feature properties object.  Note that in some cases, it may be more efficient to use [\"get\", \"property_name\"] directly.",
  			group: "Feature data",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		"feature-state": {
  			doc: "Retrieves a property value from the current feature's state. Returns null if the requested property is not present on the feature's state. A feature's state is not part of the GeoJSON or vector tile data, and must be set programmatically on each feature. Features are identified by their `id` attribute, which must be an integer or a string that can be cast to an integer. Note that [\"feature-state\"] can only be used with paint properties that support data-driven styling.",
  			group: "Feature data",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.46.0"
  				}
  			}
  		},
  		"geometry-type": {
  			doc: "Gets the feature's geometry type: Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon.",
  			group: "Feature data",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		id: {
  			doc: "Gets the feature's id, if it has one.",
  			group: "Feature data",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		zoom: {
  			doc: "Gets the current zoom level.  Note that in style layout and paint properties, [\"zoom\"] may only appear as the input to a top-level \"step\" or \"interpolate\" expression.",
  			group: "Zoom",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		"heatmap-density": {
  			doc: "Gets the kernel density estimation of a pixel in a heatmap layer, which is a relative measure of how many data points are crowded around a particular pixel. Can only be used in the `heatmap-color` property.",
  			group: "Heatmap",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		"line-progress": {
  			doc: "Gets the progress along a gradient line. Can only be used in the `line-gradient` property.",
  			group: "Feature data",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.45.0",
  					android: "6.5.0",
  					ios: "4.6.0",
  					macos: "0.12.0"
  				}
  			}
  		},
  		accumulated: {
  			doc: "Gets the value of a cluster property accumulated so far. Can only be used in the `clusterProperties` option of a clustered GeoJSON source.",
  			group: "Feature data",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.53.0"
  				}
  			}
  		},
  		"+": {
  			doc: "Returns the sum of the inputs.",
  			group: "Math",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		"*": {
  			doc: "Returns the product of the inputs.",
  			group: "Math",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		"-": {
  			doc: "For two inputs, returns the result of subtracting the second input from the first. For a single input, returns the result of subtracting it from 0.",
  			group: "Math",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		"/": {
  			doc: "Returns the result of floating point division of the first input by the second.",
  			group: "Math",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		"%": {
  			doc: "Returns the remainder after integer division of the first input by the second.",
  			group: "Math",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		"^": {
  			doc: "Returns the result of raising the first input to the power specified by the second.",
  			group: "Math",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		sqrt: {
  			doc: "Returns the square root of the input.",
  			group: "Math",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.42.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		log10: {
  			doc: "Returns the base-ten logarithm of the input.",
  			group: "Math",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		ln: {
  			doc: "Returns the natural logarithm of the input.",
  			group: "Math",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		log2: {
  			doc: "Returns the base-two logarithm of the input.",
  			group: "Math",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		sin: {
  			doc: "Returns the sine of the input.",
  			group: "Math",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		cos: {
  			doc: "Returns the cosine of the input.",
  			group: "Math",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		tan: {
  			doc: "Returns the tangent of the input.",
  			group: "Math",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		asin: {
  			doc: "Returns the arcsine of the input.",
  			group: "Math",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		acos: {
  			doc: "Returns the arccosine of the input.",
  			group: "Math",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		atan: {
  			doc: "Returns the arctangent of the input.",
  			group: "Math",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		min: {
  			doc: "Returns the minimum value of the inputs.",
  			group: "Math",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		max: {
  			doc: "Returns the maximum value of the inputs.",
  			group: "Math",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		round: {
  			doc: "Rounds the input to the nearest integer. Halfway values are rounded away from zero. For example, `[\"round\", -1.5]` evaluates to -2.",
  			group: "Math",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.45.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		abs: {
  			doc: "Returns the absolute value of the input.",
  			group: "Math",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.45.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		ceil: {
  			doc: "Returns the smallest integer that is greater than or equal to the input.",
  			group: "Math",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.45.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		floor: {
  			doc: "Returns the largest integer that is less than or equal to the input.",
  			group: "Math",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.45.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		"==": {
  			doc: "Returns `true` if the input values are equal, `false` otherwise. The comparison is strictly typed: values of different runtime types are always considered unequal. Cases where the types are known to be different at parse time are considered invalid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",
  			group: "Decision",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				},
  				collator: {
  					js: "0.45.0",
  					android: "6.5.0",
  					ios: "4.2.0",
  					macos: "0.9.0"
  				}
  			}
  		},
  		"!=": {
  			doc: "Returns `true` if the input values are not equal, `false` otherwise. The comparison is strictly typed: values of different runtime types are always considered unequal. Cases where the types are known to be different at parse time are considered invalid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",
  			group: "Decision",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				},
  				collator: {
  					js: "0.45.0",
  					android: "6.5.0",
  					ios: "4.2.0",
  					macos: "0.9.0"
  				}
  			}
  		},
  		">": {
  			doc: "Returns `true` if the first input is strictly greater than the second, `false` otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",
  			group: "Decision",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				},
  				collator: {
  					js: "0.45.0",
  					android: "6.5.0",
  					ios: "4.2.0",
  					macos: "0.9.0"
  				}
  			}
  		},
  		"<": {
  			doc: "Returns `true` if the first input is strictly less than the second, `false` otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",
  			group: "Decision",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				},
  				collator: {
  					js: "0.45.0",
  					android: "6.5.0",
  					ios: "4.2.0",
  					macos: "0.9.0"
  				}
  			}
  		},
  		">=": {
  			doc: "Returns `true` if the first input is greater than or equal to the second, `false` otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",
  			group: "Decision",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				},
  				collator: {
  					js: "0.45.0",
  					android: "6.5.0",
  					ios: "4.2.0",
  					macos: "0.9.0"
  				}
  			}
  		},
  		"<=": {
  			doc: "Returns `true` if the first input is less than or equal to the second, `false` otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",
  			group: "Decision",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				},
  				collator: {
  					js: "0.45.0",
  					android: "6.5.0",
  					ios: "4.2.0",
  					macos: "0.9.0"
  				}
  			}
  		},
  		all: {
  			doc: "Returns `true` if all the inputs are `true`, `false` otherwise. The inputs are evaluated in order, and evaluation is short-circuiting: once an input expression evaluates to `false`, the result is `false` and no further input expressions are evaluated.",
  			group: "Decision",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		any: {
  			doc: "Returns `true` if any of the inputs are `true`, `false` otherwise. The inputs are evaluated in order, and evaluation is short-circuiting: once an input expression evaluates to `true`, the result is `true` and no further input expressions are evaluated.",
  			group: "Decision",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		"!": {
  			doc: "Logical negation. Returns `true` if the input is `false`, and `false` if the input is `true`.",
  			group: "Decision",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		within: {
  			doc: "Returns `true` if the feature being evaluated is inside the pre-defined geometry boundary, `false` otherwise. The expression has one argument which must be a valid GeoJSON Polygon/Multi-Polygon object. The expression only evaluates on `Point` or `LineString` feature. For `Point` feature, The expression will return false if any point of the feature is on the boundary or outside the boundary. For `LineString` feature, the expression will return false if the line is fully outside the boundary, or the line is partially intersecting the boundary, which means either part of the line is outside of the boundary, or end point of the line lies on the boundary.",
  			group: "Decision",
  			"sdk-support": {
  				"basic functionality": {
  					js: "1.9.0"
  				}
  			}
  		},
  		"is-supported-script": {
  			doc: "Returns `true` if the input string is expected to render legibly. Returns `false` if the input string contains sections that cannot be rendered without potential loss of meaning (e.g. Indic scripts that require complex text shaping, or right-to-left scripts if the the `mapbox-gl-rtl-text` plugin is not in use in Mapbox GL JS).",
  			group: "String",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.45.0",
  					android: "6.6.0"
  				}
  			}
  		},
  		upcase: {
  			doc: "Returns the input string converted to uppercase. Follows the Unicode Default Case Conversion algorithm and the locale-insensitive case mappings in the Unicode Character Database.",
  			group: "String",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		downcase: {
  			doc: "Returns the input string converted to lowercase. Follows the Unicode Default Case Conversion algorithm and the locale-insensitive case mappings in the Unicode Character Database.",
  			group: "String",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		concat: {
  			doc: "Returns a `string` consisting of the concatenation of the inputs. Each input is converted to a string as if by `to-string`.",
  			group: "String",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.41.0",
  					android: "6.0.0",
  					ios: "4.0.0",
  					macos: "0.7.0"
  				}
  			}
  		},
  		"resolved-locale": {
  			doc: "Returns the IETF language tag of the locale being used by the provided `collator`. This can be used to determine the default system locale, or to determine if a requested locale was successfully loaded.",
  			group: "String",
  			"sdk-support": {
  				"basic functionality": {
  					js: "0.45.0",
  					android: "6.5.0",
  					ios: "4.2.0",
  					macos: "0.9.0"
  				}
  			}
  		}
  	}
  };
  var light = {
  	anchor: {
  		type: "enum",
  		"default": "viewport",
  		values: {
  			map: {
  				doc: "The position of the light source is aligned to the rotation of the map."
  			},
  			viewport: {
  				doc: "The position of the light source is aligned to the rotation of the viewport."
  			}
  		},
  		"property-type": "data-constant",
  		transition: false,
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom"
  			]
  		},
  		doc: "Whether extruded geometries are lit relative to the map or viewport.",
  		example: "map",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.27.0",
  				android: "5.1.0",
  				ios: "3.6.0",
  				macos: "0.5.0"
  			}
  		}
  	},
  	position: {
  		type: "array",
  		"default": [
  			1.15,
  			210,
  			30
  		],
  		length: 3,
  		value: "number",
  		"property-type": "data-constant",
  		transition: true,
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom"
  			]
  		},
  		doc: "Position of the light source relative to lit (extruded) geometries, in [r radial coordinate, a azimuthal angle, p polar angle] where r indicates the distance from the center of the base of an object to its light, a indicates the position of the light relative to 0Â° (0Â° when `light.anchor` is set to `viewport` corresponds to the top of the viewport, or 0Â° when `light.anchor` is set to `map` corresponds to due north, and degrees proceed clockwise), and p indicates the height of the light (from 0Â°, directly above, to 180Â°, directly below).",
  		example: [
  			1.5,
  			90,
  			80
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.27.0",
  				android: "5.1.0",
  				ios: "3.6.0",
  				macos: "0.5.0"
  			}
  		}
  	},
  	color: {
  		type: "color",
  		"property-type": "data-constant",
  		"default": "#ffffff",
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom"
  			]
  		},
  		transition: true,
  		doc: "Color tint for lighting extruded geometries.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.27.0",
  				android: "5.1.0",
  				ios: "3.6.0",
  				macos: "0.5.0"
  			}
  		}
  	},
  	intensity: {
  		type: "number",
  		"property-type": "data-constant",
  		"default": 0.5,
  		minimum: 0,
  		maximum: 1,
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom"
  			]
  		},
  		transition: true,
  		doc: "Intensity of lighting (on a scale from 0 to 1). Higher numbers will present as more extreme contrast.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.27.0",
  				android: "5.1.0",
  				ios: "3.6.0",
  				macos: "0.5.0"
  			}
  		}
  	}
  };
  var paint = [
  	"paint_fill",
  	"paint_line",
  	"paint_circle",
  	"paint_heatmap",
  	"paint_fill-extrusion",
  	"paint_symbol",
  	"paint_raster",
  	"paint_hillshade",
  	"paint_background"
  ];
  var paint_fill = {
  	"fill-antialias": {
  		type: "boolean",
  		"default": true,
  		doc: "Whether or not the fill should be antialiased.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"fill-opacity": {
  		type: "number",
  		"default": 1,
  		minimum: 0,
  		maximum: 1,
  		doc: "The opacity of the entire fill layer. In contrast to the `fill-color`, this value will also affect the 1px stroke around the fill, if the stroke is used.",
  		transition: true,
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.21.0",
  				android: "5.0.0",
  				ios: "3.5.0",
  				macos: "0.4.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature",
  				"feature-state"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"fill-color": {
  		type: "color",
  		"default": "#000000",
  		doc: "The color of the filled part of this layer. This color can be specified as `rgba` with an alpha component and the color's opacity will not affect the opacity of the 1px stroke, if it is used.",
  		transition: true,
  		requires: [
  			{
  				"!": "fill-pattern"
  			}
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.19.0",
  				android: "5.0.0",
  				ios: "3.5.0",
  				macos: "0.4.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature",
  				"feature-state"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"fill-outline-color": {
  		type: "color",
  		doc: "The outline color of the fill. Matches the value of `fill-color` if unspecified.",
  		transition: true,
  		requires: [
  			{
  				"!": "fill-pattern"
  			},
  			{
  				"fill-antialias": true
  			}
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.19.0",
  				android: "5.0.0",
  				ios: "3.5.0",
  				macos: "0.4.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature",
  				"feature-state"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"fill-translate": {
  		type: "array",
  		value: "number",
  		length: 2,
  		"default": [
  			0,
  			0
  		],
  		transition: true,
  		units: "pixels",
  		doc: "The geometry's offset. Values are [x, y] where negatives indicate left and up, respectively.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"fill-translate-anchor": {
  		type: "enum",
  		values: {
  			map: {
  				doc: "The fill is translated relative to the map."
  			},
  			viewport: {
  				doc: "The fill is translated relative to the viewport."
  			}
  		},
  		doc: "Controls the frame of reference for `fill-translate`.",
  		"default": "map",
  		requires: [
  			"fill-translate"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"fill-pattern": {
  		type: "resolvedImage",
  		transition: true,
  		doc: "Name of image in sprite to use for drawing image fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.49.0",
  				android: "6.5.0",
  				macos: "0.11.0",
  				ios: "4.4.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom",
  				"feature"
  			]
  		},
  		"property-type": "cross-faded-data-driven"
  	}
  };
  var paint_line = {
  	"line-opacity": {
  		type: "number",
  		doc: "The opacity at which the line will be drawn.",
  		"default": 1,
  		minimum: 0,
  		maximum: 1,
  		transition: true,
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.29.0",
  				android: "5.0.0",
  				ios: "3.5.0",
  				macos: "0.4.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature",
  				"feature-state"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"line-color": {
  		type: "color",
  		doc: "The color with which the line will be drawn.",
  		"default": "#000000",
  		transition: true,
  		requires: [
  			{
  				"!": "line-pattern"
  			}
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.23.0",
  				android: "5.0.0",
  				ios: "3.5.0",
  				macos: "0.4.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature",
  				"feature-state"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"line-translate": {
  		type: "array",
  		value: "number",
  		length: 2,
  		"default": [
  			0,
  			0
  		],
  		transition: true,
  		units: "pixels",
  		doc: "The geometry's offset. Values are [x, y] where negatives indicate left and up, respectively.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"line-translate-anchor": {
  		type: "enum",
  		values: {
  			map: {
  				doc: "The line is translated relative to the map."
  			},
  			viewport: {
  				doc: "The line is translated relative to the viewport."
  			}
  		},
  		doc: "Controls the frame of reference for `line-translate`.",
  		"default": "map",
  		requires: [
  			"line-translate"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"line-width": {
  		type: "number",
  		"default": 1,
  		minimum: 0,
  		transition: true,
  		units: "pixels",
  		doc: "Stroke thickness.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.39.0",
  				android: "5.2.0",
  				ios: "3.7.0",
  				macos: "0.6.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature",
  				"feature-state"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"line-gap-width": {
  		type: "number",
  		"default": 0,
  		minimum: 0,
  		doc: "Draws a line casing outside of a line's actual path. Value indicates the width of the inner gap.",
  		transition: true,
  		units: "pixels",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.29.0",
  				android: "5.0.0",
  				ios: "3.5.0",
  				macos: "0.4.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature",
  				"feature-state"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"line-offset": {
  		type: "number",
  		"default": 0,
  		doc: "The line's offset. For linear features, a positive value offsets the line to the right, relative to the direction of the line, and a negative value to the left. For polygon features, a positive value results in an inset, and a negative value results in an outset.",
  		transition: true,
  		units: "pixels",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.12.1",
  				android: "3.0.0",
  				ios: "3.1.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.29.0",
  				android: "5.0.0",
  				ios: "3.5.0",
  				macos: "0.4.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature",
  				"feature-state"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"line-blur": {
  		type: "number",
  		"default": 0,
  		minimum: 0,
  		transition: true,
  		units: "pixels",
  		doc: "Blur applied to the line, in pixels.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.29.0",
  				android: "5.0.0",
  				ios: "3.5.0",
  				macos: "0.4.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature",
  				"feature-state"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"line-dasharray": {
  		type: "array",
  		value: "number",
  		doc: "Specifies the lengths of the alternating dashes and gaps that form the dash pattern. The lengths are later scaled by the line width. To convert a dash length to pixels, multiply the length by the current line width. Note that GeoJSON sources with `lineMetrics: true` specified won't render dashed lines to the expected scale. Also note that zoom-dependent expressions will be evaluated only at integer zoom levels.",
  		minimum: 0,
  		transition: true,
  		units: "line widths",
  		requires: [
  			{
  				"!": "line-pattern"
  			}
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "cross-faded"
  	},
  	"line-pattern": {
  		type: "resolvedImage",
  		transition: true,
  		doc: "Name of image in sprite to use for drawing image lines. For seamless patterns, image width must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.49.0",
  				android: "6.5.0",
  				macos: "0.11.0",
  				ios: "4.4.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom",
  				"feature"
  			]
  		},
  		"property-type": "cross-faded-data-driven"
  	},
  	"line-gradient": {
  		type: "color",
  		doc: "Defines a gradient with which to color a line feature. Can only be used with GeoJSON sources that specify `\"lineMetrics\": true`.",
  		transition: false,
  		requires: [
  			{
  				"!": "line-dasharray"
  			},
  			{
  				"!": "line-pattern"
  			},
  			{
  				source: "geojson",
  				has: {
  					lineMetrics: true
  				}
  			}
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.45.0",
  				android: "6.5.0",
  				ios: "4.4.0",
  				macos: "0.11.0"
  			},
  			"data-driven styling": {
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"line-progress"
  			]
  		},
  		"property-type": "color-ramp"
  	}
  };
  var paint_circle = {
  	"circle-radius": {
  		type: "number",
  		"default": 5,
  		minimum: 0,
  		transition: true,
  		units: "pixels",
  		doc: "Circle radius.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.18.0",
  				android: "5.0.0",
  				ios: "3.5.0",
  				macos: "0.4.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature",
  				"feature-state"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"circle-color": {
  		type: "color",
  		"default": "#000000",
  		doc: "The fill color of the circle.",
  		transition: true,
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.18.0",
  				android: "5.0.0",
  				ios: "3.5.0",
  				macos: "0.4.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature",
  				"feature-state"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"circle-blur": {
  		type: "number",
  		"default": 0,
  		doc: "Amount to blur the circle. 1 blurs the circle such that only the centerpoint is full opacity.",
  		transition: true,
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.20.0",
  				android: "5.0.0",
  				ios: "3.5.0",
  				macos: "0.4.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature",
  				"feature-state"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"circle-opacity": {
  		type: "number",
  		doc: "The opacity at which the circle will be drawn.",
  		"default": 1,
  		minimum: 0,
  		maximum: 1,
  		transition: true,
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.20.0",
  				android: "5.0.0",
  				ios: "3.5.0",
  				macos: "0.4.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature",
  				"feature-state"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"circle-translate": {
  		type: "array",
  		value: "number",
  		length: 2,
  		"default": [
  			0,
  			0
  		],
  		transition: true,
  		units: "pixels",
  		doc: "The geometry's offset. Values are [x, y] where negatives indicate left and up, respectively.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"circle-translate-anchor": {
  		type: "enum",
  		values: {
  			map: {
  				doc: "The circle is translated relative to the map."
  			},
  			viewport: {
  				doc: "The circle is translated relative to the viewport."
  			}
  		},
  		doc: "Controls the frame of reference for `circle-translate`.",
  		"default": "map",
  		requires: [
  			"circle-translate"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"circle-pitch-scale": {
  		type: "enum",
  		values: {
  			map: {
  				doc: "Circles are scaled according to their apparent distance to the camera."
  			},
  			viewport: {
  				doc: "Circles are not scaled."
  			}
  		},
  		"default": "map",
  		doc: "Controls the scaling behavior of the circle when the map is pitched.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.21.0",
  				android: "4.2.0",
  				ios: "3.4.0",
  				macos: "0.2.1"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"circle-pitch-alignment": {
  		type: "enum",
  		values: {
  			map: {
  				doc: "The circle is aligned to the plane of the map."
  			},
  			viewport: {
  				doc: "The circle is aligned to the plane of the viewport."
  			}
  		},
  		"default": "viewport",
  		doc: "Orientation of circle when map is pitched.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.39.0",
  				android: "5.2.0",
  				ios: "3.7.0",
  				macos: "0.6.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"circle-stroke-width": {
  		type: "number",
  		"default": 0,
  		minimum: 0,
  		transition: true,
  		units: "pixels",
  		doc: "The width of the circle's stroke. Strokes are placed outside of the `circle-radius`.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.29.0",
  				android: "5.0.0",
  				ios: "3.5.0",
  				macos: "0.4.0"
  			},
  			"data-driven styling": {
  				js: "0.29.0",
  				android: "5.0.0",
  				ios: "3.5.0",
  				macos: "0.4.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature",
  				"feature-state"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"circle-stroke-color": {
  		type: "color",
  		"default": "#000000",
  		doc: "The stroke color of the circle.",
  		transition: true,
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.29.0",
  				android: "5.0.0",
  				ios: "3.5.0",
  				macos: "0.4.0"
  			},
  			"data-driven styling": {
  				js: "0.29.0",
  				android: "5.0.0",
  				ios: "3.5.0",
  				macos: "0.4.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature",
  				"feature-state"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"circle-stroke-opacity": {
  		type: "number",
  		doc: "The opacity of the circle's stroke.",
  		"default": 1,
  		minimum: 0,
  		maximum: 1,
  		transition: true,
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.29.0",
  				android: "5.0.0",
  				ios: "3.5.0",
  				macos: "0.4.0"
  			},
  			"data-driven styling": {
  				js: "0.29.0",
  				android: "5.0.0",
  				ios: "3.5.0",
  				macos: "0.4.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature",
  				"feature-state"
  			]
  		},
  		"property-type": "data-driven"
  	}
  };
  var paint_heatmap = {
  	"heatmap-radius": {
  		type: "number",
  		"default": 30,
  		minimum: 1,
  		transition: true,
  		units: "pixels",
  		doc: "Radius of influence of one heatmap point in pixels. Increasing the value makes the heatmap smoother, but less detailed.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.41.0",
  				android: "6.0.0",
  				ios: "4.0.0",
  				macos: "0.7.0"
  			},
  			"data-driven styling": {
  				js: "0.43.0",
  				android: "6.0.0",
  				ios: "4.0.0",
  				macos: "0.7.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature",
  				"feature-state"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"heatmap-weight": {
  		type: "number",
  		"default": 1,
  		minimum: 0,
  		transition: false,
  		doc: "A measure of how much an individual point contributes to the heatmap. A value of 10 would be equivalent to having 10 points of weight 1 in the same spot. Especially useful when combined with clustering.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.41.0",
  				android: "6.0.0",
  				ios: "4.0.0",
  				macos: "0.7.0"
  			},
  			"data-driven styling": {
  				js: "0.41.0",
  				android: "6.0.0",
  				ios: "4.0.0",
  				macos: "0.7.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature",
  				"feature-state"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"heatmap-intensity": {
  		type: "number",
  		"default": 1,
  		minimum: 0,
  		transition: true,
  		doc: "Similar to `heatmap-weight` but controls the intensity of the heatmap globally. Primarily used for adjusting the heatmap based on zoom level.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.41.0",
  				android: "6.0.0",
  				ios: "4.0.0",
  				macos: "0.7.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"heatmap-color": {
  		type: "color",
  		"default": [
  			"interpolate",
  			[
  				"linear"
  			],
  			[
  				"heatmap-density"
  			],
  			0,
  			"rgba(0, 0, 255, 0)",
  			0.1,
  			"royalblue",
  			0.3,
  			"cyan",
  			0.5,
  			"lime",
  			0.7,
  			"yellow",
  			1,
  			"red"
  		],
  		doc: "Defines the color of each pixel based on its density value in a heatmap.  Should be an expression that uses `[\"heatmap-density\"]` as input.",
  		transition: false,
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.41.0",
  				android: "6.0.0",
  				ios: "4.0.0",
  				macos: "0.7.0"
  			},
  			"data-driven styling": {
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"heatmap-density"
  			]
  		},
  		"property-type": "color-ramp"
  	},
  	"heatmap-opacity": {
  		type: "number",
  		doc: "The global opacity at which the heatmap layer will be drawn.",
  		"default": 1,
  		minimum: 0,
  		maximum: 1,
  		transition: true,
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.41.0",
  				android: "6.0.0",
  				ios: "4.0.0",
  				macos: "0.7.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	}
  };
  var paint_symbol = {
  	"icon-opacity": {
  		doc: "The opacity at which the icon will be drawn.",
  		type: "number",
  		"default": 1,
  		minimum: 0,
  		maximum: 1,
  		transition: true,
  		requires: [
  			"icon-image"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.33.0",
  				android: "5.0.0",
  				ios: "3.5.0",
  				macos: "0.4.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature",
  				"feature-state"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"icon-color": {
  		type: "color",
  		"default": "#000000",
  		transition: true,
  		doc: "The color of the icon. This can only be used with sdf icons.",
  		requires: [
  			"icon-image"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.33.0",
  				android: "5.0.0",
  				ios: "3.5.0",
  				macos: "0.4.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature",
  				"feature-state"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"icon-halo-color": {
  		type: "color",
  		"default": "rgba(0, 0, 0, 0)",
  		transition: true,
  		doc: "The color of the icon's halo. Icon halos can only be used with SDF icons.",
  		requires: [
  			"icon-image"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.33.0",
  				android: "5.0.0",
  				ios: "3.5.0",
  				macos: "0.4.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature",
  				"feature-state"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"icon-halo-width": {
  		type: "number",
  		"default": 0,
  		minimum: 0,
  		transition: true,
  		units: "pixels",
  		doc: "Distance of halo to the icon outline.",
  		requires: [
  			"icon-image"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.33.0",
  				android: "5.0.0",
  				ios: "3.5.0",
  				macos: "0.4.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature",
  				"feature-state"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"icon-halo-blur": {
  		type: "number",
  		"default": 0,
  		minimum: 0,
  		transition: true,
  		units: "pixels",
  		doc: "Fade out the halo towards the outside.",
  		requires: [
  			"icon-image"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.33.0",
  				android: "5.0.0",
  				ios: "3.5.0",
  				macos: "0.4.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature",
  				"feature-state"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"icon-translate": {
  		type: "array",
  		value: "number",
  		length: 2,
  		"default": [
  			0,
  			0
  		],
  		transition: true,
  		units: "pixels",
  		doc: "Distance that the icon's anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.",
  		requires: [
  			"icon-image"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"icon-translate-anchor": {
  		type: "enum",
  		values: {
  			map: {
  				doc: "Icons are translated relative to the map."
  			},
  			viewport: {
  				doc: "Icons are translated relative to the viewport."
  			}
  		},
  		doc: "Controls the frame of reference for `icon-translate`.",
  		"default": "map",
  		requires: [
  			"icon-image",
  			"icon-translate"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"text-opacity": {
  		type: "number",
  		doc: "The opacity at which the text will be drawn.",
  		"default": 1,
  		minimum: 0,
  		maximum: 1,
  		transition: true,
  		requires: [
  			"text-field"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.33.0",
  				android: "5.0.0",
  				ios: "3.5.0",
  				macos: "0.4.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature",
  				"feature-state"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"text-color": {
  		type: "color",
  		doc: "The color with which the text will be drawn.",
  		"default": "#000000",
  		transition: true,
  		overridable: true,
  		requires: [
  			"text-field"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.33.0",
  				android: "5.0.0",
  				ios: "3.5.0",
  				macos: "0.4.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature",
  				"feature-state"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"text-halo-color": {
  		type: "color",
  		"default": "rgba(0, 0, 0, 0)",
  		transition: true,
  		doc: "The color of the text's halo, which helps it stand out from backgrounds.",
  		requires: [
  			"text-field"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.33.0",
  				android: "5.0.0",
  				ios: "3.5.0",
  				macos: "0.4.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature",
  				"feature-state"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"text-halo-width": {
  		type: "number",
  		"default": 0,
  		minimum: 0,
  		transition: true,
  		units: "pixels",
  		doc: "Distance of halo to the font outline. Max text halo width is 1/4 of the font-size.",
  		requires: [
  			"text-field"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.33.0",
  				android: "5.0.0",
  				ios: "3.5.0",
  				macos: "0.4.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature",
  				"feature-state"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"text-halo-blur": {
  		type: "number",
  		"default": 0,
  		minimum: 0,
  		transition: true,
  		units: "pixels",
  		doc: "The halo's fadeout distance towards the outside.",
  		requires: [
  			"text-field"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  				js: "0.33.0",
  				android: "5.0.0",
  				ios: "3.5.0",
  				macos: "0.4.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature",
  				"feature-state"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"text-translate": {
  		type: "array",
  		value: "number",
  		length: 2,
  		"default": [
  			0,
  			0
  		],
  		transition: true,
  		units: "pixels",
  		doc: "Distance that the text's anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.",
  		requires: [
  			"text-field"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"text-translate-anchor": {
  		type: "enum",
  		values: {
  			map: {
  				doc: "The text is translated relative to the map."
  			},
  			viewport: {
  				doc: "The text is translated relative to the viewport."
  			}
  		},
  		doc: "Controls the frame of reference for `text-translate`.",
  		"default": "map",
  		requires: [
  			"text-field",
  			"text-translate"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	}
  };
  var paint_raster = {
  	"raster-opacity": {
  		type: "number",
  		doc: "The opacity at which the image will be drawn.",
  		"default": 1,
  		minimum: 0,
  		maximum: 1,
  		transition: true,
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"raster-hue-rotate": {
  		type: "number",
  		"default": 0,
  		period: 360,
  		transition: true,
  		units: "degrees",
  		doc: "Rotates hues around the color wheel.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"raster-brightness-min": {
  		type: "number",
  		doc: "Increase or reduce the brightness of the image. The value is the minimum brightness.",
  		"default": 0,
  		minimum: 0,
  		maximum: 1,
  		transition: true,
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"raster-brightness-max": {
  		type: "number",
  		doc: "Increase or reduce the brightness of the image. The value is the maximum brightness.",
  		"default": 1,
  		minimum: 0,
  		maximum: 1,
  		transition: true,
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"raster-saturation": {
  		type: "number",
  		doc: "Increase or reduce the saturation of the image.",
  		"default": 0,
  		minimum: -1,
  		maximum: 1,
  		transition: true,
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"raster-contrast": {
  		type: "number",
  		doc: "Increase or reduce the contrast of the image.",
  		"default": 0,
  		minimum: -1,
  		maximum: 1,
  		transition: true,
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"raster-resampling": {
  		type: "enum",
  		doc: "The resampling/interpolation method to use for overscaling, also known as texture magnification filter",
  		values: {
  			linear: {
  				doc: "(Bi)linear filtering interpolates pixel values using the weighted average of the four closest original source pixels creating a smooth but blurry look when overscaled"
  			},
  			nearest: {
  				doc: "Nearest neighbor filtering interpolates pixel values using the nearest original source pixel creating a sharp but pixelated look when overscaled"
  			}
  		},
  		"default": "linear",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.47.0",
  				android: "6.3.0",
  				ios: "4.2.0",
  				macos: "0.9.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"raster-fade-duration": {
  		type: "number",
  		"default": 300,
  		minimum: 0,
  		transition: false,
  		units: "milliseconds",
  		doc: "Fade duration when a new tile is added.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	}
  };
  var paint_hillshade = {
  	"hillshade-illumination-direction": {
  		type: "number",
  		"default": 335,
  		minimum: 0,
  		maximum: 359,
  		doc: "The direction of the light source used to generate the hillshading with 0 as the top of the viewport if `hillshade-illumination-anchor` is set to `viewport` and due north if `hillshade-illumination-anchor` is set to `map`.",
  		transition: false,
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.43.0",
  				android: "6.0.0",
  				ios: "4.0.0",
  				macos: "0.7.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"hillshade-illumination-anchor": {
  		type: "enum",
  		values: {
  			map: {
  				doc: "The hillshade illumination is relative to the north direction."
  			},
  			viewport: {
  				doc: "The hillshade illumination is relative to the top of the viewport."
  			}
  		},
  		"default": "viewport",
  		doc: "Direction of light source when map is rotated.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.43.0",
  				android: "6.0.0",
  				ios: "4.0.0",
  				macos: "0.7.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"hillshade-exaggeration": {
  		type: "number",
  		doc: "Intensity of the hillshade",
  		"default": 0.5,
  		minimum: 0,
  		maximum: 1,
  		transition: true,
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.43.0",
  				android: "6.0.0",
  				ios: "4.0.0",
  				macos: "0.7.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"hillshade-shadow-color": {
  		type: "color",
  		"default": "#000000",
  		doc: "The shading color of areas that face away from the light source.",
  		transition: true,
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.43.0",
  				android: "6.0.0",
  				ios: "4.0.0",
  				macos: "0.7.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"hillshade-highlight-color": {
  		type: "color",
  		"default": "#FFFFFF",
  		doc: "The shading color of areas that faces towards the light source.",
  		transition: true,
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.43.0",
  				android: "6.0.0",
  				ios: "4.0.0",
  				macos: "0.7.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"hillshade-accent-color": {
  		type: "color",
  		"default": "#000000",
  		doc: "The shading color used to accentuate rugged terrain like sharp cliffs and gorges.",
  		transition: true,
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.43.0",
  				android: "6.0.0",
  				ios: "4.0.0",
  				macos: "0.7.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	}
  };
  var paint_background = {
  	"background-color": {
  		type: "color",
  		"default": "#000000",
  		doc: "The color with which the background will be drawn.",
  		transition: true,
  		requires: [
  			{
  				"!": "background-pattern"
  			}
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"background-pattern": {
  		type: "resolvedImage",
  		transition: true,
  		doc: "Name of image in sprite to use for drawing an image background. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			},
  			"data-driven styling": {
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "cross-faded"
  	},
  	"background-opacity": {
  		type: "number",
  		"default": 1,
  		minimum: 0,
  		maximum: 1,
  		doc: "The opacity at which the background will be drawn.",
  		transition: true,
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.10.0",
  				android: "2.0.1",
  				ios: "2.0.0",
  				macos: "0.1.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	}
  };
  var transition = {
  	duration: {
  		type: "number",
  		"default": 300,
  		minimum: 0,
  		units: "milliseconds",
  		doc: "Time allotted for transitions to complete."
  	},
  	delay: {
  		type: "number",
  		"default": 0,
  		minimum: 0,
  		units: "milliseconds",
  		doc: "Length of time before a transition begins."
  	}
  };
  var promoteId = {
  	"*": {
  		type: "string",
  		doc: "A name of a feature property to use as ID for feature state."
  	}
  };
  var v8$1 = {
  	$version: $version,
  	$root: $root,
  	sources: sources,
  	source: source,
  	source_vector: source_vector,
  	source_raster: source_raster,
  	source_raster_dem: source_raster_dem,
  	source_geojson: source_geojson,
  	source_video: source_video,
  	source_image: source_image,
  	layer: layer,
  	layout: layout,
  	layout_background: layout_background,
  	layout_fill: layout_fill,
  	layout_circle: layout_circle,
  	layout_heatmap: layout_heatmap,
  	"layout_fill-extrusion": {
  	visibility: {
  		type: "enum",
  		values: {
  			visible: {
  				doc: "The layer is shown."
  			},
  			none: {
  				doc: "The layer is not shown."
  			}
  		},
  		"default": "visible",
  		doc: "Whether this layer is displayed.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.27.0",
  				android: "5.1.0",
  				ios: "3.6.0",
  				macos: "0.5.0"
  			}
  		},
  		"property-type": "constant"
  	}
  },
  	layout_line: layout_line,
  	layout_symbol: layout_symbol,
  	layout_raster: layout_raster,
  	layout_hillshade: layout_hillshade,
  	filter: filter,
  	filter_operator: filter_operator,
  	geometry_type: geometry_type,
  	"function": {
  	expression: {
  		type: "expression",
  		doc: "An expression."
  	},
  	stops: {
  		type: "array",
  		doc: "An array of stops.",
  		value: "function_stop"
  	},
  	base: {
  		type: "number",
  		"default": 1,
  		minimum: 0,
  		doc: "The exponential base of the interpolation curve. It controls the rate at which the result increases. Higher values make the result increase more towards the high end of the range. With `1` the stops are interpolated linearly."
  	},
  	property: {
  		type: "string",
  		doc: "The name of a feature property to use as the function input.",
  		"default": "$zoom"
  	},
  	type: {
  		type: "enum",
  		values: {
  			identity: {
  				doc: "Return the input value as the output value."
  			},
  			exponential: {
  				doc: "Generate an output by interpolating between stops just less than and just greater than the function input."
  			},
  			interval: {
  				doc: "Return the output value of the stop just less than the function input."
  			},
  			categorical: {
  				doc: "Return the output value of the stop equal to the function input."
  			}
  		},
  		doc: "The interpolation strategy to use in function evaluation.",
  		"default": "exponential"
  	},
  	colorSpace: {
  		type: "enum",
  		values: {
  			rgb: {
  				doc: "Use the RGB color space to interpolate color values"
  			},
  			lab: {
  				doc: "Use the LAB color space to interpolate color values."
  			},
  			hcl: {
  				doc: "Use the HCL color space to interpolate color values, interpolating the Hue, Chroma, and Luminance channels individually."
  			}
  		},
  		doc: "The color space in which colors interpolated. Interpolating colors in perceptual color spaces like LAB and HCL tend to produce color ramps that look more consistent and produce colors that can be differentiated more easily than those interpolated in RGB space.",
  		"default": "rgb"
  	},
  	"default": {
  		type: "*",
  		required: false,
  		doc: "A value to serve as a fallback function result when a value isn't otherwise available. It is used in the following circumstances:\n* In categorical functions, when the feature value does not match any of the stop domain values.\n* In property and zoom-and-property functions, when a feature does not contain a value for the specified property.\n* In identity functions, when the feature value is not valid for the style property (for example, if the function is being used for a `circle-color` property but the feature property value is not a string or not a valid color).\n* In interval or exponential property and zoom-and-property functions, when the feature value is not numeric.\nIf no default is provided, the style property's default is used in these circumstances."
  	}
  },
  	function_stop: function_stop,
  	expression: expression,
  	expression_name: expression_name,
  	light: light,
  	paint: paint,
  	paint_fill: paint_fill,
  	"paint_fill-extrusion": {
  	"fill-extrusion-opacity": {
  		type: "number",
  		"default": 1,
  		minimum: 0,
  		maximum: 1,
  		doc: "The opacity of the entire fill extrusion layer. This is rendered on a per-layer, not per-feature, basis, and data-driven styling is not available.",
  		transition: true,
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.27.0",
  				android: "5.1.0",
  				ios: "3.6.0",
  				macos: "0.5.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"fill-extrusion-color": {
  		type: "color",
  		"default": "#000000",
  		doc: "The base color of the extruded fill. The extrusion's surfaces will be shaded differently based on this color in combination with the root `light` settings. If this color is specified as `rgba` with an alpha component, the alpha component will be ignored; use `fill-extrusion-opacity` to set layer opacity.",
  		transition: true,
  		requires: [
  			{
  				"!": "fill-extrusion-pattern"
  			}
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.27.0",
  				android: "5.1.0",
  				ios: "3.6.0",
  				macos: "0.5.0"
  			},
  			"data-driven styling": {
  				js: "0.27.0",
  				android: "5.1.0",
  				ios: "3.6.0",
  				macos: "0.5.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature",
  				"feature-state"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"fill-extrusion-translate": {
  		type: "array",
  		value: "number",
  		length: 2,
  		"default": [
  			0,
  			0
  		],
  		transition: true,
  		units: "pixels",
  		doc: "The geometry's offset. Values are [x, y] where negatives indicate left and up (on the flat plane), respectively.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.27.0",
  				android: "5.1.0",
  				ios: "3.6.0",
  				macos: "0.5.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"fill-extrusion-translate-anchor": {
  		type: "enum",
  		values: {
  			map: {
  				doc: "The fill extrusion is translated relative to the map."
  			},
  			viewport: {
  				doc: "The fill extrusion is translated relative to the viewport."
  			}
  		},
  		doc: "Controls the frame of reference for `fill-extrusion-translate`.",
  		"default": "map",
  		requires: [
  			"fill-extrusion-translate"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.27.0",
  				android: "5.1.0",
  				ios: "3.6.0",
  				macos: "0.5.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	},
  	"fill-extrusion-pattern": {
  		type: "resolvedImage",
  		transition: true,
  		doc: "Name of image in sprite to use for drawing images on extruded fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.",
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.27.0",
  				android: "5.1.0",
  				ios: "3.6.0",
  				macos: "0.5.0"
  			},
  			"data-driven styling": {
  				js: "0.49.0",
  				android: "6.5.0",
  				macos: "0.11.0",
  				ios: "4.4.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom",
  				"feature"
  			]
  		},
  		"property-type": "cross-faded-data-driven"
  	},
  	"fill-extrusion-height": {
  		type: "number",
  		"default": 0,
  		minimum: 0,
  		units: "meters",
  		doc: "The height with which to extrude this layer.",
  		transition: true,
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.27.0",
  				android: "5.1.0",
  				ios: "3.6.0",
  				macos: "0.5.0"
  			},
  			"data-driven styling": {
  				js: "0.27.0",
  				android: "5.1.0",
  				ios: "3.6.0",
  				macos: "0.5.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature",
  				"feature-state"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"fill-extrusion-base": {
  		type: "number",
  		"default": 0,
  		minimum: 0,
  		units: "meters",
  		doc: "The height with which to extrude the base of this layer. Must be less than or equal to `fill-extrusion-height`.",
  		transition: true,
  		requires: [
  			"fill-extrusion-height"
  		],
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.27.0",
  				android: "5.1.0",
  				ios: "3.6.0",
  				macos: "0.5.0"
  			},
  			"data-driven styling": {
  				js: "0.27.0",
  				android: "5.1.0",
  				ios: "3.6.0",
  				macos: "0.5.0"
  			}
  		},
  		expression: {
  			interpolated: true,
  			parameters: [
  				"zoom",
  				"feature",
  				"feature-state"
  			]
  		},
  		"property-type": "data-driven"
  	},
  	"fill-extrusion-vertical-gradient": {
  		type: "boolean",
  		"default": true,
  		doc: "Whether to apply a vertical gradient to the sides of a fill-extrusion layer. If true, sides will be shaded slightly darker farther down.",
  		transition: false,
  		"sdk-support": {
  			"basic functionality": {
  				js: "0.50.0",
  				ios: "4.7.0",
  				macos: "0.13.0"
  			}
  		},
  		expression: {
  			interpolated: false,
  			parameters: [
  				"zoom"
  			]
  		},
  		"property-type": "data-constant"
  	}
  },
  	paint_line: paint_line,
  	paint_circle: paint_circle,
  	paint_heatmap: paint_heatmap,
  	paint_symbol: paint_symbol,
  	paint_raster: paint_raster,
  	paint_hillshade: paint_hillshade,
  	paint_background: paint_background,
  	transition: transition,
  	"property-type": {
  	"data-driven": {
  		type: "property-type",
  		doc: "Property is interpolable and can be represented using a property expression."
  	},
  	"cross-faded": {
  		type: "property-type",
  		doc: "Property is non-interpolable; rather, its values will be cross-faded to smoothly transition between integer zooms."
  	},
  	"cross-faded-data-driven": {
  		type: "property-type",
  		doc: "Property is non-interpolable; rather, its values will be cross-faded to smoothly transition between integer zooms. It can be represented using a property expression."
  	},
  	"color-ramp": {
  		type: "property-type",
  		doc: "Property should be specified using a color ramp from which the output color can be sampled based on a property calculation."
  	},
  	"data-constant": {
  		type: "property-type",
  		doc: "Property is interpolable but cannot be represented using a property expression."
  	},
  	constant: {
  		type: "property-type",
  		doc: "Property is constant across all zoom levels and property values."
  	}
  },
  	promoteId: promoteId
  };

  var commonjsGlobal$1 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function commonjsRequire$1 () {
  	throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
  }

  function createCommonjsModule$1(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var punycode = createCommonjsModule$1(function (module, exports) {
  (function(root) {

  	/** Detect free variables */
  	var freeExports =  exports &&
  		!exports.nodeType && exports;
  	var freeModule =  module &&
  		!module.nodeType && module;
  	var freeGlobal = typeof commonjsGlobal$1 == 'object' && commonjsGlobal$1;
  	if (
  		freeGlobal.global === freeGlobal ||
  		freeGlobal.window === freeGlobal ||
  		freeGlobal.self === freeGlobal
  	) {
  		root = freeGlobal;
  	}

  	/**
  	 * The `punycode` object.
  	 * @name punycode
  	 * @type Object
  	 */
  	var punycode,

  	/** Highest positive signed 32-bit float value */
  	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

  	/** Bootstring parameters */
  	base = 36,
  	tMin = 1,
  	tMax = 26,
  	skew = 38,
  	damp = 700,
  	initialBias = 72,
  	initialN = 128, // 0x80
  	delimiter = '-', // '\x2D'

  	/** Regular expressions */
  	regexPunycode = /^xn--/,
  	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
  	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

  	/** Error messages */
  	errors = {
  		'overflow': 'Overflow: input needs wider integers to process',
  		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
  		'invalid-input': 'Invalid input'
  	},

  	/** Convenience shortcuts */
  	baseMinusTMin = base - tMin,
  	floor = Math.floor,
  	stringFromCharCode = String.fromCharCode,

  	/** Temporary variable */
  	key;

  	/*--------------------------------------------------------------------------*/

  	/**
  	 * A generic error utility function.
  	 * @private
  	 * @param {String} type The error type.
  	 * @returns {Error} Throws a `RangeError` with the applicable error message.
  	 */
  	function error(type) {
  		throw RangeError(errors[type]);
  	}

  	/**
  	 * A generic `Array#map` utility function.
  	 * @private
  	 * @param {Array} array The array to iterate over.
  	 * @param {Function} callback The function that gets called for every array
  	 * item.
  	 * @returns {Array} A new array of values returned by the callback function.
  	 */
  	function map(array, fn) {
  		var length = array.length;
  		var result = [];
  		while (length--) {
  			result[length] = fn(array[length]);
  		}
  		return result;
  	}

  	/**
  	 * A simple `Array#map`-like wrapper to work with domain name strings or email
  	 * addresses.
  	 * @private
  	 * @param {String} domain The domain name or email address.
  	 * @param {Function} callback The function that gets called for every
  	 * character.
  	 * @returns {Array} A new string of characters returned by the callback
  	 * function.
  	 */
  	function mapDomain(string, fn) {
  		var parts = string.split('@');
  		var result = '';
  		if (parts.length > 1) {
  			// In email addresses, only the domain name should be punycoded. Leave
  			// the local part (i.e. everything up to `@`) intact.
  			result = parts[0] + '@';
  			string = parts[1];
  		}
  		// Avoid `split(regex)` for IE8 compatibility. See #17.
  		string = string.replace(regexSeparators, '\x2E');
  		var labels = string.split('.');
  		var encoded = map(labels, fn).join('.');
  		return result + encoded;
  	}

  	/**
  	 * Creates an array containing the numeric code points of each Unicode
  	 * character in the string. While JavaScript uses UCS-2 internally,
  	 * this function will convert a pair of surrogate halves (each of which
  	 * UCS-2 exposes as separate characters) into a single code point,
  	 * matching UTF-16.
  	 * @see `punycode.ucs2.encode`
  	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
  	 * @memberOf punycode.ucs2
  	 * @name decode
  	 * @param {String} string The Unicode input string (UCS-2).
  	 * @returns {Array} The new array of code points.
  	 */
  	function ucs2decode(string) {
  		var output = [],
  		    counter = 0,
  		    length = string.length,
  		    value,
  		    extra;
  		while (counter < length) {
  			value = string.charCodeAt(counter++);
  			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
  				// high surrogate, and there is a next character
  				extra = string.charCodeAt(counter++);
  				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
  					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
  				} else {
  					// unmatched surrogate; only append this code unit, in case the next
  					// code unit is the high surrogate of a surrogate pair
  					output.push(value);
  					counter--;
  				}
  			} else {
  				output.push(value);
  			}
  		}
  		return output;
  	}

  	/**
  	 * Creates a string based on an array of numeric code points.
  	 * @see `punycode.ucs2.decode`
  	 * @memberOf punycode.ucs2
  	 * @name encode
  	 * @param {Array} codePoints The array of numeric code points.
  	 * @returns {String} The new Unicode string (UCS-2).
  	 */
  	function ucs2encode(array) {
  		return map(array, function(value) {
  			var output = '';
  			if (value > 0xFFFF) {
  				value -= 0x10000;
  				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
  				value = 0xDC00 | value & 0x3FF;
  			}
  			output += stringFromCharCode(value);
  			return output;
  		}).join('');
  	}

  	/**
  	 * Converts a basic code point into a digit/integer.
  	 * @see `digitToBasic()`
  	 * @private
  	 * @param {Number} codePoint The basic numeric code point value.
  	 * @returns {Number} The numeric value of a basic code point (for use in
  	 * representing integers) in the range `0` to `base - 1`, or `base` if
  	 * the code point does not represent a value.
  	 */
  	function basicToDigit(codePoint) {
  		if (codePoint - 48 < 10) {
  			return codePoint - 22;
  		}
  		if (codePoint - 65 < 26) {
  			return codePoint - 65;
  		}
  		if (codePoint - 97 < 26) {
  			return codePoint - 97;
  		}
  		return base;
  	}

  	/**
  	 * Converts a digit/integer into a basic code point.
  	 * @see `basicToDigit()`
  	 * @private
  	 * @param {Number} digit The numeric value of a basic code point.
  	 * @returns {Number} The basic code point whose value (when used for
  	 * representing integers) is `digit`, which needs to be in the range
  	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
  	 * used; else, the lowercase form is used. The behavior is undefined
  	 * if `flag` is non-zero and `digit` has no uppercase form.
  	 */
  	function digitToBasic(digit, flag) {
  		//  0..25 map to ASCII a..z or A..Z
  		// 26..35 map to ASCII 0..9
  		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
  	}

  	/**
  	 * Bias adaptation function as per section 3.4 of RFC 3492.
  	 * http://tools.ietf.org/html/rfc3492#section-3.4
  	 * @private
  	 */
  	function adapt(delta, numPoints, firstTime) {
  		var k = 0;
  		delta = firstTime ? floor(delta / damp) : delta >> 1;
  		delta += floor(delta / numPoints);
  		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
  			delta = floor(delta / baseMinusTMin);
  		}
  		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
  	}

  	/**
  	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
  	 * symbols.
  	 * @memberOf punycode
  	 * @param {String} input The Punycode string of ASCII-only symbols.
  	 * @returns {String} The resulting string of Unicode symbols.
  	 */
  	function decode(input) {
  		// Don't use UCS-2
  		var output = [],
  		    inputLength = input.length,
  		    out,
  		    i = 0,
  		    n = initialN,
  		    bias = initialBias,
  		    basic,
  		    j,
  		    index,
  		    oldi,
  		    w,
  		    k,
  		    digit,
  		    t,
  		    /** Cached calculation results */
  		    baseMinusT;

  		// Handle the basic code points: let `basic` be the number of input code
  		// points before the last delimiter, or `0` if there is none, then copy
  		// the first basic code points to the output.

  		basic = input.lastIndexOf(delimiter);
  		if (basic < 0) {
  			basic = 0;
  		}

  		for (j = 0; j < basic; ++j) {
  			// if it's not a basic code point
  			if (input.charCodeAt(j) >= 0x80) {
  				error('not-basic');
  			}
  			output.push(input.charCodeAt(j));
  		}

  		// Main decoding loop: start just after the last delimiter if any basic code
  		// points were copied; start at the beginning otherwise.

  		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

  			// `index` is the index of the next character to be consumed.
  			// Decode a generalized variable-length integer into `delta`,
  			// which gets added to `i`. The overflow checking is easier
  			// if we increase `i` as we go, then subtract off its starting
  			// value at the end to obtain `delta`.
  			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

  				if (index >= inputLength) {
  					error('invalid-input');
  				}

  				digit = basicToDigit(input.charCodeAt(index++));

  				if (digit >= base || digit > floor((maxInt - i) / w)) {
  					error('overflow');
  				}

  				i += digit * w;
  				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

  				if (digit < t) {
  					break;
  				}

  				baseMinusT = base - t;
  				if (w > floor(maxInt / baseMinusT)) {
  					error('overflow');
  				}

  				w *= baseMinusT;

  			}

  			out = output.length + 1;
  			bias = adapt(i - oldi, out, oldi == 0);

  			// `i` was supposed to wrap around from `out` to `0`,
  			// incrementing `n` each time, so we'll fix that now:
  			if (floor(i / out) > maxInt - n) {
  				error('overflow');
  			}

  			n += floor(i / out);
  			i %= out;

  			// Insert `n` at position `i` of the output
  			output.splice(i++, 0, n);

  		}

  		return ucs2encode(output);
  	}

  	/**
  	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
  	 * Punycode string of ASCII-only symbols.
  	 * @memberOf punycode
  	 * @param {String} input The string of Unicode symbols.
  	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
  	 */
  	function encode(input) {
  		var n,
  		    delta,
  		    handledCPCount,
  		    basicLength,
  		    bias,
  		    j,
  		    m,
  		    q,
  		    k,
  		    t,
  		    currentValue,
  		    output = [],
  		    /** `inputLength` will hold the number of code points in `input`. */
  		    inputLength,
  		    /** Cached calculation results */
  		    handledCPCountPlusOne,
  		    baseMinusT,
  		    qMinusT;

  		// Convert the input in UCS-2 to Unicode
  		input = ucs2decode(input);

  		// Cache the length
  		inputLength = input.length;

  		// Initialize the state
  		n = initialN;
  		delta = 0;
  		bias = initialBias;

  		// Handle the basic code points
  		for (j = 0; j < inputLength; ++j) {
  			currentValue = input[j];
  			if (currentValue < 0x80) {
  				output.push(stringFromCharCode(currentValue));
  			}
  		}

  		handledCPCount = basicLength = output.length;

  		// `handledCPCount` is the number of code points that have been handled;
  		// `basicLength` is the number of basic code points.

  		// Finish the basic string - if it is not empty - with a delimiter
  		if (basicLength) {
  			output.push(delimiter);
  		}

  		// Main encoding loop:
  		while (handledCPCount < inputLength) {

  			// All non-basic code points < n have been handled already. Find the next
  			// larger one:
  			for (m = maxInt, j = 0; j < inputLength; ++j) {
  				currentValue = input[j];
  				if (currentValue >= n && currentValue < m) {
  					m = currentValue;
  				}
  			}

  			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
  			// but guard against overflow
  			handledCPCountPlusOne = handledCPCount + 1;
  			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
  				error('overflow');
  			}

  			delta += (m - n) * handledCPCountPlusOne;
  			n = m;

  			for (j = 0; j < inputLength; ++j) {
  				currentValue = input[j];

  				if (currentValue < n && ++delta > maxInt) {
  					error('overflow');
  				}

  				if (currentValue == n) {
  					// Represent delta as a generalized variable-length integer
  					for (q = delta, k = base; /* no condition */; k += base) {
  						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
  						if (q < t) {
  							break;
  						}
  						qMinusT = q - t;
  						baseMinusT = base - t;
  						output.push(
  							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
  						);
  						q = floor(qMinusT / baseMinusT);
  					}

  					output.push(stringFromCharCode(digitToBasic(q, 0)));
  					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
  					delta = 0;
  					++handledCPCount;
  				}
  			}

  			++delta;
  			++n;

  		}
  		return output.join('');
  	}

  	/**
  	 * Converts a Punycode string representing a domain name or an email address
  	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
  	 * it doesn't matter if you call it on a string that has already been
  	 * converted to Unicode.
  	 * @memberOf punycode
  	 * @param {String} input The Punycoded domain name or email address to
  	 * convert to Unicode.
  	 * @returns {String} The Unicode representation of the given Punycode
  	 * string.
  	 */
  	function toUnicode(input) {
  		return mapDomain(input, function(string) {
  			return regexPunycode.test(string)
  				? decode(string.slice(4).toLowerCase())
  				: string;
  		});
  	}

  	/**
  	 * Converts a Unicode string representing a domain name or an email address to
  	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
  	 * i.e. it doesn't matter if you call it with a domain that's already in
  	 * ASCII.
  	 * @memberOf punycode
  	 * @param {String} input The domain name or email address to convert, as a
  	 * Unicode string.
  	 * @returns {String} The Punycode representation of the given domain name or
  	 * email address.
  	 */
  	function toASCII(input) {
  		return mapDomain(input, function(string) {
  			return regexNonASCII.test(string)
  				? 'xn--' + encode(string)
  				: string;
  		});
  	}

  	/*--------------------------------------------------------------------------*/

  	/** Define the public API */
  	punycode = {
  		/**
  		 * A string representing the current Punycode.js version number.
  		 * @memberOf punycode
  		 * @type String
  		 */
  		'version': '1.3.2',
  		/**
  		 * An object of methods to convert from JavaScript's internal character
  		 * representation (UCS-2) to Unicode code points, and back.
  		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
  		 * @memberOf punycode
  		 * @type Object
  		 */
  		'ucs2': {
  			'decode': ucs2decode,
  			'encode': ucs2encode
  		},
  		'decode': decode,
  		'encode': encode,
  		'toASCII': toASCII,
  		'toUnicode': toUnicode
  	};

  	/** Expose `punycode` */
  	// Some AMD build optimizers, like r.js, check for specific condition patterns
  	// like the following:
  	if (freeExports && freeModule) {
  		if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
  			freeModule.exports = punycode;
  		} else { // in Narwhal or RingoJS v0.7.0-
  			for (key in punycode) {
  				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
  			}
  		}
  	} else { // in Rhino or a web browser
  		root.punycode = punycode;
  	}

  }(commonjsGlobal$1));
  });

  // Copyright Joyent, Inc. and other Node contributors.

  // If obj.hasOwnProperty has been overridden, then calling
  // obj.hasOwnProperty(prop) will break.
  // See: https://github.com/joyent/node/issues/1707
  function hasOwnProperty$1(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  var decode = function(qs, sep, eq, options) {
    sep = sep || '&';
    eq = eq || '=';
    var obj = {};

    if (typeof qs !== 'string' || qs.length === 0) {
      return obj;
    }

    var regexp = /\+/g;
    qs = qs.split(sep);

    var maxKeys = 1000;
    if (options && typeof options.maxKeys === 'number') {
      maxKeys = options.maxKeys;
    }

    var len = qs.length;
    // maxKeys <= 0 means that we should not limit keys count
    if (maxKeys > 0 && len > maxKeys) {
      len = maxKeys;
    }

    for (var i = 0; i < len; ++i) {
      var x = qs[i].replace(regexp, '%20'),
          idx = x.indexOf(eq),
          kstr, vstr, k, v;

      if (idx >= 0) {
        kstr = x.substr(0, idx);
        vstr = x.substr(idx + 1);
      } else {
        kstr = x;
        vstr = '';
      }

      k = decodeURIComponent(kstr);
      v = decodeURIComponent(vstr);

      if (!hasOwnProperty$1(obj, k)) {
        obj[k] = v;
      } else if (Array.isArray(obj[k])) {
        obj[k].push(v);
      } else {
        obj[k] = [obj[k], v];
      }
    }

    return obj;
  };

  // Copyright Joyent, Inc. and other Node contributors.

  var stringifyPrimitive = function(v) {
    switch (typeof v) {
      case 'string':
        return v;

      case 'boolean':
        return v ? 'true' : 'false';

      case 'number':
        return isFinite(v) ? v : '';

      default:
        return '';
    }
  };

  var encode = function(obj, sep, eq, name) {
    sep = sep || '&';
    eq = eq || '=';
    if (obj === null) {
      obj = undefined;
    }

    if (typeof obj === 'object') {
      return Object.keys(obj).map(function(k) {
        var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
        if (Array.isArray(obj[k])) {
          return obj[k].map(function(v) {
            return ks + encodeURIComponent(stringifyPrimitive(v));
          }).join(sep);
        } else {
          return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
        }
      }).join(sep);

    }

    if (!name) { return ''; }
    return encodeURIComponent(stringifyPrimitive(name)) + eq +
           encodeURIComponent(stringifyPrimitive(obj));
  };

  var querystring = createCommonjsModule$1(function (module, exports) {

  exports.decode = exports.parse = decode;
  exports.encode = exports.stringify = encode;
  });
  var querystring_1 = querystring.decode;
  var querystring_2 = querystring.parse;
  var querystring_3 = querystring.encode;
  var querystring_4 = querystring.stringify;

  function extend$2 (output) {
      var inputs = [], len = arguments.length - 1;
      while (len-- > 0)
          inputs[len] = arguments[len + 1];
      for (var i = 0, list = inputs; i < list.length; i += 1) {
          var input = list[i];
          for (var k in input) {
              output[k] = input[k];
          }
      }
      return output;
  }

  var ParsingError = function (Error) {
      function ParsingError(key, message) {
          Error.call(this, message);
          this.message = message;
          this.key = key;
      }
      if (Error)
          ParsingError.__proto__ = Error;
      ParsingError.prototype = Object.create(Error && Error.prototype);
      ParsingError.prototype.constructor = ParsingError;
      return ParsingError;
  }(Error);

  var Scope = function Scope(parent, bindings) {
      if (bindings === void 0)
          bindings = [];
      this.parent = parent;
      this.bindings = {};
      for (var i = 0, list = bindings; i < list.length; i += 1) {
          var ref = list[i];
          var name = ref[0];
          var expression = ref[1];
          this.bindings[name] = expression;
      }
  };
  Scope.prototype.concat = function concat(bindings) {
      return new Scope(this, bindings);
  };
  Scope.prototype.get = function get(name) {
      if (this.bindings[name]) {
          return this.bindings[name];
      }
      if (this.parent) {
          return this.parent.get(name);
      }
      throw new Error(name + ' not found in scope.');
  };
  Scope.prototype.has = function has(name) {
      if (this.bindings[name]) {
          return true;
      }
      return this.parent ? this.parent.has(name) : false;
  };

  var NullType = { kind: 'null' };
  var NumberType = { kind: 'number' };
  var StringType = { kind: 'string' };
  var BooleanType = { kind: 'boolean' };
  var ColorType = { kind: 'color' };
  var ObjectType = { kind: 'object' };
  var ValueType = { kind: 'value' };
  var ErrorType = { kind: 'error' };
  var CollatorType = { kind: 'collator' };
  var FormattedType = { kind: 'formatted' };
  var ResolvedImageType = { kind: 'resolvedImage' };
  function array(itemType, N) {
      return {
          kind: 'array',
          itemType: itemType,
          N: N
      };
  }
  function toString$3(type) {
      if (type.kind === 'array') {
          var itemType = toString$3(type.itemType);
          return typeof type.N === 'number' ? 'array<' + itemType + ', ' + type.N + '>' : type.itemType.kind === 'value' ? 'array' : 'array<' + itemType + '>';
      } else {
          return type.kind;
      }
  }
  var valueMemberTypes = [
      NullType,
      NumberType,
      StringType,
      BooleanType,
      ColorType,
      FormattedType,
      ObjectType,
      array(ValueType),
      ResolvedImageType
  ];
  function checkSubtype(expected, t) {
      if (t.kind === 'error') {
          return null;
      } else if (expected.kind === 'array') {
          if (t.kind === 'array' && (t.N === 0 && t.itemType.kind === 'value' || !checkSubtype(expected.itemType, t.itemType)) && (typeof expected.N !== 'number' || expected.N === t.N)) {
              return null;
          }
      } else if (expected.kind === t.kind) {
          return null;
      } else if (expected.kind === 'value') {
          for (var i = 0, list = valueMemberTypes; i < list.length; i += 1) {
              var memberType = list[i];
              if (!checkSubtype(memberType, t)) {
                  return null;
              }
          }
      }
      return 'Expected ' + toString$3(expected) + ' but found ' + toString$3(t) + ' instead.';
  }

  var csscolorparser = createCommonjsModule$1(function (module, exports) {
  // (c) Dean McNamee <dean@gmail.com>, 2012.
  //
  // https://github.com/deanm/css-color-parser-js
  //
  // Permission is hereby granted, free of charge, to any person obtaining a copy
  // of this software and associated documentation files (the "Software"), to
  // deal in the Software without restriction, including without limitation the
  // rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
  // sell copies of the Software, and to permit persons to whom the Software is
  // furnished to do so, subject to the following conditions:
  //
  // The above copyright notice and this permission notice shall be included in
  // all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  // FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
  // IN THE SOFTWARE.

  // http://www.w3.org/TR/css3-color/
  var kCSSColorTable = {
    "transparent": [0,0,0,0], "aliceblue": [240,248,255,1],
    "antiquewhite": [250,235,215,1], "aqua": [0,255,255,1],
    "aquamarine": [127,255,212,1], "azure": [240,255,255,1],
    "beige": [245,245,220,1], "bisque": [255,228,196,1],
    "black": [0,0,0,1], "blanchedalmond": [255,235,205,1],
    "blue": [0,0,255,1], "blueviolet": [138,43,226,1],
    "brown": [165,42,42,1], "burlywood": [222,184,135,1],
    "cadetblue": [95,158,160,1], "chartreuse": [127,255,0,1],
    "chocolate": [210,105,30,1], "coral": [255,127,80,1],
    "cornflowerblue": [100,149,237,1], "cornsilk": [255,248,220,1],
    "crimson": [220,20,60,1], "cyan": [0,255,255,1],
    "darkblue": [0,0,139,1], "darkcyan": [0,139,139,1],
    "darkgoldenrod": [184,134,11,1], "darkgray": [169,169,169,1],
    "darkgreen": [0,100,0,1], "darkgrey": [169,169,169,1],
    "darkkhaki": [189,183,107,1], "darkmagenta": [139,0,139,1],
    "darkolivegreen": [85,107,47,1], "darkorange": [255,140,0,1],
    "darkorchid": [153,50,204,1], "darkred": [139,0,0,1],
    "darksalmon": [233,150,122,1], "darkseagreen": [143,188,143,1],
    "darkslateblue": [72,61,139,1], "darkslategray": [47,79,79,1],
    "darkslategrey": [47,79,79,1], "darkturquoise": [0,206,209,1],
    "darkviolet": [148,0,211,1], "deeppink": [255,20,147,1],
    "deepskyblue": [0,191,255,1], "dimgray": [105,105,105,1],
    "dimgrey": [105,105,105,1], "dodgerblue": [30,144,255,1],
    "firebrick": [178,34,34,1], "floralwhite": [255,250,240,1],
    "forestgreen": [34,139,34,1], "fuchsia": [255,0,255,1],
    "gainsboro": [220,220,220,1], "ghostwhite": [248,248,255,1],
    "gold": [255,215,0,1], "goldenrod": [218,165,32,1],
    "gray": [128,128,128,1], "green": [0,128,0,1],
    "greenyellow": [173,255,47,1], "grey": [128,128,128,1],
    "honeydew": [240,255,240,1], "hotpink": [255,105,180,1],
    "indianred": [205,92,92,1], "indigo": [75,0,130,1],
    "ivory": [255,255,240,1], "khaki": [240,230,140,1],
    "lavender": [230,230,250,1], "lavenderblush": [255,240,245,1],
    "lawngreen": [124,252,0,1], "lemonchiffon": [255,250,205,1],
    "lightblue": [173,216,230,1], "lightcoral": [240,128,128,1],
    "lightcyan": [224,255,255,1], "lightgoldenrodyellow": [250,250,210,1],
    "lightgray": [211,211,211,1], "lightgreen": [144,238,144,1],
    "lightgrey": [211,211,211,1], "lightpink": [255,182,193,1],
    "lightsalmon": [255,160,122,1], "lightseagreen": [32,178,170,1],
    "lightskyblue": [135,206,250,1], "lightslategray": [119,136,153,1],
    "lightslategrey": [119,136,153,1], "lightsteelblue": [176,196,222,1],
    "lightyellow": [255,255,224,1], "lime": [0,255,0,1],
    "limegreen": [50,205,50,1], "linen": [250,240,230,1],
    "magenta": [255,0,255,1], "maroon": [128,0,0,1],
    "mediumaquamarine": [102,205,170,1], "mediumblue": [0,0,205,1],
    "mediumorchid": [186,85,211,1], "mediumpurple": [147,112,219,1],
    "mediumseagreen": [60,179,113,1], "mediumslateblue": [123,104,238,1],
    "mediumspringgreen": [0,250,154,1], "mediumturquoise": [72,209,204,1],
    "mediumvioletred": [199,21,133,1], "midnightblue": [25,25,112,1],
    "mintcream": [245,255,250,1], "mistyrose": [255,228,225,1],
    "moccasin": [255,228,181,1], "navajowhite": [255,222,173,1],
    "navy": [0,0,128,1], "oldlace": [253,245,230,1],
    "olive": [128,128,0,1], "olivedrab": [107,142,35,1],
    "orange": [255,165,0,1], "orangered": [255,69,0,1],
    "orchid": [218,112,214,1], "palegoldenrod": [238,232,170,1],
    "palegreen": [152,251,152,1], "paleturquoise": [175,238,238,1],
    "palevioletred": [219,112,147,1], "papayawhip": [255,239,213,1],
    "peachpuff": [255,218,185,1], "peru": [205,133,63,1],
    "pink": [255,192,203,1], "plum": [221,160,221,1],
    "powderblue": [176,224,230,1], "purple": [128,0,128,1],
    "rebeccapurple": [102,51,153,1],
    "red": [255,0,0,1], "rosybrown": [188,143,143,1],
    "royalblue": [65,105,225,1], "saddlebrown": [139,69,19,1],
    "salmon": [250,128,114,1], "sandybrown": [244,164,96,1],
    "seagreen": [46,139,87,1], "seashell": [255,245,238,1],
    "sienna": [160,82,45,1], "silver": [192,192,192,1],
    "skyblue": [135,206,235,1], "slateblue": [106,90,205,1],
    "slategray": [112,128,144,1], "slategrey": [112,128,144,1],
    "snow": [255,250,250,1], "springgreen": [0,255,127,1],
    "steelblue": [70,130,180,1], "tan": [210,180,140,1],
    "teal": [0,128,128,1], "thistle": [216,191,216,1],
    "tomato": [255,99,71,1], "turquoise": [64,224,208,1],
    "violet": [238,130,238,1], "wheat": [245,222,179,1],
    "white": [255,255,255,1], "whitesmoke": [245,245,245,1],
    "yellow": [255,255,0,1], "yellowgreen": [154,205,50,1]};

  function clamp_css_byte(i) {  // Clamp to integer 0 .. 255.
    i = Math.round(i);  // Seems to be what Chrome does (vs truncation).
    return i < 0 ? 0 : i > 255 ? 255 : i;
  }

  function clamp_css_float(f) {  // Clamp to float 0.0 .. 1.0.
    return f < 0 ? 0 : f > 1 ? 1 : f;
  }

  function parse_css_int(str) {  // int or percentage.
    if (str[str.length - 1] === '%')
      { return clamp_css_byte(parseFloat(str) / 100 * 255); }
    return clamp_css_byte(parseInt(str));
  }

  function parse_css_float(str) {  // float or percentage.
    if (str[str.length - 1] === '%')
      { return clamp_css_float(parseFloat(str) / 100); }
    return clamp_css_float(parseFloat(str));
  }

  function css_hue_to_rgb(m1, m2, h) {
    if (h < 0) { h += 1; }
    else if (h > 1) { h -= 1; }

    if (h * 6 < 1) { return m1 + (m2 - m1) * h * 6; }
    if (h * 2 < 1) { return m2; }
    if (h * 3 < 2) { return m1 + (m2 - m1) * (2/3 - h) * 6; }
    return m1;
  }

  function parseCSSColor(css_str) {
    // Remove all whitespace, not compliant, but should just be more accepting.
    var str = css_str.replace(/ /g, '').toLowerCase();

    // Color keywords (and transparent) lookup.
    if (str in kCSSColorTable) { return kCSSColorTable[str].slice(); }  // dup.

    // #abc and #abc123 syntax.
    if (str[0] === '#') {
      if (str.length === 4) {
        var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.
        if (!(iv >= 0 && iv <= 0xfff)) { return null; }  // Covers NaN.
        return [((iv & 0xf00) >> 4) | ((iv & 0xf00) >> 8),
                (iv & 0xf0) | ((iv & 0xf0) >> 4),
                (iv & 0xf) | ((iv & 0xf) << 4),
                1];
      } else if (str.length === 7) {
        var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.
        if (!(iv >= 0 && iv <= 0xffffff)) { return null; }  // Covers NaN.
        return [(iv & 0xff0000) >> 16,
                (iv & 0xff00) >> 8,
                iv & 0xff,
                1];
      }

      return null;
    }

    var op = str.indexOf('('), ep = str.indexOf(')');
    if (op !== -1 && ep + 1 === str.length) {
      var fname = str.substr(0, op);
      var params = str.substr(op+1, ep-(op+1)).split(',');
      var alpha = 1;  // To allow case fallthrough.
      switch (fname) {
        case 'rgba':
          if (params.length !== 4) { return null; }
          alpha = parse_css_float(params.pop());
          // Fall through.
        case 'rgb':
          if (params.length !== 3) { return null; }
          return [parse_css_int(params[0]),
                  parse_css_int(params[1]),
                  parse_css_int(params[2]),
                  alpha];
        case 'hsla':
          if (params.length !== 4) { return null; }
          alpha = parse_css_float(params.pop());
          // Fall through.
        case 'hsl':
          if (params.length !== 3) { return null; }
          var h = (((parseFloat(params[0]) % 360) + 360) % 360) / 360;  // 0 .. 1
          // NOTE(deanm): According to the CSS spec s/l should only be
          // percentages, but we don't bother and let float or percentage.
          var s = parse_css_float(params[1]);
          var l = parse_css_float(params[2]);
          var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;
          var m1 = l * 2 - m2;
          return [clamp_css_byte(css_hue_to_rgb(m1, m2, h+1/3) * 255),
                  clamp_css_byte(css_hue_to_rgb(m1, m2, h) * 255),
                  clamp_css_byte(css_hue_to_rgb(m1, m2, h-1/3) * 255),
                  alpha];
        default:
          return null;
      }
    }

    return null;
  }

  try { exports.parseCSSColor = parseCSSColor; } catch(e) { }
  });
  var csscolorparser_1 = csscolorparser.parseCSSColor;

  var Color = function Color(r, g, b, a) {
      if (a === void 0)
          a = 1;
      this.r = r;
      this.g = g;
      this.b = b;
      this.a = a;
  };
  Color.parse = function parse(input) {
      if (!input) {
          return undefined;
      }
      if (input instanceof Color) {
          return input;
      }
      if (typeof input !== 'string') {
          return undefined;
      }
      var rgba = csscolorparser_1(input);
      if (!rgba) {
          return undefined;
      }
      return new Color(rgba[0] / 255 * rgba[3], rgba[1] / 255 * rgba[3], rgba[2] / 255 * rgba[3], rgba[3]);
  };
  Color.prototype.toString = function toString() {
      var ref = this.toArray();
      var r = ref[0];
      var g = ref[1];
      var b = ref[2];
      var a = ref[3];
      return 'rgba(' + Math.round(r) + ',' + Math.round(g) + ',' + Math.round(b) + ',' + a + ')';
  };
  Color.prototype.toArray = function toArray() {
      var ref = this;
      var r = ref.r;
      var g = ref.g;
      var b = ref.b;
      var a = ref.a;
      return a === 0 ? [
          0,
          0,
          0,
          0
      ] : [
          r * 255 / a,
          g * 255 / a,
          b * 255 / a,
          a
      ];
  };
  Color.black = new Color(0, 0, 0, 1);
  Color.white = new Color(1, 1, 1, 1);
  Color.transparent = new Color(0, 0, 0, 0);
  Color.red = new Color(1, 0, 0, 1);

  var Collator = function Collator(caseSensitive, diacriticSensitive, locale) {
      if (caseSensitive) {
          this.sensitivity = diacriticSensitive ? 'variant' : 'case';
      } else {
          this.sensitivity = diacriticSensitive ? 'accent' : 'base';
      }
      this.locale = locale;
      this.collator = new Intl.Collator(this.locale ? this.locale : [], {
          sensitivity: this.sensitivity,
          usage: 'search'
      });
  };
  Collator.prototype.compare = function compare(lhs, rhs) {
      return this.collator.compare(lhs, rhs);
  };
  Collator.prototype.resolvedLocale = function resolvedLocale() {
      return new Intl.Collator(this.locale ? this.locale : []).resolvedOptions().locale;
  };

  var FormattedSection = function FormattedSection(text, image, scale, fontStack, textColor) {
      this.text = text;
      this.image = image;
      this.scale = scale;
      this.fontStack = fontStack;
      this.textColor = textColor;
  };
  var Formatted = function Formatted(sections) {
      this.sections = sections;
  };
  Formatted.fromString = function fromString(unformatted) {
      return new Formatted([new FormattedSection(unformatted, null, null, null, null)]);
  };
  Formatted.prototype.isEmpty = function isEmpty() {
      if (this.sections.length === 0) {
          return true;
      }
      return !this.sections.some(function (section) {
          return section.text.length !== 0 || section.image && section.image.name.length !== 0;
      });
  };
  Formatted.factory = function factory(text) {
      if (text instanceof Formatted) {
          return text;
      } else {
          return Formatted.fromString(text);
      }
  };
  Formatted.prototype.toString = function toString() {
      if (this.sections.length === 0) {
          return '';
      }
      return this.sections.map(function (section) {
          return section.text;
      }).join('');
  };
  Formatted.prototype.serialize = function serialize() {
      var serialized = ['format'];
      for (var i = 0, list = this.sections; i < list.length; i += 1) {
          var section = list[i];
          if (section.image) {
              serialized.push([
                  'image',
                  section.image.name
              ]);
              continue;
          }
          serialized.push(section.text);
          var options = {};
          if (section.fontStack) {
              options['text-font'] = [
                  'literal',
                  section.fontStack.split(',')
              ];
          }
          if (section.scale) {
              options['font-scale'] = section.scale;
          }
          if (section.textColor) {
              options['text-color'] = ['rgba'].concat(section.textColor.toArray());
          }
          serialized.push(options);
      }
      return serialized;
  };

  var ResolvedImage = function ResolvedImage(options) {
      this.name = options.name;
      this.available = options.available;
  };
  ResolvedImage.prototype.toString = function toString() {
      return this.name;
  };
  ResolvedImage.fromString = function fromString(name) {
      if (!name) {
          return null;
      }
      return new ResolvedImage({
          name: name,
          available: false
      });
  };
  ResolvedImage.prototype.serialize = function serialize() {
      return [
          'image',
          this.name
      ];
  };

  function validateRGBA(r, g, b, a) {
      if (!(typeof r === 'number' && r >= 0 && r <= 255 && typeof g === 'number' && g >= 0 && g <= 255 && typeof b === 'number' && b >= 0 && b <= 255)) {
          var value = typeof a === 'number' ? [
              r,
              g,
              b,
              a
          ] : [
              r,
              g,
              b
          ];
          return 'Invalid rgba value [' + value.join(', ') + ']: \'r\', \'g\', and \'b\' must be between 0 and 255.';
      }
      if (!(typeof a === 'undefined' || typeof a === 'number' && a >= 0 && a <= 1)) {
          return 'Invalid rgba value [' + [
              r,
              g,
              b,
              a
          ].join(', ') + ']: \'a\' must be between 0 and 1.';
      }
      return null;
  }
  function isValue(mixed) {
      if (mixed === null) {
          return true;
      } else if (typeof mixed === 'string') {
          return true;
      } else if (typeof mixed === 'boolean') {
          return true;
      } else if (typeof mixed === 'number') {
          return true;
      } else if (mixed instanceof Color) {
          return true;
      } else if (mixed instanceof Collator) {
          return true;
      } else if (mixed instanceof Formatted) {
          return true;
      } else if (mixed instanceof ResolvedImage) {
          return true;
      } else if (Array.isArray(mixed)) {
          for (var i = 0, list = mixed; i < list.length; i += 1) {
              var item = list[i];
              if (!isValue(item)) {
                  return false;
              }
          }
          return true;
      } else if (typeof mixed === 'object') {
          for (var key in mixed) {
              if (!isValue(mixed[key])) {
                  return false;
              }
          }
          return true;
      } else {
          return false;
      }
  }
  function typeOf(value) {
      if (value === null) {
          return NullType;
      } else if (typeof value === 'string') {
          return StringType;
      } else if (typeof value === 'boolean') {
          return BooleanType;
      } else if (typeof value === 'number') {
          return NumberType;
      } else if (value instanceof Color) {
          return ColorType;
      } else if (value instanceof Collator) {
          return CollatorType;
      } else if (value instanceof Formatted) {
          return FormattedType;
      } else if (value instanceof ResolvedImage) {
          return ResolvedImageType;
      } else if (Array.isArray(value)) {
          var length = value.length;
          var itemType;
          for (var i = 0, list = value; i < list.length; i += 1) {
              var item = list[i];
              var t = typeOf(item);
              if (!itemType) {
                  itemType = t;
              } else if (itemType === t) {
                  continue;
              } else {
                  itemType = ValueType;
                  break;
              }
          }
          return array(itemType || ValueType, length);
      } else {
          return ObjectType;
      }
  }
  function toString$1$1(value) {
      var type = typeof value;
      if (value === null) {
          return '';
      } else if (type === 'string' || type === 'number' || type === 'boolean') {
          return String(value);
      } else if (value instanceof Color || value instanceof Formatted || value instanceof ResolvedImage) {
          return value.toString();
      } else {
          return JSON.stringify(value);
      }
  }

  var Literal = function Literal(type, value) {
      this.type = type;
      this.value = value;
  };
  Literal.parse = function parse(args, context) {
      if (args.length !== 2) {
          return context.error('\'literal\' expression requires exactly one argument, but found ' + (args.length - 1) + ' instead.');
      }
      if (!isValue(args[1])) {
          return context.error('invalid value');
      }
      var value = args[1];
      var type = typeOf(value);
      var expected = context.expectedType;
      if (type.kind === 'array' && type.N === 0 && expected && expected.kind === 'array' && (typeof expected.N !== 'number' || expected.N === 0)) {
          type = expected;
      }
      return new Literal(type, value);
  };
  Literal.prototype.evaluate = function evaluate() {
      return this.value;
  };
  Literal.prototype.eachChild = function eachChild() {
  };
  Literal.prototype.outputDefined = function outputDefined() {
      return true;
  };
  Literal.prototype.serialize = function serialize() {
      if (this.type.kind === 'array' || this.type.kind === 'object') {
          return [
              'literal',
              this.value
          ];
      } else if (this.value instanceof Color) {
          return ['rgba'].concat(this.value.toArray());
      } else if (this.value instanceof Formatted) {
          return this.value.serialize();
      } else {
          return this.value;
      }
  };

  var RuntimeError = function RuntimeError(message) {
      this.name = 'ExpressionEvaluationError';
      this.message = message;
  };
  RuntimeError.prototype.toJSON = function toJSON() {
      return this.message;
  };

  var types = {
      string: StringType,
      number: NumberType,
      boolean: BooleanType,
      object: ObjectType
  };
  var Assertion = function Assertion(type, args) {
      this.type = type;
      this.args = args;
  };
  Assertion.parse = function parse(args, context) {
      if (args.length < 2) {
          return context.error('Expected at least one argument.');
      }
      var i = 1;
      var type;
      var name = args[0];
      if (name === 'array') {
          var itemType;
          if (args.length > 2) {
              var type$1 = args[1];
              if (typeof type$1 !== 'string' || !(type$1 in types) || type$1 === 'object') {
                  return context.error('The item type argument of "array" must be one of string, number, boolean', 1);
              }
              itemType = types[type$1];
              i++;
          } else {
              itemType = ValueType;
          }
          var N;
          if (args.length > 3) {
              if (args[2] !== null && (typeof args[2] !== 'number' || args[2] < 0 || args[2] !== Math.floor(args[2]))) {
                  return context.error('The length argument to "array" must be a positive integer literal', 2);
              }
              N = args[2];
              i++;
          }
          type = array(itemType, N);
      } else {
          type = types[name];
      }
      var parsed = [];
      for (; i < args.length; i++) {
          var input = context.parse(args[i], i, ValueType);
          if (!input) {
              return null;
          }
          parsed.push(input);
      }
      return new Assertion(type, parsed);
  };
  Assertion.prototype.evaluate = function evaluate(ctx) {
      for (var i = 0; i < this.args.length; i++) {
          var value = this.args[i].evaluate(ctx);
          var error = checkSubtype(this.type, typeOf(value));
          if (!error) {
              return value;
          } else if (i === this.args.length - 1) {
              throw new RuntimeError('Expected value to be of type ' + toString$3(this.type) + ', but found ' + toString$3(typeOf(value)) + ' instead.');
          }
      }
      return null;
  };
  Assertion.prototype.eachChild = function eachChild(fn) {
      this.args.forEach(fn);
  };
  Assertion.prototype.outputDefined = function outputDefined() {
      return this.args.every(function (arg) {
          return arg.outputDefined();
      });
  };
  Assertion.prototype.serialize = function serialize() {
      var type = this.type;
      var serialized = [type.kind];
      if (type.kind === 'array') {
          var itemType = type.itemType;
          if (itemType.kind === 'string' || itemType.kind === 'number' || itemType.kind === 'boolean') {
              serialized.push(itemType.kind);
              var N = type.N;
              if (typeof N === 'number' || this.args.length > 1) {
                  serialized.push(N);
              }
          }
      }
      return serialized.concat(this.args.map(function (arg) {
          return arg.serialize();
      }));
  };

  var FormatExpression = function FormatExpression(sections) {
      this.type = FormattedType;
      this.sections = sections;
  };
  FormatExpression.parse = function parse(args, context) {
      if (args.length < 2) {
          return context.error('Expected at least one argument.');
      }
      var firstArg = args[1];
      if (!Array.isArray(firstArg) && typeof firstArg === 'object') {
          return context.error('First argument must be an image or text section.');
      }
      var sections = [];
      var nextTokenMayBeObject = false;
      for (var i = 1; i <= args.length - 1; ++i) {
          var arg = args[i];
          if (nextTokenMayBeObject && typeof arg === 'object' && !Array.isArray(arg)) {
              nextTokenMayBeObject = false;
              var scale = null;
              if (arg['font-scale']) {
                  scale = context.parse(arg['font-scale'], 1, NumberType);
                  if (!scale) {
                      return null;
                  }
              }
              var font = null;
              if (arg['text-font']) {
                  font = context.parse(arg['text-font'], 1, array(StringType));
                  if (!font) {
                      return null;
                  }
              }
              var textColor = null;
              if (arg['text-color']) {
                  textColor = context.parse(arg['text-color'], 1, ColorType);
                  if (!textColor) {
                      return null;
                  }
              }
              var lastExpression = sections[sections.length - 1];
              lastExpression.scale = scale;
              lastExpression.font = font;
              lastExpression.textColor = textColor;
          } else {
              var content = context.parse(args[i], 1, ValueType);
              if (!content) {
                  return null;
              }
              var kind = content.type.kind;
              if (kind !== 'string' && kind !== 'value' && kind !== 'null' && kind !== 'resolvedImage') {
                  return context.error('Formatted text type must be \'string\', \'value\', \'image\' or \'null\'.');
              }
              nextTokenMayBeObject = true;
              sections.push({
                  content: content,
                  scale: null,
                  font: null,
                  textColor: null
              });
          }
      }
      return new FormatExpression(sections);
  };
  FormatExpression.prototype.evaluate = function evaluate(ctx) {
      var evaluateSection = function (section) {
          var evaluatedContent = section.content.evaluate(ctx);
          if (typeOf(evaluatedContent) === ResolvedImageType) {
              return new FormattedSection('', evaluatedContent, null, null, null);
          }
          return new FormattedSection(toString$1$1(evaluatedContent), null, section.scale ? section.scale.evaluate(ctx) : null, section.font ? section.font.evaluate(ctx).join(',') : null, section.textColor ? section.textColor.evaluate(ctx) : null);
      };
      return new Formatted(this.sections.map(evaluateSection));
  };
  FormatExpression.prototype.eachChild = function eachChild(fn) {
      for (var i = 0, list = this.sections; i < list.length; i += 1) {
          var section = list[i];
          fn(section.content);
          if (section.scale) {
              fn(section.scale);
          }
          if (section.font) {
              fn(section.font);
          }
          if (section.textColor) {
              fn(section.textColor);
          }
      }
  };
  FormatExpression.prototype.outputDefined = function outputDefined() {
      return false;
  };
  FormatExpression.prototype.serialize = function serialize() {
      var serialized = ['format'];
      for (var i = 0, list = this.sections; i < list.length; i += 1) {
          var section = list[i];
          serialized.push(section.content.serialize());
          var options = {};
          if (section.scale) {
              options['font-scale'] = section.scale.serialize();
          }
          if (section.font) {
              options['text-font'] = section.font.serialize();
          }
          if (section.textColor) {
              options['text-color'] = section.textColor.serialize();
          }
          serialized.push(options);
      }
      return serialized;
  };

  var ImageExpression = function ImageExpression(input) {
      this.type = ResolvedImageType;
      this.input = input;
  };
  ImageExpression.parse = function parse(args, context) {
      if (args.length !== 2) {
          return context.error('Expected two arguments.');
      }
      var name = context.parse(args[1], 1, StringType);
      if (!name) {
          return context.error('No image name provided.');
      }
      return new ImageExpression(name);
  };
  ImageExpression.prototype.evaluate = function evaluate(ctx) {
      var evaluatedImageName = this.input.evaluate(ctx);
      var value = ResolvedImage.fromString(evaluatedImageName);
      if (value && ctx.availableImages) {
          value.available = ctx.availableImages.indexOf(evaluatedImageName) > -1;
      }
      return value;
  };
  ImageExpression.prototype.eachChild = function eachChild(fn) {
      fn(this.input);
  };
  ImageExpression.prototype.outputDefined = function outputDefined() {
      return false;
  };
  ImageExpression.prototype.serialize = function serialize() {
      return [
          'image',
          this.input.serialize()
      ];
  };

  var types$1 = {
      'to-boolean': BooleanType,
      'to-color': ColorType,
      'to-number': NumberType,
      'to-string': StringType
  };
  var Coercion = function Coercion(type, args) {
      this.type = type;
      this.args = args;
  };
  Coercion.parse = function parse(args, context) {
      if (args.length < 2) {
          return context.error('Expected at least one argument.');
      }
      var name = args[0];
      if ((name === 'to-boolean' || name === 'to-string') && args.length !== 2) {
          return context.error('Expected one argument.');
      }
      var type = types$1[name];
      var parsed = [];
      for (var i = 1; i < args.length; i++) {
          var input = context.parse(args[i], i, ValueType);
          if (!input) {
              return null;
          }
          parsed.push(input);
      }
      return new Coercion(type, parsed);
  };
  Coercion.prototype.evaluate = function evaluate(ctx) {
      if (this.type.kind === 'boolean') {
          return Boolean(this.args[0].evaluate(ctx));
      } else if (this.type.kind === 'color') {
          var input;
          var error;
          for (var i = 0, list = this.args; i < list.length; i += 1) {
              var arg = list[i];
              input = arg.evaluate(ctx);
              error = null;
              if (input instanceof Color) {
                  return input;
              } else if (typeof input === 'string') {
                  var c = ctx.parseColor(input);
                  if (c) {
                      return c;
                  }
              } else if (Array.isArray(input)) {
                  if (input.length < 3 || input.length > 4) {
                      error = 'Invalid rbga value ' + JSON.stringify(input) + ': expected an array containing either three or four numeric values.';
                  } else {
                      error = validateRGBA(input[0], input[1], input[2], input[3]);
                  }
                  if (!error) {
                      return new Color(input[0] / 255, input[1] / 255, input[2] / 255, input[3]);
                  }
              }
          }
          throw new RuntimeError(error || 'Could not parse color from value \'' + (typeof input === 'string' ? input : String(JSON.stringify(input))) + '\'');
      } else if (this.type.kind === 'number') {
          var value = null;
          for (var i$1 = 0, list$1 = this.args; i$1 < list$1.length; i$1 += 1) {
              var arg$1 = list$1[i$1];
              value = arg$1.evaluate(ctx);
              if (value === null) {
                  return 0;
              }
              var num = Number(value);
              if (isNaN(num)) {
                  continue;
              }
              return num;
          }
          throw new RuntimeError('Could not convert ' + JSON.stringify(value) + ' to number.');
      } else if (this.type.kind === 'formatted') {
          return Formatted.fromString(toString$1$1(this.args[0].evaluate(ctx)));
      } else if (this.type.kind === 'resolvedImage') {
          return ResolvedImage.fromString(toString$1$1(this.args[0].evaluate(ctx)));
      } else {
          return toString$1$1(this.args[0].evaluate(ctx));
      }
  };
  Coercion.prototype.eachChild = function eachChild(fn) {
      this.args.forEach(fn);
  };
  Coercion.prototype.outputDefined = function outputDefined() {
      return this.args.every(function (arg) {
          return arg.outputDefined();
      });
  };
  Coercion.prototype.serialize = function serialize() {
      if (this.type.kind === 'formatted') {
          return new FormatExpression([{
                  content: this.args[0],
                  scale: null,
                  font: null,
                  textColor: null
              }]).serialize();
      }
      if (this.type.kind === 'resolvedImage') {
          return new ImageExpression(this.args[0]).serialize();
      }
      var serialized = ['to-' + this.type.kind];
      this.eachChild(function (child) {
          serialized.push(child.serialize());
      });
      return serialized;
  };

  var geometryTypes = [
      'Unknown',
      'Point',
      'LineString',
      'Polygon'
  ];
  var EvaluationContext = function EvaluationContext() {
      this.globals = null;
      this.feature = null;
      this.featureState = null;
      this.formattedSection = null;
      this._parseColorCache = {};
      this.availableImages = null;
      this.canonical = null;
  };
  EvaluationContext.prototype.id = function id() {
      return this.feature && 'id' in this.feature ? this.feature.id : null;
  };
  EvaluationContext.prototype.geometryType = function geometryType() {
      return this.feature ? typeof this.feature.type === 'number' ? geometryTypes[this.feature.type] : this.feature.type : null;
  };
  EvaluationContext.prototype.geometry = function geometry() {
      return this.feature && 'geometry' in this.feature ? this.feature.geometry : null;
  };
  EvaluationContext.prototype.canonicalID = function canonicalID() {
      return this.canonical;
  };
  EvaluationContext.prototype.properties = function properties() {
      return this.feature && this.feature.properties || {};
  };
  EvaluationContext.prototype.parseColor = function parseColor(input) {
      var cached = this._parseColorCache[input];
      if (!cached) {
          cached = this._parseColorCache[input] = Color.parse(input);
      }
      return cached;
  };

  var CompoundExpression = function CompoundExpression(name, type, evaluate, args) {
      this.name = name;
      this.type = type;
      this._evaluate = evaluate;
      this.args = args;
  };
  CompoundExpression.prototype.evaluate = function evaluate(ctx) {
      return this._evaluate(ctx, this.args);
  };
  CompoundExpression.prototype.eachChild = function eachChild(fn) {
      this.args.forEach(fn);
  };
  CompoundExpression.prototype.outputDefined = function outputDefined() {
      return false;
  };
  CompoundExpression.prototype.serialize = function serialize() {
      return [this.name].concat(this.args.map(function (arg) {
          return arg.serialize();
      }));
  };
  CompoundExpression.parse = function parse(args, context) {
      var ref$1;
      var op = args[0];
      var definition = CompoundExpression.definitions[op];
      if (!definition) {
          return context.error('Unknown expression "' + op + '". If you wanted a literal array, use ["literal", [...]].', 0);
      }
      var type = Array.isArray(definition) ? definition[0] : definition.type;
      var availableOverloads = Array.isArray(definition) ? [[
              definition[1],
              definition[2]
          ]] : definition.overloads;
      var overloads = availableOverloads.filter(function (ref) {
          var signature = ref[0];
          return !Array.isArray(signature) || signature.length === args.length - 1;
      });
      var signatureContext = null;
      for (var i$3 = 0, list = overloads; i$3 < list.length; i$3 += 1) {
          var ref = list[i$3];
          var params = ref[0];
          var evaluate = ref[1];
          signatureContext = new ParsingContext(context.registry, context.path, null, context.scope);
          var parsedArgs = [];
          var argParseFailed = false;
          for (var i = 1; i < args.length; i++) {
              var arg = args[i];
              var expectedType = Array.isArray(params) ? params[i - 1] : params.type;
              var parsed = signatureContext.parse(arg, 1 + parsedArgs.length, expectedType);
              if (!parsed) {
                  argParseFailed = true;
                  break;
              }
              parsedArgs.push(parsed);
          }
          if (argParseFailed) {
              continue;
          }
          if (Array.isArray(params)) {
              if (params.length !== parsedArgs.length) {
                  signatureContext.error('Expected ' + params.length + ' arguments, but found ' + parsedArgs.length + ' instead.');
                  continue;
              }
          }
          for (var i$1 = 0; i$1 < parsedArgs.length; i$1++) {
              var expected = Array.isArray(params) ? params[i$1] : params.type;
              var arg$1 = parsedArgs[i$1];
              signatureContext.concat(i$1 + 1).checkSubtype(expected, arg$1.type);
          }
          if (signatureContext.errors.length === 0) {
              return new CompoundExpression(op, type, evaluate, parsedArgs);
          }
      }
      if (overloads.length === 1) {
          (ref$1 = context.errors).push.apply(ref$1, signatureContext.errors);
      } else {
          var expected$1 = overloads.length ? overloads : availableOverloads;
          var signatures = expected$1.map(function (ref) {
              var params = ref[0];
              return stringifySignature(params);
          }).join(' | ');
          var actualTypes = [];
          for (var i$2 = 1; i$2 < args.length; i$2++) {
              var parsed$1 = context.parse(args[i$2], 1 + actualTypes.length);
              if (!parsed$1) {
                  return null;
              }
              actualTypes.push(toString$3(parsed$1.type));
          }
          context.error('Expected arguments of type ' + signatures + ', but found (' + actualTypes.join(', ') + ') instead.');
      }
      return null;
  };
  CompoundExpression.register = function register(registry, definitions) {
      CompoundExpression.definitions = definitions;
      for (var name in definitions) {
          registry[name] = CompoundExpression;
      }
  };
  function stringifySignature(signature) {
      if (Array.isArray(signature)) {
          return '(' + signature.map(toString$3).join(', ') + ')';
      } else {
          return '(' + toString$3(signature.type) + '...)';
      }
  }

  var CollatorExpression = function CollatorExpression(caseSensitive, diacriticSensitive, locale) {
      this.type = CollatorType;
      this.locale = locale;
      this.caseSensitive = caseSensitive;
      this.diacriticSensitive = diacriticSensitive;
  };
  CollatorExpression.parse = function parse(args, context) {
      if (args.length !== 2) {
          return context.error('Expected one argument.');
      }
      var options = args[1];
      if (typeof options !== 'object' || Array.isArray(options)) {
          return context.error('Collator options argument must be an object.');
      }
      var caseSensitive = context.parse(options['case-sensitive'] === undefined ? false : options['case-sensitive'], 1, BooleanType);
      if (!caseSensitive) {
          return null;
      }
      var diacriticSensitive = context.parse(options['diacritic-sensitive'] === undefined ? false : options['diacritic-sensitive'], 1, BooleanType);
      if (!diacriticSensitive) {
          return null;
      }
      var locale = null;
      if (options['locale']) {
          locale = context.parse(options['locale'], 1, StringType);
          if (!locale) {
              return null;
          }
      }
      return new CollatorExpression(caseSensitive, diacriticSensitive, locale);
  };
  CollatorExpression.prototype.evaluate = function evaluate(ctx) {
      return new Collator(this.caseSensitive.evaluate(ctx), this.diacriticSensitive.evaluate(ctx), this.locale ? this.locale.evaluate(ctx) : null);
  };
  CollatorExpression.prototype.eachChild = function eachChild(fn) {
      fn(this.caseSensitive);
      fn(this.diacriticSensitive);
      if (this.locale) {
          fn(this.locale);
      }
  };
  CollatorExpression.prototype.outputDefined = function outputDefined() {
      return false;
  };
  CollatorExpression.prototype.serialize = function serialize() {
      var options = {};
      options['case-sensitive'] = this.caseSensitive.serialize();
      options['diacritic-sensitive'] = this.diacriticSensitive.serialize();
      if (this.locale) {
          options['locale'] = this.locale.serialize();
      }
      return [
          'collator',
          options
      ];
  };

  /*
   * Copyright (C) 2008 Apple Inc. All Rights Reserved.
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions
   * are met:
   * 1. Redistributions of source code must retain the above copyright
   *    notice, this list of conditions and the following disclaimer.
   * 2. Redistributions in binary form must reproduce the above copyright
   *    notice, this list of conditions and the following disclaimer in the
   *    documentation and/or other materials provided with the distribution.
   *
   * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY
   * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
   * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR
   * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
   * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
   * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   *
   * Ported from Webkit
   * http://svn.webkit.org/repository/webkit/trunk/Source/WebCore/platform/graphics/UnitBezier.h
   */

  var unitbezier = UnitBezier;

  function UnitBezier(p1x, p1y, p2x, p2y) {
      // Calculate the polynomial coefficients, implicit first and last control points are (0,0) and (1,1).
      this.cx = 3.0 * p1x;
      this.bx = 3.0 * (p2x - p1x) - this.cx;
      this.ax = 1.0 - this.cx - this.bx;

      this.cy = 3.0 * p1y;
      this.by = 3.0 * (p2y - p1y) - this.cy;
      this.ay = 1.0 - this.cy - this.by;

      this.p1x = p1x;
      this.p1y = p2y;
      this.p2x = p2x;
      this.p2y = p2y;
  }

  UnitBezier.prototype.sampleCurveX = function(t) {
      // `ax t^3 + bx t^2 + cx t' expanded using Horner's rule.
      return ((this.ax * t + this.bx) * t + this.cx) * t;
  };

  UnitBezier.prototype.sampleCurveY = function(t) {
      return ((this.ay * t + this.by) * t + this.cy) * t;
  };

  UnitBezier.prototype.sampleCurveDerivativeX = function(t) {
      return (3.0 * this.ax * t + 2.0 * this.bx) * t + this.cx;
  };

  UnitBezier.prototype.solveCurveX = function(x, epsilon) {
      if (typeof epsilon === 'undefined') { epsilon = 1e-6; }

      var t0, t1, t2, x2, i;

      // First try a few iterations of Newton's method -- normally very fast.
      for (t2 = x, i = 0; i < 8; i++) {

          x2 = this.sampleCurveX(t2) - x;
          if (Math.abs(x2) < epsilon) { return t2; }

          var d2 = this.sampleCurveDerivativeX(t2);
          if (Math.abs(d2) < 1e-6) { break; }

          t2 = t2 - x2 / d2;
      }

      // Fall back to the bisection method for reliability.
      t0 = 0.0;
      t1 = 1.0;
      t2 = x;

      if (t2 < t0) { return t0; }
      if (t2 > t1) { return t1; }

      while (t0 < t1) {

          x2 = this.sampleCurveX(t2);
          if (Math.abs(x2 - x) < epsilon) { return t2; }

          if (x > x2) {
              t0 = t2;
          } else {
              t1 = t2;
          }

          t2 = (t1 - t0) * 0.5 + t0;
      }

      // Failure.
      return t2;
  };

  UnitBezier.prototype.solve = function(x, epsilon) {
      return this.sampleCurveY(this.solveCurveX(x, epsilon));
  };

  //      

  /**
   * constrain n to the given range, excluding the minimum, via modular arithmetic
   *
   * @param n value
   * @param min the minimum value to be returned, exclusive
   * @param max the maximum value to be returned, inclusive
   * @returns constrained number
   * @private
   */
  function wrap(n        , min        , max        )         {
      var d = max - min;
      var w = ((n - min) % d + d) % d + min;
      return (w === min) ? max : w;
  }

  //      

                                            

  /**
   * A `LngLatBounds` object represents a geographical bounding box,
   * defined by its southwest and northeast points in longitude and latitude.
   *
   * If no arguments are provided to the constructor, a `null` bounding box is created.
   *
   * Note that any Mapbox GL method that accepts a `LngLatBounds` object as an argument or option
   * can also accept an `Array` of two {@link LngLatLike} constructs and will perform an implicit conversion.
   * This flexible type is documented as {@link LngLatBoundsLike}.
   *
   * @param {LngLatLike} [sw] The southwest corner of the bounding box.
   * @param {LngLatLike} [ne] The northeast corner of the bounding box.
   * @example
   * var sw = new mapboxgl.LngLat(-73.9876, 40.7661);
   * var ne = new mapboxgl.LngLat(-73.9397, 40.8002);
   * var llb = new mapboxgl.LngLatBounds(sw, ne);
   */
  var LngLatBounds = function LngLatBounds(sw , ne ) {
      if (!sw) ; else if (ne) {
          this.setSouthWest(sw).setNorthEast(ne);
      } else if (sw.length === 4) {
          this.setSouthWest([sw[0], sw[1]]).setNorthEast([sw[2], sw[3]]);
      } else {
          this.setSouthWest(sw[0]).setNorthEast(sw[1]);
      }
  };

  /**
   * Set the northeast corner of the bounding box
   *
   * @param {LngLatLike} ne a {@link LngLatLike} object describing the northeast corner of the bounding box.
   * @returns {LngLatBounds} `this`
   */
  LngLatBounds.prototype.setNorthEast = function setNorthEast (ne        ) {
      this._ne = ne instanceof LngLat ? new LngLat(ne.lng, ne.lat) : LngLat.convert(ne);
      return this;
  };

  /**
   * Set the southwest corner of the bounding box
   *
   * @param {LngLatLike} sw a {@link LngLatLike} object describing the southwest corner of the bounding box.
   * @returns {LngLatBounds} `this`
   */
  LngLatBounds.prototype.setSouthWest = function setSouthWest (sw        ) {
      this._sw = sw instanceof LngLat ? new LngLat(sw.lng, sw.lat) : LngLat.convert(sw);
      return this;
  };

  /**
   * Extend the bounds to include a given LngLatLike or LngLatBoundsLike.
   *
   * @param {LngLatLike|LngLatBoundsLike} obj object to extend to
   * @returns {LngLatBounds} `this`
   */
  LngLatBounds.prototype.extend = function extend (obj                           ) {
      var sw = this._sw,
          ne = this._ne;
      var sw2, ne2;

      if (obj instanceof LngLat) {
          sw2 = obj;
          ne2 = obj;

      } else if (obj instanceof LngLatBounds) {
          sw2 = obj._sw;
          ne2 = obj._ne;

          if (!sw2 || !ne2) { return this; }

      } else {
          if (Array.isArray(obj)) {
              if (obj.length === 4 || obj.every(Array.isArray)) {
                  var lngLatBoundsObj = ((obj )              );
                  return this.extend(LngLatBounds.convert(lngLatBoundsObj));
              } else {
                  var lngLatObj = ((obj )        );
                  return this.extend(LngLat.convert(lngLatObj));
              }
          }
          return this;
      }

      if (!sw && !ne) {
          this._sw = new LngLat(sw2.lng, sw2.lat);
          this._ne = new LngLat(ne2.lng, ne2.lat);

      } else {
          sw.lng = Math.min(sw2.lng, sw.lng);
          sw.lat = Math.min(sw2.lat, sw.lat);
          ne.lng = Math.max(ne2.lng, ne.lng);
          ne.lat = Math.max(ne2.lat, ne.lat);
      }

      return this;
  };

  /**
   * Returns the geographical coordinate equidistant from the bounding box's corners.
   *
   * @returns {LngLat} The bounding box's center.
   * @example
   * var llb = new mapboxgl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);
   * llb.getCenter(); // = LngLat {lng: -73.96365, lat: 40.78315}
   */
  LngLatBounds.prototype.getCenter = function getCenter ()     {
      return new LngLat((this._sw.lng + this._ne.lng) / 2, (this._sw.lat + this._ne.lat) / 2);
  };

  /**
   * Returns the southwest corner of the bounding box.
   *
   * @returns {LngLat} The southwest corner of the bounding box.
   */
  LngLatBounds.prototype.getSouthWest = function getSouthWest ()     { return this._sw; };

  /**
  * Returns the northeast corner of the bounding box.
  *
  * @returns {LngLat} The northeast corner of the bounding box.
   */
  LngLatBounds.prototype.getNorthEast = function getNorthEast ()     { return this._ne; };

  /**
  * Returns the northwest corner of the bounding box.
  *
  * @returns {LngLat} The northwest corner of the bounding box.
   */
  LngLatBounds.prototype.getNorthWest = function getNorthWest ()     { return new LngLat(this.getWest(), this.getNorth()); };

  /**
  * Returns the southeast corner of the bounding box.
  *
  * @returns {LngLat} The southeast corner of the bounding box.
   */
  LngLatBounds.prototype.getSouthEast = function getSouthEast ()     { return new LngLat(this.getEast(), this.getSouth()); };

  /**
  * Returns the west edge of the bounding box.
  *
  * @returns {number} The west edge of the bounding box.
   */
  LngLatBounds.prototype.getWest = function getWest ()     { return this._sw.lng; };

  /**
  * Returns the south edge of the bounding box.
  *
  * @returns {number} The south edge of the bounding box.
   */
  LngLatBounds.prototype.getSouth = function getSouth ()     { return this._sw.lat; };

  /**
  * Returns the east edge of the bounding box.
  *
  * @returns {number} The east edge of the bounding box.
   */
  LngLatBounds.prototype.getEast = function getEast ()     { return this._ne.lng; };

  /**
  * Returns the north edge of the bounding box.
  *
  * @returns {number} The north edge of the bounding box.
   */
  LngLatBounds.prototype.getNorth = function getNorth ()     { return this._ne.lat; };

  /**
   * Returns the bounding box represented as an array.
   *
   * @returns {Array<Array<number>>} The bounding box represented as an array, consisting of the
   *   southwest and northeast coordinates of the bounding represented as arrays of numbers.
   * @example
   * var llb = new mapboxgl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);
   * llb.toArray(); // = [[-73.9876, 40.7661], [-73.9397, 40.8002]]
   */
  LngLatBounds.prototype.toArray = function toArray () {
      return [this._sw.toArray(), this._ne.toArray()];
  };

  /**
   * Return the bounding box represented as a string.
   *
   * @returns {string} The bounding box represents as a string of the format
   *   `'LngLatBounds(LngLat(lng, lat), LngLat(lng, lat))'`.
   * @example
   * var llb = new mapboxgl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);
   * llb.toString(); // = "LngLatBounds(LngLat(-73.9876, 40.7661), LngLat(-73.9397, 40.8002))"
   */
  LngLatBounds.prototype.toString = function toString () {
      return ("LngLatBounds(" + (this._sw.toString()) + ", " + (this._ne.toString()) + ")");
  };

  /**
   * Check if the bounding box is an empty/`null`-type box.
   *
   * @returns {boolean} True if bounds have been defined, otherwise false.
   */
  LngLatBounds.prototype.isEmpty = function isEmpty () {
      return !(this._sw && this._ne);
  };

  /**
  * Check if the point is within the bounding box.
  *
  * @param {LngLatLike} lnglat geographic point to check against.
  * @returns {boolean} True if the point is within the bounding box.
  */
  LngLatBounds.prototype.contains = function contains (lnglat        ) {
      var ref = LngLat.convert(lnglat);
          var lng = ref.lng;
          var lat = ref.lat;

      var containsLatitude = this._sw.lat <= lat && lat <= this._ne.lat;
      var containsLongitude = this._sw.lng <= lng && lng <= this._ne.lng;
      if (this._sw.lng > this._ne.lng) { // wrapped coordinates
          containsLongitude = this._sw.lng >= lng && lng >= this._ne.lng;
      }

      return containsLatitude && containsLongitude;
  };

  /**
   * Converts an array to a `LngLatBounds` object.
   *
   * If a `LngLatBounds` object is passed in, the function returns it unchanged.
   *
   * Internally, the function calls `LngLat#convert` to convert arrays to `LngLat` values.
   *
   * @param {LngLatBoundsLike} input An array of two coordinates to convert, or a `LngLatBounds` object to return.
   * @returns {LngLatBounds} A new `LngLatBounds` object, if a conversion occurred, or the original `LngLatBounds` object.
   * @example
   * var arr = [[-73.9876, 40.7661], [-73.9397, 40.8002]];
   * var llb = mapboxgl.LngLatBounds.convert(arr);
   * llb;   // = LngLatBounds {_sw: LngLat {lng: -73.9876, lat: 40.7661}, _ne: LngLat {lng: -73.9397, lat: 40.8002}}
   */
  LngLatBounds.convert = function convert (input              )           {
      if (!input || input instanceof LngLatBounds) { return input; }
      return new LngLatBounds(input);
  };

  //      

  /*
  * Approximate radius of the earth in meters.
  * Uses the WGS-84 approximation. The radius at the equator is ~6378137 and at the poles is ~6356752. https://en.wikipedia.org/wiki/World_Geodetic_System#WGS84
  * 6371008.8 is one published "average radius" see https://en.wikipedia.org/wiki/Earth_radius#Mean_radius, or ftp://athena.fsv.cvut.cz/ZFG/grs80-Moritz.pdf p.4
  */
  var earthRadius = 6371008.8;

  /**
   * A `LngLat` object represents a given longitude and latitude coordinate, measured in degrees.
   *
   * Mapbox GL uses longitude, latitude coordinate order (as opposed to latitude, longitude) to match GeoJSON.
   *
   * Note that any Mapbox GL method that accepts a `LngLat` object as an argument or option
   * can also accept an `Array` of two numbers and will perform an implicit conversion.
   * This flexible type is documented as {@link LngLatLike}.
   *
   * @param {number} lng Longitude, measured in degrees.
   * @param {number} lat Latitude, measured in degrees.
   * @example
   * var ll = new mapboxgl.LngLat(-73.9749, 40.7736);
   * @see [Get coordinates of the mouse pointer](https://www.mapbox.com/mapbox-gl-js/example/mouse-position/)
   * @see [Display a popup](https://www.mapbox.com/mapbox-gl-js/example/popup/)
   * @see [Highlight features within a bounding box](https://www.mapbox.com/mapbox-gl-js/example/using-box-queryrenderedfeatures/)
   * @see [Create a timeline animation](https://www.mapbox.com/mapbox-gl-js/example/timeline-animation/)
   */
  var LngLat = function LngLat(lng    , lat    ) {
      if (isNaN(lng) || isNaN(lat)) {
          throw new Error(("Invalid LngLat object: (" + lng + ", " + lat + ")"));
      }
      this.lng = +lng;
      this.lat = +lat;
      if (this.lat > 90 || this.lat < -90) {
          throw new Error('Invalid LngLat latitude value: must be between -90 and 90');
      }
  };

  /**
   * Returns a new `LngLat` object whose longitude is wrapped to the range (-180, 180).
   *
   * @returns {LngLat} The wrapped `LngLat` object.
   * @example
   * var ll = new mapboxgl.LngLat(286.0251, 40.7736);
   * var wrapped = ll.wrap();
   * wrapped.lng; // = -73.9749
   */
  LngLat.prototype.wrap = function wrap$1 () {
      return new LngLat(wrap(this.lng, -180, 180), this.lat);
  };

  /**
   * Returns the coordinates represented as an array of two numbers.
   *
   * @returns {Array<number>} The coordinates represeted as an array of longitude and latitude.
   * @example
   * var ll = new mapboxgl.LngLat(-73.9749, 40.7736);
   * ll.toArray(); // = [-73.9749, 40.7736]
   */
  LngLat.prototype.toArray = function toArray () {
      return [this.lng, this.lat];
  };

  /**
   * Returns the coordinates represent as a string.
   *
   * @returns {string} The coordinates represented as a string of the format `'LngLat(lng, lat)'`.
   * @example
   * var ll = new mapboxgl.LngLat(-73.9749, 40.7736);
   * ll.toString(); // = "LngLat(-73.9749, 40.7736)"
   */
  LngLat.prototype.toString = function toString () {
      return ("LngLat(" + (this.lng) + ", " + (this.lat) + ")");
  };

  /**
   * Returns the approximate distance between a pair of coordinates in meters
   * Uses the Haversine Formula (from R.W. Sinnott, "Virtues of the Haversine", Sky and Telescope, vol. 68, no. 2, 1984, p. 159)
   *
   * @param {LngLat} lngLat coordinates to compute the distance to
   * @returns {number} Distance in meters between the two coordinates.
   * @example
   * var new_york = new mapboxgl.LngLat(-74.0060, 40.7128);
   * var los_angeles = new mapboxgl.LngLat(-118.2437, 34.0522);
   * new_york.distanceTo(los_angeles); // = 3935751.690893987, "true distance" using a non-spherical approximation is ~3966km
   */
  LngLat.prototype.distanceTo = function distanceTo (lngLat    ) {
      var rad = Math.PI / 180;
      var lat1 = this.lat * rad;
      var lat2 = lngLat.lat * rad;
      var a = Math.sin(lat1) * Math.sin(lat2) + Math.cos(lat1) * Math.cos(lat2) * Math.cos((lngLat.lng - this.lng) * rad);

      var maxMeters = earthRadius * Math.acos(Math.min(a, 1));
      return maxMeters;
  };

  /**
   * Returns a `LngLatBounds` from the coordinates extended by a given `radius`. The returned `LngLatBounds` completely contains the `radius`.
   *
   * @param {number} [radius=0] Distance in meters from the coordinates to extend the bounds.
   * @returns {LngLatBounds} A new `LngLatBounds` object representing the coordinates extended by the `radius`.
   * @example
   * var ll = new mapboxgl.LngLat(-73.9749, 40.7736);
   * ll.toBounds(100).toArray(); // = [[-73.97501862141328, 40.77351016847229], [-73.97478137858673, 40.77368983152771]]
   */
  LngLat.prototype.toBounds = function toBounds (radius) {
          if ( radius === void 0 ) radius      = 0;

      var earthCircumferenceInMetersAtEquator = 40075017;
      var latAccuracy = 360 * radius / earthCircumferenceInMetersAtEquator,
          lngAccuracy = latAccuracy / Math.cos((Math.PI / 180) * this.lat);

      return new LngLatBounds(new LngLat(this.lng - lngAccuracy, this.lat - latAccuracy),
          new LngLat(this.lng + lngAccuracy, this.lat + latAccuracy));
  };

  /**
   * Converts an array of two numbers or an object with `lng` and `lat` or `lon` and `lat` properties
   * to a `LngLat` object.
   *
   * If a `LngLat` object is passed in, the function returns it unchanged.
   *
   * @param {LngLatLike} input An array of two numbers or object to convert, or a `LngLat` object to return.
   * @returns {LngLat} A new `LngLat` object, if a conversion occurred, or the original `LngLat` object.
   * @example
   * var arr = [-73.9749, 40.7736];
   * var ll = mapboxgl.LngLat.convert(arr);
   * ll;   // = LngLat {lng: -73.9749, lat: 40.7736}
   */
  LngLat.convert = function convert (input        )     {
      if (input instanceof LngLat) {
          return input;
      }
      if (Array.isArray(input) && (input.length === 2 || input.length === 3)) {
          return new LngLat(Number(input[0]), Number(input[1]));
      }
      if (!Array.isArray(input) && typeof input === 'object' && input !== null) {
          return new LngLat(
              // flow can't refine this to have one of lng or lat, so we have to cast to any
              Number('lng' in input ? (input ).lng : (input ).lon),
              Number(input.lat)
          );
      }
      throw new Error("`LngLatLike` argument must be specified as a LngLat instance, an object {lng: <lng>, lat: <lat>}, an object {lon: <lng>, lat: <lat>}, or an array of [<lng>, <lat>]");
  };

  //      
                                                 

  /*
   * The average circumference of the world in meters.
   */
  var earthCircumfrence = 2 * Math.PI * earthRadius; // meters

  /*
   * The circumference at a line of latitude in meters.
   */
  function circumferenceAtLatitude(latitude        ) {
      return earthCircumfrence * Math.cos(latitude * Math.PI / 180);
  }

  function mercatorXfromLng(lng        ) {
      return (180 + lng) / 360;
  }

  function mercatorYfromLat(lat        ) {
      return (180 - (180 / Math.PI * Math.log(Math.tan(Math.PI / 4 + lat * Math.PI / 360)))) / 360;
  }

  function mercatorZfromAltitude(altitude        , lat        ) {
      return altitude / circumferenceAtLatitude(lat);
  }

  function lngFromMercatorX(x        ) {
      return x * 360 - 180;
  }

  function latFromMercatorY(y        ) {
      var y2 = 180 - y * 360;
      return 360 / Math.PI * Math.atan(Math.exp(y2 * Math.PI / 180)) - 90;
  }

  function altitudeFromMercatorZ(z        , y        ) {
      return z * circumferenceAtLatitude(latFromMercatorY(y));
  }

  /**
   * Determine the Mercator scale factor for a given latitude, see
   * https://en.wikipedia.org/wiki/Mercator_projection#Scale_factor
   *
   * At the equator the scale factor will be 1, which increases at higher latitudes.
   *
   * @param {number} lat Latitude
   * @returns {number} scale factor
   * @private
   */
  function mercatorScale(lat        ) {
      return 1 / Math.cos(lat * Math.PI / 180);
  }

  /**
   * A `MercatorCoordinate` object represents a projected three dimensional position.
   *
   * `MercatorCoordinate` uses the web mercator projection ([EPSG:3857](https://epsg.io/3857)) with slightly different units:
   * - the size of 1 unit is the width of the projected world instead of the "mercator meter"
   * - the origin of the coordinate space is at the north-west corner instead of the middle
   *
   * For example, `MercatorCoordinate(0, 0, 0)` is the north-west corner of the mercator world and
   * `MercatorCoordinate(1, 1, 0)` is the south-east corner. If you are familiar with
   * [vector tiles](https://github.com/mapbox/vector-tile-spec) it may be helpful to think
   * of the coordinate space as the `0/0/0` tile with an extent of `1`.
   *
   * The `z` dimension of `MercatorCoordinate` is conformal. A cube in the mercator coordinate space would be rendered as a cube.
   *
   * @param {number} x The x component of the position.
   * @param {number} y The y component of the position.
   * @param {number} z The z component of the position.
   * @example
   * var nullIsland = new mapboxgl.MercatorCoordinate(0.5, 0.5, 0);
   *
   * @see [Add a custom style layer](https://www.mapbox.com/mapbox-gl-js/example/custom-style-layer/)
   */
  var MercatorCoordinate = function MercatorCoordinate(x    , y    , z) {
      if ( z === void 0 ) z     = 0;

      this.x = +x;
      this.y = +y;
      this.z = +z;
  };

  /**
   * Project a `LngLat` to a `MercatorCoordinate`.
   *
   * @param {LngLatLike} lngLatLike The location to project.
   * @param {number} altitude The altitude in meters of the position.
   * @returns {MercatorCoordinate} The projected mercator coordinate.
   * @example
   * var coord = mapboxgl.MercatorCoordinate.fromLngLat({ lng: 0, lat: 0}, 0);
   * coord; // MercatorCoordinate(0.5, 0.5, 0)
   */
  MercatorCoordinate.fromLngLat = function fromLngLat (lngLatLike        , altitude) {
          if ( altitude === void 0 ) altitude     = 0;

      var lngLat = LngLat.convert(lngLatLike);

      return new MercatorCoordinate(
              mercatorXfromLng(lngLat.lng),
              mercatorYfromLat(lngLat.lat),
              mercatorZfromAltitude(altitude, lngLat.lat));
  };

  /**
   * Returns the `LngLat` for the coordinate.
   *
   * @returns {LngLat} The `LngLat` object.
   * @example
   * var coord = new mapboxgl.MercatorCoordinate(0.5, 0.5, 0);
   * var latLng = coord.toLngLat(); // LngLat(0, 0)
   */
  MercatorCoordinate.prototype.toLngLat = function toLngLat () {
      return new LngLat(
              lngFromMercatorX(this.x),
              latFromMercatorY(this.y));
  };

  /**
   * Returns the altitude in meters of the coordinate.
   *
   * @returns {number} The altitude in meters.
   * @example
   * var coord = new mapboxgl.MercatorCoordinate(0, 0, 0.02);
   * coord.toAltitude(); // 6914.281956295339
   */
  MercatorCoordinate.prototype.toAltitude = function toAltitude () {
      return altitudeFromMercatorZ(this.z, this.y);
  };

  /**
   * Returns the distance of 1 meter in `MercatorCoordinate` units at this latitude.
   *
   * For coordinates in real world units using meters, this naturally provides the scale
   * to transform into `MercatorCoordinate`s.
   *
   * @returns {number} Distance of 1 meter in `MercatorCoordinate` units.
   */
  MercatorCoordinate.prototype.meterInMercatorCoordinateUnits = function meterInMercatorCoordinateUnits () {
      // 1 meter / circumference at equator in meters * Mercator projection scale factor at this latitude
      return 1 / earthCircumfrence * mercatorScale(latFromMercatorY(this.y));
  };

  //      

  /**
   * The maximum value of a coordinate in the internal tile coordinate system. Coordinates of
   * all source features normalized to this extent upon load.
   *
   * The value is a consequence of the following:
   *
   * * Vertex buffer store positions as signed 16 bit integers.
   * * One bit is lost for signedness to support tile buffers.
   * * One bit is lost because the line vertex buffer used to pack 1 bit of other data into the int.
   * * One bit is lost to support features extending past the extent on the right edge of the tile.
   * * This leaves us with 2^13 = 8192
   *
   * @private
   * @readonly
   */
  var EXTENT$2 = 8192;

  function updateBBox(bbox, coord) {
      bbox[0] = Math.min(bbox[0], coord[0]);
      bbox[1] = Math.min(bbox[1], coord[1]);
      bbox[2] = Math.max(bbox[2], coord[0]);
      bbox[3] = Math.max(bbox[3], coord[1]);
  }
  function boxWithinBox(bbox1, bbox2) {
      if (bbox1[0] <= bbox2[0]) {
          return false;
      }
      if (bbox1[2] >= bbox2[2]) {
          return false;
      }
      if (bbox1[1] <= bbox2[1]) {
          return false;
      }
      if (bbox1[3] >= bbox2[3]) {
          return false;
      }
      return true;
  }
  function getTileCoordinates(p, canonical) {
      var coord = MercatorCoordinate.fromLngLat({
          lng: p[0],
          lat: p[1]
      }, 0);
      var tilesAtZoom = Math.pow(2, canonical.z);
      return [
          Math.round(coord.x * tilesAtZoom * EXTENT$2),
          Math.round(coord.y * tilesAtZoom * EXTENT$2)
      ];
  }
  function onBoundary(p, p1, p2) {
      var x1 = p[0] - p1[0];
      var y1 = p[1] - p1[1];
      var x2 = p[0] - p2[0];
      var y2 = p[1] - p2[1];
      return x1 * y2 - x2 * y1 === 0 && x1 * x2 <= 0 && y1 * y2 <= 0;
  }
  function rayIntersect(p, p1, p2) {
      return p1[1] > p[1] !== p2[1] > p[1] && p[0] < (p2[0] - p1[0]) * (p[1] - p1[1]) / (p2[1] - p1[1]) + p1[0];
  }
  function pointWithinPolygon(point, rings) {
      var inside = false;
      for (var i = 0, len = rings.length; i < len; i++) {
          var ring = rings[i];
          for (var j = 0, len2 = ring.length; j < len2 - 1; j++) {
              if (onBoundary(point, ring[j], ring[j + 1])) {
                  return false;
              }
              if (rayIntersect(point, ring[j], ring[j + 1])) {
                  inside = !inside;
              }
          }
      }
      return inside;
  }
  function pointWithinPolygons(point, polygons) {
      for (var i = 0; i < polygons.length; i++) {
          if (pointWithinPolygon(point, polygons[i])) {
              return true;
          }
      }
      return false;
  }
  function perp(v1, v2) {
      return v1[0] * v2[1] - v1[1] * v2[0];
  }
  function twoSided(p1, p2, q1, q2) {
      var x1 = p1[0] - q1[0];
      var y1 = p1[1] - q1[1];
      var x2 = p2[0] - q1[0];
      var y2 = p2[1] - q1[1];
      var x3 = q2[0] - q1[0];
      var y3 = q2[1] - q1[1];
      if ((x1 * y3 - x3 * y1) * (x2 * y3 - x3 * y2) < 0) {
          return true;
      }
      return false;
  }
  function lineIntersectLine(a, b, c, d) {
      var vectorP = [
          b[0] - a[0],
          b[1] - a[1]
      ];
      var vectorQ = [
          d[0] - c[0],
          d[1] - c[1]
      ];
      if (perp(vectorQ, vectorP) === 0) {
          return false;
      }
      if (twoSided(a, b, c, d) && twoSided(c, d, a, b)) {
          return true;
      }
      return false;
  }
  function lineIntersectPolygon(p1, p2, polygon) {
      for (var i = 0, list = polygon; i < list.length; i += 1) {
          var ring = list[i];
          for (var j = 0; j < ring.length - 1; ++j) {
              if (lineIntersectLine(p1, p2, ring[j], ring[j + 1])) {
                  return true;
              }
          }
      }
      return false;
  }
  function lineStringWithinPolygon(line, polygon) {
      for (var i = 0; i < line.length; ++i) {
          if (!pointWithinPolygon(line[i], polygon)) {
              return false;
          }
      }
      for (var i$1 = 0; i$1 < line.length - 1; ++i$1) {
          if (lineIntersectPolygon(line[i$1], line[i$1 + 1], polygon)) {
              return false;
          }
      }
      return true;
  }
  function lineStringWithinPolygons(line, polygons) {
      for (var i = 0; i < polygons.length; i++) {
          if (lineStringWithinPolygon(line, polygons[i])) {
              return true;
          }
      }
      return false;
  }
  function getTilePolygon(coordinates, bbox, canonical) {
      var polygon = [];
      for (var i = 0; i < coordinates.length; i++) {
          var ring = [];
          for (var j = 0; j < coordinates[i].length; j++) {
              var coord = getTileCoordinates(coordinates[i][j], canonical);
              updateBBox(bbox, coord);
              ring.push(coord);
          }
          polygon.push(ring);
      }
      return polygon;
  }
  function getTilePolygons(coordinates, bbox, canonical) {
      var polygons = [];
      for (var i = 0; i < coordinates.length; i++) {
          var polygon = getTilePolygon(coordinates[i], bbox, canonical);
          polygons.push(polygon);
      }
      return polygons;
  }
  function pointsWithinPolygons(ctx, polygonGeometry) {
      var pointBBox = [
          Infinity,
          Infinity,
          -Infinity,
          -Infinity
      ];
      var polyBBox = [
          Infinity,
          Infinity,
          -Infinity,
          -Infinity
      ];
      var canonical = ctx.canonicalID();
      var shifts = [
          canonical.x * EXTENT$2,
          canonical.y * EXTENT$2
      ];
      var tilePoints = [];
      for (var i$1 = 0, list$1 = ctx.geometry(); i$1 < list$1.length; i$1 += 1) {
          var points = list$1[i$1];
          for (var i = 0, list = points; i < list.length; i += 1) {
              var point = list[i];
              var p = [
                  point.x + shifts[0],
                  point.y + shifts[1]
              ];
              updateBBox(pointBBox, p);
              tilePoints.push(p);
          }
      }
      if (polygonGeometry.type === 'Polygon') {
          var tilePolygon = getTilePolygon(polygonGeometry.coordinates, polyBBox, canonical);
          if (!boxWithinBox(pointBBox, polyBBox)) {
              return false;
          }
          for (var i$2 = 0, list$2 = tilePoints; i$2 < list$2.length; i$2 += 1) {
              var point$1 = list$2[i$2];
              if (!pointWithinPolygon(point$1, tilePolygon)) {
                  return false;
              }
          }
      }
      if (polygonGeometry.type === 'MultiPolygon') {
          var tilePolygons = getTilePolygons(polygonGeometry.coordinates, polyBBox, canonical);
          if (!boxWithinBox(pointBBox, polyBBox)) {
              return false;
          }
          for (var i$3 = 0, list$3 = tilePoints; i$3 < list$3.length; i$3 += 1) {
              var point$2 = list$3[i$3];
              if (!pointWithinPolygons(point$2, tilePolygons)) {
                  return false;
              }
          }
      }
      return true;
  }
  function linesWithinPolygons(ctx, polygonGeometry) {
      var lineBBox = [
          Infinity,
          Infinity,
          -Infinity,
          -Infinity
      ];
      var polyBBox = [
          Infinity,
          Infinity,
          -Infinity,
          -Infinity
      ];
      var canonical = ctx.canonicalID();
      var shifts = [
          canonical.x * EXTENT$2,
          canonical.y * EXTENT$2
      ];
      var tileLines = [];
      for (var i$1 = 0, list$1 = ctx.geometry(); i$1 < list$1.length; i$1 += 1) {
          var line = list$1[i$1];
          var tileLine = [];
          for (var i = 0, list = line; i < list.length; i += 1) {
              var point = list[i];
              var p = [
                  point.x + shifts[0],
                  point.y + shifts[1]
              ];
              updateBBox(lineBBox, p);
              tileLine.push(p);
          }
          tileLines.push(tileLine);
      }
      if (polygonGeometry.type === 'Polygon') {
          var tilePolygon = getTilePolygon(polygonGeometry.coordinates, polyBBox, canonical);
          if (!boxWithinBox(lineBBox, polyBBox)) {
              return false;
          }
          for (var i$2 = 0, list$2 = tileLines; i$2 < list$2.length; i$2 += 1) {
              var line$1 = list$2[i$2];
              if (!lineStringWithinPolygon(line$1, tilePolygon)) {
                  return false;
              }
          }
      }
      if (polygonGeometry.type === 'MultiPolygon') {
          var tilePolygons = getTilePolygons(polygonGeometry.coordinates, polyBBox, canonical);
          if (!boxWithinBox(lineBBox, polyBBox)) {
              return false;
          }
          for (var i$3 = 0, list$3 = tileLines; i$3 < list$3.length; i$3 += 1) {
              var line$2 = list$3[i$3];
              if (!lineStringWithinPolygons(line$2, tilePolygons)) {
                  return false;
              }
          }
      }
      return true;
  }
  var Within = function Within(geojson, geometries) {
      this.type = BooleanType;
      this.geojson = geojson;
      this.geometries = geometries;
  };
  Within.parse = function parse(args, context) {
      if (args.length !== 2) {
          return context.error('\'within\' expression requires exactly one argument, but found ' + (args.length - 1) + ' instead.');
      }
      if (isValue(args[1])) {
          var geojson = args[1];
          if (geojson.type === 'FeatureCollection') {
              for (var i = 0; i < geojson.features.length; ++i) {
                  var type = geojson.features[i].geometry.type;
                  if (type === 'Polygon' || type === 'MultiPolygon') {
                      return new Within(geojson, geojson.features[i].geometry);
                  }
              }
          } else if (geojson.type === 'Feature') {
              var type$1 = geojson.geometry.type;
              if (type$1 === 'Polygon' || type$1 === 'MultiPolygon') {
                  return new Within(geojson, geojson.geometry);
              }
          } else if (geojson.type === 'Polygon' || geojson.type === 'MultiPolygon') {
              return new Within(geojson, geojson);
          }
      }
      return context.error('\'within\' expression requires valid geojson object that contains polygon geometry type.');
  };
  Within.prototype.evaluate = function evaluate(ctx) {
      if (ctx.geometry() != null && ctx.canonicalID() != null) {
          if (ctx.geometryType() === 'Point') {
              return pointsWithinPolygons(ctx, this.geometries);
          } else if (ctx.geometryType() === 'LineString') {
              return linesWithinPolygons(ctx, this.geometries);
          }
      }
      return false;
  };
  Within.prototype.eachChild = function eachChild() {
  };
  Within.prototype.outputDefined = function outputDefined() {
      return true;
  };
  Within.prototype.serialize = function serialize() {
      return [
          'within',
          this.geojson
      ];
  };

  function isFeatureConstant(e) {
      if (e instanceof CompoundExpression) {
          if (e.name === 'get' && e.args.length === 1) {
              return false;
          } else if (e.name === 'feature-state') {
              return false;
          } else if (e.name === 'has' && e.args.length === 1) {
              return false;
          } else if (e.name === 'properties' || e.name === 'geometry-type' || e.name === 'id') {
              return false;
          } else if (/^filter-/.test(e.name)) {
              return false;
          }
      }
      if (e instanceof Within) {
          return false;
      }
      var result = true;
      e.eachChild(function (arg) {
          if (result && !isFeatureConstant(arg)) {
              result = false;
          }
      });
      return result;
  }
  function isStateConstant(e) {
      if (e instanceof CompoundExpression) {
          if (e.name === 'feature-state') {
              return false;
          }
      }
      var result = true;
      e.eachChild(function (arg) {
          if (result && !isStateConstant(arg)) {
              result = false;
          }
      });
      return result;
  }
  function isGlobalPropertyConstant(e, properties) {
      if (e instanceof CompoundExpression && properties.indexOf(e.name) >= 0) {
          return false;
      }
      var result = true;
      e.eachChild(function (arg) {
          if (result && !isGlobalPropertyConstant(arg, properties)) {
              result = false;
          }
      });
      return result;
  }

  var Var = function Var(name, boundExpression) {
      this.type = boundExpression.type;
      this.name = name;
      this.boundExpression = boundExpression;
  };
  Var.parse = function parse(args, context) {
      if (args.length !== 2 || typeof args[1] !== 'string') {
          return context.error('\'var\' expression requires exactly one string literal argument.');
      }
      var name = args[1];
      if (!context.scope.has(name)) {
          return context.error('Unknown variable "' + name + '". Make sure "' + name + '" has been bound in an enclosing "let" expression before using it.', 1);
      }
      return new Var(name, context.scope.get(name));
  };
  Var.prototype.evaluate = function evaluate(ctx) {
      return this.boundExpression.evaluate(ctx);
  };
  Var.prototype.eachChild = function eachChild() {
  };
  Var.prototype.outputDefined = function outputDefined() {
      return false;
  };
  Var.prototype.serialize = function serialize() {
      return [
          'var',
          this.name
      ];
  };

  var ParsingContext = function ParsingContext(registry, path, expectedType, scope, errors) {
      if (path === void 0)
          path = [];
      if (scope === void 0)
          scope = new Scope();
      if (errors === void 0)
          errors = [];
      this.registry = registry;
      this.path = path;
      this.key = path.map(function (part) {
          return '[' + part + ']';
      }).join('');
      this.scope = scope;
      this.errors = errors;
      this.expectedType = expectedType;
  };
  ParsingContext.prototype.parse = function parse(expr, index, expectedType, bindings, options) {
      if (options === void 0)
          options = {};
      if (index) {
          return this.concat(index, expectedType, bindings)._parse(expr, options);
      }
      return this._parse(expr, options);
  };
  ParsingContext.prototype._parse = function _parse(expr, options) {
      if (expr === null || typeof expr === 'string' || typeof expr === 'boolean' || typeof expr === 'number') {
          expr = [
              'literal',
              expr
          ];
      }
      function annotate(parsed, type, typeAnnotation) {
          if (typeAnnotation === 'assert') {
              return new Assertion(type, [parsed]);
          } else if (typeAnnotation === 'coerce') {
              return new Coercion(type, [parsed]);
          } else {
              return parsed;
          }
      }
      if (Array.isArray(expr)) {
          if (expr.length === 0) {
              return this.error('Expected an array with at least one element. If you wanted a literal array, use ["literal", []].');
          }
          var op = expr[0];
          if (typeof op !== 'string') {
              this.error('Expression name must be a string, but found ' + typeof op + ' instead. If you wanted a literal array, use ["literal", [...]].', 0);
              return null;
          }
          var Expr = this.registry[op];
          if (Expr) {
              var parsed = Expr.parse(expr, this);
              if (!parsed) {
                  return null;
              }
              if (this.expectedType) {
                  var expected = this.expectedType;
                  var actual = parsed.type;
                  if ((expected.kind === 'string' || expected.kind === 'number' || expected.kind === 'boolean' || expected.kind === 'object' || expected.kind === 'array') && actual.kind === 'value') {
                      parsed = annotate(parsed, expected, options.typeAnnotation || 'assert');
                  } else if ((expected.kind === 'color' || expected.kind === 'formatted' || expected.kind === 'resolvedImage') && (actual.kind === 'value' || actual.kind === 'string')) {
                      parsed = annotate(parsed, expected, options.typeAnnotation || 'coerce');
                  } else if (this.checkSubtype(expected, actual)) {
                      return null;
                  }
              }
              if (!(parsed instanceof Literal) && parsed.type.kind !== 'resolvedImage' && isConstant(parsed)) {
                  var ec = new EvaluationContext();
                  try {
                      parsed = new Literal(parsed.type, parsed.evaluate(ec));
                  } catch (e) {
                      this.error(e.message);
                      return null;
                  }
              }
              return parsed;
          }
          return this.error('Unknown expression "' + op + '". If you wanted a literal array, use ["literal", [...]].', 0);
      } else if (typeof expr === 'undefined') {
          return this.error('\'undefined\' value invalid. Use null instead.');
      } else if (typeof expr === 'object') {
          return this.error('Bare objects invalid. Use ["literal", {...}] instead.');
      } else {
          return this.error('Expected an array, but found ' + typeof expr + ' instead.');
      }
  };
  ParsingContext.prototype.concat = function concat(index, expectedType, bindings) {
      var path = typeof index === 'number' ? this.path.concat(index) : this.path;
      var scope = bindings ? this.scope.concat(bindings) : this.scope;
      return new ParsingContext(this.registry, path, expectedType || null, scope, this.errors);
  };
  ParsingContext.prototype.error = function error(error$1) {
      var keys = [], len = arguments.length - 1;
      while (len-- > 0)
          keys[len] = arguments[len + 1];
      var key = '' + this.key + keys.map(function (k) {
          return '[' + k + ']';
      }).join('');
      this.errors.push(new ParsingError(key, error$1));
  };
  ParsingContext.prototype.checkSubtype = function checkSubtype$1(expected, t) {
      var error = checkSubtype(expected, t);
      if (error) {
          this.error(error);
      }
      return error;
  };
  function isConstant(expression) {
      if (expression instanceof Var) {
          return isConstant(expression.boundExpression);
      } else if (expression instanceof CompoundExpression && expression.name === 'error') {
          return false;
      } else if (expression instanceof CollatorExpression) {
          return false;
      } else if (expression instanceof Within) {
          return false;
      }
      var isTypeAnnotation = expression instanceof Coercion || expression instanceof Assertion;
      var childrenConstant = true;
      expression.eachChild(function (child) {
          if (isTypeAnnotation) {
              childrenConstant = childrenConstant && isConstant(child);
          } else {
              childrenConstant = childrenConstant && child instanceof Literal;
          }
      });
      if (!childrenConstant) {
          return false;
      }
      return isFeatureConstant(expression) && isGlobalPropertyConstant(expression, [
          'zoom',
          'heatmap-density',
          'line-progress',
          'accumulated',
          'is-supported-script'
      ]);
  }

  function findStopLessThanOrEqualTo(stops, input) {
      var lastIndex = stops.length - 1;
      var lowerIndex = 0;
      var upperIndex = lastIndex;
      var currentIndex = 0;
      var currentValue, nextValue;
      while (lowerIndex <= upperIndex) {
          currentIndex = Math.floor((lowerIndex + upperIndex) / 2);
          currentValue = stops[currentIndex];
          nextValue = stops[currentIndex + 1];
          if (currentValue <= input) {
              if (currentIndex === lastIndex || input < nextValue) {
                  return currentIndex;
              }
              lowerIndex = currentIndex + 1;
          } else if (currentValue > input) {
              upperIndex = currentIndex - 1;
          } else {
              throw new RuntimeError('Input is not a number.');
          }
      }
      return 0;
  }

  var Step = function Step(type, input, stops) {
      this.type = type;
      this.input = input;
      this.labels = [];
      this.outputs = [];
      for (var i = 0, list = stops; i < list.length; i += 1) {
          var ref = list[i];
          var label = ref[0];
          var expression = ref[1];
          this.labels.push(label);
          this.outputs.push(expression);
      }
  };
  Step.parse = function parse(args, context) {
      if (args.length - 1 < 4) {
          return context.error('Expected at least 4 arguments, but found only ' + (args.length - 1) + '.');
      }
      if ((args.length - 1) % 2 !== 0) {
          return context.error('Expected an even number of arguments.');
      }
      var input = context.parse(args[1], 1, NumberType);
      if (!input) {
          return null;
      }
      var stops = [];
      var outputType = null;
      if (context.expectedType && context.expectedType.kind !== 'value') {
          outputType = context.expectedType;
      }
      for (var i = 1; i < args.length; i += 2) {
          var label = i === 1 ? -Infinity : args[i];
          var value = args[i + 1];
          var labelKey = i;
          var valueKey = i + 1;
          if (typeof label !== 'number') {
              return context.error('Input/output pairs for "step" expressions must be defined using literal numeric values (not computed expressions) for the input values.', labelKey);
          }
          if (stops.length && stops[stops.length - 1][0] >= label) {
              return context.error('Input/output pairs for "step" expressions must be arranged with input values in strictly ascending order.', labelKey);
          }
          var parsed = context.parse(value, valueKey, outputType);
          if (!parsed) {
              return null;
          }
          outputType = outputType || parsed.type;
          stops.push([
              label,
              parsed
          ]);
      }
      return new Step(outputType, input, stops);
  };
  Step.prototype.evaluate = function evaluate(ctx) {
      var labels = this.labels;
      var outputs = this.outputs;
      if (labels.length === 1) {
          return outputs[0].evaluate(ctx);
      }
      var value = this.input.evaluate(ctx);
      if (value <= labels[0]) {
          return outputs[0].evaluate(ctx);
      }
      var stopCount = labels.length;
      if (value >= labels[stopCount - 1]) {
          return outputs[stopCount - 1].evaluate(ctx);
      }
      var index = findStopLessThanOrEqualTo(labels, value);
      return outputs[index].evaluate(ctx);
  };
  Step.prototype.eachChild = function eachChild(fn) {
      fn(this.input);
      for (var i = 0, list = this.outputs; i < list.length; i += 1) {
          var expression = list[i];
          fn(expression);
      }
  };
  Step.prototype.outputDefined = function outputDefined() {
      return this.outputs.every(function (out) {
          return out.outputDefined();
      });
  };
  Step.prototype.serialize = function serialize() {
      var serialized = [
          'step',
          this.input.serialize()
      ];
      for (var i = 0; i < this.labels.length; i++) {
          if (i > 0) {
              serialized.push(this.labels[i]);
          }
          serialized.push(this.outputs[i].serialize());
      }
      return serialized;
  };

  function number(a, b, t) {
      return a * (1 - t) + b * t;
  }
  function color(from, to, t) {
      return new Color(number(from.r, to.r, t), number(from.g, to.g, t), number(from.b, to.b, t), number(from.a, to.a, t));
  }
  function array$1(from, to, t) {
      return from.map(function (d, i) {
          return number(d, to[i], t);
      });
  }

  var interpolate = /*#__PURE__*/Object.freeze({
    __proto__: null,
    number: number,
    color: color,
    array: array$1
  });

  var Xn = 0.95047, Yn = 1, Zn = 1.08883, t0 = 4 / 29, t1 = 6 / 29, t2 = 3 * t1 * t1, t3 = t1 * t1 * t1, deg2rad = Math.PI / 180, rad2deg = 180 / Math.PI;
  function xyz2lab(t) {
      return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
  }
  function lab2xyz(t) {
      return t > t1 ? t * t * t : t2 * (t - t0);
  }
  function xyz2rgb(x) {
      return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
  }
  function rgb2xyz(x) {
      x /= 255;
      return x <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
  }
  function rgbToLab(rgbColor) {
      var b = rgb2xyz(rgbColor.r), a = rgb2xyz(rgbColor.g), l = rgb2xyz(rgbColor.b), x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn), y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.072175 * l) / Yn), z = xyz2lab((0.0193339 * b + 0.119192 * a + 0.9503041 * l) / Zn);
      return {
          l: 116 * y - 16,
          a: 500 * (x - y),
          b: 200 * (y - z),
          alpha: rgbColor.a
      };
  }
  function labToRgb(labColor) {
      var y = (labColor.l + 16) / 116, x = isNaN(labColor.a) ? y : y + labColor.a / 500, z = isNaN(labColor.b) ? y : y - labColor.b / 200;
      y = Yn * lab2xyz(y);
      x = Xn * lab2xyz(x);
      z = Zn * lab2xyz(z);
      return new Color(xyz2rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z), xyz2rgb(-0.969266 * x + 1.8760108 * y + 0.041556 * z), xyz2rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z), labColor.alpha);
  }
  function interpolateLab(from, to, t) {
      return {
          l: number(from.l, to.l, t),
          a: number(from.a, to.a, t),
          b: number(from.b, to.b, t),
          alpha: number(from.alpha, to.alpha, t)
      };
  }
  function rgbToHcl(rgbColor) {
      var ref = rgbToLab(rgbColor);
      var l = ref.l;
      var a = ref.a;
      var b = ref.b;
      var h = Math.atan2(b, a) * rad2deg;
      return {
          h: h < 0 ? h + 360 : h,
          c: Math.sqrt(a * a + b * b),
          l: l,
          alpha: rgbColor.a
      };
  }
  function hclToRgb(hclColor) {
      var h = hclColor.h * deg2rad, c = hclColor.c, l = hclColor.l;
      return labToRgb({
          l: l,
          a: Math.cos(h) * c,
          b: Math.sin(h) * c,
          alpha: hclColor.alpha
      });
  }
  function interpolateHue(a, b, t) {
      var d = b - a;
      return a + t * (d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d);
  }
  function interpolateHcl(from, to, t) {
      return {
          h: interpolateHue(from.h, to.h, t),
          c: number(from.c, to.c, t),
          l: number(from.l, to.l, t),
          alpha: number(from.alpha, to.alpha, t)
      };
  }
  var lab = {
      forward: rgbToLab,
      reverse: labToRgb,
      interpolate: interpolateLab
  };
  var hcl = {
      forward: rgbToHcl,
      reverse: hclToRgb,
      interpolate: interpolateHcl
  };

  var colorSpaces = /*#__PURE__*/Object.freeze({
    __proto__: null,
    lab: lab,
    hcl: hcl
  });

  var Interpolate = function Interpolate(type, operator, interpolation, input, stops) {
      this.type = type;
      this.operator = operator;
      this.interpolation = interpolation;
      this.input = input;
      this.labels = [];
      this.outputs = [];
      for (var i = 0, list = stops; i < list.length; i += 1) {
          var ref = list[i];
          var label = ref[0];
          var expression = ref[1];
          this.labels.push(label);
          this.outputs.push(expression);
      }
  };
  Interpolate.interpolationFactor = function interpolationFactor(interpolation, input, lower, upper) {
      var t = 0;
      if (interpolation.name === 'exponential') {
          t = exponentialInterpolation(input, interpolation.base, lower, upper);
      } else if (interpolation.name === 'linear') {
          t = exponentialInterpolation(input, 1, lower, upper);
      } else if (interpolation.name === 'cubic-bezier') {
          var c = interpolation.controlPoints;
          var ub = new unitbezier(c[0], c[1], c[2], c[3]);
          t = ub.solve(exponentialInterpolation(input, 1, lower, upper));
      }
      return t;
  };
  Interpolate.parse = function parse(args, context) {
      var operator = args[0];
      var interpolation = args[1];
      var input = args[2];
      var rest = args.slice(3);
      if (!Array.isArray(interpolation) || interpolation.length === 0) {
          return context.error('Expected an interpolation type expression.', 1);
      }
      if (interpolation[0] === 'linear') {
          interpolation = { name: 'linear' };
      } else if (interpolation[0] === 'exponential') {
          var base = interpolation[1];
          if (typeof base !== 'number') {
              return context.error('Exponential interpolation requires a numeric base.', 1, 1);
          }
          interpolation = {
              name: 'exponential',
              base: base
          };
      } else if (interpolation[0] === 'cubic-bezier') {
          var controlPoints = interpolation.slice(1);
          if (controlPoints.length !== 4 || controlPoints.some(function (t) {
                  return typeof t !== 'number' || t < 0 || t > 1;
              })) {
              return context.error('Cubic bezier interpolation requires four numeric arguments with values between 0 and 1.', 1);
          }
          interpolation = {
              name: 'cubic-bezier',
              controlPoints: controlPoints
          };
      } else {
          return context.error('Unknown interpolation type ' + String(interpolation[0]), 1, 0);
      }
      if (args.length - 1 < 4) {
          return context.error('Expected at least 4 arguments, but found only ' + (args.length - 1) + '.');
      }
      if ((args.length - 1) % 2 !== 0) {
          return context.error('Expected an even number of arguments.');
      }
      input = context.parse(input, 2, NumberType);
      if (!input) {
          return null;
      }
      var stops = [];
      var outputType = null;
      if (operator === 'interpolate-hcl' || operator === 'interpolate-lab') {
          outputType = ColorType;
      } else if (context.expectedType && context.expectedType.kind !== 'value') {
          outputType = context.expectedType;
      }
      for (var i = 0; i < rest.length; i += 2) {
          var label = rest[i];
          var value = rest[i + 1];
          var labelKey = i + 3;
          var valueKey = i + 4;
          if (typeof label !== 'number') {
              return context.error('Input/output pairs for "interpolate" expressions must be defined using literal numeric values (not computed expressions) for the input values.', labelKey);
          }
          if (stops.length && stops[stops.length - 1][0] >= label) {
              return context.error('Input/output pairs for "interpolate" expressions must be arranged with input values in strictly ascending order.', labelKey);
          }
          var parsed = context.parse(value, valueKey, outputType);
          if (!parsed) {
              return null;
          }
          outputType = outputType || parsed.type;
          stops.push([
              label,
              parsed
          ]);
      }
      if (outputType.kind !== 'number' && outputType.kind !== 'color' && !(outputType.kind === 'array' && outputType.itemType.kind === 'number' && typeof outputType.N === 'number')) {
          return context.error('Type ' + toString$3(outputType) + ' is not interpolatable.');
      }
      return new Interpolate(outputType, operator, interpolation, input, stops);
  };
  Interpolate.prototype.evaluate = function evaluate(ctx) {
      var labels = this.labels;
      var outputs = this.outputs;
      if (labels.length === 1) {
          return outputs[0].evaluate(ctx);
      }
      var value = this.input.evaluate(ctx);
      if (value <= labels[0]) {
          return outputs[0].evaluate(ctx);
      }
      var stopCount = labels.length;
      if (value >= labels[stopCount - 1]) {
          return outputs[stopCount - 1].evaluate(ctx);
      }
      var index = findStopLessThanOrEqualTo(labels, value);
      var lower = labels[index];
      var upper = labels[index + 1];
      var t = Interpolate.interpolationFactor(this.interpolation, value, lower, upper);
      var outputLower = outputs[index].evaluate(ctx);
      var outputUpper = outputs[index + 1].evaluate(ctx);
      if (this.operator === 'interpolate') {
          return interpolate[this.type.kind.toLowerCase()](outputLower, outputUpper, t);
      } else if (this.operator === 'interpolate-hcl') {
          return hcl.reverse(hcl.interpolate(hcl.forward(outputLower), hcl.forward(outputUpper), t));
      } else {
          return lab.reverse(lab.interpolate(lab.forward(outputLower), lab.forward(outputUpper), t));
      }
  };
  Interpolate.prototype.eachChild = function eachChild(fn) {
      fn(this.input);
      for (var i = 0, list = this.outputs; i < list.length; i += 1) {
          var expression = list[i];
          fn(expression);
      }
  };
  Interpolate.prototype.outputDefined = function outputDefined() {
      return this.outputs.every(function (out) {
          return out.outputDefined();
      });
  };
  Interpolate.prototype.serialize = function serialize() {
      var interpolation;
      if (this.interpolation.name === 'linear') {
          interpolation = ['linear'];
      } else if (this.interpolation.name === 'exponential') {
          if (this.interpolation.base === 1) {
              interpolation = ['linear'];
          } else {
              interpolation = [
                  'exponential',
                  this.interpolation.base
              ];
          }
      } else {
          interpolation = ['cubic-bezier'].concat(this.interpolation.controlPoints);
      }
      var serialized = [
          this.operator,
          interpolation,
          this.input.serialize()
      ];
      for (var i = 0; i < this.labels.length; i++) {
          serialized.push(this.labels[i], this.outputs[i].serialize());
      }
      return serialized;
  };
  function exponentialInterpolation(input, base, lowerValue, upperValue) {
      var difference = upperValue - lowerValue;
      var progress = input - lowerValue;
      if (difference === 0) {
          return 0;
      } else if (base === 1) {
          return progress / difference;
      } else {
          return (Math.pow(base, progress) - 1) / (Math.pow(base, difference) - 1);
      }
  }

  var Coalesce = function Coalesce(type, args) {
      this.type = type;
      this.args = args;
  };
  Coalesce.parse = function parse(args, context) {
      if (args.length < 2) {
          return context.error('Expectected at least one argument.');
      }
      var outputType = null;
      var expectedType = context.expectedType;
      if (expectedType && expectedType.kind !== 'value') {
          outputType = expectedType;
      }
      var parsedArgs = [];
      for (var i = 0, list = args.slice(1); i < list.length; i += 1) {
          var arg = list[i];
          var parsed = context.parse(arg, 1 + parsedArgs.length, outputType, undefined, { typeAnnotation: 'omit' });
          if (!parsed) {
              return null;
          }
          outputType = outputType || parsed.type;
          parsedArgs.push(parsed);
      }
      var needsAnnotation = expectedType && parsedArgs.some(function (arg) {
          return checkSubtype(expectedType, arg.type);
      });
      return needsAnnotation ? new Coalesce(ValueType, parsedArgs) : new Coalesce(outputType, parsedArgs);
  };
  Coalesce.prototype.evaluate = function evaluate(ctx) {
      var result = null;
      var argCount = 0;
      var requestedImageName;
      for (var i = 0, list = this.args; i < list.length; i += 1) {
          var arg = list[i];
          argCount++;
          result = arg.evaluate(ctx);
          if (result && result instanceof ResolvedImage && !result.available) {
              if (!requestedImageName) {
                  requestedImageName = result.name;
              }
              result = null;
              if (argCount === this.args.length) {
                  result = requestedImageName;
              }
          }
          if (result !== null) {
              break;
          }
      }
      return result;
  };
  Coalesce.prototype.eachChild = function eachChild(fn) {
      this.args.forEach(fn);
  };
  Coalesce.prototype.outputDefined = function outputDefined() {
      return this.args.every(function (arg) {
          return arg.outputDefined();
      });
  };
  Coalesce.prototype.serialize = function serialize() {
      var serialized = ['coalesce'];
      this.eachChild(function (child) {
          serialized.push(child.serialize());
      });
      return serialized;
  };

  var Let = function Let(bindings, result) {
      this.type = result.type;
      this.bindings = [].concat(bindings);
      this.result = result;
  };
  Let.prototype.evaluate = function evaluate(ctx) {
      return this.result.evaluate(ctx);
  };
  Let.prototype.eachChild = function eachChild(fn) {
      for (var i = 0, list = this.bindings; i < list.length; i += 1) {
          var binding = list[i];
          fn(binding[1]);
      }
      fn(this.result);
  };
  Let.parse = function parse(args, context) {
      if (args.length < 4) {
          return context.error('Expected at least 3 arguments, but found ' + (args.length - 1) + ' instead.');
      }
      var bindings = [];
      for (var i = 1; i < args.length - 1; i += 2) {
          var name = args[i];
          if (typeof name !== 'string') {
              return context.error('Expected string, but found ' + typeof name + ' instead.', i);
          }
          if (/[^a-zA-Z0-9_]/.test(name)) {
              return context.error('Variable names must contain only alphanumeric characters or \'_\'.', i);
          }
          var value = context.parse(args[i + 1], i + 1);
          if (!value) {
              return null;
          }
          bindings.push([
              name,
              value
          ]);
      }
      var result = context.parse(args[args.length - 1], args.length - 1, context.expectedType, bindings);
      if (!result) {
          return null;
      }
      return new Let(bindings, result);
  };
  Let.prototype.outputDefined = function outputDefined() {
      return this.result.outputDefined();
  };
  Let.prototype.serialize = function serialize() {
      var serialized = ['let'];
      for (var i = 0, list = this.bindings; i < list.length; i += 1) {
          var ref = list[i];
          var name = ref[0];
          var expr = ref[1];
          serialized.push(name, expr.serialize());
      }
      serialized.push(this.result.serialize());
      return serialized;
  };

  var At = function At(type, index, input) {
      this.type = type;
      this.index = index;
      this.input = input;
  };
  At.parse = function parse(args, context) {
      if (args.length !== 3) {
          return context.error('Expected 2 arguments, but found ' + (args.length - 1) + ' instead.');
      }
      var index = context.parse(args[1], 1, NumberType);
      var input = context.parse(args[2], 2, array(context.expectedType || ValueType));
      if (!index || !input) {
          return null;
      }
      var t = input.type;
      return new At(t.itemType, index, input);
  };
  At.prototype.evaluate = function evaluate(ctx) {
      var index = this.index.evaluate(ctx);
      var array = this.input.evaluate(ctx);
      if (index < 0) {
          throw new RuntimeError('Array index out of bounds: ' + index + ' < 0.');
      }
      if (index >= array.length) {
          throw new RuntimeError('Array index out of bounds: ' + index + ' > ' + (array.length - 1) + '.');
      }
      if (index !== Math.floor(index)) {
          throw new RuntimeError('Array index must be an integer, but found ' + index + ' instead.');
      }
      return array[index];
  };
  At.prototype.eachChild = function eachChild(fn) {
      fn(this.index);
      fn(this.input);
  };
  At.prototype.outputDefined = function outputDefined() {
      return false;
  };
  At.prototype.serialize = function serialize() {
      return [
          'at',
          this.index.serialize(),
          this.input.serialize()
      ];
  };

  function isComparableType(type) {
      return type.kind === 'boolean' || type.kind === 'string' || type.kind === 'number' || type.kind === 'null' || type.kind === 'value';
  }
  function isComparableRuntimeValue(needle) {
      return typeof needle === 'boolean' || typeof needle === 'string' || typeof needle === 'number';
  }
  function isSearchableRuntimeValue(haystack) {
      return Array.isArray(haystack) || typeof haystack === 'string';
  }
  var In = function In(needle, haystack) {
      this.type = BooleanType;
      this.needle = needle;
      this.haystack = haystack;
  };
  In.parse = function parse(args, context) {
      if (args.length !== 3) {
          return context.error('Expected 2 arguments, but found ' + (args.length - 1) + ' instead.');
      }
      var needle = context.parse(args[1], 1, ValueType);
      var haystack = context.parse(args[2], 2, ValueType);
      if (!needle || !haystack) {
          return null;
      }
      if (!isComparableType(needle.type)) {
          return context.error('Expected first argument to be of type boolean, string, number or null, but found ' + toString$3(needle.type) + ' instead');
      }
      return new In(needle, haystack);
  };
  In.prototype.evaluate = function evaluate(ctx) {
      var needle = this.needle.evaluate(ctx);
      var haystack = this.haystack.evaluate(ctx);
      if (needle == null || !haystack) {
          return false;
      }
      if (!isComparableRuntimeValue(needle)) {
          throw new RuntimeError('Expected first argument to be of type boolean, string or number, but found ' + toString$3(typeOf(needle)) + ' instead.');
      }
      if (!isSearchableRuntimeValue(haystack)) {
          throw new RuntimeError('Expected second argument to be of type array or string, but found ' + toString$3(typeOf(haystack)) + ' instead.');
      }
      return haystack.indexOf(needle) >= 0;
  };
  In.prototype.eachChild = function eachChild(fn) {
      fn(this.needle);
      fn(this.haystack);
  };
  In.prototype.outputDefined = function outputDefined() {
      return true;
  };
  In.prototype.serialize = function serialize() {
      return [
          'in',
          this.needle.serialize(),
          this.haystack.serialize()
      ];
  };

  var Match = function Match(inputType, outputType, input, cases, outputs, otherwise) {
      this.inputType = inputType;
      this.type = outputType;
      this.input = input;
      this.cases = cases;
      this.outputs = outputs;
      this.otherwise = otherwise;
  };
  Match.parse = function parse(args, context) {
      if (args.length < 5) {
          return context.error('Expected at least 4 arguments, but found only ' + (args.length - 1) + '.');
      }
      if (args.length % 2 !== 1) {
          return context.error('Expected an even number of arguments.');
      }
      var inputType;
      var outputType;
      if (context.expectedType && context.expectedType.kind !== 'value') {
          outputType = context.expectedType;
      }
      var cases = {};
      var outputs = [];
      for (var i = 2; i < args.length - 1; i += 2) {
          var labels = args[i];
          var value = args[i + 1];
          if (!Array.isArray(labels)) {
              labels = [labels];
          }
          var labelContext = context.concat(i);
          if (labels.length === 0) {
              return labelContext.error('Expected at least one branch label.');
          }
          for (var i$1 = 0, list = labels; i$1 < list.length; i$1 += 1) {
              var label = list[i$1];
              if (typeof label !== 'number' && typeof label !== 'string') {
                  return labelContext.error('Branch labels must be numbers or strings.');
              } else if (typeof label === 'number' && Math.abs(label) > Number.MAX_SAFE_INTEGER) {
                  return labelContext.error('Branch labels must be integers no larger than ' + Number.MAX_SAFE_INTEGER + '.');
              } else if (typeof label === 'number' && Math.floor(label) !== label) {
                  return labelContext.error('Numeric branch labels must be integer values.');
              } else if (!inputType) {
                  inputType = typeOf(label);
              } else if (labelContext.checkSubtype(inputType, typeOf(label))) {
                  return null;
              }
              if (typeof cases[String(label)] !== 'undefined') {
                  return labelContext.error('Branch labels must be unique.');
              }
              cases[String(label)] = outputs.length;
          }
          var result = context.parse(value, i, outputType);
          if (!result) {
              return null;
          }
          outputType = outputType || result.type;
          outputs.push(result);
      }
      var input = context.parse(args[1], 1, ValueType);
      if (!input) {
          return null;
      }
      var otherwise = context.parse(args[args.length - 1], args.length - 1, outputType);
      if (!otherwise) {
          return null;
      }
      if (input.type.kind !== 'value' && context.concat(1).checkSubtype(inputType, input.type)) {
          return null;
      }
      return new Match(inputType, outputType, input, cases, outputs, otherwise);
  };
  Match.prototype.evaluate = function evaluate(ctx) {
      var input = this.input.evaluate(ctx);
      var output = typeOf(input) === this.inputType && this.outputs[this.cases[input]] || this.otherwise;
      return output.evaluate(ctx);
  };
  Match.prototype.eachChild = function eachChild(fn) {
      fn(this.input);
      this.outputs.forEach(fn);
      fn(this.otherwise);
  };
  Match.prototype.outputDefined = function outputDefined() {
      return this.outputs.every(function (out) {
          return out.outputDefined();
      }) && this.otherwise.outputDefined();
  };
  Match.prototype.serialize = function serialize() {
      var this$1 = this;
      var serialized = [
          'match',
          this.input.serialize()
      ];
      var sortedLabels = Object.keys(this.cases).sort();
      var groupedByOutput = [];
      var outputLookup = {};
      for (var i = 0, list = sortedLabels; i < list.length; i += 1) {
          var label = list[i];
          var outputIndex = outputLookup[this.cases[label]];
          if (outputIndex === undefined) {
              outputLookup[this.cases[label]] = groupedByOutput.length;
              groupedByOutput.push([
                  this.cases[label],
                  [label]
              ]);
          } else {
              groupedByOutput[outputIndex][1].push(label);
          }
      }
      var coerceLabel = function (label) {
          return this$1.inputType.kind === 'number' ? Number(label) : label;
      };
      for (var i$1 = 0, list$1 = groupedByOutput; i$1 < list$1.length; i$1 += 1) {
          var ref = list$1[i$1];
          var outputIndex = ref[0];
          var labels = ref[1];
          if (labels.length === 1) {
              serialized.push(coerceLabel(labels[0]));
          } else {
              serialized.push(labels.map(coerceLabel));
          }
          serialized.push(this.outputs[outputIndex$1].serialize());
      }
      serialized.push(this.otherwise.serialize());
      return serialized;
  };

  var Case = function Case(type, branches, otherwise) {
      this.type = type;
      this.branches = branches;
      this.otherwise = otherwise;
  };
  Case.parse = function parse(args, context) {
      if (args.length < 4) {
          return context.error('Expected at least 3 arguments, but found only ' + (args.length - 1) + '.');
      }
      if (args.length % 2 !== 0) {
          return context.error('Expected an odd number of arguments.');
      }
      var outputType;
      if (context.expectedType && context.expectedType.kind !== 'value') {
          outputType = context.expectedType;
      }
      var branches = [];
      for (var i = 1; i < args.length - 1; i += 2) {
          var test = context.parse(args[i], i, BooleanType);
          if (!test) {
              return null;
          }
          var result = context.parse(args[i + 1], i + 1, outputType);
          if (!result) {
              return null;
          }
          branches.push([
              test,
              result
          ]);
          outputType = outputType || result.type;
      }
      var otherwise = context.parse(args[args.length - 1], args.length - 1, outputType);
      if (!otherwise) {
          return null;
      }
      return new Case(outputType, branches, otherwise);
  };
  Case.prototype.evaluate = function evaluate(ctx) {
      for (var i = 0, list = this.branches; i < list.length; i += 1) {
          var ref = list[i];
          var test = ref[0];
          var expression = ref[1];
          if (test.evaluate(ctx)) {
              return expression.evaluate(ctx);
          }
      }
      return this.otherwise.evaluate(ctx);
  };
  Case.prototype.eachChild = function eachChild(fn) {
      for (var i = 0, list = this.branches; i < list.length; i += 1) {
          var ref = list[i];
          var test = ref[0];
          var expression = ref[1];
          fn(test);
          fn(expression);
      }
      fn(this.otherwise);
  };
  Case.prototype.outputDefined = function outputDefined() {
      return this.branches.every(function (ref) {
          var _ = ref[0];
          var out = ref[1];
          return out.outputDefined();
      }) && this.otherwise.outputDefined();
  };
  Case.prototype.serialize = function serialize() {
      var serialized = ['case'];
      this.eachChild(function (child) {
          serialized.push(child.serialize());
      });
      return serialized;
  };

  function isComparableType$1(op, type) {
      if (op === '==' || op === '!=') {
          return type.kind === 'boolean' || type.kind === 'string' || type.kind === 'number' || type.kind === 'null' || type.kind === 'value';
      } else {
          return type.kind === 'string' || type.kind === 'number' || type.kind === 'value';
      }
  }
  function eq(ctx, a, b) {
      return a === b;
  }
  function neq(ctx, a, b) {
      return a !== b;
  }
  function lt(ctx, a, b) {
      return a < b;
  }
  function gt(ctx, a, b) {
      return a > b;
  }
  function lteq(ctx, a, b) {
      return a <= b;
  }
  function gteq(ctx, a, b) {
      return a >= b;
  }
  function eqCollate(ctx, a, b, c) {
      return c.compare(a, b) === 0;
  }
  function neqCollate(ctx, a, b, c) {
      return !eqCollate(ctx, a, b, c);
  }
  function ltCollate(ctx, a, b, c) {
      return c.compare(a, b) < 0;
  }
  function gtCollate(ctx, a, b, c) {
      return c.compare(a, b) > 0;
  }
  function lteqCollate(ctx, a, b, c) {
      return c.compare(a, b) <= 0;
  }
  function gteqCollate(ctx, a, b, c) {
      return c.compare(a, b) >= 0;
  }
  function makeComparison(op, compareBasic, compareWithCollator) {
      var isOrderComparison = op !== '==' && op !== '!=';
      return function () {
          function Comparison(lhs, rhs, collator) {
              this.type = BooleanType;
              this.lhs = lhs;
              this.rhs = rhs;
              this.collator = collator;
              this.hasUntypedArgument = lhs.type.kind === 'value' || rhs.type.kind === 'value';
          }
          Comparison.parse = function parse(args, context) {
              if (args.length !== 3 && args.length !== 4) {
                  return context.error('Expected two or three arguments.');
              }
              var op = args[0];
              var lhs = context.parse(args[1], 1, ValueType);
              if (!lhs) {
                  return null;
              }
              if (!isComparableType$1(op, lhs.type)) {
                  return context.concat(1).error('"' + op + '" comparisons are not supported for type \'' + toString$3(lhs.type) + '\'.');
              }
              var rhs = context.parse(args[2], 2, ValueType);
              if (!rhs) {
                  return null;
              }
              if (!isComparableType$1(op, rhs.type)) {
                  return context.concat(2).error('"' + op + '" comparisons are not supported for type \'' + toString$3(rhs.type) + '\'.');
              }
              if (lhs.type.kind !== rhs.type.kind && lhs.type.kind !== 'value' && rhs.type.kind !== 'value') {
                  return context.error('Cannot compare types \'' + toString$3(lhs.type) + '\' and \'' + toString$3(rhs.type) + '\'.');
              }
              if (isOrderComparison) {
                  if (lhs.type.kind === 'value' && rhs.type.kind !== 'value') {
                      lhs = new Assertion(rhs.type, [lhs]);
                  } else if (lhs.type.kind !== 'value' && rhs.type.kind === 'value') {
                      rhs = new Assertion(lhs.type, [rhs]);
                  }
              }
              var collator = null;
              if (args.length === 4) {
                  if (lhs.type.kind !== 'string' && rhs.type.kind !== 'string' && lhs.type.kind !== 'value' && rhs.type.kind !== 'value') {
                      return context.error('Cannot use collator to compare non-string types.');
                  }
                  collator = context.parse(args[3], 3, CollatorType);
                  if (!collator) {
                      return null;
                  }
              }
              return new Comparison(lhs, rhs, collator);
          };
          Comparison.prototype.evaluate = function evaluate(ctx) {
              var lhs = this.lhs.evaluate(ctx);
              var rhs = this.rhs.evaluate(ctx);
              if (isOrderComparison && this.hasUntypedArgument) {
                  var lt = typeOf(lhs);
                  var rt = typeOf(rhs);
                  if (lt.kind !== rt.kind || !(lt.kind === 'string' || lt.kind === 'number')) {
                      throw new RuntimeError('Expected arguments for "' + op + '" to be (string, string) or (number, number), but found (' + lt.kind + ', ' + rt.kind + ') instead.');
                  }
              }
              if (this.collator && !isOrderComparison && this.hasUntypedArgument) {
                  var lt$1 = typeOf(lhs);
                  var rt$1 = typeOf(rhs);
                  if (lt$1.kind !== 'string' || rt$1.kind !== 'string') {
                      return compareBasic(ctx, lhs, rhs);
                  }
              }
              return this.collator ? compareWithCollator(ctx, lhs, rhs, this.collator.evaluate(ctx)) : compareBasic(ctx, lhs, rhs);
          };
          Comparison.prototype.eachChild = function eachChild(fn) {
              fn(this.lhs);
              fn(this.rhs);
              if (this.collator) {
                  fn(this.collator);
              }
          };
          Comparison.prototype.outputDefined = function outputDefined() {
              return true;
          };
          Comparison.prototype.serialize = function serialize() {
              var serialized = [op];
              this.eachChild(function (child) {
                  serialized.push(child.serialize());
              });
              return serialized;
          };
          return Comparison;
      }();
  }
  var Equals = makeComparison('==', eq, eqCollate);
  var NotEquals = makeComparison('!=', neq, neqCollate);
  var LessThan = makeComparison('<', lt, ltCollate);
  var GreaterThan = makeComparison('>', gt, gtCollate);
  var LessThanOrEqual = makeComparison('<=', lteq, lteqCollate);
  var GreaterThanOrEqual = makeComparison('>=', gteq, gteqCollate);

  var NumberFormat = function NumberFormat(number, locale, currency, minFractionDigits, maxFractionDigits) {
      this.type = StringType;
      this.number = number;
      this.locale = locale;
      this.currency = currency;
      this.minFractionDigits = minFractionDigits;
      this.maxFractionDigits = maxFractionDigits;
  };
  NumberFormat.parse = function parse(args, context) {
      if (args.length !== 3) {
          return context.error('Expected two arguments.');
      }
      var number = context.parse(args[1], 1, NumberType);
      if (!number) {
          return null;
      }
      var options = args[2];
      if (typeof options !== 'object' || Array.isArray(options)) {
          return context.error('NumberFormat options argument must be an object.');
      }
      var locale = null;
      if (options['locale']) {
          locale = context.parse(options['locale'], 1, StringType);
          if (!locale) {
              return null;
          }
      }
      var currency = null;
      if (options['currency']) {
          currency = context.parse(options['currency'], 1, StringType);
          if (!currency) {
              return null;
          }
      }
      var minFractionDigits = null;
      if (options['min-fraction-digits']) {
          minFractionDigits = context.parse(options['min-fraction-digits'], 1, NumberType);
          if (!minFractionDigits) {
              return null;
          }
      }
      var maxFractionDigits = null;
      if (options['max-fraction-digits']) {
          maxFractionDigits = context.parse(options['max-fraction-digits'], 1, NumberType);
          if (!maxFractionDigits) {
              return null;
          }
      }
      return new NumberFormat(number, locale, currency, minFractionDigits, maxFractionDigits);
  };
  NumberFormat.prototype.evaluate = function evaluate(ctx) {
      return new Intl.NumberFormat(this.locale ? this.locale.evaluate(ctx) : [], {
          style: this.currency ? 'currency' : 'decimal',
          currency: this.currency ? this.currency.evaluate(ctx) : undefined,
          minimumFractionDigits: this.minFractionDigits ? this.minFractionDigits.evaluate(ctx) : undefined,
          maximumFractionDigits: this.maxFractionDigits ? this.maxFractionDigits.evaluate(ctx) : undefined
      }).format(this.number.evaluate(ctx));
  };
  NumberFormat.prototype.eachChild = function eachChild(fn) {
      fn(this.number);
      if (this.locale) {
          fn(this.locale);
      }
      if (this.currency) {
          fn(this.currency);
      }
      if (this.minFractionDigits) {
          fn(this.minFractionDigits);
      }
      if (this.maxFractionDigits) {
          fn(this.maxFractionDigits);
      }
  };
  NumberFormat.prototype.outputDefined = function outputDefined() {
      return false;
  };
  NumberFormat.prototype.serialize = function serialize() {
      var options = {};
      if (this.locale) {
          options['locale'] = this.locale.serialize();
      }
      if (this.currency) {
          options['currency'] = this.currency.serialize();
      }
      if (this.minFractionDigits) {
          options['min-fraction-digits'] = this.minFractionDigits.serialize();
      }
      if (this.maxFractionDigits) {
          options['max-fraction-digits'] = this.maxFractionDigits.serialize();
      }
      return [
          'number-format',
          this.number.serialize(),
          options
      ];
  };

  var Length = function Length(input) {
      this.type = NumberType;
      this.input = input;
  };
  Length.parse = function parse(args, context) {
      if (args.length !== 2) {
          return context.error('Expected 1 argument, but found ' + (args.length - 1) + ' instead.');
      }
      var input = context.parse(args[1], 1);
      if (!input) {
          return null;
      }
      if (input.type.kind !== 'array' && input.type.kind !== 'string' && input.type.kind !== 'value') {
          return context.error('Expected argument of type string or array, but found ' + toString$3(input.type) + ' instead.');
      }
      return new Length(input);
  };
  Length.prototype.evaluate = function evaluate(ctx) {
      var input = this.input.evaluate(ctx);
      if (typeof input === 'string') {
          return input.length;
      } else if (Array.isArray(input)) {
          return input.length;
      } else {
          throw new RuntimeError('Expected value to be of type string or array, but found ' + toString$3(typeOf(input)) + ' instead.');
      }
  };
  Length.prototype.eachChild = function eachChild(fn) {
      fn(this.input);
  };
  Length.prototype.outputDefined = function outputDefined() {
      return false;
  };
  Length.prototype.serialize = function serialize() {
      var serialized = ['length'];
      this.eachChild(function (child) {
          serialized.push(child.serialize());
      });
      return serialized;
  };

  var expressions = {
      '==': Equals,
      '!=': NotEquals,
      '>': GreaterThan,
      '<': LessThan,
      '>=': GreaterThanOrEqual,
      '<=': LessThanOrEqual,
      'array': Assertion,
      'at': At,
      'boolean': Assertion,
      'case': Case,
      'coalesce': Coalesce,
      'collator': CollatorExpression,
      'format': FormatExpression,
      'image': ImageExpression,
      'in': In,
      'interpolate': Interpolate,
      'interpolate-hcl': Interpolate,
      'interpolate-lab': Interpolate,
      'length': Length,
      'let': Let,
      'literal': Literal,
      'match': Match,
      'number': Assertion,
      'number-format': NumberFormat,
      'object': Assertion,
      'step': Step,
      'string': Assertion,
      'to-boolean': Coercion,
      'to-color': Coercion,
      'to-number': Coercion,
      'to-string': Coercion,
      'var': Var,
      'within': Within
  };
  function rgba(ctx, ref) {
      var r = ref[0];
      var g = ref[1];
      var b = ref[2];
      var a = ref[3];
      r = r.evaluate(ctx);
      g = g.evaluate(ctx);
      b = b.evaluate(ctx);
      var alpha = a ? a.evaluate(ctx) : 1;
      var error = validateRGBA(r, g, b, alpha);
      if (error) {
          throw new RuntimeError(error);
      }
      return new Color(r / 255 * alpha, g / 255 * alpha, b / 255 * alpha, alpha);
  }
  function has$2(key, obj) {
      return key in obj;
  }
  function get$6(key, obj) {
      var v = obj[key];
      return typeof v === 'undefined' ? null : v;
  }
  function binarySearch$1(v, a, i, j) {
      while (i <= j) {
          var m = i + j >> 1;
          if (a[m] === v) {
              return true;
          }
          if (a[m] > v) {
              j = m - 1;
          } else {
              i = m + 1;
          }
      }
      return false;
  }
  function varargs(type) {
      return { type: type };
  }
  CompoundExpression.register(expressions, {
      'error': [
          ErrorType,
          [StringType],
          function (ctx, ref) {
              var v = ref[0];
              throw new RuntimeError(v.evaluate(ctx));
          }
      ],
      'typeof': [
          StringType,
          [ValueType],
          function (ctx, ref) {
              var v = ref[0];
              return toString$3(typeOf(v.evaluate(ctx)));
          }
      ],
      'to-rgba': [
          array(NumberType, 4),
          [ColorType],
          function (ctx, ref) {
              var v = ref[0];
              return v.evaluate(ctx).toArray();
          }
      ],
      'rgb': [
          ColorType,
          [
              NumberType,
              NumberType,
              NumberType
          ],
          rgba
      ],
      'rgba': [
          ColorType,
          [
              NumberType,
              NumberType,
              NumberType,
              NumberType
          ],
          rgba
      ],
      'has': {
          type: BooleanType,
          overloads: [
              [
                  [StringType],
                  function (ctx, ref) {
                      var key = ref[0];
                      return has$2(key.evaluate(ctx), ctx.properties());
                  }
              ],
              [
                  [
                      StringType,
                      ObjectType
                  ],
                  function (ctx, ref) {
                      var key = ref[0];
                      var obj = ref[1];
                      return has$2(key.evaluate(ctx), obj.evaluate(ctx));
                  }
              ]
          ]
      },
      'get': {
          type: ValueType,
          overloads: [
              [
                  [StringType],
                  function (ctx, ref) {
                      var key = ref[0];
                      return get$6(key.evaluate(ctx), ctx.properties());
                  }
              ],
              [
                  [
                      StringType,
                      ObjectType
                  ],
                  function (ctx, ref) {
                      var key = ref[0];
                      var obj = ref[1];
                      return get$6(key.evaluate(ctx), obj.evaluate(ctx));
                  }
              ]
          ]
      },
      'feature-state': [
          ValueType,
          [StringType],
          function (ctx, ref) {
              var key = ref[0];
              return get$6(key.evaluate(ctx), ctx.featureState || {});
          }
      ],
      'properties': [
          ObjectType,
          [],
          function (ctx) {
              return ctx.properties();
          }
      ],
      'geometry-type': [
          StringType,
          [],
          function (ctx) {
              return ctx.geometryType();
          }
      ],
      'id': [
          ValueType,
          [],
          function (ctx) {
              return ctx.id();
          }
      ],
      'zoom': [
          NumberType,
          [],
          function (ctx) {
              return ctx.globals.zoom;
          }
      ],
      'heatmap-density': [
          NumberType,
          [],
          function (ctx) {
              return ctx.globals.heatmapDensity || 0;
          }
      ],
      'line-progress': [
          NumberType,
          [],
          function (ctx) {
              return ctx.globals.lineProgress || 0;
          }
      ],
      'accumulated': [
          ValueType,
          [],
          function (ctx) {
              return ctx.globals.accumulated === undefined ? null : ctx.globals.accumulated;
          }
      ],
      '+': [
          NumberType,
          varargs(NumberType),
          function (ctx, args) {
              var result = 0;
              for (var i = 0, list = args; i < list.length; i += 1) {
                  var arg = list[i];
                  result += arg.evaluate(ctx);
              }
              return result;
          }
      ],
      '*': [
          NumberType,
          varargs(NumberType),
          function (ctx, args) {
              var result = 1;
              for (var i = 0, list = args; i < list.length; i += 1) {
                  var arg = list[i];
                  result *= arg.evaluate(ctx);
              }
              return result;
          }
      ],
      '-': {
          type: NumberType,
          overloads: [
              [
                  [
                      NumberType,
                      NumberType
                  ],
                  function (ctx, ref) {
                      var a = ref[0];
                      var b = ref[1];
                      return a.evaluate(ctx) - b.evaluate(ctx);
                  }
              ],
              [
                  [NumberType],
                  function (ctx, ref) {
                      var a = ref[0];
                      return -a.evaluate(ctx);
                  }
              ]
          ]
      },
      '/': [
          NumberType,
          [
              NumberType,
              NumberType
          ],
          function (ctx, ref) {
              var a = ref[0];
              var b = ref[1];
              return a.evaluate(ctx) / b.evaluate(ctx);
          }
      ],
      '%': [
          NumberType,
          [
              NumberType,
              NumberType
          ],
          function (ctx, ref) {
              var a = ref[0];
              var b = ref[1];
              return a.evaluate(ctx) % b.evaluate(ctx);
          }
      ],
      'ln2': [
          NumberType,
          [],
          function () {
              return Math.LN2;
          }
      ],
      'pi': [
          NumberType,
          [],
          function () {
              return Math.PI;
          }
      ],
      'e': [
          NumberType,
          [],
          function () {
              return Math.E;
          }
      ],
      '^': [
          NumberType,
          [
              NumberType,
              NumberType
          ],
          function (ctx, ref) {
              var b = ref[0];
              var e = ref[1];
              return Math.pow(b.evaluate(ctx), e.evaluate(ctx));
          }
      ],
      'sqrt': [
          NumberType,
          [NumberType],
          function (ctx, ref) {
              var x = ref[0];
              return Math.sqrt(x.evaluate(ctx));
          }
      ],
      'log10': [
          NumberType,
          [NumberType],
          function (ctx, ref) {
              var n = ref[0];
              return Math.log(n.evaluate(ctx)) / Math.LN10;
          }
      ],
      'ln': [
          NumberType,
          [NumberType],
          function (ctx, ref) {
              var n = ref[0];
              return Math.log(n.evaluate(ctx));
          }
      ],
      'log2': [
          NumberType,
          [NumberType],
          function (ctx, ref) {
              var n = ref[0];
              return Math.log(n.evaluate(ctx)) / Math.LN2;
          }
      ],
      'sin': [
          NumberType,
          [NumberType],
          function (ctx, ref) {
              var n = ref[0];
              return Math.sin(n.evaluate(ctx));
          }
      ],
      'cos': [
          NumberType,
          [NumberType],
          function (ctx, ref) {
              var n = ref[0];
              return Math.cos(n.evaluate(ctx));
          }
      ],
      'tan': [
          NumberType,
          [NumberType],
          function (ctx, ref) {
              var n = ref[0];
              return Math.tan(n.evaluate(ctx));
          }
      ],
      'asin': [
          NumberType,
          [NumberType],
          function (ctx, ref) {
              var n = ref[0];
              return Math.asin(n.evaluate(ctx));
          }
      ],
      'acos': [
          NumberType,
          [NumberType],
          function (ctx, ref) {
              var n = ref[0];
              return Math.acos(n.evaluate(ctx));
          }
      ],
      'atan': [
          NumberType,
          [NumberType],
          function (ctx, ref) {
              var n = ref[0];
              return Math.atan(n.evaluate(ctx));
          }
      ],
      'min': [
          NumberType,
          varargs(NumberType),
          function (ctx, args) {
              return Math.min.apply(Math, args.map(function (arg) {
                  return arg.evaluate(ctx);
              }));
          }
      ],
      'max': [
          NumberType,
          varargs(NumberType),
          function (ctx, args) {
              return Math.max.apply(Math, args.map(function (arg) {
                  return arg.evaluate(ctx);
              }));
          }
      ],
      'abs': [
          NumberType,
          [NumberType],
          function (ctx, ref) {
              var n = ref[0];
              return Math.abs(n.evaluate(ctx));
          }
      ],
      'round': [
          NumberType,
          [NumberType],
          function (ctx, ref) {
              var n = ref[0];
              var v = n.evaluate(ctx);
              return v < 0 ? -Math.round(-v) : Math.round(v);
          }
      ],
      'floor': [
          NumberType,
          [NumberType],
          function (ctx, ref) {
              var n = ref[0];
              return Math.floor(n.evaluate(ctx));
          }
      ],
      'ceil': [
          NumberType,
          [NumberType],
          function (ctx, ref) {
              var n = ref[0];
              return Math.ceil(n.evaluate(ctx));
          }
      ],
      'filter-==': [
          BooleanType,
          [
              StringType,
              ValueType
          ],
          function (ctx, ref) {
              var k = ref[0];
              var v = ref[1];
              return ctx.properties()[k.value] === v.value;
          }
      ],
      'filter-id-==': [
          BooleanType,
          [ValueType],
          function (ctx, ref) {
              var v = ref[0];
              return ctx.id() === v.value;
          }
      ],
      'filter-type-==': [
          BooleanType,
          [StringType],
          function (ctx, ref) {
              var v = ref[0];
              return ctx.geometryType() === v.value;
          }
      ],
      'filter-<': [
          BooleanType,
          [
              StringType,
              ValueType
          ],
          function (ctx, ref) {
              var k = ref[0];
              var v = ref[1];
              var a = ctx.properties()[k.value];
              var b = v.value;
              return typeof a === typeof b && a < b;
          }
      ],
      'filter-id-<': [
          BooleanType,
          [ValueType],
          function (ctx, ref) {
              var v = ref[0];
              var a = ctx.id();
              var b = v.value;
              return typeof a === typeof b && a < b;
          }
      ],
      'filter->': [
          BooleanType,
          [
              StringType,
              ValueType
          ],
          function (ctx, ref) {
              var k = ref[0];
              var v = ref[1];
              var a = ctx.properties()[k.value];
              var b = v.value;
              return typeof a === typeof b && a > b;
          }
      ],
      'filter-id->': [
          BooleanType,
          [ValueType],
          function (ctx, ref) {
              var v = ref[0];
              var a = ctx.id();
              var b = v.value;
              return typeof a === typeof b && a > b;
          }
      ],
      'filter-<=': [
          BooleanType,
          [
              StringType,
              ValueType
          ],
          function (ctx, ref) {
              var k = ref[0];
              var v = ref[1];
              var a = ctx.properties()[k.value];
              var b = v.value;
              return typeof a === typeof b && a <= b;
          }
      ],
      'filter-id-<=': [
          BooleanType,
          [ValueType],
          function (ctx, ref) {
              var v = ref[0];
              var a = ctx.id();
              var b = v.value;
              return typeof a === typeof b && a <= b;
          }
      ],
      'filter->=': [
          BooleanType,
          [
              StringType,
              ValueType
          ],
          function (ctx, ref) {
              var k = ref[0];
              var v = ref[1];
              var a = ctx.properties()[k.value];
              var b = v.value;
              return typeof a === typeof b && a >= b;
          }
      ],
      'filter-id->=': [
          BooleanType,
          [ValueType],
          function (ctx, ref) {
              var v = ref[0];
              var a = ctx.id();
              var b = v.value;
              return typeof a === typeof b && a >= b;
          }
      ],
      'filter-has': [
          BooleanType,
          [ValueType],
          function (ctx, ref) {
              var k = ref[0];
              return k.value in ctx.properties();
          }
      ],
      'filter-has-id': [
          BooleanType,
          [],
          function (ctx) {
              return ctx.id() !== null && ctx.id() !== undefined;
          }
      ],
      'filter-type-in': [
          BooleanType,
          [array(StringType)],
          function (ctx, ref) {
              var v = ref[0];
              return v.value.indexOf(ctx.geometryType()) >= 0;
          }
      ],
      'filter-id-in': [
          BooleanType,
          [array(ValueType)],
          function (ctx, ref) {
              var v = ref[0];
              return v.value.indexOf(ctx.id()) >= 0;
          }
      ],
      'filter-in-small': [
          BooleanType,
          [
              StringType,
              array(ValueType)
          ],
          function (ctx, ref) {
              var k = ref[0];
              var v = ref[1];
              return v.value.indexOf(ctx.properties()[k.value]) >= 0;
          }
      ],
      'filter-in-large': [
          BooleanType,
          [
              StringType,
              array(ValueType)
          ],
          function (ctx, ref) {
              var k = ref[0];
              var v = ref[1];
              return binarySearch$1(ctx.properties()[k.value], v.value, 0, v.value.length - 1);
          }
      ],
      'all': {
          type: BooleanType,
          overloads: [
              [
                  [
                      BooleanType,
                      BooleanType
                  ],
                  function (ctx, ref) {
                      var a = ref[0];
                      var b = ref[1];
                      return a.evaluate(ctx) && b.evaluate(ctx);
                  }
              ],
              [
                  varargs(BooleanType),
                  function (ctx, args) {
                      for (var i = 0, list = args; i < list.length; i += 1) {
                          var arg = list[i];
                          if (!arg.evaluate(ctx)) {
                              return false;
                          }
                      }
                      return true;
                  }
              ]
          ]
      },
      'any': {
          type: BooleanType,
          overloads: [
              [
                  [
                      BooleanType,
                      BooleanType
                  ],
                  function (ctx, ref) {
                      var a = ref[0];
                      var b = ref[1];
                      return a.evaluate(ctx) || b.evaluate(ctx);
                  }
              ],
              [
                  varargs(BooleanType),
                  function (ctx, args) {
                      for (var i = 0, list = args; i < list.length; i += 1) {
                          var arg = list[i];
                          if (arg.evaluate(ctx)) {
                              return true;
                          }
                      }
                      return false;
                  }
              ]
          ]
      },
      '!': [
          BooleanType,
          [BooleanType],
          function (ctx, ref) {
              var b = ref[0];
              return !b.evaluate(ctx);
          }
      ],
      'is-supported-script': [
          BooleanType,
          [StringType],
          function (ctx, ref) {
              var s = ref[0];
              var isSupportedScript = ctx.globals && ctx.globals.isSupportedScript;
              if (isSupportedScript) {
                  return isSupportedScript(s.evaluate(ctx));
              }
              return true;
          }
      ],
      'upcase': [
          StringType,
          [StringType],
          function (ctx, ref) {
              var s = ref[0];
              return s.evaluate(ctx).toUpperCase();
          }
      ],
      'downcase': [
          StringType,
          [StringType],
          function (ctx, ref) {
              var s = ref[0];
              return s.evaluate(ctx).toLowerCase();
          }
      ],
      'concat': [
          StringType,
          varargs(ValueType),
          function (ctx, args) {
              return args.map(function (arg) {
                  return toString$1$1(arg.evaluate(ctx));
              }).join('');
          }
      ],
      'resolved-locale': [
          StringType,
          [CollatorType],
          function (ctx, ref) {
              var collator = ref[0];
              return collator.evaluate(ctx).resolvedLocale();
          }
      ]
  });

  function success(value) {
      return {
          result: 'success',
          value: value
      };
  }
  function error(value) {
      return {
          result: 'error',
          value: value
      };
  }

  function supportsPropertyExpression(spec) {
      return spec['property-type'] === 'data-driven' || spec['property-type'] === 'cross-faded-data-driven';
  }
  function supportsZoomExpression(spec) {
      return !!spec.expression && spec.expression.parameters.indexOf('zoom') > -1;
  }
  function supportsInterpolation(spec) {
      return !!spec.expression && spec.expression.interpolated;
  }

  function getType(val) {
      if (val instanceof Number) {
          return 'number';
      } else if (val instanceof String) {
          return 'string';
      } else if (val instanceof Boolean) {
          return 'boolean';
      } else if (Array.isArray(val)) {
          return 'array';
      } else if (val === null) {
          return 'null';
      } else {
          return typeof val;
      }
  }

  function isFunction$1(value) {
      return typeof value === 'object' && value !== null && !Array.isArray(value);
  }
  function identityFunction(x) {
      return x;
  }
  function createFunction(parameters, propertySpec) {
      var isColor = propertySpec.type === 'color';
      var zoomAndFeatureDependent = parameters.stops && typeof parameters.stops[0][0] === 'object';
      var featureDependent = zoomAndFeatureDependent || parameters.property !== undefined;
      var zoomDependent = zoomAndFeatureDependent || !featureDependent;
      var type = parameters.type || (supportsInterpolation(propertySpec) ? 'exponential' : 'interval');
      if (isColor) {
          parameters = extend$2({}, parameters);
          if (parameters.stops) {
              parameters.stops = parameters.stops.map(function (stop) {
                  return [
                      stop[0],
                      Color.parse(stop[1])
                  ];
              });
          }
          if (parameters.default) {
              parameters.default = Color.parse(parameters.default);
          } else {
              parameters.default = Color.parse(propertySpec.default);
          }
      }
      if (parameters.colorSpace && parameters.colorSpace !== 'rgb' && !colorSpaces[parameters.colorSpace]) {
          throw new Error('Unknown color space: ' + parameters.colorSpace);
      }
      var innerFun;
      var hashedStops;
      var categoricalKeyType;
      if (type === 'exponential') {
          innerFun = evaluateExponentialFunction;
      } else if (type === 'interval') {
          innerFun = evaluateIntervalFunction;
      } else if (type === 'categorical') {
          innerFun = evaluateCategoricalFunction;
          hashedStops = Object.create(null);
          for (var i = 0, list = parameters.stops; i < list.length; i += 1) {
              var stop = list[i];
              hashedStops[stop[0]] = stop[1];
          }
          categoricalKeyType = typeof parameters.stops[0][0];
      } else if (type === 'identity') {
          innerFun = evaluateIdentityFunction;
      } else {
          throw new Error('Unknown function type "' + type + '"');
      }
      if (zoomAndFeatureDependent) {
          var featureFunctions = {};
          var zoomStops = [];
          for (var s = 0; s < parameters.stops.length; s++) {
              var stop$1 = parameters.stops[s];
              var zoom = stop$1[0].zoom;
              if (featureFunctions[zoom] === undefined) {
                  featureFunctions[zoom] = {
                      zoom: zoom,
                      type: parameters.type,
                      property: parameters.property,
                      default: parameters.default,
                      stops: []
                  };
                  zoomStops.push(zoom);
              }
              featureFunctions[zoom].stops.push([
                  stop$1[0].value,
                  stop$1[1]
              ]);
          }
          var featureFunctionStops = [];
          for (var i$1 = 0, list$1 = zoomStops; i$1 < list$1.length; i$1 += 1) {
              var z = list$1[i$1];
              featureFunctionStops.push([
                  featureFunctions[z].zoom,
                  createFunction(featureFunctions[z], propertySpec)
              ]);
          }
          var interpolationType = { name: 'linear' };
          return {
              kind: 'composite',
              interpolationType: interpolationType,
              interpolationFactor: Interpolate.interpolationFactor.bind(undefined, interpolationType),
              zoomStops: featureFunctionStops.map(function (s) {
                  return s[0];
              }),
              evaluate: function evaluate(ref, properties) {
                  var zoom = ref.zoom;
                  return evaluateExponentialFunction({
                      stops: featureFunctionStops,
                      base: parameters.base
                  }, propertySpec, zoom).evaluate(zoom, properties);
              }
          };
      } else if (zoomDependent) {
          var interpolationType$1 = type === 'exponential' ? {
              name: 'exponential',
              base: parameters.base !== undefined ? parameters.base : 1
          } : null;
          return {
              kind: 'camera',
              interpolationType: interpolationType$1,
              interpolationFactor: Interpolate.interpolationFactor.bind(undefined, interpolationType$1),
              zoomStops: parameters.stops.map(function (s) {
                  return s[0];
              }),
              evaluate: function (ref) {
                  var zoom = ref.zoom;
                  return innerFun(parameters, propertySpec, zoom, hashedStops, categoricalKeyType);
              }
          };
      } else {
          return {
              kind: 'source',
              evaluate: function evaluate(_, feature) {
                  var value = feature && feature.properties ? feature.properties[parameters.property] : undefined;
                  if (value === undefined) {
                      return coalesce(parameters.default, propertySpec.default);
                  }
                  return innerFun(parameters, propertySpec, value, hashedStops, categoricalKeyType);
              }
          };
      }
  }
  function coalesce(a, b, c) {
      if (a !== undefined) {
          return a;
      }
      if (b !== undefined) {
          return b;
      }
      if (c !== undefined) {
          return c;
      }
  }
  function evaluateCategoricalFunction(parameters, propertySpec, input, hashedStops, keyType) {
      var evaluated = typeof input === keyType ? hashedStops[input] : undefined;
      return coalesce(evaluated, parameters.default, propertySpec.default);
  }
  function evaluateIntervalFunction(parameters, propertySpec, input) {
      if (getType(input) !== 'number') {
          return coalesce(parameters.default, propertySpec.default);
      }
      var n = parameters.stops.length;
      if (n === 1) {
          return parameters.stops[0][1];
      }
      if (input <= parameters.stops[0][0]) {
          return parameters.stops[0][1];
      }
      if (input >= parameters.stops[n - 1][0]) {
          return parameters.stops[n - 1][1];
      }
      var index = findStopLessThanOrEqualTo(parameters.stops.map(function (stop) {
          return stop[0];
      }), input);
      return parameters.stops[index][1];
  }
  function evaluateExponentialFunction(parameters, propertySpec, input) {
      var base = parameters.base !== undefined ? parameters.base : 1;
      if (getType(input) !== 'number') {
          return coalesce(parameters.default, propertySpec.default);
      }
      var n = parameters.stops.length;
      if (n === 1) {
          return parameters.stops[0][1];
      }
      if (input <= parameters.stops[0][0]) {
          return parameters.stops[0][1];
      }
      if (input >= parameters.stops[n - 1][0]) {
          return parameters.stops[n - 1][1];
      }
      var index = findStopLessThanOrEqualTo(parameters.stops.map(function (stop) {
          return stop[0];
      }), input);
      var t = interpolationFactor(input, base, parameters.stops[index][0], parameters.stops[index + 1][0]);
      var outputLower = parameters.stops[index][1];
      var outputUpper = parameters.stops[index + 1][1];
      var interp = interpolate[propertySpec.type] || identityFunction;
      if (parameters.colorSpace && parameters.colorSpace !== 'rgb') {
          var colorspace = colorSpaces[parameters.colorSpace];
          interp = function (a, b) {
              return colorspace.reverse(colorspace.interpolate(colorspace.forward(a), colorspace.forward(b), t));
          };
      }
      if (typeof outputLower.evaluate === 'function') {
          return {
              evaluate: function evaluate() {
                  var args = [], len = arguments.length;
                  while (len--)
                      args[len] = arguments[len];
                  var evaluatedLower = outputLower.evaluate.apply(undefined, args);
                  var evaluatedUpper = outputUpper.evaluate.apply(undefined, args);
                  if (evaluatedLower === undefined || evaluatedUpper === undefined) {
                      return undefined;
                  }
                  return interp(evaluatedLower, evaluatedUpper, t);
              }
          };
      }
      return interp(outputLower, outputUpper, t);
  }
  function evaluateIdentityFunction(parameters, propertySpec, input) {
      if (propertySpec.type === 'color') {
          input = Color.parse(input);
      } else if (propertySpec.type === 'formatted') {
          input = Formatted.fromString(input.toString());
      } else if (propertySpec.type === 'resolvedImage') {
          input = ResolvedImage.fromString(input.toString());
      } else if (getType(input) !== propertySpec.type && (propertySpec.type !== 'enum' || !propertySpec.values[input])) {
          input = undefined;
      }
      return coalesce(input, parameters.default, propertySpec.default);
  }
  function interpolationFactor(input, base, lowerValue, upperValue) {
      var difference = upperValue - lowerValue;
      var progress = input - lowerValue;
      if (difference === 0) {
          return 0;
      } else if (base === 1) {
          return progress / difference;
      } else {
          return (Math.pow(base, progress) - 1) / (Math.pow(base, difference) - 1);
      }
  }

  var StyleExpression = function StyleExpression(expression, propertySpec) {
      this.expression = expression;
      this._warningHistory = {};
      this._evaluator = new EvaluationContext();
      this._defaultValue = propertySpec ? getDefaultValue(propertySpec) : null;
      this._enumValues = propertySpec && propertySpec.type === 'enum' ? propertySpec.values : null;
  };
  StyleExpression.prototype.evaluateWithoutErrorHandling = function evaluateWithoutErrorHandling(globals, feature, featureState, canonical, availableImages, formattedSection) {
      this._evaluator.globals = globals;
      this._evaluator.feature = feature;
      this._evaluator.featureState = featureState;
      this._evaluator.canonical = canonical;
      this._evaluator.availableImages = availableImages || null;
      this._evaluator.formattedSection = formattedSection;
      return this.expression.evaluate(this._evaluator);
  };
  StyleExpression.prototype.evaluate = function evaluate(globals, feature, featureState, canonical, availableImages, formattedSection) {
      this._evaluator.globals = globals;
      this._evaluator.feature = feature || null;
      this._evaluator.featureState = featureState || null;
      this._evaluator.canonical = canonical;
      this._evaluator.availableImages = availableImages || null;
      this._evaluator.formattedSection = formattedSection || null;
      try {
          var val = this.expression.evaluate(this._evaluator);
          if (val === null || val === undefined || typeof val === 'number' && val !== val) {
              return this._defaultValue;
          }
          if (this._enumValues && !(val in this._enumValues)) {
              throw new RuntimeError('Expected value to be one of ' + Object.keys(this._enumValues).map(function (v) {
                  return JSON.stringify(v);
              }).join(', ') + ', but found ' + JSON.stringify(val) + ' instead.');
          }
          return val;
      } catch (e) {
          if (!this._warningHistory[e.message]) {
              this._warningHistory[e.message] = true;
              if (typeof console !== 'undefined') {
                  console.warn(e.message);
              }
          }
          return this._defaultValue;
      }
  };
  function isExpression(expression) {
      return Array.isArray(expression) && expression.length > 0 && typeof expression[0] === 'string' && expression[0] in expressions;
  }
  function createExpression(expression, propertySpec) {
      var parser = new ParsingContext(expressions, [], propertySpec ? getExpectedType(propertySpec) : undefined);
      var parsed = parser.parse(expression, undefined, undefined, undefined, propertySpec && propertySpec.type === 'string' ? { typeAnnotation: 'coerce' } : undefined);
      if (!parsed) {
          return error(parser.errors);
      }
      return success(new StyleExpression(parsed, propertySpec));
  }
  var ZoomConstantExpression = function ZoomConstantExpression(kind, expression) {
      this.kind = kind;
      this._styleExpression = expression;
      this.isStateDependent = kind !== 'constant' && !isStateConstant(expression.expression);
  };
  ZoomConstantExpression.prototype.evaluateWithoutErrorHandling = function evaluateWithoutErrorHandling(globals, feature, featureState, canonical, availableImages, formattedSection) {
      return this._styleExpression.evaluateWithoutErrorHandling(globals, feature, featureState, canonical, availableImages, formattedSection);
  };
  ZoomConstantExpression.prototype.evaluate = function evaluate(globals, feature, featureState, canonical, availableImages, formattedSection) {
      return this._styleExpression.evaluate(globals, feature, featureState, canonical, availableImages, formattedSection);
  };
  var ZoomDependentExpression = function ZoomDependentExpression(kind, expression, zoomStops, interpolationType) {
      this.kind = kind;
      this.zoomStops = zoomStops;
      this._styleExpression = expression;
      this.isStateDependent = kind !== 'camera' && !isStateConstant(expression.expression);
      this.interpolationType = interpolationType;
  };
  ZoomDependentExpression.prototype.evaluateWithoutErrorHandling = function evaluateWithoutErrorHandling(globals, feature, featureState, canonical, availableImages, formattedSection) {
      return this._styleExpression.evaluateWithoutErrorHandling(globals, feature, featureState, canonical, availableImages, formattedSection);
  };
  ZoomDependentExpression.prototype.evaluate = function evaluate(globals, feature, featureState, canonical, availableImages, formattedSection) {
      return this._styleExpression.evaluate(globals, feature, featureState, canonical, availableImages, formattedSection);
  };
  ZoomDependentExpression.prototype.interpolationFactor = function interpolationFactor(input, lower, upper) {
      if (this.interpolationType) {
          return Interpolate.interpolationFactor(this.interpolationType, input, lower, upper);
      } else {
          return 0;
      }
  };
  function createPropertyExpression(expression, propertySpec) {
      expression = createExpression(expression, propertySpec);
      if (expression.result === 'error') {
          return expression;
      }
      var parsed = expression.value.expression;
      var isFeatureConstant$1 = isFeatureConstant(parsed);
      if (!isFeatureConstant$1 && !supportsPropertyExpression(propertySpec)) {
          return error([new ParsingError('', 'data expressions not supported')]);
      }
      var isZoomConstant = isGlobalPropertyConstant(parsed, ['zoom']);
      if (!isZoomConstant && !supportsZoomExpression(propertySpec)) {
          return error([new ParsingError('', 'zoom expressions not supported')]);
      }
      var zoomCurve = findZoomCurve(parsed);
      if (!zoomCurve && !isZoomConstant) {
          return error([new ParsingError('', '"zoom" expression may only be used as input to a top-level "step" or "interpolate" expression.')]);
      } else if (zoomCurve instanceof ParsingError) {
          return error([zoomCurve]);
      } else if (zoomCurve instanceof Interpolate && !supportsInterpolation(propertySpec)) {
          return error([new ParsingError('', '"interpolate" expressions cannot be used with this property')]);
      }
      if (!zoomCurve) {
          return success(isFeatureConstant$1 ? new ZoomConstantExpression('constant', expression.value) : new ZoomConstantExpression('source', expression.value));
      }
      var interpolationType = zoomCurve instanceof Interpolate ? zoomCurve.interpolation : undefined;
      return success(isFeatureConstant$1 ? new ZoomDependentExpression('camera', expression.value, zoomCurve.labels, interpolationType) : new ZoomDependentExpression('composite', expression.value, zoomCurve.labels, interpolationType));
  }
  var StylePropertyFunction = function StylePropertyFunction(parameters, specification) {
      this._parameters = parameters;
      this._specification = specification;
      extend$2(this, createFunction(this._parameters, this._specification));
  };
  StylePropertyFunction.deserialize = function deserialize(serialized) {
      return new StylePropertyFunction(serialized._parameters, serialized._specification);
  };
  StylePropertyFunction.serialize = function serialize(input) {
      return {
          _parameters: input._parameters,
          _specification: input._specification
      };
  };
  function normalizePropertyExpression(value, specification) {
      if (isFunction$1(value)) {
          return new StylePropertyFunction(value, specification);
      } else if (isExpression(value)) {
          var expression = createPropertyExpression(value, specification);
          if (expression.result === 'error') {
              throw new Error(expression.value.map(function (err) {
                  return err.key + ': ' + err.message;
              }).join(', '));
          }
          return expression.value;
      } else {
          var constant = value;
          if (typeof value === 'string' && specification.type === 'color') {
              constant = Color.parse(value);
          }
          return {
              kind: 'constant',
              evaluate: function () {
                  return constant;
              }
          };
      }
  }
  function findZoomCurve(expression) {
      var result = null;
      if (expression instanceof Let) {
          result = findZoomCurve(expression.result);
      } else if (expression instanceof Coalesce) {
          for (var i = 0, list = expression.args; i < list.length; i += 1) {
              var arg = list[i];
              result = findZoomCurve(arg);
              if (result) {
                  break;
              }
          }
      } else if ((expression instanceof Step || expression instanceof Interpolate) && expression.input instanceof CompoundExpression && expression.input.name === 'zoom') {
          result = expression;
      }
      if (result instanceof ParsingError) {
          return result;
      }
      expression.eachChild(function (child) {
          var childResult = findZoomCurve(child);
          if (childResult instanceof ParsingError) {
              result = childResult;
          } else if (!result && childResult) {
              result = new ParsingError('', '"zoom" expression may only be used as input to a top-level "step" or "interpolate" expression.');
          } else if (result && childResult && result !== childResult) {
              result = new ParsingError('', 'Only one zoom-based "step" or "interpolate" subexpression may be used in an expression.');
          }
      });
      return result;
  }
  function getExpectedType(spec) {
      var types = {
          color: ColorType,
          string: StringType,
          number: NumberType,
          enum: StringType,
          boolean: BooleanType,
          formatted: FormattedType,
          resolvedImage: ResolvedImageType
      };
      if (spec.type === 'array') {
          return array(types[spec.value] || ValueType, spec.length);
      }
      return types[spec.type];
  }
  function getDefaultValue(spec) {
      if (spec.type === 'color' && isFunction$1(spec.default)) {
          return new Color(0, 0, 0, 0);
      } else if (spec.type === 'color') {
          return Color.parse(spec.default) || null;
      } else if (spec.default === undefined) {
          return null;
      } else {
          return spec.default;
      }
  }

  function convertLiteral(value) {
      return typeof value === 'object' ? [
          'literal',
          value
      ] : value;
  }
  function convertFunction(parameters, propertySpec) {
      var stops = parameters.stops;
      if (!stops) {
          return convertIdentityFunction(parameters, propertySpec);
      }
      var zoomAndFeatureDependent = stops && typeof stops[0][0] === 'object';
      var featureDependent = zoomAndFeatureDependent || parameters.property !== undefined;
      var zoomDependent = zoomAndFeatureDependent || !featureDependent;
      stops = stops.map(function (stop) {
          if (!featureDependent && propertySpec.tokens && typeof stop[1] === 'string') {
              return [
                  stop[0],
                  convertTokenString(stop[1])
              ];
          }
          return [
              stop[0],
              convertLiteral(stop[1])
          ];
      });
      if (zoomAndFeatureDependent) {
          return convertZoomAndPropertyFunction(parameters, propertySpec, stops);
      } else if (zoomDependent) {
          return convertZoomFunction(parameters, propertySpec, stops);
      } else {
          return convertPropertyFunction(parameters, propertySpec, stops);
      }
  }
  function convertIdentityFunction(parameters, propertySpec) {
      var get = [
          'get',
          parameters.property
      ];
      if (parameters.default === undefined) {
          return propertySpec.type === 'string' ? [
              'string',
              get
          ] : get;
      } else if (propertySpec.type === 'enum') {
          return [
              'match',
              get,
              Object.keys(propertySpec.values),
              get,
              parameters.default
          ];
      } else {
          var expression = [
              propertySpec.type === 'color' ? 'to-color' : propertySpec.type,
              get,
              convertLiteral(parameters.default)
          ];
          if (propertySpec.type === 'array') {
              expression.splice(1, 0, propertySpec.value, propertySpec.length || null);
          }
          return expression;
      }
  }
  function getInterpolateOperator(parameters) {
      switch (parameters.colorSpace) {
      case 'hcl':
          return 'interpolate-hcl';
      case 'lab':
          return 'interpolate-lab';
      default:
          return 'interpolate';
      }
  }
  function convertZoomAndPropertyFunction(parameters, propertySpec, stops) {
      var featureFunctionParameters = {};
      var featureFunctionStops = {};
      var zoomStops = [];
      for (var s = 0; s < stops.length; s++) {
          var stop = stops[s];
          var zoom = stop[0].zoom;
          if (featureFunctionParameters[zoom] === undefined) {
              featureFunctionParameters[zoom] = {
                  zoom: zoom,
                  type: parameters.type,
                  property: parameters.property,
                  default: parameters.default
              };
              featureFunctionStops[zoom] = [];
              zoomStops.push(zoom);
          }
          featureFunctionStops[zoom].push([
              stop[0].value,
              stop[1]
          ]);
      }
      var functionType = getFunctionType({}, propertySpec);
      if (functionType === 'exponential') {
          var expression = [
              getInterpolateOperator(parameters),
              ['linear'],
              ['zoom']
          ];
          for (var i = 0, list = zoomStops; i < list.length; i += 1) {
              var z = list[i];
              var output = convertPropertyFunction(featureFunctionParameters[z], propertySpec, featureFunctionStops[z]);
              appendStopPair(expression, z, output, false);
          }
          return expression;
      } else {
          var expression$1 = [
              'step',
              ['zoom']
          ];
          for (var i$1 = 0, list$1 = zoomStops; i$1 < list$1.length; i$1 += 1) {
              var z$1 = list$1[i$1];
              var output$1 = convertPropertyFunction(featureFunctionParameters[z$1], propertySpec, featureFunctionStops[z$1]);
              appendStopPair(expression$1, z$1, output$1, true);
          }
          fixupDegenerateStepCurve(expression$1);
          return expression$1;
      }
  }
  function coalesce$1(a, b) {
      if (a !== undefined) {
          return a;
      }
      if (b !== undefined) {
          return b;
      }
  }
  function convertPropertyFunction(parameters, propertySpec, stops) {
      var type = getFunctionType(parameters, propertySpec);
      var get = [
          'get',
          parameters.property
      ];
      if (type === 'categorical' && typeof stops[0][0] === 'boolean') {
          var expression = ['case'];
          for (var i = 0, list = stops; i < list.length; i += 1) {
              var stop = list[i];
              expression.push([
                  '==',
                  get,
                  stop[0]
              ], stop[1]);
          }
          expression.push(convertLiteral(coalesce$1(parameters.default, propertySpec.default)));
          return expression;
      } else if (type === 'categorical') {
          var expression$1 = [
              'match',
              get
          ];
          for (var i$1 = 0, list$1 = stops; i$1 < list$1.length; i$1 += 1) {
              var stop$1 = list$1[i$1];
              appendStopPair(expression$1, stop$1[0], stop$1[1], false);
          }
          expression$1.push(convertLiteral(coalesce$1(parameters.default, propertySpec.default)));
          return expression$1;
      } else if (type === 'interval') {
          var expression$2 = [
              'step',
              [
                  'number',
                  get
              ]
          ];
          for (var i$2 = 0, list$2 = stops; i$2 < list$2.length; i$2 += 1) {
              var stop$2 = list$2[i$2];
              appendStopPair(expression$2, stop$2[0], stop$2[1], true);
          }
          fixupDegenerateStepCurve(expression$2);
          return parameters.default === undefined ? expression$2 : [
              'case',
              [
                  '==',
                  [
                      'typeof',
                      get
                  ],
                  'number'
              ],
              expression$2,
              convertLiteral(parameters.default)
          ];
      } else if (type === 'exponential') {
          var base = parameters.base !== undefined ? parameters.base : 1;
          var expression$3 = [
              getInterpolateOperator(parameters),
              base === 1 ? ['linear'] : [
                  'exponential',
                  base
              ],
              [
                  'number',
                  get
              ]
          ];
          for (var i$3 = 0, list$3 = stops; i$3 < list$3.length; i$3 += 1) {
              var stop$3 = list$3[i$3];
              appendStopPair(expression$3, stop$3[0], stop$3[1], false);
          }
          return parameters.default === undefined ? expression$3 : [
              'case',
              [
                  '==',
                  [
                      'typeof',
                      get
                  ],
                  'number'
              ],
              expression$3,
              convertLiteral(parameters.default)
          ];
      } else {
          throw new Error('Unknown property function type ' + type);
      }
  }
  function convertZoomFunction(parameters, propertySpec, stops, input) {
      if (input === void 0)
          input = ['zoom'];
      var type = getFunctionType(parameters, propertySpec);
      var expression;
      var isStep = false;
      if (type === 'interval') {
          expression = [
              'step',
              input
          ];
          isStep = true;
      } else if (type === 'exponential') {
          var base = parameters.base !== undefined ? parameters.base : 1;
          expression = [
              getInterpolateOperator(parameters),
              base === 1 ? ['linear'] : [
                  'exponential',
                  base
              ],
              input
          ];
      } else {
          throw new Error('Unknown zoom function type "' + type + '"');
      }
      for (var i = 0, list = stops; i < list.length; i += 1) {
          var stop = list[i];
          appendStopPair(expression, stop[0], stop[1], isStep);
      }
      fixupDegenerateStepCurve(expression);
      return expression;
  }
  function fixupDegenerateStepCurve(expression) {
      if (expression[0] === 'step' && expression.length === 3) {
          expression.push(0);
          expression.push(expression[3]);
      }
  }
  function appendStopPair(curve, input, output, isStep) {
      if (curve.length > 3 && input === curve[curve.length - 2]) {
          return;
      }
      if (!(isStep && curve.length === 2)) {
          curve.push(input);
      }
      curve.push(output);
  }
  function getFunctionType(parameters, propertySpec) {
      if (parameters.type) {
          return parameters.type;
      } else {
          return propertySpec.expression.interpolated ? 'exponential' : 'interval';
      }
  }
  function convertTokenString(s) {
      var result = ['concat'];
      var re = /{([^{}]+)}/g;
      var pos = 0;
      for (var match = re.exec(s); match !== null; match = re.exec(s)) {
          var literal = s.slice(pos, re.lastIndex - match[0].length);
          pos = re.lastIndex;
          if (literal.length > 0) {
              result.push(literal);
          }
          result.push([
              'get',
              match[1]
          ]);
      }
      if (result.length === 1) {
          return s;
      }
      if (pos < s.length) {
          result.push(s.slice(pos));
      } else if (result.length === 2) {
          return [
              'to-string',
              result[1]
          ];
      }
      return result;
  }

  function isExpressionFilter(filter) {
      if (filter === true || filter === false) {
          return true;
      }
      if (!Array.isArray(filter) || filter.length === 0) {
          return false;
      }
      switch (filter[0]) {
      case 'has':
          return filter.length >= 2 && filter[1] !== '$id' && filter[1] !== '$type';
      case 'in':
          return filter.length >= 3 && (typeof filter[1] !== 'string' || Array.isArray(filter[2]));
      case '!in':
      case '!has':
      case 'none':
          return false;
      case '==':
      case '!=':
      case '>':
      case '>=':
      case '<':
      case '<=':
          return filter.length !== 3 || (Array.isArray(filter[1]) || Array.isArray(filter[2]));
      case 'any':
      case 'all':
          for (var i = 0, list = filter.slice(1); i < list.length; i += 1) {
              var f = list[i];
              if (!isExpressionFilter(f) && typeof f !== 'boolean') {
                  return false;
              }
          }
          return true;
      default:
          return true;
      }
  }
  var filterSpec = {
      'type': 'boolean',
      'default': false,
      'transition': false,
      'property-type': 'data-driven',
      'expression': {
          'interpolated': false,
          'parameters': [
              'zoom',
              'feature'
          ]
      }
  };
  function createFilter(filter) {
      if (filter === null || filter === undefined) {
          return {
              filter: function () {
                  return true;
              },
              needGeometry: false
          };
      }
      if (!isExpressionFilter(filter)) {
          filter = convertFilter(filter);
      }
      var compiled = createExpression(filter, filterSpec);
      if (compiled.result === 'error') {
          throw new Error(compiled.value.map(function (err) {
              return err.key + ': ' + err.message;
          }).join(', '));
      } else {
          var needGeometry = Array.isArray(filter) && filter.length !== 0 && filter[0] === 'within';
          return {
              filter: function (globalProperties, feature, canonical) {
                  return compiled.value.evaluate(globalProperties, feature, {}, canonical);
              },
              needGeometry: needGeometry
          };
      }
  }
  function compare(a, b) {
      return a < b ? -1 : a > b ? 1 : 0;
  }
  function convertFilter(filter) {
      if (!filter) {
          return true;
      }
      var op = filter[0];
      if (filter.length <= 1) {
          return op !== 'any';
      }
      var converted = op === '==' ? convertComparisonOp(filter[1], filter[2], '==') : op === '!=' ? convertNegation(convertComparisonOp(filter[1], filter[2], '==')) : op === '<' || op === '>' || op === '<=' || op === '>=' ? convertComparisonOp(filter[1], filter[2], op) : op === 'any' ? convertDisjunctionOp(filter.slice(1)) : op === 'all' ? ['all'].concat(filter.slice(1).map(convertFilter)) : op === 'none' ? ['all'].concat(filter.slice(1).map(convertFilter).map(convertNegation)) : op === 'in' ? convertInOp(filter[1], filter.slice(2)) : op === '!in' ? convertNegation(convertInOp(filter[1], filter.slice(2))) : op === 'has' ? convertHasOp(filter[1]) : op === '!has' ? convertNegation(convertHasOp(filter[1])) : true;
      return converted;
  }
  function convertComparisonOp(property, value, op) {
      switch (property) {
      case '$type':
          return [
              'filter-type-' + op,
              value
          ];
      case '$id':
          return [
              'filter-id-' + op,
              value
          ];
      default:
          return [
              'filter-' + op,
              property,
              value
          ];
      }
  }
  function convertDisjunctionOp(filters) {
      return ['any'].concat(filters.map(convertFilter));
  }
  function convertInOp(property, values) {
      if (values.length === 0) {
          return false;
      }
      switch (property) {
      case '$type':
          return [
              'filter-type-in',
              [
                  'literal',
                  values
              ]
          ];
      case '$id':
          return [
              'filter-id-in',
              [
                  'literal',
                  values
              ]
          ];
      default:
          if (values.length > 200 && !values.some(function (v) {
                  return typeof v !== typeof values[0];
              })) {
              return [
                  'filter-in-large',
                  property,
                  [
                      'literal',
                      values.sort(compare)
                  ]
              ];
          } else {
              return [
                  'filter-in-small',
                  property,
                  [
                      'literal',
                      values
                  ]
              ];
          }
      }
  }
  function convertHasOp(property) {
      switch (property) {
      case '$type':
          return true;
      case '$id':
          return ['filter-has-id'];
      default:
          return [
              'filter-has',
              property
          ];
      }
  }
  function convertNegation(filter) {
      return [
          '!',
          filter
      ];
  }

  var refProperties = [
      'type',
      'source',
      'source-layer',
      'minzoom',
      'maxzoom',
      'filter',
      'layout'
  ];

  function deref(layer, parent) {
      var result = {};
      for (var k in layer) {
          if (k !== 'ref') {
              result[k] = layer[k];
          }
      }
      refProperties.forEach(function (k) {
          if (k in parent) {
              result[k] = parent[k];
          }
      });
      return result;
  }
  function derefLayers(layers) {
      layers = layers.slice();
      var map = Object.create(null);
      for (var i = 0; i < layers.length; i++) {
          map[layers[i].id] = layers[i];
      }
      for (var i$1 = 0; i$1 < layers.length; i$1++) {
          if ('ref' in layers[i$1]) {
              layers[i$1] = deref(layers[i$1], map[layers[i$1].ref]);
          }
      }
      return layers;
  }

  var jsonlint = createCommonjsModule$1(function (module, exports) {
  /* parser generated by jison 0.4.15 */
  /*
    Returns a Parser object of the following structure:

    Parser: {
      yy: {}
    }

    Parser.prototype: {
      yy: {},
      trace: function(),
      symbols_: {associative list: name ==> number},
      terminals_: {associative list: number ==> name},
      productions_: [...],
      performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
      table: [...],
      defaultActions: {...},
      parseError: function(str, hash),
      parse: function(input),

      lexer: {
          EOF: 1,
          parseError: function(str, hash),
          setInput: function(input),
          input: function(),
          unput: function(str),
          more: function(),
          less: function(n),
          pastInput: function(),
          upcomingInput: function(),
          showPosition: function(),
          test_match: function(regex_match_array, rule_index),
          next: function(),
          lex: function(),
          begin: function(condition),
          popState: function(),
          _currentRules: function(),
          topState: function(),
          pushState: function(condition),

          options: {
              ranges: boolean           (optional: true ==> token location info will include a .range[] member)
              flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
              backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
          },

          performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
          rules: [...],
          conditions: {associative list: name ==> set},
      }
    }


    token location info (@$, _$, etc.): {
      first_line: n,
      last_line: n,
      first_column: n,
      last_column: n,
      range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
    }


    the parseError function receives a 'hash' object with these members for lexer and parser errors: {
      text:        (matched text)
      token:       (the produced terminal token, if any)
      line:        (yylineno)
    }
    while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
      loc:         (yylloc)
      expected:    (string describing the set of expected tokens)
      recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
    }
  */
  var parser = (function(){
  var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v){ }return o},$V0=[1,12],$V1=[1,13],$V2=[1,9],$V3=[1,10],$V4=[1,11],$V5=[1,14],$V6=[1,15],$V7=[14,18,22,24],$V8=[18,22],$V9=[22,24];
  var parser = {trace: function trace() { },
  yy: {},
  symbols_: {"error":2,"JSONString":3,"STRING":4,"JSONNumber":5,"NUMBER":6,"JSONNullLiteral":7,"NULL":8,"JSONBooleanLiteral":9,"TRUE":10,"FALSE":11,"JSONText":12,"JSONValue":13,"EOF":14,"JSONObject":15,"JSONArray":16,"{":17,"}":18,"JSONMemberList":19,"JSONMember":20,":":21,",":22,"[":23,"]":24,"JSONElementList":25,"$accept":0,"$end":1},
  terminals_: {2:"error",4:"STRING",6:"NUMBER",8:"NULL",10:"TRUE",11:"FALSE",14:"EOF",17:"{",18:"}",21:":",22:",",23:"[",24:"]"},
  productions_: [0,[3,1],[5,1],[7,1],[9,1],[9,1],[12,2],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[15,2],[15,3],[20,3],[19,1],[19,3],[16,2],[16,3],[25,1],[25,3]],
  performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
  /* this == yyval */

  var $0 = $$.length - 1;
  switch (yystate) {
  case 1:
   // replace escaped characters with actual character
            this.$ = new String(yytext.replace(/\\(\\|")/g, "$"+"1")
                       .replace(/\\n/g,'\n')
                       .replace(/\\r/g,'\r')
                       .replace(/\\t/g,'\t')
                       .replace(/\\v/g,'\v')
                       .replace(/\\f/g,'\f')
                       .replace(/\\b/g,'\b'));
            this.$.__line__ =  this._$.first_line;
          
  break;
  case 2:

              this.$ = new Number(yytext);
              this.$.__line__ =  this._$.first_line;
          
  break;
  case 3:

              this.$ = null;
          
  break;
  case 4:

              this.$ = new Boolean(true);
              this.$.__line__ = this._$.first_line;
          
  break;
  case 5:

              this.$ = new Boolean(false);
              this.$.__line__ = this._$.first_line;
          
  break;
  case 6:
  return this.$ = $$[$0-1];
  case 13:
  this.$ = {}; Object.defineProperty(this.$, '__line__', {
              value: this._$.first_line,
              enumerable: false
          });
  break;
  case 14: case 19:
  this.$ = $$[$0-1]; Object.defineProperty(this.$, '__line__', {
              value: this._$.first_line,
              enumerable: false
          });
  break;
  case 15:
  this.$ = [$$[$0-2], $$[$0]];
  break;
  case 16:
  this.$ = {}; this.$[$$[$0][0]] = $$[$0][1];
  break;
  case 17:
  this.$ = $$[$0-2]; $$[$0-2][$$[$0][0]] = $$[$0][1];
  break;
  case 18:
  this.$ = []; Object.defineProperty(this.$, '__line__', {
              value: this._$.first_line,
              enumerable: false
          });
  break;
  case 20:
  this.$ = [$$[$0]];
  break;
  case 21:
  this.$ = $$[$0-2]; $$[$0-2].push($$[$0]);
  break;
  }
  },
  table: [{3:5,4:$V0,5:6,6:$V1,7:3,8:$V2,9:4,10:$V3,11:$V4,12:1,13:2,15:7,16:8,17:$V5,23:$V6},{1:[3]},{14:[1,16]},o($V7,[2,7]),o($V7,[2,8]),o($V7,[2,9]),o($V7,[2,10]),o($V7,[2,11]),o($V7,[2,12]),o($V7,[2,3]),o($V7,[2,4]),o($V7,[2,5]),o([14,18,21,22,24],[2,1]),o($V7,[2,2]),{3:20,4:$V0,18:[1,17],19:18,20:19},{3:5,4:$V0,5:6,6:$V1,7:3,8:$V2,9:4,10:$V3,11:$V4,13:23,15:7,16:8,17:$V5,23:$V6,24:[1,21],25:22},{1:[2,6]},o($V7,[2,13]),{18:[1,24],22:[1,25]},o($V8,[2,16]),{21:[1,26]},o($V7,[2,18]),{22:[1,28],24:[1,27]},o($V9,[2,20]),o($V7,[2,14]),{3:20,4:$V0,20:29},{3:5,4:$V0,5:6,6:$V1,7:3,8:$V2,9:4,10:$V3,11:$V4,13:30,15:7,16:8,17:$V5,23:$V6},o($V7,[2,19]),{3:5,4:$V0,5:6,6:$V1,7:3,8:$V2,9:4,10:$V3,11:$V4,13:31,15:7,16:8,17:$V5,23:$V6},o($V8,[2,17]),o($V8,[2,15]),o($V9,[2,21])],
  defaultActions: {16:[2,6]},
  parseError: function parseError(str, hash) {
      if (hash.recoverable) {
          this.trace(str);
      } else {
          throw new Error(str);
      }
  },
  parse: function parse(input) {
      var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, TERROR = 2, EOF = 1;
      var args = lstack.slice.call(arguments, 1);
      var lexer = Object.create(this.lexer);
      var sharedState = { yy: {} };
      for (var k in this.yy) {
          if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
              sharedState.yy[k] = this.yy[k];
          }
      }
      lexer.setInput(input, sharedState.yy);
      sharedState.yy.lexer = lexer;
      sharedState.yy.parser = this;
      if (typeof lexer.yylloc == 'undefined') {
          lexer.yylloc = {};
      }
      var yyloc = lexer.yylloc;
      lstack.push(yyloc);
      var ranges = lexer.options && lexer.options.ranges;
      if (typeof sharedState.yy.parseError === 'function') {
          this.parseError = sharedState.yy.parseError;
      } else {
          this.parseError = Object.getPrototypeOf(this).parseError;
      }
      
          function lex() {
              var token;
              token = lexer.lex() || EOF;
              if (typeof token !== 'number') {
                  token = self.symbols_[token] || token;
              }
              return token;
          }
      var symbol, state, action, r, yyval = {}, p, len, newState, expected;
      while (true) {
          state = stack[stack.length - 1];
          if (this.defaultActions[state]) {
              action = this.defaultActions[state];
          } else {
              if (symbol === null || typeof symbol == 'undefined') {
                  symbol = lex();
              }
              action = table[state] && table[state][symbol];
          }
                      if (typeof action === 'undefined' || !action.length || !action[0]) {
                  var errStr = '';
                  expected = [];
                  for (p in table[state]) {
                      if (this.terminals_[p] && p > TERROR) {
                          expected.push('\'' + this.terminals_[p] + '\'');
                      }
                  }
                  if (lexer.showPosition) {
                      errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                  } else {
                      errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                  }
                  this.parseError(errStr, {
                      text: lexer.match,
                      token: this.terminals_[symbol] || symbol,
                      line: lexer.yylineno,
                      loc: yyloc,
                      expected: expected
                  });
              }
          if (action[0] instanceof Array && action.length > 1) {
              throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
          }
          switch (action[0]) {
          case 1:
              stack.push(symbol);
              vstack.push(lexer.yytext);
              lstack.push(lexer.yylloc);
              stack.push(action[1]);
              symbol = null;
              {
                  yyleng = lexer.yyleng;
                  yytext = lexer.yytext;
                  yylineno = lexer.yylineno;
                  yyloc = lexer.yylloc;
              }
              break;
          case 2:
              len = this.productions_[action[1]][1];
              yyval.$ = vstack[vstack.length - len];
              yyval._$ = {
                  first_line: lstack[lstack.length - (len || 1)].first_line,
                  last_line: lstack[lstack.length - 1].last_line,
                  first_column: lstack[lstack.length - (len || 1)].first_column,
                  last_column: lstack[lstack.length - 1].last_column
              };
              if (ranges) {
                  yyval._$.range = [
                      lstack[lstack.length - (len || 1)].range[0],
                      lstack[lstack.length - 1].range[1]
                  ];
              }
              r = this.performAction.apply(yyval, [
                  yytext,
                  yyleng,
                  yylineno,
                  sharedState.yy,
                  action[1],
                  vstack,
                  lstack
              ].concat(args));
              if (typeof r !== 'undefined') {
                  return r;
              }
              if (len) {
                  stack = stack.slice(0, -1 * len * 2);
                  vstack = vstack.slice(0, -1 * len);
                  lstack = lstack.slice(0, -1 * len);
              }
              stack.push(this.productions_[action[1]][0]);
              vstack.push(yyval.$);
              lstack.push(yyval._$);
              newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
              stack.push(newState);
              break;
          case 3:
              return true;
          }
      }
      return true;
  }};
  /* generated by jison-lex 0.3.4 */
  var lexer = (function(){
  var lexer = ({

  EOF:1,

  parseError:function parseError(str, hash) {
          if (this.yy.parser) {
              this.yy.parser.parseError(str, hash);
          } else {
              throw new Error(str);
          }
      },

  // resets the lexer, sets new input
  setInput:function (input, yy) {
          this.yy = yy || this.yy || {};
          this._input = input;
          this._more = this._backtrack = this.done = false;
          this.yylineno = this.yyleng = 0;
          this.yytext = this.matched = this.match = '';
          this.conditionStack = ['INITIAL'];
          this.yylloc = {
              first_line: 1,
              first_column: 0,
              last_line: 1,
              last_column: 0
          };
          if (this.options.ranges) {
              this.yylloc.range = [0,0];
          }
          this.offset = 0;
          return this;
      },

  // consumes and returns one char from the input
  input:function () {
          var ch = this._input[0];
          this.yytext += ch;
          this.yyleng++;
          this.offset++;
          this.match += ch;
          this.matched += ch;
          var lines = ch.match(/(?:\r\n?|\n).*/g);
          if (lines) {
              this.yylineno++;
              this.yylloc.last_line++;
          } else {
              this.yylloc.last_column++;
          }
          if (this.options.ranges) {
              this.yylloc.range[1]++;
          }

          this._input = this._input.slice(1);
          return ch;
      },

  // unshifts one char (or a string) into the input
  unput:function (ch) {
          var len = ch.length;
          var lines = ch.split(/(?:\r\n?|\n)/g);

          this._input = ch + this._input;
          this.yytext = this.yytext.substr(0, this.yytext.length - len);
          //this.yyleng -= len;
          this.offset -= len;
          var oldLines = this.match.split(/(?:\r\n?|\n)/g);
          this.match = this.match.substr(0, this.match.length - 1);
          this.matched = this.matched.substr(0, this.matched.length - 1);

          if (lines.length - 1) {
              this.yylineno -= lines.length - 1;
          }
          var r = this.yylloc.range;

          this.yylloc = {
              first_line: this.yylloc.first_line,
              last_line: this.yylineno + 1,
              first_column: this.yylloc.first_column,
              last_column: lines ?
                  (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                   + oldLines[oldLines.length - lines.length].length - lines[0].length :
                this.yylloc.first_column - len
          };

          if (this.options.ranges) {
              this.yylloc.range = [r[0], r[0] + this.yyleng - len];
          }
          this.yyleng = this.yytext.length;
          return this;
      },

  // When called from action, caches matched text and appends it on next action
  more:function () {
          this._more = true;
          return this;
      },

  // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
  reject:function () {
          if (this.options.backtrack_lexer) {
              this._backtrack = true;
          } else {
              return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                  text: "",
                  token: null,
                  line: this.yylineno
              });

          }
          return this;
      },

  // retain first n characters of the match
  less:function (n) {
          this.unput(this.match.slice(n));
      },

  // displays already matched input, i.e. for error messages
  pastInput:function () {
          var past = this.matched.substr(0, this.matched.length - this.match.length);
          return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
      },

  // displays upcoming input, i.e. for error messages
  upcomingInput:function () {
          var next = this.match;
          if (next.length < 20) {
              next += this._input.substr(0, 20-next.length);
          }
          return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
      },

  // displays the character position where the lexing error occurred, i.e. for error messages
  showPosition:function () {
          var pre = this.pastInput();
          var c = new Array(pre.length + 1).join("-");
          return pre + this.upcomingInput() + "\n" + c + "^";
      },

  // test the lexed token: return FALSE when not a match, otherwise return token
  test_match:function (match, indexed_rule) {
          var token,
              lines,
              backup;

          if (this.options.backtrack_lexer) {
              // save context
              backup = {
                  yylineno: this.yylineno,
                  yylloc: {
                      first_line: this.yylloc.first_line,
                      last_line: this.last_line,
                      first_column: this.yylloc.first_column,
                      last_column: this.yylloc.last_column
                  },
                  yytext: this.yytext,
                  match: this.match,
                  matches: this.matches,
                  matched: this.matched,
                  yyleng: this.yyleng,
                  offset: this.offset,
                  _more: this._more,
                  _input: this._input,
                  yy: this.yy,
                  conditionStack: this.conditionStack.slice(0),
                  done: this.done
              };
              if (this.options.ranges) {
                  backup.yylloc.range = this.yylloc.range.slice(0);
              }
          }

          lines = match[0].match(/(?:\r\n?|\n).*/g);
          if (lines) {
              this.yylineno += lines.length;
          }
          this.yylloc = {
              first_line: this.yylloc.last_line,
              last_line: this.yylineno + 1,
              first_column: this.yylloc.last_column,
              last_column: lines ?
                           lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                           this.yylloc.last_column + match[0].length
          };
          this.yytext += match[0];
          this.match += match[0];
          this.matches = match;
          this.yyleng = this.yytext.length;
          if (this.options.ranges) {
              this.yylloc.range = [this.offset, this.offset += this.yyleng];
          }
          this._more = false;
          this._backtrack = false;
          this._input = this._input.slice(match[0].length);
          this.matched += match[0];
          token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
          if (this.done && this._input) {
              this.done = false;
          }
          if (token) {
              return token;
          } else if (this._backtrack) {
              // recover context
              for (var k in backup) {
                  this[k] = backup[k];
              }
              return false; // rule action called reject() implying the next rule should be tested instead.
          }
          return false;
      },

  // return next match in input
  next:function () {
          if (this.done) {
              return this.EOF;
          }
          if (!this._input) {
              this.done = true;
          }

          var token,
              match,
              tempMatch,
              index;
          if (!this._more) {
              this.yytext = '';
              this.match = '';
          }
          var rules = this._currentRules();
          for (var i = 0; i < rules.length; i++) {
              tempMatch = this._input.match(this.rules[rules[i]]);
              if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                  match = tempMatch;
                  index = i;
                  if (this.options.backtrack_lexer) {
                      token = this.test_match(tempMatch, rules[i]);
                      if (token !== false) {
                          return token;
                      } else if (this._backtrack) {
                          match = false;
                          continue; // rule action called reject() implying a rule MISmatch.
                      } else {
                          // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                          return false;
                      }
                  } else if (!this.options.flex) {
                      break;
                  }
              }
          }
          if (match) {
              token = this.test_match(match, rules[index]);
              if (token !== false) {
                  return token;
              }
              // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
              return false;
          }
          if (this._input === "") {
              return this.EOF;
          } else {
              return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                  text: "",
                  token: null,
                  line: this.yylineno
              });
          }
      },

  // return next match that has a token
  lex:function lex() {
          var r = this.next();
          if (r) {
              return r;
          } else {
              return this.lex();
          }
      },

  // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
  begin:function begin(condition) {
          this.conditionStack.push(condition);
      },

  // pop the previously active lexer condition state off the condition stack
  popState:function popState() {
          var n = this.conditionStack.length - 1;
          if (n > 0) {
              return this.conditionStack.pop();
          } else {
              return this.conditionStack[0];
          }
      },

  // produce the lexer rule set which is active for the currently active lexer condition state
  _currentRules:function _currentRules() {
          if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
              return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
          } else {
              return this.conditions["INITIAL"].rules;
          }
      },

  // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
  topState:function topState(n) {
          n = this.conditionStack.length - 1 - Math.abs(n || 0);
          if (n >= 0) {
              return this.conditionStack[n];
          } else {
              return "INITIAL";
          }
      },

  // alias for begin(condition)
  pushState:function pushState(condition) {
          this.begin(condition);
      },

  // return the number of states currently on the stack
  stateStackSize:function stateStackSize() {
          return this.conditionStack.length;
      },
  options: {},
  performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
  switch($avoiding_name_collisions) {
  case 0:/* skip whitespace */
  break;
  case 1:return 6
  case 2:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 4
  case 3:return 17
  case 4:return 18
  case 5:return 23
  case 6:return 24
  case 7:return 22
  case 8:return 21
  case 9:return 10
  case 10:return 11
  case 11:return 8
  case 12:return 14
  case 13:return 'INVALID'
  }
  },
  rules: [/^(?:\s+)/,/^(?:(-?([0-9]|[1-9][0-9]+))(\.[0-9]+)?([eE][-+]?[0-9]+)?\b)/,/^(?:"(?:\\[\\"bfnrt/]|\\u[a-fA-F0-9]{4}|[^\\\0-\x09\x0a-\x1f"])*")/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?::)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:$)/,/^(?:.)/],
  conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13],"inclusive":true}}
  });
  return lexer;
  })();
  parser.lexer = lexer;
  function Parser () {
    this.yy = {};
  }
  Parser.prototype = parser;parser.Parser = Parser;
  return new Parser;
  })();


  if (typeof commonjsRequire$1 !== 'undefined' && 'object' !== 'undefined') {
  exports.parser = parser;
  exports.Parser = parser.Parser;
  exports.parse = function () { return parser.parse.apply(parser, arguments); };
  }
  });
  var jsonlint_1 = jsonlint.parser;
  var jsonlint_2 = jsonlint.Parser;
  var jsonlint_3 = jsonlint.parse;

  var expression$1 = {
      StyleExpression: StyleExpression,
      isExpression: isExpression,
      createExpression: createExpression,
      createPropertyExpression: createPropertyExpression,
      normalizePropertyExpression: normalizePropertyExpression,
      ZoomConstantExpression: ZoomConstantExpression,
      ZoomDependentExpression: ZoomDependentExpression,
      StylePropertyFunction: StylePropertyFunction
  };
  var styleFunction = {
      convertFunction: convertFunction,
      createFunction: createFunction,
      isFunction: isFunction$1
  };

  function deg2rad$1(degrees) {
      return degrees * Math.PI / 180;
  }
  var defaultResolutions = (function () {
      var resolutions = [];
      for (var res = 78271.51696402048; resolutions.length <= 24; res /= 2) {
          resolutions.push(res);
      }
      return resolutions;
  })();
  function createCanvas(width, height) {
      if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope && typeof OffscreenCanvas !== 'undefined') { // eslint-disable-line
          return new OffscreenCanvas(width, height);
      }
      else {
          var canvas = document.createElement('canvas');
          canvas.width = width;
          canvas.height = height;
          return canvas;
      }
  }
  function getZoomForResolution(resolution, resolutions) {
      var i = 0;
      var ii = resolutions.length;
      for (; i < ii; ++i) {
          var candidate = resolutions[i];
          if (candidate < resolution && i + 1 < ii) {
              var zoomFactor = resolutions[i] / resolutions[i + 1];
              return i + Math.log(resolutions[i] / resolution) / Math.log(zoomFactor);
          }
      }
      return ii - 1;
  }
  var hairSpacePool = Array(256).join('\u200A');
  function applyLetterSpacing(text, letterSpacing) {
      if (letterSpacing >= 0.05) {
          var textWithLetterSpacing = '';
          var lines = text.split('\n');
          var joinSpaceString = hairSpacePool.slice(0, Math.round(letterSpacing / 0.1));
          for (var l = 0, ll = lines.length; l < ll; ++l) {
              if (l > 0) {
                  textWithLetterSpacing += '\n';
              }
              textWithLetterSpacing += lines[l].split('').join(joinSpaceString);
          }
          return textWithLetterSpacing;
      }
      return text;
  }
  var measureContext$1;
  function getMeasureContext() {
      if (!measureContext$1) {
          measureContext$1 = createCanvas(1, 1).getContext('2d');
      }
      return measureContext$1;
  }
  function measureText$1(text, letterSpacing) {
      return getMeasureContext().measureText(text).width + (text.length - 1) * letterSpacing;
  }
  var measureCache = {};
  if (labelCache) {
      // Only available when using ES modules
      listen(labelCache, EventType.CLEAR, function () {
          measureCache = {};
      });
  }
  function wrapText(text, font, em, letterSpacing) {
      if (text.indexOf('\n') !== -1) {
          var hardLines = text.split('\n');
          var lines = [];
          for (var i = 0, ii = hardLines.length; i < ii; ++i) {
              lines.push(wrapText(hardLines[i], font, em, letterSpacing));
          }
          return lines.join('\n');
      }
      var key = em + ',' + font + ',' + text + ',' + letterSpacing;
      var wrappedText = measureCache[key];
      if (!wrappedText) {
          var words = text.split(' ');
          if (words.length > 1) {
              var ctx = getMeasureContext();
              ctx.font = font;
              var oneEm = ctx.measureText('M').width;
              var maxWidth = oneEm * em;
              var line = '';
              var lines = [];
              // Pass 1 - wrap lines to not exceed maxWidth
              for (var i = 0, ii = words.length; i < ii; ++i) {
                  var word = words[i];
                  var testLine = line + (line ? ' ' : '') + word;
                  if (measureText$1(testLine, letterSpacing) <= maxWidth) {
                      line = testLine;
                  }
                  else {
                      if (line) {
                          lines.push(line);
                      }
                      line = word;
                  }
              }
              if (line) {
                  lines.push(line);
              }
              // Pass 2 - add lines with a width of less than 30% of maxWidth to the previous or next line
              for (var i = 0; i < lines.length; ++i) {
                  var line_1 = lines[i];
                  if (measureText$1(line_1, letterSpacing) < maxWidth * 0.35) {
                      var prevWidth = i > 0 ? measureText$1(lines[i - 1], letterSpacing) : Infinity;
                      var nextWidth = i < lines.length - 1 ? measureText$1(lines[i + 1], letterSpacing) : Infinity;
                      lines.splice(i, 1);
                      if (prevWidth < nextWidth) {
                          lines[i - 1] += ' ' + line_1;
                          i -= 1;
                      }
                      else {
                          lines[i] = line_1 + ' ' + lines[i];
                      }
                      lines.length -= 1;
                  }
              }
              // Pass 3 - try to fill 80% of maxWidth for each line
              for (var i = 0, ii = lines.length - 1; i < ii; ++i) {
                  var line_2 = lines[i];
                  var next = lines[i + 1];
                  if (measureText$1(line_2, letterSpacing) > maxWidth * 0.7 &&
                      measureText$1(next, letterSpacing) < maxWidth * 0.6) {
                      var lineWords = line_2.split(' ');
                      var lastWord = lineWords.pop();
                      if (measureText$1(lastWord, letterSpacing) < maxWidth * 0.2) {
                          lines[i] = lineWords.join(' ');
                          lines[i + 1] = lastWord + ' ' + next;
                      }
                      ii -= 1;
                  }
              }
              wrappedText = lines.join('\n');
          }
          else {
              wrappedText = text;
          }
          wrappedText = applyLetterSpacing(wrappedText, letterSpacing);
          measureCache[key] = wrappedText;
      }
      return wrappedText;
  }

  /*
  ol-mapbox-style - Use Mapbox Style objects with OpenLayers
  Copyright 2016-present ol-mapbox-style contributors
  License: https://raw.githubusercontent.com/openlayers/ol-mapbox-style/master/LICENSE
  */
  /**
   * @typedef {import("ol/layer/Vector").default} VectorLayer
   * @typedef {import("ol/layer/VectorTile").default} VectorTileLayer
   * @typedef {import("ol/style/Style").StyleFunction} StyleFunction
   */
  var isFunction = styleFunction.isFunction;
  var convertFunction$1 = styleFunction.convertFunction;
  var isExpression$1 = expression$1.isExpression;
  var createPropertyExpression$1 = expression$1.createPropertyExpression;
  var types$2 = {
      'Point': 1,
      'MultiPoint': 1,
      'LineString': 2,
      'MultiLineString': 2,
      'Polygon': 3,
      'MultiPolygon': 3
  };
  var anchor = {
      'center': [0.5, 0.5],
      'left': [0, 0.5],
      'right': [1, 0.5],
      'top': [0.5, 0],
      'bottom': [0.5, 1],
      'top-left': [0, 0],
      'top-right': [1, 0],
      'bottom-left': [0, 1],
      'bottom-right': [1, 1]
  };
  var expressionData = function (rawExpression, propertySpec) {
      var compiledExpression = createPropertyExpression$1(rawExpression, propertySpec);
      if (compiledExpression.result === 'error') {
          throw new Error(compiledExpression.value.map(function (err) { return err.key + ": " + err.message; }).join(', '));
      }
      return compiledExpression.value;
  };
  var emptyObj = {};
  var zoomObj = { zoom: 0 };
  /** @private */
  var functionCache = {};
  var renderFeatureCoordinates, renderFeature;
  /**
   * @private
   * @param {Object} layer Gl object layer.
   * @param {string} layoutOrPaint 'layout' or 'paint'.
   * @param {string} property Feature property.
   * @param {number} zoom Zoom.
   * @param {Object} feature Gl feature.
   * @return {?} Value.
   */
  function getValue(layer, layoutOrPaint, property, zoom, feature) {
      var layerId = layer.id;
      if (!functionCache[layerId]) {
          functionCache[layerId] = {};
      }
      var functions = functionCache[layerId];
      if (!functions[property]) {
          var value_1 = (layer[layoutOrPaint] || emptyObj)[property];
          var propertySpec = v8$1[layoutOrPaint + "_" + layer.type][property];
          if (value_1 === undefined) {
              value_1 = propertySpec.default;
          }
          var isExpr = isExpression$1((value_1));
          if (!isExpr && isFunction(value_1)) {
              value_1 = convertFunction$1(value_1, propertySpec);
              isExpr = true;
          }
          if (isExpr) {
              var compiledExpression = expressionData(value_1, propertySpec);
              functions[property] = compiledExpression.evaluate.bind(compiledExpression);
          }
          else {
              if (propertySpec.type == 'color') {
                  value_1 = Color.parse(value_1);
              }
              functions[property] = function () {
                  return value_1;
              };
          }
      }
      zoomObj.zoom = zoom;
      return functions[property](zoomObj, feature);
  }
  /** @private */
  var filterCache = {};
  /**
   * @private
   * @param {string} layerId Layer id.
   * @param {?} filter Filter.
   * @param {Object} feature Feature.
   * @param {number} zoom Zoom.
   * @return {boolean} Filter result.
   */
  function evaluateFilter(layerId, filter, feature, zoom) {
      if (!(layerId in filterCache)) {
          filterCache[layerId] = createFilter(filter).filter;
      }
      zoomObj.zoom = zoom;
      return filterCache[layerId](zoomObj, feature);
  }
  /**
   * @private
   * @param {?} color Color.
   * @param {number} opacity Opacity.
   * @return {string} Color.
   */
  function colorWithOpacity(color, opacity) {
      if (color) {
          if (color.a === 0 || opacity === 0) {
              return undefined;
          }
          var a = color.a;
          opacity = opacity === undefined ? 1 : opacity;
          return 'rgba(' + Math.round(color.r * 255 / a) + ',' + Math.round(color.g * 255 / a) +
              ',' + Math.round(color.b * 255 / a) + ',' + (a * opacity) + ')';
      }
      return color;
  }
  var templateRegEx = /^([^]*)\{(.*)\}([^]*)$/;
  /**
   * @private
   * @param {string} text Text.
   * @param {Object} properties Properties.
   * @return {string} Text.
   */
  function fromTemplate(text, properties) {
      var parts;
      do {
          parts = text.match(templateRegEx);
          if (parts) {
              var value = properties[parts[2]] || '';
              text = parts[1] + value + parts[3];
          }
      } while (parts);
      return text;
  }
  /**
   * ```js
   * import stylefunction from 'ol-mapbox-style/dist/stylefunction';
   * ```
   * Creates a style function from the `glStyle` object for all layers that use
   * the specified `source`, which needs to be a `"type": "vector"` or
   * `"type": "geojson"` source and applies it to the specified OpenLayers layer.
   *
   * Two additional properties will be set on the provided layer:
   *
   *  * `mapbox-source`: The `id` of the Mapbox Style document's source that the
   *    OpenLayers layer was created from. Usually `apply()` creates one
   *    OpenLayers layer per Mapbox Style source, unless the layer stack has
   *    layers from different sources in between.
   *  * `mapbox-layers`: The `id`s of the Mapbox Style document's layers that are
   *    included in the OpenLayers layer.
   *
   * This function also works in a web worker. In worker mode, the main thread needs
   * to listen to messages from the worker and respond with another message to make
   * sure that sprite image loading works:
   *
   * ```js
   *  worker.addEventListener('message', event => {
   *   if (event.data.action === 'loadImage') {
   *     const image = new Image();
   *     image.crossOrigin = 'anonymous';
   *     image.addEventListener('load', function() {
   *       createImageBitmap(image, 0, 0, image.width, image.height).then(imageBitmap => {
   *         worker.postMessage({
   *           action: 'imageLoaded',
   *           image: imageBitmap,
   *           src: event.data.src
   *         }, [imageBitmap]);
   *       });
   *     });
   *     image.src = event.data.src;
   *   }
   * });
   * ```
   *
   * @param {VectorLayer|VectorTileLayer} olLayer OpenLayers layer to
   * apply the style to. In addition to the style, the layer will get two
   * properties: `mapbox-source` will be the `id` of the `glStyle`'s source used
   * for the layer, and `mapbox-layers` will be an array of the `id`s of the
   * `glStyle`'s layers.
   * @param {string|Object} glStyle Mapbox Style object.
   * @param {string|Array<string>} source `source` key or an array of layer `id`s
   * from the Mapbox Style object. When a `source` key is provided, all layers for
   * the specified source will be included in the style function. When layer `id`s
   * are provided, they must be from layers that use the same source.
   * @param {Array<number>} [resolutions=[78271.51696402048, 39135.75848201024,
     19567.87924100512, 9783.93962050256, 4891.96981025128, 2445.98490512564,
     1222.99245256282, 611.49622628141, 305.748113140705, 152.8740565703525,
     76.43702828517625, 38.21851414258813, 19.109257071294063, 9.554628535647032,
     4.777314267823516, 2.388657133911758, 1.194328566955879, 0.5971642834779395,
     0.29858214173896974, 0.14929107086948487, 0.07464553543474244]]
   * Resolutions for mapping resolution to zoom level.
   * @param {Object} [spriteData=undefined] Sprite data from the url specified in
   * the Mapbox Style object's `sprite` property. Only required if a `sprite`
   * property is specified in the Mapbox Style object.
   * @param {Object} [spriteImageUrl=undefined] Sprite image url for the sprite
   * specified in the Mapbox Style object's `sprite` property. Only required if a
   * `sprite` property is specified in the Mapbox Style object.
   * @param {function(Array<string>):Array<string>} [getFonts=undefined] Function that
   * receives a font stack as arguments, and returns a (modified) font stack that
   * is available. Font names are the names used in the Mapbox Style object. If
   * not provided, the font stack will be used as-is. This function can also be
   * used for loading web fonts.
   * @return {StyleFunction} Style function for use in
   * `ol.layer.Vector` or `ol.layer.VectorTile`.
   */
  function applyStyleFunction (olLayer, glStyle, source, resolutions, spriteData, spriteImageUrl, getFonts) {
      if (resolutions === void 0) { resolutions = defaultResolutions; }
      if (typeof glStyle == 'string') {
          glStyle = JSON.parse(glStyle);
      }
      if (glStyle.version != 8) {
          throw new Error('glStyle version 8 required.');
      }
      var spriteImage, spriteImgSize;
      if (spriteImageUrl) {
          if (typeof Image !== 'undefined') {
              var img_1 = new Image();
              img_1.crossOrigin = 'anonymous';
              img_1.onload = function () {
                  spriteImage = img_1;
                  spriteImgSize = [img_1.width, img_1.height];
                  olLayer.changed();
                  img_1.onload = null;
              };
              img_1.src = spriteImageUrl;
          }
          else if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) { //eslint-disable-line
              var worker = /** @type {*} */ (self);
              // Main thread needs to handle 'loadImage' and dispatch 'imageLoaded'
              worker.postMessage({
                  action: 'loadImage',
                  src: spriteImageUrl
              });
              worker.addEventListener('message', function handler(event) {
                  if (event.data.action === 'imageLoaded' && event.data.src === spriteImageUrl) {
                      spriteImage = event.data.image;
                      spriteImgSize = [spriteImage.width, spriteImage.height];
                  }
              });
          }
      }
      var allLayers = derefLayers(glStyle.layers);
      var layersBySourceLayer = {};
      var mapboxLayers = [];
      var mapboxSource;
      for (var i = 0, ii = allLayers.length; i < ii; ++i) {
          var layer = allLayers[i];
          var layerId = layer.id;
          if (typeof source == 'string' && layer.source == source ||
              source.indexOf(layerId) !== -1) {
              var sourceLayer = layer['source-layer'];
              if (!mapboxSource) {
                  mapboxSource = layer.source;
                  var source_1 = glStyle.sources[mapboxSource];
                  if (!source_1) {
                      throw new Error("Source \"" + mapboxSource + "\" is not defined");
                  }
                  var type = source_1.type;
                  if (type !== 'vector' && type !== 'geojson') {
                      throw new Error("Source \"" + mapboxSource + "\" is not of type \"vector\" or \"geojson\", but \"" + type + "\"");
                  }
              }
              var layers = layersBySourceLayer[sourceLayer];
              if (!layers) {
                  layers = layersBySourceLayer[sourceLayer] = [];
              }
              layers.push({
                  layer: layer,
                  index: i
              });
              mapboxLayers.push(layerId);
          }
          // TODO revisit when diffing gets added
          delete functionCache[layerId];
          delete filterCache[layerId];
      }
      var textHalo = new Stroke();
      var textColor = new Fill();
      var iconImageCache = {};
      var patternCache = {};
      var styles = [];
      var styleFunction = function (feature, resolution) {
          var properties = feature.getProperties();
          var layers = layersBySourceLayer[properties.layer];
          if (!layers) {
              return;
          }
          var zoom = resolutions.indexOf(resolution);
          if (zoom == -1) {
              zoom = getZoomForResolution(resolution, resolutions);
          }
          var type = types$2[feature.getGeometry().getType()];
          var f = {
              properties: properties,
              type: type
          };
          var stylesLength = -1;
          var _loop_1 = function (i, ii) {
              var layerData = layers[i];
              var layer = layerData.layer;
              var layerId = layer.id;
              var layout = layer.layout || emptyObj;
              var paint = layer.paint || emptyObj;
              if (layout.visibility === 'none' || ('minzoom' in layer && zoom < layer.minzoom) ||
                  ('maxzoom' in layer && zoom >= layer.maxzoom)) {
                  return "continue";
              }
              var filter = layer.filter;
              if (!filter || evaluateFilter(layerId, filter, f, zoom)) {
                  var color = void 0, opacity = void 0, fill = void 0, stroke = void 0, strokeColor = void 0, style = void 0;
                  var index = layerData.index;
                  if (type == 3 && layer.type == 'fill') {
                      opacity = getValue(layer, 'paint', 'fill-opacity', zoom, f);
                      if ('fill-pattern' in paint) {
                          var fillIcon = getValue(layer, 'paint', 'fill-pattern', zoom, f);
                          if (fillIcon) {
                              var icon_1 = typeof fillIcon === 'string'
                                  ? fromTemplate(fillIcon, properties)
                                  : fillIcon.toString();
                              if (spriteImage && spriteData && spriteData[icon_1]) {
                                  ++stylesLength;
                                  style = styles[stylesLength];
                                  if (!style || !style.getFill() || style.getStroke() || style.getText()) {
                                      style = styles[stylesLength] = new Style({
                                          fill: new Fill()
                                      });
                                  }
                                  fill = style.getFill();
                                  style.setZIndex(index);
                                  var icon_cache_key = icon_1 + '.' + opacity;
                                  var pattern = patternCache[icon_cache_key];
                                  if (!pattern) {
                                      var spriteImageData = spriteData[icon_1];
                                      var canvas = createCanvas(spriteImageData.width, spriteImageData.height);
                                      var ctx = /** @type {CanvasRenderingContext2D} */ (canvas.getContext('2d'));
                                      ctx.globalAlpha = opacity;
                                      ctx.drawImage(spriteImage, spriteImageData.x, spriteImageData.y, spriteImageData.width, spriteImageData.height, 0, 0, spriteImageData.width, spriteImageData.height);
                                      pattern = ctx.createPattern(canvas, 'repeat');
                                      patternCache[icon_cache_key] = pattern;
                                  }
                                  fill.setColor(pattern);
                              }
                          }
                      }
                      else {
                          color = colorWithOpacity(getValue(layer, 'paint', 'fill-color', zoom, f), opacity);
                          if (color) {
                              if ('fill-outline-color' in paint) {
                                  strokeColor = colorWithOpacity(getValue(layer, 'paint', 'fill-outline-color', zoom, f), opacity);
                              }
                              if (!strokeColor) {
                                  strokeColor = color;
                              }
                              ++stylesLength;
                              style = styles[stylesLength];
                              if (!style || !(style.getFill() && style.getStroke()) || style.getText()) {
                                  style = styles[stylesLength] = new Style({
                                      fill: new Fill(),
                                      stroke: new Stroke()
                                  });
                              }
                              fill = style.getFill();
                              fill.setColor(color);
                              stroke = style.getStroke();
                              stroke.setColor(strokeColor);
                              stroke.setWidth(1);
                              style.setZIndex(index);
                          }
                      }
                  }
                  if (type != 1 && layer.type == 'line') {
                      color = !('line-pattern' in paint) && 'line-color' in paint ?
                          colorWithOpacity(getValue(layer, 'paint', 'line-color', zoom, f), getValue(layer, 'paint', 'line-opacity', zoom, f)) :
                          undefined;
                      var width_1 = getValue(layer, 'paint', 'line-width', zoom, f);
                      if (color && width_1 > 0) {
                          ++stylesLength;
                          style = styles[stylesLength];
                          if (!style || !style.getStroke() || style.getFill() || style.getText()) {
                              style = styles[stylesLength] = new Style({
                                  stroke: new Stroke()
                              });
                          }
                          stroke = style.getStroke();
                          stroke.setLineCap(getValue(layer, 'layout', 'line-cap', zoom, f));
                          stroke.setLineJoin(getValue(layer, 'layout', 'line-join', zoom, f));
                          stroke.setMiterLimit(getValue(layer, 'layout', 'line-miter-limit', zoom, f));
                          stroke.setColor(color);
                          stroke.setWidth(width_1);
                          stroke.setLineDash(paint['line-dasharray'] ?
                              getValue(layer, 'paint', 'line-dasharray', zoom, f).map(function (x) {
                                  return x * width_1;
                              }) : null);
                          style.setZIndex(index);
                      }
                  }
                  var hasImage = false;
                  var text = null;
                  var placementAngle = 0;
                  var icon = void 0, iconImg = void 0, skipLabel = void 0;
                  if ((type == 1 || type == 2) && 'icon-image' in layout) {
                      var iconImage = getValue(layer, 'layout', 'icon-image', zoom, f);
                      if (iconImage) {
                          icon = typeof iconImage === 'string'
                              ? fromTemplate(iconImage, properties)
                              : iconImage.toString();
                          var styleGeom = undefined;
                          if (spriteImage && spriteData && spriteData[icon]) {
                              var iconRotationAlignment = getValue(layer, 'layout', 'icon-rotation-alignment', zoom, f);
                              if (type == 2) {
                                  var geom = feature.getGeometry();
                                  // ol package and ol-debug.js only
                                  if (geom.getFlatMidpoint) {
                                      var extent = geom.getExtent();
                                      var size = Math.sqrt(Math.max(Math.pow((extent[2] - extent[0]) / resolution, 2), Math.pow((extent[3] - extent[1]) / resolution, 2)));
                                      if (size > 150) {
                                          //FIXME Do not hard-code a size of 150
                                          var midpoint = geom.getFlatMidpoint();
                                          if (!renderFeature) {
                                              renderFeatureCoordinates = [NaN, NaN];
                                              renderFeature = new RenderFeature('Point', renderFeatureCoordinates, [], {}, null);
                                          }
                                          styleGeom = renderFeature;
                                          renderFeatureCoordinates[0] = midpoint[0];
                                          renderFeatureCoordinates[1] = midpoint[1];
                                          var placement = getValue(layer, 'layout', 'symbol-placement', zoom, f);
                                          if (placement === 'line' && iconRotationAlignment === 'map') {
                                              var stride = geom.getStride();
                                              var coordinates = geom.getFlatCoordinates();
                                              for (var i_1 = 0, ii_1 = coordinates.length - stride; i_1 < ii_1; i_1 += stride) {
                                                  var x1 = coordinates[i_1];
                                                  var y1 = coordinates[i_1 + 1];
                                                  var x2 = coordinates[i_1 + stride];
                                                  var y2 = coordinates[i_1 + stride + 1];
                                                  var minX = Math.min(x1, x2);
                                                  var minY = Math.min(y1, y2);
                                                  var maxX = Math.max(x1, x2);
                                                  var maxY = Math.max(y1, y2);
                                                  if (midpoint[0] >= minX && midpoint[0] <= maxX &&
                                                      midpoint[1] >= minY && midpoint[1] <= maxY) {
                                                      placementAngle = Math.atan2(y1 - y2, x2 - x1);
                                                      break;
                                                  }
                                              }
                                          }
                                      }
                                  }
                              }
                              if (type !== 2 || styleGeom) {
                                  ++stylesLength;
                                  style = styles[stylesLength];
                                  if (!style || !style.getImage() || style.getFill() || style.getStroke()) {
                                      style = styles[stylesLength] = new Style();
                                  }
                                  style.setGeometry(styleGeom);
                                  var iconSize = getValue(layer, 'layout', 'icon-size', zoom, f);
                                  var iconColor = paint['icon-color'] !== undefined ? getValue(layer, 'paint', 'icon-color', zoom, f) : null;
                                  var icon_cache_key = icon + '.' + iconSize;
                                  if (iconColor !== null) {
                                      icon_cache_key += '.' + iconColor;
                                  }
                                  iconImg = iconImageCache[icon_cache_key];
                                  if (!iconImg) {
                                      var spriteImageData = spriteData[icon];
                                      if (iconColor !== null) {
                                          // cut out the sprite and color it
                                          var canvas = createCanvas(spriteImageData.width, spriteImageData.height);
                                          var ctx = /** @type {CanvasRenderingContext2D} */ (canvas.getContext('2d'));
                                          ctx.drawImage(spriteImage, spriteImageData.x, spriteImageData.y, spriteImageData.width, spriteImageData.height, 0, 0, spriteImageData.width, spriteImageData.height);
                                          var data = ctx.getImageData(0, 0, canvas.width, canvas.height);
                                          for (var c = 0, cc = data.data.length; c < cc; c += 4) {
                                              var a = iconColor.a;
                                              if (a !== 0) {
                                                  data.data[c] = iconColor.r * 255 / a;
                                                  data.data[c + 1] = iconColor.g * 255 / a;
                                                  data.data[c + 2] = iconColor.b * 255 / a;
                                              }
                                              data.data[c + 3] = a;
                                          }
                                          ctx.putImageData(data, 0, 0);
                                          iconImg = iconImageCache[icon_cache_key] = new Icon({
                                              img: canvas,
                                              imgSize: [canvas.width, canvas.height],
                                              scale: iconSize / spriteImageData.pixelRatio
                                          });
                                      }
                                      else {
                                          iconImg = iconImageCache[icon_cache_key] = new Icon({
                                              img: spriteImage,
                                              imgSize: spriteImgSize,
                                              size: [spriteImageData.width, spriteImageData.height],
                                              offset: [spriteImageData.x, spriteImageData.y],
                                              rotateWithView: iconRotationAlignment === 'map',
                                              scale: iconSize / spriteImageData.pixelRatio
                                          });
                                      }
                                  }
                                  iconImg.setRotation(placementAngle + deg2rad$1(getValue(layer, 'layout', 'icon-rotate', zoom, f)));
                                  iconImg.setOpacity(getValue(layer, 'paint', 'icon-opacity', zoom, f));
                                  iconImg.setAnchor(anchor[getValue(layer, 'layout', 'icon-anchor', zoom, f)]);
                                  style.setImage(iconImg);
                                  text = style.getText();
                                  style.setText(undefined);
                                  style.setZIndex(index);
                                  hasImage = true;
                                  skipLabel = false;
                              }
                              else {
                                  skipLabel = true;
                              }
                          }
                      }
                  }
                  if (type == 1 && 'circle-radius' in paint) {
                      ++stylesLength;
                      style = styles[stylesLength];
                      if (!style || !style.getImage() || style.getFill() || style.getStroke()) {
                          style = styles[stylesLength] = new Style();
                      }
                      var circleRadius = getValue(layer, 'paint', 'circle-radius', zoom, f);
                      var circleStrokeColor = colorWithOpacity(getValue(layer, 'paint', 'circle-stroke-color', zoom, f), getValue(layer, 'paint', 'circle-stroke-opacity', zoom, f));
                      var circleColor = colorWithOpacity(getValue(layer, 'paint', 'circle-color', zoom, f), getValue(layer, 'paint', 'circle-opacity', zoom, f));
                      var circleStrokeWidth = getValue(layer, 'paint', 'circle-stroke-width', zoom, f);
                      var cache_key = circleRadius + '.' + circleStrokeColor + '.' +
                          circleColor + '.' + circleStrokeWidth;
                      iconImg = iconImageCache[cache_key];
                      if (!iconImg) {
                          iconImg = iconImageCache[cache_key] = new CircleStyle({
                              radius: circleRadius,
                              stroke: circleStrokeColor && circleStrokeWidth > 0 ? new Stroke({
                                  width: circleStrokeWidth,
                                  color: circleStrokeColor
                              }) : undefined,
                              fill: circleColor ? new Fill({
                                  color: circleColor
                              }) : undefined
                          });
                      }
                      style.setImage(iconImg);
                      text = style.getText();
                      style.setText(undefined);
                      style.setGeometry(undefined);
                      style.setZIndex(index);
                      hasImage = true;
                  }
                  var label = void 0;
                  if ('text-field' in layout) {
                      var textField = getValue(layer, 'layout', 'text-field', zoom, f).toString();
                      label = fromTemplate(textField, properties).trim();
                      opacity = getValue(layer, 'paint', 'text-opacity', zoom, f);
                  }
                  if (label && opacity && !skipLabel) {
                      if (!hasImage) {
                          ++stylesLength;
                          style = styles[stylesLength];
                          if (!style || !style.getText() || style.getFill() || style.getStroke()) {
                              style = styles[stylesLength] = new Style();
                          }
                          style.setImage(undefined);
                          style.setGeometry(undefined);
                      }
                      if (!style.getText()) {
                          style.setText(text || new Text({
                              padding: [2, 2, 2, 2]
                          }));
                      }
                      text = style.getText();
                      var textSize = Math.round(getValue(layer, 'layout', 'text-size', zoom, f));
                      var fontArray = getValue(layer, 'layout', 'text-font', zoom, f);
                      var textLineHeight = getValue(layer, 'layout', 'text-line-height', zoom, f);
                      var font = mapboxToCssFont(getFonts ? getFonts(fontArray) : fontArray, textSize, textLineHeight);
                      var textTransform = layout['text-transform'];
                      if (textTransform == 'uppercase') {
                          label = label.toUpperCase();
                      }
                      else if (textTransform == 'lowercase') {
                          label = label.toLowerCase();
                      }
                      var maxTextWidth = getValue(layer, 'layout', 'text-max-width', zoom, f);
                      var letterSpacing = getValue(layer, 'layout', 'text-letter-spacing', zoom, f);
                      var wrappedLabel = type == 2 ? applyLetterSpacing(label, letterSpacing) : wrapText(label, font, maxTextWidth, letterSpacing);
                      text.setText(wrappedLabel);
                      text.setFont(font);
                      text.setRotation(deg2rad$1(getValue(layer, 'layout', 'text-rotate', zoom, f)));
                      var textAnchor = getValue(layer, 'layout', 'text-anchor', zoom, f);
                      var placement = (hasImage || type == 1) ? 'point' : getValue(layer, 'layout', 'symbol-placement', zoom, f);
                      text.setPlacement(placement);
                      var textHaloWidth = getValue(layer, 'paint', 'text-halo-width', zoom, f);
                      var textOffset = getValue(layer, 'layout', 'text-offset', zoom, f);
                      var textTranslate = getValue(layer, 'paint', 'text-translate', zoom, f);
                      // Text offset has to take halo width and line height into account
                      var vOffset = 0;
                      var hOffset = 0;
                      if (placement == 'point') {
                          var textAlign = 'center';
                          if (textAnchor.indexOf('left') !== -1) {
                              textAlign = 'left';
                              hOffset = textHaloWidth;
                          }
                          else if (textAnchor.indexOf('right') !== -1) {
                              textAlign = 'right';
                              hOffset = -textHaloWidth;
                          }
                          text.setTextAlign(textAlign);
                          var textRotationAlignment = getValue(layer, 'layout', 'text-rotation-alignment', zoom, f);
                          text.setRotateWithView(textRotationAlignment == 'map');
                      }
                      else {
                          text.setMaxAngle(deg2rad$1(getValue(layer, 'layout', 'text-max-angle', zoom, f)) * label.length / wrappedLabel.length);
                          text.setTextAlign();
                          text.setRotateWithView(false);
                      }
                      var textBaseline = 'middle';
                      if (textAnchor.indexOf('bottom') == 0) {
                          textBaseline = 'bottom';
                          vOffset = -textHaloWidth - (0.5 * (textLineHeight - 1)) * textSize;
                      }
                      else if (textAnchor.indexOf('top') == 0) {
                          textBaseline = 'top';
                          vOffset = textHaloWidth + (0.5 * (textLineHeight - 1)) * textSize;
                      }
                      text.setTextBaseline(textBaseline);
                      text.setOffsetX(textOffset[0] * textSize + hOffset + textTranslate[0]);
                      text.setOffsetY(textOffset[1] * textSize + vOffset + textTranslate[1]);
                      textColor.setColor(colorWithOpacity(getValue(layer, 'paint', 'text-color', zoom, f), opacity));
                      text.setFill(textColor);
                      var haloColor = colorWithOpacity(getValue(layer, 'paint', 'text-halo-color', zoom, f), opacity);
                      if (haloColor) {
                          textHalo.setColor(haloColor);
                          // spec here : https://docs.mapbox.com/mapbox-gl-js/style-spec/#paint-symbol-text-halo-width
                          // Halo width must be doubled because it is applied around the center of the text outline
                          textHaloWidth *= 2;
                          // 1/4 of text size (spec) x 2
                          var halfTextSize = 0.5 * textSize;
                          textHalo.setWidth(textHaloWidth <= halfTextSize ? textHaloWidth : halfTextSize);
                          text.setStroke(textHalo);
                      }
                      else {
                          text.setStroke(undefined);
                      }
                      var textPadding = getValue(layer, 'layout', 'text-padding', zoom, f);
                      var padding = text.getPadding();
                      if (textPadding !== padding[0]) {
                          padding[0] = padding[1] = padding[2] = padding[3] = textPadding;
                      }
                      style.setZIndex(index);
                  }
              }
          };
          for (var i = 0, ii = layers.length; i < ii; ++i) {
              _loop_1(i);
          }
          if (stylesLength > -1) {
              styles.length = stylesLength + 1;
              return styles;
          }
      };
      olLayer.setStyle(styleFunction);
      olLayer.set('mapbox-source', mapboxSource);
      olLayer.set('mapbox-layers', mapboxLayers);
      return styleFunction;
  }

  var google = createCommonjsModule(function (module) {
  // Generated by CoffeeScript 1.10.0
  (function() {
    var families;

    module.exports = {
      icon: 'icons/google.svg',
      name: 'google',
      title: 'Google Fonts',
      link: 'google.com/fonts',
      getNames: function() {
        return families;
      },
      getLink: function(name) {
        return "https://fonts.google.com/specimen/" + (name.replace(/( )/g, '+'));
      },
      normalizeName: function(name) {
        return name;
      }
    };

    families = ["ABeeZee", "Abel", "Abril Fatface", "Aclonica", "Acme", "Actor", "Adamina", "Advent Pro", "Aguafina Script", "Akronim", "Aladin", "Aldrich", "Alef", "Alegreya", "Alegreya SC", "Alegreya Sans", "Alegreya Sans SC", "Alex Brush", "Alfa Slab One", "Alice", "Alike", "Alike Angular", "Allan", "Allerta", "Allerta Stencil", "Allura", "Almendra", "Almendra Display", "Almendra SC", "Amarante", "Amaranth", "Amatic SC", "Amethysta", "Amiri", "Amita", "Anaheim", "Andada", "Andika", "Angkor", "Annie Use Your Telescope", "Anonymous Pro", "Antic", "Antic Didone", "Antic Slab", "Anton", "Arapey", "Arbutus", "Arbutus Slab", "Architects Daughter", "Archivo Black", "Archivo Narrow", "Arimo", "Arizonia", "Armata", "Artifika", "Arvo", "Arya", "Asap", "Asar", "Asset", "Astloch", "Asul", "Atomic Age", "Aubrey", "Audiowide", "Autour One", "Average", "Average Sans", "Averia Gruesa Libre", "Averia Libre", "Averia Sans Libre", "Averia Serif Libre", "Bad Script", "Balthazar", "Bangers", "Basic", "Battambang", "Baumans", "Bayon", "Belgrano", "Belleza", "BenchNine", "Bentham", "Berkshire Swash", "Bevan", "Bigelow Rules", "Bigshot One", "Bilbo", "Bilbo Swash Caps", "Biryani", "Bitter", "Black Ops One", "Bokor", "Bonbon", "Boogaloo", "Bowlby One", "Bowlby One SC", "Brawler", "Bree Serif", "Bubblegum Sans", "Bubbler One", "Buda", "Buenard", "Butcherman", "Butterfly Kids", "Cabin", "Cabin Condensed", "Cabin Sketch", "Caesar Dressing", "Cagliostro", "Calligraffitti", "Cambay", "Cambo", "Candal", "Cantarell", "Cantata One", "Cantora One", "Capriola", "Cardo", "Carme", "Carrois Gothic", "Carrois Gothic SC", "Carter One", "Catamaran", "Caudex", "Caveat", "Caveat Brush", "Cedarville Cursive", "Ceviche One", "Changa One", "Chango", "Chau Philomene One", "Chela One", "Chelsea Market", "Chenla", "Cherry Cream Soda", "Cherry Swash", "Chewy", "Chicle", "Chivo", "Chonburi", "Cinzel", "Cinzel Decorative", "Clicker Script", "Coda", "Coda Caption", "Codystar", "Combo", "Comfortaa", "Coming Soon", "Concert One", "Condiment", "Content", "Contrail One", "Convergence", "Cookie", "Copse", "Corben", "Courgette", "Cousine", "Coustard", "Covered By Your Grace", "Crafty Girls", "Creepster", "Crete Round", "Crimson Text", "Croissant One", "Crushed", "Cuprum", "Cutive", "Cutive Mono", "Damion", "Dancing Script", "Dangrek", "Dawning of a New Day", "Days One", "Dekko", "Delius", "Delius Swash Caps", "Delius Unicase", "Della Respira", "Denk One", "Devonshire", "Dhurjati", "Didact Gothic", "Diplomata", "Diplomata SC", "Domine", "Donegal One", "Doppio One", "Dorsa", "Dosis", "Dr Sugiyama", "Droid Sans", "Droid Sans Mono", "Droid Serif", "Duru Sans", "Dynalight", "EB Garamond", "Eagle Lake", "Eater", "Economica", "Eczar", "Ek Mukta", "Electrolize", "Elsie", "Elsie Swash Caps", "Emblema One", "Emilys Candy", "Engagement", "Englebert", "Enriqueta", "Erica One", "Esteban", "Euphoria Script", "Ewert", "Exo", "Exo 2", "Expletus Sans", "Fanwood Text", "Fascinate", "Fascinate Inline", "Faster One", "Fasthand", "Fauna One", "Federant", "Federo", "Felipa", "Fenix", "Finger Paint", "Fira Mono", "Fira Sans", "Fjalla One", "Fjord One", "Flamenco", "Flavors", "Fondamento", "Fontdiner Swanky", "Forum", "Francois One", "Freckle Face", "Fredericka the Great", "Fredoka One", "Freehand", "Fresca", "Frijole", "Fruktur", "Fugaz One", "GFS Didot", "GFS Neohellenic", "Gabriela", "Gafata", "Galdeano", "Galindo", "Gentium Basic", "Gentium Book Basic", "Geo", "Geostar", "Geostar Fill", "Germania One", "Gidugu", "Gilda Display", "Give You Glory", "Glass Antiqua", "Glegoo", "Gloria Hallelujah", "Goblin One", "Gochi Hand", "Gorditas", "Goudy Bookletter 1911", "Graduate", "Grand Hotel", "Gravitas One", "Great Vibes", "Griffy", "Gruppo", "Gudea", "Gurajada", "Habibi", "Halant", "Hammersmith One", "Hanalei", "Hanalei Fill", "Handlee", "Hanuman", "Happy Monkey", "Headland One", "Henny Penny", "Herr Von Muellerhoff", "Hind", "Hind Siliguri", "Hind Vadodara", "Holtwood One SC", "Homemade Apple", "Homenaje", "IM Fell DW Pica", "IM Fell DW Pica SC", "IM Fell Double Pica", "IM Fell Double Pica SC", "IM Fell English", "IM Fell English SC", "IM Fell French Canon", "IM Fell French Canon SC", "IM Fell Great Primer", "IM Fell Great Primer SC", "Iceberg", "Iceland", "Imprima", "Inconsolata", "Inder", "Indie Flower", "Inika", "Inknut Antiqua", "Irish Grover", "Istok Web", "Italiana", "Italianno", "Itim", "Jacques Francois", "Jacques Francois Shadow", "Jaldi", "Jim Nightshade", "Jockey One", "Jolly Lodger", "Josefin Sans", "Josefin Slab", "Joti One", "Judson", "Julee", "Julius Sans One", "Junge", "Jura", "Just Another Hand", "Just Me Again Down Here", "Kadwa", "Kalam", "Kameron", "Kantumruy", "Karla", "Karma", "Kaushan Script", "Kavoon", "Kdam Thmor", "Keania One", "Kelly Slab", "Kenia", "Khand", "Khmer", "Khula", "Kite One", "Knewave", "Kotta One", "Koulen", "Kranky", "Kreon", "Kristi", "Krona One", "Kurale", "La Belle Aurore", "Laila", "Lakki Reddy", "Lancelot", "Lateef", "Lato", "League Script", "Leckerli One", "Ledger", "Lekton", "Lemon", "Libre Baskerville", "Life Savers", "Lilita One", "Lily Script One", "Limelight", "Linden Hill", "Lobster", "Lobster Two", "Londrina Outline", "Londrina Shadow", "Londrina Sketch", "Londrina Solid", "Lora", "Love Ya Like A Sister", "Loved by the King", "Lovers Quarrel", "Luckiest Guy", "Lusitana", "Lustria", "Macondo", "Macondo Swash Caps", "Magra", "Maiden Orange", "Mako", "Mallanna", "Mandali", "Marcellus", "Marcellus SC", "Marck Script", "Margarine", "Marko One", "Marmelad", "Martel", "Martel Sans", "Marvel", "Mate", "Mate SC", "Maven Pro", "McLaren", "Meddon", "MedievalSharp", "Medula One", "Megrim", "Meie Script", "Merienda", "Merienda One", "Merriweather", "Merriweather Sans", "Metal", "Metal Mania", "Metamorphous", "Metrophobic", "Michroma", "Milonga", "Miltonian", "Miltonian Tattoo", "Miniver", "Miss Fajardose", "Modak", "Modern Antiqua", "Molengo", "Molle", "Monda", "Monofett", "Monoton", "Monsieur La Doulaise", "Montaga", "Montez", "Montserrat", "Montserrat Alternates", "Montserrat Subrayada", "Moul", "Moulpali", "Mountains of Christmas", "Mouse Memoirs", "Mr Bedfort", "Mr Dafoe", "Mr De Haviland", "Mrs Saint Delafield", "Mrs Sheppards", "Muli", "Mystery Quest", "NTR", "Neucha", "Neuton", "New Rocker", "News Cycle", "Niconne", "Nixie One", "Nobile", "Nokora", "Norican", "Nosifer", "Nothing You Could Do", "Noticia Text", "Noto Sans", "Noto Serif", "Nova Cut", "Nova Flat", "Nova Mono", "Nova Oval", "Nova Round", "Nova Script", "Nova Slim", "Nova Square", "Numans", "Nunito", "Odor Mean Chey", "Offside", "Old Standard TT", "Oldenburg", "Oleo Script", "Oleo Script Swash Caps", "Open Sans", "Open Sans Condensed", "Oranienbaum", "Orbitron", "Oregano", "Orienta", "Original Surfer", "Oswald", "Over the Rainbow", "Overlock", "Overlock SC", "Ovo", "Oxygen", "Oxygen Mono", "PT Mono", "PT Sans", "PT Sans Caption", "PT Sans Narrow", "PT Serif", "PT Serif Caption", "Pacifico", "Palanquin", "Palanquin Dark", "Paprika", "Parisienne", "Passero One", "Passion One", "Pathway Gothic One", "Patrick Hand", "Patrick Hand SC", "Patua One", "Paytone One", "Peddana", "Peralta", "Permanent Marker", "Petit Formal Script", "Petrona", "Philosopher", "Piedra", "Pinyon Script", "Pirata One", "Plaster", "Play", "Playball", "Playfair Display", "Playfair Display SC", "Podkova", "Poiret One", "Poller One", "Poly", "Pompiere", "Pontano Sans", "Poppins", "Port Lligat Sans", "Port Lligat Slab", "Pragati Narrow", "Prata", "Preahvihear", "Press Start 2P", "Princess Sofia", "Prociono", "Prosto One", "Puritan", "Purple Purse", "Quando", "Quantico", "Quattrocento", "Quattrocento Sans", "Questrial", "Quicksand", "Quintessential", "Qwigley", "Racing Sans One", "Radley", "Rajdhani", "Raleway", "Raleway Dots", "Ramabhadra", "Ramaraja", "Rambla", "Rammetto One", "Ranchers", "Rancho", "Ranga", "Rationale", "Ravi Prakash", "Redressed", "Reenie Beanie", "Revalia", "Rhodium Libre", "Ribeye", "Ribeye Marrow", "Righteous", "Risque", "Roboto", "Roboto Condensed", "Roboto Mono", "Roboto Slab", "Rochester", "Rock Salt", "Rokkitt", "Romanesco", "Ropa Sans", "Rosario", "Rosarivo", "Rouge Script", "Rozha One", "Rubik", "Rubik Mono One", "Rubik One", "Ruda", "Rufina", "Ruge Boogie", "Ruluko", "Rum Raisin", "Ruslan Display", "Russo One", "Ruthie", "Rye", "Sacramento", "Sahitya", "Sail", "Salsa", "Sanchez", "Sancreek", "Sansita One", "Sarala", "Sarina", "Sarpanch", "Satisfy", "Scada", "Scheherazade", "Schoolbell", "Seaweed Script", "Sevillana", "Seymour One", "Shadows Into Light", "Shadows Into Light Two", "Shanti", "Share", "Share Tech", "Share Tech Mono", "Shojumaru", "Short Stack", "Siemreap", "Sigmar One", "Signika", "Signika Negative", "Simonetta", "Sintony", "Sirin Stencil", "Six Caps", "Skranji", "Slabo 13px", "Slabo 27px", "Slackey", "Smokum", "Smythe", "Sniglet", "Snippet", "Snowburst One", "Sofadi One", "Sofia", "Sonsie One", "Sorts Mill Goudy", "Source Code Pro", "Source Sans Pro", "Source Serif Pro", "Special Elite", "Spicy Rice", "Spinnaker", "Spirax", "Squada One", "Sree Krushnadevaraya", "Stalemate", "Stalinist One", "Stardos Stencil", "Stint Ultra Condensed", "Stint Ultra Expanded", "Stoke", "Strait", "Sue Ellen Francisco", "Sumana", "Sunshiney", "Supermercado One", "Sura", "Suranna", "Suravaram", "Suwannaphum", "Swanky and Moo Moo", "Syncopate", "Tangerine", "Taprom", "Tauri", "Teko", "Telex", "Tenali Ramakrishna", "Tenor Sans", "Text Me One", "The Girl Next Door", "Tienne", "Tillana", "Timmana", "Tinos", "Titan One", "Titillium Web", "Trade Winds", "Trocchi", "Trochut", "Trykker", "Tulpen One", "Ubuntu", "Ubuntu Condensed", "Ubuntu Mono", "Ultra", "Uncial Antiqua", "Underdog", "Unica One", "UnifrakturCook", "UnifrakturMaguntia", "Unkempt", "Unlock", "Unna", "VT323", "Vampiro One", "Varela", "Varela Round", "Vast Shadow", "Vesper Libre", "Vibur", "Vidaloka", "Viga", "Voces", "Volkhov", "Vollkorn", "Voltaire", "Waiting for the Sunrise", "Wallpoet", "Walter Turncoat", "Warnes", "Wellfleet", "Wendy One", "Wire One", "Work Sans", "Yanone Kaffeesatz", "Yantramanav", "Yellowtail", "Yeseva One", "Yesteryear", "Zeyada"];

  }).call(commonjsGlobal);
  });
  var google_1 = google.icon;
  var google_2 = google.name;
  var google_3 = google.title;
  var google_4 = google.link;
  var google_5 = google.getNames;
  var google_6 = google.getLink;
  var google_7 = google.normalizeName;

  /**
   * @module ol/tilegrid/common
   */
  /**
   * Default maximum zoom for default tile grids.
   * @type {number}
   */
  var DEFAULT_MAX_ZOOM = 42;
  /**
   * Default tile size.
   * @type {number}
   */
  var DEFAULT_TILE_SIZE = 256;

  /**
   * @module ol/size
   */
  /**
   * An array of numbers representing a size: `[width, height]`.
   * @typedef {Array<number>} Size
   * @api
   */
  /**
   * Returns a buffered size.
   * @param {Size} size Size.
   * @param {number} num The amount by which to buffer.
   * @param {Size=} opt_size Optional reusable size array.
   * @return {Size} The buffered size.
   */
  function buffer$1(size, num, opt_size) {
      if (opt_size === undefined) {
          opt_size = [0, 0];
      }
      opt_size[0] = size[0] + 2 * num;
      opt_size[1] = size[1] + 2 * num;
      return opt_size;
  }
  /**
   * Determines if a size has a positive area.
   * @param {Size} size The size to test.
   * @return {boolean} The size has a positive area.
   */
  function hasArea(size) {
      return size[0] > 0 && size[1] > 0;
  }
  /**
   * Returns a size scaled by a ratio. The result will be an array of integers.
   * @param {Size} size Size.
   * @param {number} ratio Ratio.
   * @param {Size=} opt_size Optional reusable size array.
   * @return {Size} The scaled size.
   */
  function scale$2(size, ratio, opt_size) {
      if (opt_size === undefined) {
          opt_size = [0, 0];
      }
      opt_size[0] = (size[0] * ratio + 0.5) | 0;
      opt_size[1] = (size[1] * ratio + 0.5) | 0;
      return opt_size;
  }
  /**
   * Returns an `Size` array for the passed in number (meaning: square) or
   * `Size` array.
   * (meaning: non-square),
   * @param {number|Size} size Width and height.
   * @param {Size=} opt_size Optional reusable size array.
   * @return {Size} Size.
   * @api
   */
  function toSize(size, opt_size) {
      if (Array.isArray(size)) {
          return size;
      }
      else {
          if (opt_size === undefined) {
              opt_size = [size, size];
          }
          else {
              opt_size[0] = size;
              opt_size[1] = size;
          }
          return opt_size;
      }
  }

  /**
   * @module ol/TileRange
   */
  /**
   * A representation of a contiguous block of tiles.  A tile range is specified
   * by its min/max tile coordinates and is inclusive of coordinates.
   */
  var TileRange = /** @class */ (function () {
      /**
       * @param {number} minX Minimum X.
       * @param {number} maxX Maximum X.
       * @param {number} minY Minimum Y.
       * @param {number} maxY Maximum Y.
       */
      function TileRange(minX, maxX, minY, maxY) {
          /**
           * @type {number}
           */
          this.minX = minX;
          /**
           * @type {number}
           */
          this.maxX = maxX;
          /**
           * @type {number}
           */
          this.minY = minY;
          /**
           * @type {number}
           */
          this.maxY = maxY;
      }
      /**
       * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
       * @return {boolean} Contains tile coordinate.
       */
      TileRange.prototype.contains = function (tileCoord) {
          return this.containsXY(tileCoord[1], tileCoord[2]);
      };
      /**
       * @param {TileRange} tileRange Tile range.
       * @return {boolean} Contains.
       */
      TileRange.prototype.containsTileRange = function (tileRange) {
          return this.minX <= tileRange.minX && tileRange.maxX <= this.maxX &&
              this.minY <= tileRange.minY && tileRange.maxY <= this.maxY;
      };
      /**
       * @param {number} x Tile coordinate x.
       * @param {number} y Tile coordinate y.
       * @return {boolean} Contains coordinate.
       */
      TileRange.prototype.containsXY = function (x, y) {
          return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;
      };
      /**
       * @param {TileRange} tileRange Tile range.
       * @return {boolean} Equals.
       */
      TileRange.prototype.equals = function (tileRange) {
          return this.minX == tileRange.minX && this.minY == tileRange.minY &&
              this.maxX == tileRange.maxX && this.maxY == tileRange.maxY;
      };
      /**
       * @param {TileRange} tileRange Tile range.
       */
      TileRange.prototype.extend = function (tileRange) {
          if (tileRange.minX < this.minX) {
              this.minX = tileRange.minX;
          }
          if (tileRange.maxX > this.maxX) {
              this.maxX = tileRange.maxX;
          }
          if (tileRange.minY < this.minY) {
              this.minY = tileRange.minY;
          }
          if (tileRange.maxY > this.maxY) {
              this.maxY = tileRange.maxY;
          }
      };
      /**
       * @return {number} Height.
       */
      TileRange.prototype.getHeight = function () {
          return this.maxY - this.minY + 1;
      };
      /**
       * @return {import("./size.js").Size} Size.
       */
      TileRange.prototype.getSize = function () {
          return [this.getWidth(), this.getHeight()];
      };
      /**
       * @return {number} Width.
       */
      TileRange.prototype.getWidth = function () {
          return this.maxX - this.minX + 1;
      };
      /**
       * @param {TileRange} tileRange Tile range.
       * @return {boolean} Intersects.
       */
      TileRange.prototype.intersects = function (tileRange) {
          return this.minX <= tileRange.maxX &&
              this.maxX >= tileRange.minX &&
              this.minY <= tileRange.maxY &&
              this.maxY >= tileRange.minY;
      };
      return TileRange;
  }());
  /**
   * @param {number} minX Minimum X.
   * @param {number} maxX Maximum X.
   * @param {number} minY Minimum Y.
   * @param {number} maxY Maximum Y.
   * @param {TileRange=} tileRange TileRange.
   * @return {TileRange} Tile range.
   */
  function createOrUpdate$1(minX, maxX, minY, maxY, tileRange) {
      if (tileRange !== undefined) {
          tileRange.minX = minX;
          tileRange.maxX = maxX;
          tileRange.minY = minY;
          tileRange.maxY = maxY;
          return tileRange;
      }
      else {
          return new TileRange(minX, maxX, minY, maxY);
      }
  }

  /**
   * @module ol/tilecoord
   */
  /**
   * An array of three numbers representing the location of a tile in a tile
   * grid. The order is `z` (zoom level), `x` (column), and `y` (row).
   * @typedef {Array<number>} TileCoord
   * @api
   */
  /**
   * @param {number} z Z.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {TileCoord=} opt_tileCoord Tile coordinate.
   * @return {TileCoord} Tile coordinate.
   */
  function createOrUpdate$2(z, x, y, opt_tileCoord) {
      if (opt_tileCoord !== undefined) {
          opt_tileCoord[0] = z;
          opt_tileCoord[1] = x;
          opt_tileCoord[2] = y;
          return opt_tileCoord;
      }
      else {
          return [z, x, y];
      }
  }
  /**
   * @param {number} z Z.
   * @param {number} x X.
   * @param {number} y Y.
   * @return {string} Key.
   */
  function getKeyZXY(z, x, y) {
      return z + '/' + x + '/' + y;
  }
  /**
   * Get the key for a tile coord.
   * @param {TileCoord} tileCoord The tile coord.
   * @return {string} Key.
   */
  function getKey$1(tileCoord) {
      return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);
  }
  /**
   * Get a tile coord given a key.
   * @param {string} key The tile coord key.
   * @return {TileCoord} The tile coord.
   */
  function fromKey(key) {
      return key.split('/').map(Number);
  }
  /**
   * @param {TileCoord} tileCoord Tile coord.
   * @return {number} Hash.
   */
  function hash(tileCoord) {
      return (tileCoord[1] << tileCoord[0]) + tileCoord[2];
  }
  /**
   * @param {TileCoord} tileCoord Tile coordinate.
   * @param {!import("./tilegrid/TileGrid.js").default} tileGrid Tile grid.
   * @return {boolean} Tile coordinate is within extent and zoom level range.
   */
  function withinExtentAndZ(tileCoord, tileGrid) {
      var z = tileCoord[0];
      var x = tileCoord[1];
      var y = tileCoord[2];
      if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {
          return false;
      }
      var extent = tileGrid.getExtent();
      var tileRange;
      if (!extent) {
          tileRange = tileGrid.getFullTileRange(z);
      }
      else {
          tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);
      }
      if (!tileRange) {
          return true;
      }
      else {
          return tileRange.containsXY(x, y);
      }
  }

  /**
   * @module ol/tilegrid/TileGrid
   */
  /**
   * @private
   * @type {import("../tilecoord.js").TileCoord}
   */
  var tmpTileCoord = [0, 0, 0];
  /**
   * @typedef {Object} Options
   * @property {import("../extent.js").Extent} [extent] Extent for the tile grid. No tiles outside this
   * extent will be requested by {@link module:ol/source/Tile} sources. When no `origin` or
   * `origins` are configured, the `origin` will be set to the top-left corner of the extent.
   * @property {number} [minZoom=0] Minimum zoom.
   * @property {import("../coordinate.js").Coordinate} [origin] The tile grid origin, i.e. where the `x`
   * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and downwards. If not
   * specified, `extent` or `origins` must be provided.
   * @property {Array<import("../coordinate.js").Coordinate>} [origins] Tile grid origins, i.e. where
   * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length
   * should match the length of the `resolutions` array, i.e. each resolution can have a different
   * origin. Tile coordinates increase left to right and downwards. If not specified, `extent` or
   * `origin` must be provided.
   * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs
   * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions
   * array will have a length of `maxZoom + 1`.
   * @property {Array<import("../size.js").Size>} [sizes] Number of tile rows and columns
   * of the grid for each zoom level. If specified the values
   * define each zoom level's extent together with the `origin` or `origins`.
   * A grid `extent` can be configured in addition, and will further limit the extent
   * for which tile requests are made by sources. If the bottom-left corner of
   * an extent is used as `origin` or `origins`, then the `y` value must be
   * negative because OpenLayers tile coordinates use the top left as the origin.
   * @property {number|import("../size.js").Size} [tileSize] Tile size.
   * Default is `[256, 256]`.
   * @property {Array<import("../size.js").Size>} [tileSizes] Tile sizes. If given, the array length
   * should match the length of the `resolutions` array, i.e. each resolution can have a different
   * tile size.
   */
  /**
   * @classdesc
   * Base class for setting the grid pattern for sources accessing tiled-image
   * servers.
   * @api
   */
  var TileGrid = /** @class */ (function () {
      /**
       * @param {Options} options Tile grid options.
       */
      function TileGrid(options) {
          /**
           * @protected
           * @type {number}
           */
          this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;
          /**
           * @private
           * @type {!Array<number>}
           */
          this.resolutions_ = options.resolutions;
          assert(isSorted(this.resolutions_, function (a, b) {
              return b - a;
          }, true), 17); // `resolutions` must be sorted in descending order
          // check if we've got a consistent zoom factor and origin
          var zoomFactor;
          if (!options.origins) {
              for (var i = 0, ii = this.resolutions_.length - 1; i < ii; ++i) {
                  if (!zoomFactor) {
                      zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];
                  }
                  else {
                      if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {
                          zoomFactor = undefined;
                          break;
                      }
                  }
              }
          }
          /**
           * @private
           * @type {number|undefined}
           */
          this.zoomFactor_ = zoomFactor;
          /**
           * @protected
           * @type {number}
           */
          this.maxZoom = this.resolutions_.length - 1;
          /**
           * @private
           * @type {import("../coordinate.js").Coordinate}
           */
          this.origin_ = options.origin !== undefined ? options.origin : null;
          /**
           * @private
           * @type {Array<import("../coordinate.js").Coordinate>}
           */
          this.origins_ = null;
          if (options.origins !== undefined) {
              this.origins_ = options.origins;
              assert(this.origins_.length == this.resolutions_.length, 20); // Number of `origins` and `resolutions` must be equal
          }
          var extent = options.extent;
          if (extent !== undefined &&
              !this.origin_ && !this.origins_) {
              this.origin_ = getTopLeft(extent);
          }
          assert((!this.origin_ && this.origins_) || (this.origin_ && !this.origins_), 18); // Either `origin` or `origins` must be configured, never both
          /**
           * @private
           * @type {Array<number|import("../size.js").Size>}
           */
          this.tileSizes_ = null;
          if (options.tileSizes !== undefined) {
              this.tileSizes_ = options.tileSizes;
              assert(this.tileSizes_.length == this.resolutions_.length, 19); // Number of `tileSizes` and `resolutions` must be equal
          }
          /**
           * @private
           * @type {number|import("../size.js").Size}
           */
          this.tileSize_ = options.tileSize !== undefined ?
              options.tileSize :
              !this.tileSizes_ ? DEFAULT_TILE_SIZE : null;
          assert((!this.tileSize_ && this.tileSizes_) ||
              (this.tileSize_ && !this.tileSizes_), 22); // Either `tileSize` or `tileSizes` must be configured, never both
          /**
           * @private
           * @type {import("../extent.js").Extent}
           */
          this.extent_ = extent !== undefined ? extent : null;
          /**
           * @private
           * @type {Array<import("../TileRange.js").default>}
           */
          this.fullTileRanges_ = null;
          /**
           * @private
           * @type {import("../size.js").Size}
           */
          this.tmpSize_ = [0, 0];
          if (options.sizes !== undefined) {
              this.fullTileRanges_ = options.sizes.map(function (size, z) {
                  var tileRange = new TileRange(Math.min(0, size[0]), Math.max(size[0] - 1, -1), Math.min(0, size[1]), Math.max(size[1] - 1, -1));
                  return tileRange;
              }, this);
          }
          else if (extent) {
              this.calculateTileRanges_(extent);
          }
      }
      /**
       * Call a function with each tile coordinate for a given extent and zoom level.
       *
       * @param {import("../extent.js").Extent} extent Extent.
       * @param {number} zoom Integer zoom level.
       * @param {function(import("../tilecoord.js").TileCoord): void} callback Function called with each tile coordinate.
       * @api
       */
      TileGrid.prototype.forEachTileCoord = function (extent, zoom, callback) {
          var tileRange = this.getTileRangeForExtentAndZ(extent, zoom);
          for (var i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i) {
              for (var j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j) {
                  callback([zoom, i, j]);
              }
          }
      };
      /**
       * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
       * @param {function(number, import("../TileRange.js").default): boolean} callback Callback.
       * @param {import("../TileRange.js").default=} opt_tileRange Temporary import("../TileRange.js").default object.
       * @param {import("../extent.js").Extent=} opt_extent Temporary import("../extent.js").Extent object.
       * @return {boolean} Callback succeeded.
       */
      TileGrid.prototype.forEachTileCoordParentTileRange = function (tileCoord, callback, opt_tileRange, opt_extent) {
          var tileRange, x, y;
          var tileCoordExtent = null;
          var z = tileCoord[0] - 1;
          if (this.zoomFactor_ === 2) {
              x = tileCoord[1];
              y = tileCoord[2];
          }
          else {
              tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);
          }
          while (z >= this.minZoom) {
              if (this.zoomFactor_ === 2) {
                  x = Math.floor(x / 2);
                  y = Math.floor(y / 2);
                  tileRange = createOrUpdate$1(x, x, y, y, opt_tileRange);
              }
              else {
                  tileRange = this.getTileRangeForExtentAndZ(tileCoordExtent, z, opt_tileRange);
              }
              if (callback(z, tileRange)) {
                  return true;
              }
              --z;
          }
          return false;
      };
      /**
       * Get the extent for this tile grid, if it was configured.
       * @return {import("../extent.js").Extent} Extent.
       * @api
       */
      TileGrid.prototype.getExtent = function () {
          return this.extent_;
      };
      /**
       * Get the maximum zoom level for the grid.
       * @return {number} Max zoom.
       * @api
       */
      TileGrid.prototype.getMaxZoom = function () {
          return this.maxZoom;
      };
      /**
       * Get the minimum zoom level for the grid.
       * @return {number} Min zoom.
       * @api
       */
      TileGrid.prototype.getMinZoom = function () {
          return this.minZoom;
      };
      /**
       * Get the origin for the grid at the given zoom level.
       * @param {number} z Integer zoom level.
       * @return {import("../coordinate.js").Coordinate} Origin.
       * @api
       */
      TileGrid.prototype.getOrigin = function (z) {
          if (this.origin_) {
              return this.origin_;
          }
          else {
              return this.origins_[z];
          }
      };
      /**
       * Get the resolution for the given zoom level.
       * @param {number} z Integer zoom level.
       * @return {number} Resolution.
       * @api
       */
      TileGrid.prototype.getResolution = function (z) {
          return this.resolutions_[z];
      };
      /**
       * Get the list of resolutions for the tile grid.
       * @return {Array<number>} Resolutions.
       * @api
       */
      TileGrid.prototype.getResolutions = function () {
          return this.resolutions_;
      };
      /**
       * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
       * @param {import("../TileRange.js").default=} opt_tileRange Temporary import("../TileRange.js").default object.
       * @param {import("../extent.js").Extent=} opt_extent Temporary import("../extent.js").Extent object.
       * @return {import("../TileRange.js").default} Tile range.
       */
      TileGrid.prototype.getTileCoordChildTileRange = function (tileCoord, opt_tileRange, opt_extent) {
          if (tileCoord[0] < this.maxZoom) {
              if (this.zoomFactor_ === 2) {
                  var minX = tileCoord[1] * 2;
                  var minY = tileCoord[2] * 2;
                  return createOrUpdate$1(minX, minX + 1, minY, minY + 1, opt_tileRange);
              }
              var tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);
              return this.getTileRangeForExtentAndZ(tileCoordExtent, tileCoord[0] + 1, opt_tileRange);
          }
          return null;
      };
      /**
       * Get the extent for a tile range.
       * @param {number} z Integer zoom level.
       * @param {import("../TileRange.js").default} tileRange Tile range.
       * @param {import("../extent.js").Extent=} opt_extent Temporary import("../extent.js").Extent object.
       * @return {import("../extent.js").Extent} Extent.
       */
      TileGrid.prototype.getTileRangeExtent = function (z, tileRange, opt_extent) {
          var origin = this.getOrigin(z);
          var resolution = this.getResolution(z);
          var tileSize = toSize(this.getTileSize(z), this.tmpSize_);
          var minX = origin[0] + tileRange.minX * tileSize[0] * resolution;
          var maxX = origin[0] + (tileRange.maxX + 1) * tileSize[0] * resolution;
          var minY = origin[1] + tileRange.minY * tileSize[1] * resolution;
          var maxY = origin[1] + (tileRange.maxY + 1) * tileSize[1] * resolution;
          return createOrUpdate(minX, minY, maxX, maxY, opt_extent);
      };
      /**
       * Get a tile range for the given extent and integer zoom level.
       * @param {import("../extent.js").Extent} extent Extent.
       * @param {number} z Integer zoom level.
       * @param {import("../TileRange.js").default=} opt_tileRange Temporary tile range object.
       * @return {import("../TileRange.js").default} Tile range.
       */
      TileGrid.prototype.getTileRangeForExtentAndZ = function (extent, z, opt_tileRange) {
          var tileCoord = tmpTileCoord;
          this.getTileCoordForXYAndZ_(extent[0], extent[3], z, false, tileCoord);
          var minX = tileCoord[1];
          var minY = tileCoord[2];
          this.getTileCoordForXYAndZ_(extent[2], extent[1], z, true, tileCoord);
          return createOrUpdate$1(minX, tileCoord[1], minY, tileCoord[2], opt_tileRange);
      };
      /**
       * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
       * @return {import("../coordinate.js").Coordinate} Tile center.
       */
      TileGrid.prototype.getTileCoordCenter = function (tileCoord) {
          var origin = this.getOrigin(tileCoord[0]);
          var resolution = this.getResolution(tileCoord[0]);
          var tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);
          return [
              origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution,
              origin[1] - (tileCoord[2] + 0.5) * tileSize[1] * resolution
          ];
      };
      /**
       * Get the extent of a tile coordinate.
       *
       * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
       * @param {import("../extent.js").Extent=} opt_extent Temporary extent object.
       * @return {import("../extent.js").Extent} Extent.
       * @api
       */
      TileGrid.prototype.getTileCoordExtent = function (tileCoord, opt_extent) {
          var origin = this.getOrigin(tileCoord[0]);
          var resolution = this.getResolution(tileCoord[0]);
          var tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);
          var minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;
          var minY = origin[1] - (tileCoord[2] + 1) * tileSize[1] * resolution;
          var maxX = minX + tileSize[0] * resolution;
          var maxY = minY + tileSize[1] * resolution;
          return createOrUpdate(minX, minY, maxX, maxY, opt_extent);
      };
      /**
       * Get the tile coordinate for the given map coordinate and resolution.  This
       * method considers that coordinates that intersect tile boundaries should be
       * assigned the higher tile coordinate.
       *
       * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
       * @param {number} resolution Resolution.
       * @param {import("../tilecoord.js").TileCoord=} opt_tileCoord Destination import("../tilecoord.js").TileCoord object.
       * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
       * @api
       */
      TileGrid.prototype.getTileCoordForCoordAndResolution = function (coordinate, resolution, opt_tileCoord) {
          return this.getTileCoordForXYAndResolution_(coordinate[0], coordinate[1], resolution, false, opt_tileCoord);
      };
      /**
       * Note that this method should not be called for resolutions that correspond
       * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.
       * @param {number} x X.
       * @param {number} y Y.
       * @param {number} resolution Resolution (for a non-integer zoom level).
       * @param {boolean} reverseIntersectionPolicy Instead of letting edge
       *     intersections go to the higher tile coordinate, let edge intersections
       *     go to the lower tile coordinate.
       * @param {import("../tilecoord.js").TileCoord=} opt_tileCoord Temporary import("../tilecoord.js").TileCoord object.
       * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
       * @private
       */
      TileGrid.prototype.getTileCoordForXYAndResolution_ = function (x, y, resolution, reverseIntersectionPolicy, opt_tileCoord) {
          var z = this.getZForResolution(resolution);
          var scale = resolution / this.getResolution(z);
          var origin = this.getOrigin(z);
          var tileSize = toSize(this.getTileSize(z), this.tmpSize_);
          var adjustX = reverseIntersectionPolicy ? 0.5 : 0;
          var adjustY = reverseIntersectionPolicy ? 0.5 : 0;
          var xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);
          var yFromOrigin = Math.floor((origin[1] - y) / resolution + adjustY);
          var tileCoordX = scale * xFromOrigin / tileSize[0];
          var tileCoordY = scale * yFromOrigin / tileSize[1];
          if (reverseIntersectionPolicy) {
              tileCoordX = Math.ceil(tileCoordX) - 1;
              tileCoordY = Math.ceil(tileCoordY) - 1;
          }
          else {
              tileCoordX = Math.floor(tileCoordX);
              tileCoordY = Math.floor(tileCoordY);
          }
          return createOrUpdate$2(z, tileCoordX, tileCoordY, opt_tileCoord);
      };
      /**
       * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,
       * they should have separate implementations.  This method is for integer zoom
       * levels.  The other method should only be called for resolutions corresponding
       * to non-integer zoom levels.
       * @param {number} x Map x coordinate.
       * @param {number} y Map y coordinate.
       * @param {number} z Integer zoom level.
       * @param {boolean} reverseIntersectionPolicy Instead of letting edge
       *     intersections go to the higher tile coordinate, let edge intersections
       *     go to the lower tile coordinate.
       * @param {import("../tilecoord.js").TileCoord=} opt_tileCoord Temporary import("../tilecoord.js").TileCoord object.
       * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
       * @private
       */
      TileGrid.prototype.getTileCoordForXYAndZ_ = function (x, y, z, reverseIntersectionPolicy, opt_tileCoord) {
          var origin = this.getOrigin(z);
          var resolution = this.getResolution(z);
          var tileSize = toSize(this.getTileSize(z), this.tmpSize_);
          var adjustX = reverseIntersectionPolicy ? 0.5 : 0;
          var adjustY = reverseIntersectionPolicy ? 0.5 : 0;
          var xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);
          var yFromOrigin = Math.floor((origin[1] - y) / resolution + adjustY);
          var tileCoordX = xFromOrigin / tileSize[0];
          var tileCoordY = yFromOrigin / tileSize[1];
          if (reverseIntersectionPolicy) {
              tileCoordX = Math.ceil(tileCoordX) - 1;
              tileCoordY = Math.ceil(tileCoordY) - 1;
          }
          else {
              tileCoordX = Math.floor(tileCoordX);
              tileCoordY = Math.floor(tileCoordY);
          }
          return createOrUpdate$2(z, tileCoordX, tileCoordY, opt_tileCoord);
      };
      /**
       * Get a tile coordinate given a map coordinate and zoom level.
       * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
       * @param {number} z Zoom level.
       * @param {import("../tilecoord.js").TileCoord=} opt_tileCoord Destination import("../tilecoord.js").TileCoord object.
       * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
       * @api
       */
      TileGrid.prototype.getTileCoordForCoordAndZ = function (coordinate, z, opt_tileCoord) {
          return this.getTileCoordForXYAndZ_(coordinate[0], coordinate[1], z, false, opt_tileCoord);
      };
      /**
       * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
       * @return {number} Tile resolution.
       */
      TileGrid.prototype.getTileCoordResolution = function (tileCoord) {
          return this.resolutions_[tileCoord[0]];
      };
      /**
       * Get the tile size for a zoom level. The type of the return value matches the
       * `tileSize` or `tileSizes` that the tile grid was configured with. To always
       * get an `import("../size.js").Size`, run the result through `import("../size.js").Size.toSize()`.
       * @param {number} z Z.
       * @return {number|import("../size.js").Size} Tile size.
       * @api
       */
      TileGrid.prototype.getTileSize = function (z) {
          if (this.tileSize_) {
              return this.tileSize_;
          }
          else {
              return this.tileSizes_[z];
          }
      };
      /**
       * @param {number} z Zoom level.
       * @return {import("../TileRange.js").default} Extent tile range for the specified zoom level.
       */
      TileGrid.prototype.getFullTileRange = function (z) {
          if (!this.fullTileRanges_) {
              return null;
          }
          else {
              return this.fullTileRanges_[z];
          }
      };
      /**
       * @param {number} resolution Resolution.
       * @param {number=} opt_direction If 0, the nearest resolution will be used.
       *     If 1, the nearest lower resolution will be used. If -1, the nearest
       *     higher resolution will be used. Default is 0.
       * @return {number} Z.
       * @api
       */
      TileGrid.prototype.getZForResolution = function (resolution, opt_direction) {
          var z = linearFindNearest(this.resolutions_, resolution, opt_direction || 0);
          return clamp(z, this.minZoom, this.maxZoom);
      };
      /**
       * @param {!import("../extent.js").Extent} extent Extent for this tile grid.
       * @private
       */
      TileGrid.prototype.calculateTileRanges_ = function (extent) {
          var length = this.resolutions_.length;
          var fullTileRanges = new Array(length);
          for (var z = this.minZoom; z < length; ++z) {
              fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);
          }
          this.fullTileRanges_ = fullTileRanges;
      };
      return TileGrid;
  }());

  /**
   * @module ol/tilegrid
   */
  /**
   * @param {import("./proj/Projection.js").default} projection Projection.
   * @return {!TileGrid} Default tile grid for the
   * passed projection.
   */
  function getForProjection(projection) {
      var tileGrid = projection.getDefaultTileGrid();
      if (!tileGrid) {
          tileGrid = createForProjection(projection);
          projection.setDefaultTileGrid(tileGrid);
      }
      return tileGrid;
  }
  /**
   * @param {TileGrid} tileGrid Tile grid.
   * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @param {import("./proj/Projection.js").default} projection Projection.
   * @return {import("./tilecoord.js").TileCoord} Tile coordinate.
   */
  function wrapX$1(tileGrid, tileCoord, projection) {
      var z = tileCoord[0];
      var center = tileGrid.getTileCoordCenter(tileCoord);
      var projectionExtent = extentFromProjection(projection);
      if (!containsCoordinate(projectionExtent, center)) {
          var worldWidth = getWidth(projectionExtent);
          var worldsAway = Math.ceil((projectionExtent[0] - center[0]) / worldWidth);
          center[0] += worldWidth * worldsAway;
          return tileGrid.getTileCoordForCoordAndZ(center, z);
      }
      else {
          return tileCoord;
      }
  }
  /**
   * @param {import("./extent.js").Extent} extent Extent.
   * @param {number=} opt_maxZoom Maximum zoom level (default is
   *     DEFAULT_MAX_ZOOM).
   * @param {number|import("./size.js").Size=} opt_tileSize Tile size (default uses
   *     DEFAULT_TILE_SIZE).
   * @param {Corner=} opt_corner Extent corner (default is `'top-left'`).
   * @return {!TileGrid} TileGrid instance.
   */
  function createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner) {
      var corner = opt_corner !== undefined ? opt_corner : Corner.TOP_LEFT;
      var resolutions = resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize);
      return new TileGrid({
          extent: extent,
          origin: getCorner(extent, corner),
          resolutions: resolutions,
          tileSize: opt_tileSize
      });
  }
  /**
   * @typedef {Object} XYZOptions
   * @property {import("./extent.js").Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the
   * top-left corner of the extent. If `maxResolution` is not provided the zero level of the grid is defined by the resolution
   * at which one tile fits in the provided extent. If not provided, the extent of the EPSG:3857 projection is used.
   * @property {number} [maxResolution] Resolution at level zero.
   * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels
   * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.
   * @property {number} [minZoom=0] Minimum zoom.
   * @property {number|import("./size.js").Size} [tileSize=[256, 256]] Tile size in pixels.
   */
  /**
   * Creates a tile grid with a standard XYZ tiling scheme.
   * @param {XYZOptions=} opt_options Tile grid options.
   * @return {!TileGrid} Tile grid instance.
   * @api
   */
  function createXYZ(opt_options) {
      var xyzOptions = opt_options || {};
      var extent = xyzOptions.extent || get$4('EPSG:3857').getExtent();
      var gridOptions = {
          extent: extent,
          minZoom: xyzOptions.minZoom,
          tileSize: xyzOptions.tileSize,
          resolutions: resolutionsFromExtent(extent, xyzOptions.maxZoom, xyzOptions.tileSize, xyzOptions.maxResolution)
      };
      return new TileGrid(gridOptions);
  }
  /**
   * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.
   * @param {import("./extent.js").Extent} extent Extent.
   * @param {number=} opt_maxZoom Maximum zoom level (default is
   *     DEFAULT_MAX_ZOOM).
   * @param {number|import("./size.js").Size=} opt_tileSize Tile size (default uses
   *     DEFAULT_TILE_SIZE).
   * @param {number=} opt_maxResolution Resolution at level zero.
   * @return {!Array<number>} Resolutions array.
   */
  function resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize, opt_maxResolution) {
      var maxZoom = opt_maxZoom !== undefined ?
          opt_maxZoom : DEFAULT_MAX_ZOOM;
      var height = getHeight(extent);
      var width = getWidth(extent);
      var tileSize = toSize(opt_tileSize !== undefined ?
          opt_tileSize : DEFAULT_TILE_SIZE);
      var maxResolution = opt_maxResolution > 0 ? opt_maxResolution :
          Math.max(width / tileSize[0], height / tileSize[1]);
      var length = maxZoom + 1;
      var resolutions = new Array(length);
      for (var z = 0; z < length; ++z) {
          resolutions[z] = maxResolution / Math.pow(2, z);
      }
      return resolutions;
  }
  /**
   * @param {import("./proj.js").ProjectionLike} projection Projection.
   * @param {number=} opt_maxZoom Maximum zoom level (default is
   *     DEFAULT_MAX_ZOOM).
   * @param {number|import("./size.js").Size=} opt_tileSize Tile size (default uses
   *     DEFAULT_TILE_SIZE).
   * @param {Corner=} opt_corner Extent corner (default is `'top-left'`).
   * @return {!TileGrid} TileGrid instance.
   */
  function createForProjection(projection, opt_maxZoom, opt_tileSize, opt_corner) {
      var extent = extentFromProjection(projection);
      return createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner);
  }
  /**
   * Generate a tile grid extent from a projection.  If the projection has an
   * extent, it is used.  If not, a global extent is assumed.
   * @param {import("./proj.js").ProjectionLike} projection Projection.
   * @return {import("./extent.js").Extent} Extent.
   */
  function extentFromProjection(projection) {
      projection = get$4(projection);
      var extent = projection.getExtent();
      if (!extent) {
          var half = 180 * METERS_PER_UNIT[Units.DEGREES] / projection.getMetersPerUnit();
          extent = createOrUpdate(-half, -half, half, half);
      }
      return extent;
  }

  /**
   * @module ol/CollectionEventType
   */
  /**
   * @enum {string}
   */
  var CollectionEventType = {
      /**
       * Triggered when an item is added to the collection.
       * @event module:ol/Collection.CollectionEvent#add
       * @api
       */
      ADD: 'add',
      /**
       * Triggered when an item is removed from the collection.
       * @event module:ol/Collection.CollectionEvent#remove
       * @api
       */
      REMOVE: 'remove'
  };

  var __extends$c =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @enum {string}
   * @private
   */
  var Property = {
      LENGTH: 'length'
  };
  /**
   * @classdesc
   * Events emitted by {@link module:ol/Collection~Collection} instances are instances of this
   * type.
   */
  var CollectionEvent = /** @class */ (function (_super) {
      __extends$c(CollectionEvent, _super);
      /**
       * @param {CollectionEventType} type Type.
       * @param {*=} opt_element Element.
       * @param {number=} opt_index The index of the added or removed element.
       */
      function CollectionEvent(type, opt_element, opt_index) {
          var _this = _super.call(this, type) || this;
          /**
           * The element that is added to or removed from the collection.
           * @type {*}
           * @api
           */
          _this.element = opt_element;
          /**
           * The index of the added or removed element.
           * @type {number}
           * @api
           */
          _this.index = opt_index;
          return _this;
      }
      return CollectionEvent;
  }(BaseEvent));
  /**
   * @typedef {Object} Options
   * @property {boolean} [unique=false] Disallow the same item from being added to
   * the collection twice.
   */
  /**
   * @classdesc
   * An expanded version of standard JS Array, adding convenience methods for
   * manipulation. Add and remove changes to the Collection trigger a Collection
   * event. Note that this does not cover changes to the objects _within_ the
   * Collection; they trigger events on the appropriate object, not on the
   * Collection as a whole.
   *
   * @fires CollectionEvent
   *
   * @template T
   * @api
   */
  var Collection$2 = /** @class */ (function (_super) {
      __extends$c(Collection, _super);
      /**
       * @param {Array<T>=} opt_array Array.
       * @param {Options=} opt_options Collection options.
       */
      function Collection(opt_array, opt_options) {
          var _this = _super.call(this) || this;
          var options = opt_options || {};
          /**
           * @private
           * @type {boolean}
           */
          _this.unique_ = !!options.unique;
          /**
           * @private
           * @type {!Array<T>}
           */
          _this.array_ = opt_array ? opt_array : [];
          if (_this.unique_) {
              for (var i = 0, ii = _this.array_.length; i < ii; ++i) {
                  _this.assertUnique_(_this.array_[i], i);
              }
          }
          _this.updateLength_();
          return _this;
      }
      /**
       * Remove all elements from the collection.
       * @api
       */
      Collection.prototype.clear = function () {
          while (this.getLength() > 0) {
              this.pop();
          }
      };
      /**
       * Add elements to the collection.  This pushes each item in the provided array
       * to the end of the collection.
       * @param {!Array<T>} arr Array.
       * @return {Collection<T>} This collection.
       * @api
       */
      Collection.prototype.extend = function (arr) {
          for (var i = 0, ii = arr.length; i < ii; ++i) {
              this.push(arr[i]);
          }
          return this;
      };
      /**
       * Iterate over each element, calling the provided callback.
       * @param {function(T, number, Array<T>): *} f The function to call
       *     for every element. This function takes 3 arguments (the element, the
       *     index and the array). The return value is ignored.
       * @api
       */
      Collection.prototype.forEach = function (f) {
          var array = this.array_;
          for (var i = 0, ii = array.length; i < ii; ++i) {
              f(array[i], i, array);
          }
      };
      /**
       * Get a reference to the underlying Array object. Warning: if the array
       * is mutated, no events will be dispatched by the collection, and the
       * collection's "length" property won't be in sync with the actual length
       * of the array.
       * @return {!Array<T>} Array.
       * @api
       */
      Collection.prototype.getArray = function () {
          return this.array_;
      };
      /**
       * Get the element at the provided index.
       * @param {number} index Index.
       * @return {T} Element.
       * @api
       */
      Collection.prototype.item = function (index) {
          return this.array_[index];
      };
      /**
       * Get the length of this collection.
       * @return {number} The length of the array.
       * @observable
       * @api
       */
      Collection.prototype.getLength = function () {
          return this.get(Property.LENGTH);
      };
      /**
       * Insert an element at the provided index.
       * @param {number} index Index.
       * @param {T} elem Element.
       * @api
       */
      Collection.prototype.insertAt = function (index, elem) {
          if (this.unique_) {
              this.assertUnique_(elem);
          }
          this.array_.splice(index, 0, elem);
          this.updateLength_();
          this.dispatchEvent(new CollectionEvent(CollectionEventType.ADD, elem, index));
      };
      /**
       * Remove the last element of the collection and return it.
       * Return `undefined` if the collection is empty.
       * @return {T|undefined} Element.
       * @api
       */
      Collection.prototype.pop = function () {
          return this.removeAt(this.getLength() - 1);
      };
      /**
       * Insert the provided element at the end of the collection.
       * @param {T} elem Element.
       * @return {number} New length of the collection.
       * @api
       */
      Collection.prototype.push = function (elem) {
          if (this.unique_) {
              this.assertUnique_(elem);
          }
          var n = this.getLength();
          this.insertAt(n, elem);
          return this.getLength();
      };
      /**
       * Remove the first occurrence of an element from the collection.
       * @param {T} elem Element.
       * @return {T|undefined} The removed element or undefined if none found.
       * @api
       */
      Collection.prototype.remove = function (elem) {
          var arr = this.array_;
          for (var i = 0, ii = arr.length; i < ii; ++i) {
              if (arr[i] === elem) {
                  return this.removeAt(i);
              }
          }
          return undefined;
      };
      /**
       * Remove the element at the provided index and return it.
       * Return `undefined` if the collection does not contain this index.
       * @param {number} index Index.
       * @return {T|undefined} Value.
       * @api
       */
      Collection.prototype.removeAt = function (index) {
          var prev = this.array_[index];
          this.array_.splice(index, 1);
          this.updateLength_();
          this.dispatchEvent(new CollectionEvent(CollectionEventType.REMOVE, prev, index));
          return prev;
      };
      /**
       * Set the element at the provided index.
       * @param {number} index Index.
       * @param {T} elem Element.
       * @api
       */
      Collection.prototype.setAt = function (index, elem) {
          var n = this.getLength();
          if (index < n) {
              if (this.unique_) {
                  this.assertUnique_(elem, index);
              }
              var prev = this.array_[index];
              this.array_[index] = elem;
              this.dispatchEvent(new CollectionEvent(CollectionEventType.REMOVE, prev, index));
              this.dispatchEvent(new CollectionEvent(CollectionEventType.ADD, elem, index));
          }
          else {
              for (var j = n; j < index; ++j) {
                  this.insertAt(j, undefined);
              }
              this.insertAt(index, elem);
          }
      };
      /**
       * @private
       */
      Collection.prototype.updateLength_ = function () {
          this.set(Property.LENGTH, this.array_.length);
      };
      /**
       * @private
       * @param {T} elem Element.
       * @param {number=} opt_except Optional index to ignore.
       */
      Collection.prototype.assertUnique_ = function (elem, opt_except) {
          for (var i = 0, ii = this.array_.length; i < ii; ++i) {
              if (this.array_[i] === elem && i !== opt_except) {
                  throw new AssertionError(58);
              }
          }
      };
      return Collection;
  }(BaseObject));

  var __extends$d =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @classdesc
   * Events emitted as map events are instances of this type.
   * See {@link module:ol/PluggableMap~PluggableMap} for which events trigger a map event.
   */
  var MapEvent = /** @class */ (function (_super) {
      __extends$d(MapEvent, _super);
      /**
       * @param {string} type Event type.
       * @param {import("./PluggableMap.js").default} map Map.
       * @param {?import("./PluggableMap.js").FrameState=} opt_frameState Frame state.
       */
      function MapEvent(type, map, opt_frameState) {
          var _this = _super.call(this, type) || this;
          /**
           * The map where the event occurred.
           * @type {import("./PluggableMap.js").default}
           * @api
           */
          _this.map = map;
          /**
           * The frame state at the time of the event.
           * @type {?import("./PluggableMap.js").FrameState}
           * @api
           */
          _this.frameState = opt_frameState !== undefined ? opt_frameState : null;
          return _this;
      }
      return MapEvent;
  }(BaseEvent));

  var __extends$e =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @classdesc
   * Events emitted as map browser events are instances of this type.
   * See {@link module:ol/PluggableMap~PluggableMap} for which events trigger a map browser event.
   */
  var MapBrowserEvent = /** @class */ (function (_super) {
      __extends$e(MapBrowserEvent, _super);
      /**
       * @param {string} type Event type.
       * @param {import("./PluggableMap.js").default} map Map.
       * @param {Event} browserEvent Browser event.
       * @param {boolean=} opt_dragging Is the map currently being dragged?
       * @param {?import("./PluggableMap.js").FrameState=} opt_frameState Frame state.
       */
      function MapBrowserEvent(type, map, browserEvent, opt_dragging, opt_frameState) {
          var _this = _super.call(this, type, map, opt_frameState) || this;
          /**
           * The original browser event.
           * @const
           * @type {Event}
           * @api
           */
          _this.originalEvent = browserEvent;
          /**
           * The map pixel relative to the viewport corresponding to the original browser event.
           * @type {?import("./pixel.js").Pixel}
           */
          _this.pixel_ = null;
          /**
           * The coordinate in the user projection corresponding to the original browser event.
           * @type {?import("./coordinate.js").Coordinate}
           */
          _this.coordinate_ = null;
          /**
           * Indicates if the map is currently being dragged. Only set for
           * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.
           *
           * @type {boolean}
           * @api
           */
          _this.dragging = opt_dragging !== undefined ? opt_dragging : false;
          return _this;
      }
      Object.defineProperty(MapBrowserEvent.prototype, "pixel", {
          /**
           * The map pixel relative to the viewport corresponding to the original browser event.
           * @type {import("./pixel.js").Pixel}
           * @api
           */
          get: function () {
              if (!this.pixel_) {
                  this.pixel_ = this.map.getEventPixel(this.originalEvent);
              }
              return this.pixel_;
          },
          set: function (pixel) {
              this.pixel_ = pixel;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(MapBrowserEvent.prototype, "coordinate", {
          /**
           * The coordinate corresponding to the original browser event.  This will be in the user
           * projection if one is set.  Otherwise it will be in the view projection.
           * @type {import("./coordinate.js").Coordinate}
           * @api
           */
          get: function () {
              if (!this.coordinate_) {
                  this.coordinate_ = this.map.getCoordinateFromPixel(this.pixel);
              }
              return this.coordinate_;
          },
          set: function (coordinate) {
              this.coordinate_ = coordinate;
          },
          enumerable: true,
          configurable: true
      });
      /**
       * Prevents the default browser action.
       * See https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault.
       * @override
       * @api
       */
      MapBrowserEvent.prototype.preventDefault = function () {
          _super.prototype.preventDefault.call(this);
          this.originalEvent.preventDefault();
      };
      /**
       * Prevents further propagation of the current event.
       * See https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation.
       * @override
       * @api
       */
      MapBrowserEvent.prototype.stopPropagation = function () {
          _super.prototype.stopPropagation.call(this);
          this.originalEvent.stopPropagation();
      };
      return MapBrowserEvent;
  }(MapEvent));

  // This Source Code Form is subject to the terms of the Mozilla Public
  // License, v. 2.0. If a copy of the MPL was not distributed with this
  // file, You can obtain one at http://mozilla.org/MPL/2.0/
  // Variable to hold current primary touch event identifier.
  // iOS needs this since it does not attribute
  // identifier 0 to primary touch event.
  var primaryTouchId = null;
  if (!("PointerEvent" in window)) {
      // Define {set,release}PointerCapture
      definePointerCapture();
      // Create Pointer polyfill from mouse events only on non-touch device
      if (!("TouchEvent" in window)) {
          addMouseToPointerListener(document, "mousedown", "pointerdown");
          addMouseToPointerListener(document, "mousemove", "pointermove");
          addMouseToPointerListener(document, "mouseup", "pointerup");
      }
      // Define Pointer polyfill from touch events
      addTouchToPointerListener(document, "touchstart", "pointerdown");
      addTouchToPointerListener(document, "touchmove", "pointermove");
      addTouchToPointerListener(document, "touchend", "pointerup");
  }
  // Function defining {set,release}PointerCapture from {set,releas}Capture
  function definePointerCapture() {
      Element.prototype.setPointerCapture = Element.prototype.setCapture;
      Element.prototype.releasePointerCapture = Element.prototype.releaseCapture;
  }
  // Function converting a Mouse event to a Pointer event.
  function addMouseToPointerListener(target, mouseType, pointerType) {
      target.addEventListener(mouseType, function (mouseEvent) {
          var pointerEvent = new MouseEvent(pointerType, mouseEvent);
          pointerEvent.pointerId = 1;
          pointerEvent.isPrimary = true;
          pointerEvent.pointerType = "mouse";
          pointerEvent.width = 1;
          pointerEvent.height = 1;
          pointerEvent.tiltX = 0;
          pointerEvent.tiltY = 0;
          // pressure is 0.5 if a button is holded
          "buttons" in mouseEvent && mouseEvent.buttons !== 0
              ? (pointerEvent.pressure = 0.5)
              : (pointerEvent.pressure = 0);
          // if already capturing mouse event, transfer target
          // and don't forget implicit release on mouseup.
          var target = mouseEvent.target;
          target.dispatchEvent(pointerEvent);
          if (pointerEvent.defaultPrevented) {
              mouseEvent.preventDefault();
          }
      });
  }
  // Function converting a Touch event to a Pointer event.
  function addTouchToPointerListener(target, touchType, pointerType) {
      target.addEventListener(touchType, function (touchEvent) {
          var changedTouches = touchEvent.changedTouches;
          var nbTouches = changedTouches.length;
          for (var t = 0; t < nbTouches; t++) {
              var pointerEvent = new CustomEvent(pointerType, {
                  bubbles: true,
                  cancelable: true
              });
              pointerEvent.ctrlKey = touchEvent.ctrlKey;
              pointerEvent.shiftKey = touchEvent.shiftKey;
              pointerEvent.altKey = touchEvent.altKey;
              pointerEvent.metaKey = touchEvent.metaKey;
              var touch = changedTouches.item(t);
              pointerEvent.clientX = touch.clientX;
              pointerEvent.clientY = touch.clientY;
              pointerEvent.screenX = touch.screenX;
              pointerEvent.screenY = touch.screenY;
              pointerEvent.pageX = touch.pageX;
              pointerEvent.pageY = touch.pageY;
              var rect = touch.target.getBoundingClientRect();
              pointerEvent.offsetX = touch.clientX - rect.left;
              pointerEvent.offsetY = touch.clientY - rect.top;
              pointerEvent.pointerId = 1 + touch.identifier;
              // Default values for standard MouseEvent fields.
              pointerEvent.button = 0;
              pointerEvent.buttons = 1;
              pointerEvent.movementX = 0;
              pointerEvent.movementY = 0;
              pointerEvent.region = null;
              pointerEvent.relatedTarget = null;
              pointerEvent.x = pointerEvent.clientX;
              pointerEvent.y = pointerEvent.clientY;
              // Pointer event details
              pointerEvent.pointerType = "touch";
              pointerEvent.width = 1;
              pointerEvent.height = 1;
              pointerEvent.tiltX = 0;
              pointerEvent.tiltY = 0;
              pointerEvent.pressure = 1;
              // First touch is the primary pointer event.
              if (touchType === "touchstart" && primaryTouchId === null) {
                  primaryTouchId = touch.identifier;
              }
              pointerEvent.isPrimary = touch.identifier === primaryTouchId;
              // If first touch ends, reset primary touch id.
              if (touchType === "touchend" && pointerEvent.isPrimary) {
                  primaryTouchId = null;
              }
              touchEvent.target.dispatchEvent(pointerEvent);
              if (pointerEvent.defaultPrevented) {
                  touchEvent.preventDefault();
              }
          }
      });
  }

  /**
   * @module ol/MapBrowserEventType
   */
  /**
   * Constants for event names.
   * @enum {string}
   */
  var MapBrowserEventType = {
      /**
       * A true single click with no dragging and no double click. Note that this
       * event is delayed by 250 ms to ensure that it is not a double click.
       * @event module:ol/MapBrowserEvent~MapBrowserEvent#singleclick
       * @api
       */
      SINGLECLICK: 'singleclick',
      /**
       * A click with no dragging. A double click will fire two of this.
       * @event module:ol/MapBrowserEvent~MapBrowserEvent#click
       * @api
       */
      CLICK: EventType.CLICK,
      /**
       * A true double click, with no dragging.
       * @event module:ol/MapBrowserEvent~MapBrowserEvent#dblclick
       * @api
       */
      DBLCLICK: EventType.DBLCLICK,
      /**
       * Triggered when a pointer is dragged.
       * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointerdrag
       * @api
       */
      POINTERDRAG: 'pointerdrag',
      /**
       * Triggered when a pointer is moved. Note that on touch devices this is
       * triggered when the map is panned, so is not the same as mousemove.
       * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointermove
       * @api
       */
      POINTERMOVE: 'pointermove',
      POINTERDOWN: 'pointerdown',
      POINTERUP: 'pointerup',
      POINTEROVER: 'pointerover',
      POINTEROUT: 'pointerout',
      POINTERENTER: 'pointerenter',
      POINTERLEAVE: 'pointerleave',
      POINTERCANCEL: 'pointercancel'
  };

  var __extends$f =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  var MapBrowserPointerEvent = /** @class */ (function (_super) {
      __extends$f(MapBrowserPointerEvent, _super);
      /**
       * @param {string} type Event type.
       * @param {import("./PluggableMap.js").default} map Map.
       * @param {PointerEvent} pointerEvent Pointer event.
       * @param {boolean=} opt_dragging Is the map currently being dragged?
       * @param {?import("./PluggableMap.js").FrameState=} opt_frameState Frame state.
       */
      function MapBrowserPointerEvent(type, map, pointerEvent, opt_dragging, opt_frameState) {
          var _this = _super.call(this, type, map, pointerEvent, opt_dragging, opt_frameState) || this;
          /**
           * @const
           * @type {PointerEvent}
           */
          _this.pointerEvent = pointerEvent;
          return _this;
      }
      return MapBrowserPointerEvent;
  }(MapBrowserEvent));

  /**
   * @module ol/pointer/EventType
   */
  /**
   * Constants for event names.
   * @enum {string}
   */
  var PointerEventType = {
      POINTERMOVE: 'pointermove',
      POINTERDOWN: 'pointerdown',
      POINTERUP: 'pointerup',
      POINTEROVER: 'pointerover',
      POINTEROUT: 'pointerout',
      POINTERENTER: 'pointerenter',
      POINTERLEAVE: 'pointerleave',
      POINTERCANCEL: 'pointercancel'
  };

  /**
   * @module ol/MapBrowserEventHandler
   */
  var __extends$g =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  var MapBrowserEventHandler = /** @class */ (function (_super) {
      __extends$g(MapBrowserEventHandler, _super);
      /**
       * @param {import("./PluggableMap.js").default} map The map with the viewport to listen to events on.
       * @param {number=} moveTolerance The minimal distance the pointer must travel to trigger a move.
       */
      function MapBrowserEventHandler(map, moveTolerance) {
          var _this = _super.call(this, map) || this;
          /**
           * This is the element that we will listen to the real events on.
           * @type {import("./PluggableMap.js").default}
           * @private
           */
          _this.map_ = map;
          /**
           * @type {any}
           * @private
           */
          _this.clickTimeoutId_;
          /**
           * @type {boolean}
           * @private
           */
          _this.dragging_ = false;
          /**
           * @type {!Array<import("./events.js").EventsKey>}
           * @private
           */
          _this.dragListenerKeys_ = [];
          /**
           * @type {number}
           * @private
           */
          _this.moveTolerance_ = moveTolerance ?
              moveTolerance * DEVICE_PIXEL_RATIO : DEVICE_PIXEL_RATIO;
          /**
           * The most recent "down" type event (or null if none have occurred).
           * Set on pointerdown.
           * @type {PointerEvent}
           * @private
           */
          _this.down_ = null;
          var element = _this.map_.getViewport();
          /**
           * @type {number}
           * @private
           */
          _this.activePointers_ = 0;
          /**
           * @type {!Object<number, boolean>}
           * @private
           */
          _this.trackedTouches_ = {};
          _this.element_ = element;
          /**
           * @type {?import("./events.js").EventsKey}
           * @private
           */
          _this.pointerdownListenerKey_ = listen(element, PointerEventType.POINTERDOWN, _this.handlePointerDown_, _this);
          /**
           * @type {PointerEvent}
           * @private
           */
          _this.originalPointerMoveEvent_;
          /**
           * @type {?import("./events.js").EventsKey}
           * @private
           */
          _this.relayedListenerKey_ = listen(element, PointerEventType.POINTERMOVE, _this.relayEvent_, _this);
          /**
           * @private
           */
          _this.boundHandleTouchMove_ = _this.handleTouchMove_.bind(_this);
          _this.element_.addEventListener(EventType.TOUCHMOVE, _this.boundHandleTouchMove_, PASSIVE_EVENT_LISTENERS ? { passive: false } : false);
          return _this;
      }
      /**
       * @param {PointerEvent} pointerEvent Pointer
       * event.
       * @private
       */
      MapBrowserEventHandler.prototype.emulateClick_ = function (pointerEvent) {
          var newEvent = new MapBrowserPointerEvent(MapBrowserEventType.CLICK, this.map_, pointerEvent);
          this.dispatchEvent(newEvent);
          if (this.clickTimeoutId_ !== undefined) {
              // double-click
              clearTimeout(this.clickTimeoutId_);
              this.clickTimeoutId_ = undefined;
              newEvent = new MapBrowserPointerEvent(MapBrowserEventType.DBLCLICK, this.map_, pointerEvent);
              this.dispatchEvent(newEvent);
          }
          else {
              // click
              this.clickTimeoutId_ = setTimeout(function () {
                  this.clickTimeoutId_ = undefined;
                  var newEvent = new MapBrowserPointerEvent(MapBrowserEventType.SINGLECLICK, this.map_, pointerEvent);
                  this.dispatchEvent(newEvent);
              }.bind(this), 250);
          }
      };
      /**
       * Keeps track on how many pointers are currently active.
       *
       * @param {PointerEvent} pointerEvent Pointer
       * event.
       * @private
       */
      MapBrowserEventHandler.prototype.updateActivePointers_ = function (pointerEvent) {
          var event = pointerEvent;
          if (event.type == MapBrowserEventType.POINTERUP ||
              event.type == MapBrowserEventType.POINTERCANCEL) {
              delete this.trackedTouches_[event.pointerId];
          }
          else if (event.type == MapBrowserEventType.POINTERDOWN) {
              this.trackedTouches_[event.pointerId] = true;
          }
          this.activePointers_ = Object.keys(this.trackedTouches_).length;
      };
      /**
       * @param {PointerEvent} pointerEvent Pointer
       * event.
       * @private
       */
      MapBrowserEventHandler.prototype.handlePointerUp_ = function (pointerEvent) {
          this.updateActivePointers_(pointerEvent);
          var newEvent = new MapBrowserPointerEvent(MapBrowserEventType.POINTERUP, this.map_, pointerEvent);
          this.dispatchEvent(newEvent);
          // We emulate click events on left mouse button click, touch contact, and pen
          // contact. isMouseActionButton returns true in these cases (evt.button is set
          // to 0).
          // See http://www.w3.org/TR/pointerevents/#button-states
          // We only fire click, singleclick, and doubleclick if nobody has called
          // event.stopPropagation() or event.preventDefault().
          if (!newEvent.propagationStopped && !this.dragging_ && this.isMouseActionButton_(pointerEvent)) {
              this.emulateClick_(this.down_);
          }
          if (this.activePointers_ === 0) {
              this.dragListenerKeys_.forEach(unlistenByKey);
              this.dragListenerKeys_.length = 0;
              this.dragging_ = false;
              this.down_ = null;
          }
      };
      /**
       * @param {PointerEvent} pointerEvent Pointer
       * event.
       * @return {boolean} If the left mouse button was pressed.
       * @private
       */
      MapBrowserEventHandler.prototype.isMouseActionButton_ = function (pointerEvent) {
          return pointerEvent.button === 0;
      };
      /**
       * @param {PointerEvent} pointerEvent Pointer
       * event.
       * @private
       */
      MapBrowserEventHandler.prototype.handlePointerDown_ = function (pointerEvent) {
          this.updateActivePointers_(pointerEvent);
          var newEvent = new MapBrowserPointerEvent(MapBrowserEventType.POINTERDOWN, this.map_, pointerEvent);
          this.dispatchEvent(newEvent);
          this.down_ = pointerEvent;
          if (this.dragListenerKeys_.length === 0) {
              this.dragListenerKeys_.push(listen(document, MapBrowserEventType.POINTERMOVE, this.handlePointerMove_, this), listen(document, MapBrowserEventType.POINTERUP, this.handlePointerUp_, this), 
              /* Note that the listener for `pointercancel is set up on
               * `pointerEventHandler_` and not `documentPointerEventHandler_` like
               * the `pointerup` and `pointermove` listeners.
               *
               * The reason for this is the following: `TouchSource.vacuumTouches_()`
               * issues `pointercancel` events, when there was no `touchend` for a
               * `touchstart`. Now, let's say a first `touchstart` is registered on
               * `pointerEventHandler_`. The `documentPointerEventHandler_` is set up.
               * But `documentPointerEventHandler_` doesn't know about the first
               * `touchstart`. If there is no `touchend` for the `touchstart`, we can
               * only receive a `touchcancel` from `pointerEventHandler_`, because it is
               * only registered there.
               */
              listen(this.element_, MapBrowserEventType.POINTERCANCEL, this.handlePointerUp_, this));
          }
      };
      /**
       * @param {PointerEvent} pointerEvent Pointer
       * event.
       * @private
       */
      MapBrowserEventHandler.prototype.handlePointerMove_ = function (pointerEvent) {
          // Between pointerdown and pointerup, pointermove events are triggered.
          // To avoid a 'false' touchmove event to be dispatched, we test if the pointer
          // moved a significant distance.
          if (this.isMoving_(pointerEvent)) {
              this.dragging_ = true;
              var newEvent = new MapBrowserPointerEvent(MapBrowserEventType.POINTERDRAG, this.map_, pointerEvent, this.dragging_);
              this.dispatchEvent(newEvent);
          }
      };
      /**
       * Wrap and relay a pointer event.  Note that this requires that the type
       * string for the MapBrowserPointerEvent matches the PointerEvent type.
       * @param {PointerEvent} pointerEvent Pointer
       * event.
       * @private
       */
      MapBrowserEventHandler.prototype.relayEvent_ = function (pointerEvent) {
          this.originalPointerMoveEvent_ = pointerEvent;
          var dragging = !!(this.down_ && this.isMoving_(pointerEvent));
          this.dispatchEvent(new MapBrowserPointerEvent(pointerEvent.type, this.map_, pointerEvent, dragging));
      };
      /**
       * Flexible handling of a `touch-action: none` css equivalent: because calling
       * `preventDefault()` on a `pointermove` event does not stop native page scrolling
       * and zooming, we also listen for `touchmove` and call `preventDefault()` on it
       * when an interaction (currently `DragPan` handles the event.
       * @param {TouchEvent} event Event.
       * @private
       */
      MapBrowserEventHandler.prototype.handleTouchMove_ = function (event) {
          // Due to https://github.com/mpizenberg/elm-pep/issues/2, `this.originalPointerMoveEvent_`
          // may not be initialized yet when we get here on a platform without native pointer events.
          if (!this.originalPointerMoveEvent_ || this.originalPointerMoveEvent_.defaultPrevented) {
              event.preventDefault();
          }
      };
      /**
       * @param {PointerEvent} pointerEvent Pointer
       * event.
       * @return {boolean} Is moving.
       * @private
       */
      MapBrowserEventHandler.prototype.isMoving_ = function (pointerEvent) {
          return this.dragging_ ||
              Math.abs(pointerEvent.clientX - this.down_.clientX) > this.moveTolerance_ ||
              Math.abs(pointerEvent.clientY - this.down_.clientY) > this.moveTolerance_;
      };
      /**
       * @inheritDoc
       */
      MapBrowserEventHandler.prototype.disposeInternal = function () {
          if (this.relayedListenerKey_) {
              unlistenByKey(this.relayedListenerKey_);
              this.relayedListenerKey_ = null;
          }
          this.element_.removeEventListener(EventType.TOUCHMOVE, this.boundHandleTouchMove_);
          if (this.pointerdownListenerKey_) {
              unlistenByKey(this.pointerdownListenerKey_);
              this.pointerdownListenerKey_ = null;
          }
          this.dragListenerKeys_.forEach(unlistenByKey);
          this.dragListenerKeys_.length = 0;
          this.element_ = null;
          _super.prototype.disposeInternal.call(this);
      };
      return MapBrowserEventHandler;
  }(Target));

  /**
   * @module ol/MapEventType
   */
  /**
   * @enum {string}
   */
  var MapEventType = {
      /**
       * Triggered after a map frame is rendered.
       * @event module:ol/MapEvent~MapEvent#postrender
       * @api
       */
      POSTRENDER: 'postrender',
      /**
       * Triggered when the map starts moving.
       * @event module:ol/MapEvent~MapEvent#movestart
       * @api
       */
      MOVESTART: 'movestart',
      /**
       * Triggered after the map is moved.
       * @event module:ol/MapEvent~MapEvent#moveend
       * @api
       */
      MOVEEND: 'moveend'
  };

  /**
   * @module ol/MapProperty
   */
  /**
   * @enum {string}
   */
  var MapProperty = {
      LAYERGROUP: 'layergroup',
      SIZE: 'size',
      TARGET: 'target',
      VIEW: 'view'
  };

  /**
   * @module ol/render/EventType
   */
  /**
   * @enum {string}
   */
  var RenderEventType = {
      /**
       * Triggered before a layer is rendered.
       * @event module:ol/render/Event~RenderEvent#prerender
       * @api
       */
      PRERENDER: 'prerender',
      /**
       * Triggered after a layer is rendered.
       * @event module:ol/render/Event~RenderEvent#postrender
       * @api
       */
      POSTRENDER: 'postrender',
      /**
       * Triggered before layers are rendered.
       * The event object will not have a `context` set.
       * @event module:ol/render/Event~RenderEvent#precompose
       * @api
       */
      PRECOMPOSE: 'precompose',
      /**
       * Triggered after all layers are rendered.
       * The event object will not have a `context` set.
       * @event module:ol/render/Event~RenderEvent#postcompose
       * @api
       */
      POSTCOMPOSE: 'postcompose',
      /**
       * Triggered when rendering is complete, i.e. all sources and tiles have
       * finished loading for the current viewport, and all tiles are faded in.
       * The event object will not have a `context` set.
       * @event module:ol/render/Event~RenderEvent#rendercomplete
       * @api
       */
      RENDERCOMPLETE: 'rendercomplete'
  };

  /**
   * @module ol/TileState
   */
  /**
   * @enum {number}
   */
  var TileState = {
      IDLE: 0,
      LOADING: 1,
      LOADED: 2,
      /**
       * Indicates that tile loading failed
       * @type {number}
       */
      ERROR: 3,
      EMPTY: 4
  };

  /**
   * @module ol/structs/PriorityQueue
   */
  /**
   * @type {number}
   */
  var DROP = Infinity;
  /**
   * @classdesc
   * Priority queue.
   *
   * The implementation is inspired from the Closure Library's Heap class and
   * Python's heapq module.
   *
   * See http://closure-library.googlecode.com/svn/docs/closure_goog_structs_heap.js.source.html
   * and http://hg.python.org/cpython/file/2.7/Lib/heapq.py.
   *
   * @template T
   */
  var PriorityQueue = /** @class */ (function () {
      /**
       * @param {function(T): number} priorityFunction Priority function.
       * @param {function(T): string} keyFunction Key function.
       */
      function PriorityQueue(priorityFunction, keyFunction) {
          /**
           * @type {function(T): number}
           * @private
           */
          this.priorityFunction_ = priorityFunction;
          /**
           * @type {function(T): string}
           * @private
           */
          this.keyFunction_ = keyFunction;
          /**
           * @type {Array<T>}
           * @private
           */
          this.elements_ = [];
          /**
           * @type {Array<number>}
           * @private
           */
          this.priorities_ = [];
          /**
           * @type {!Object<string, boolean>}
           * @private
           */
          this.queuedElements_ = {};
      }
      /**
       * FIXME empty description for jsdoc
       */
      PriorityQueue.prototype.clear = function () {
          this.elements_.length = 0;
          this.priorities_.length = 0;
          clear$1(this.queuedElements_);
      };
      /**
       * Remove and return the highest-priority element. O(log N).
       * @return {T} Element.
       */
      PriorityQueue.prototype.dequeue = function () {
          var elements = this.elements_;
          var priorities = this.priorities_;
          var element = elements[0];
          if (elements.length == 1) {
              elements.length = 0;
              priorities.length = 0;
          }
          else {
              elements[0] = elements.pop();
              priorities[0] = priorities.pop();
              this.siftUp_(0);
          }
          var elementKey = this.keyFunction_(element);
          delete this.queuedElements_[elementKey];
          return element;
      };
      /**
       * Enqueue an element. O(log N).
       * @param {T} element Element.
       * @return {boolean} The element was added to the queue.
       */
      PriorityQueue.prototype.enqueue = function (element) {
          assert(!(this.keyFunction_(element) in this.queuedElements_), 31); // Tried to enqueue an `element` that was already added to the queue
          var priority = this.priorityFunction_(element);
          if (priority != DROP) {
              this.elements_.push(element);
              this.priorities_.push(priority);
              this.queuedElements_[this.keyFunction_(element)] = true;
              this.siftDown_(0, this.elements_.length - 1);
              return true;
          }
          return false;
      };
      /**
       * @return {number} Count.
       */
      PriorityQueue.prototype.getCount = function () {
          return this.elements_.length;
      };
      /**
       * Gets the index of the left child of the node at the given index.
       * @param {number} index The index of the node to get the left child for.
       * @return {number} The index of the left child.
       * @private
       */
      PriorityQueue.prototype.getLeftChildIndex_ = function (index) {
          return index * 2 + 1;
      };
      /**
       * Gets the index of the right child of the node at the given index.
       * @param {number} index The index of the node to get the right child for.
       * @return {number} The index of the right child.
       * @private
       */
      PriorityQueue.prototype.getRightChildIndex_ = function (index) {
          return index * 2 + 2;
      };
      /**
       * Gets the index of the parent of the node at the given index.
       * @param {number} index The index of the node to get the parent for.
       * @return {number} The index of the parent.
       * @private
       */
      PriorityQueue.prototype.getParentIndex_ = function (index) {
          return (index - 1) >> 1;
      };
      /**
       * Make this a heap. O(N).
       * @private
       */
      PriorityQueue.prototype.heapify_ = function () {
          var i;
          for (i = (this.elements_.length >> 1) - 1; i >= 0; i--) {
              this.siftUp_(i);
          }
      };
      /**
       * @return {boolean} Is empty.
       */
      PriorityQueue.prototype.isEmpty = function () {
          return this.elements_.length === 0;
      };
      /**
       * @param {string} key Key.
       * @return {boolean} Is key queued.
       */
      PriorityQueue.prototype.isKeyQueued = function (key) {
          return key in this.queuedElements_;
      };
      /**
       * @param {T} element Element.
       * @return {boolean} Is queued.
       */
      PriorityQueue.prototype.isQueued = function (element) {
          return this.isKeyQueued(this.keyFunction_(element));
      };
      /**
       * @param {number} index The index of the node to move down.
       * @private
       */
      PriorityQueue.prototype.siftUp_ = function (index) {
          var elements = this.elements_;
          var priorities = this.priorities_;
          var count = elements.length;
          var element = elements[index];
          var priority = priorities[index];
          var startIndex = index;
          while (index < (count >> 1)) {
              var lIndex = this.getLeftChildIndex_(index);
              var rIndex = this.getRightChildIndex_(index);
              var smallerChildIndex = rIndex < count &&
                  priorities[rIndex] < priorities[lIndex] ?
                  rIndex : lIndex;
              elements[index] = elements[smallerChildIndex];
              priorities[index] = priorities[smallerChildIndex];
              index = smallerChildIndex;
          }
          elements[index] = element;
          priorities[index] = priority;
          this.siftDown_(startIndex, index);
      };
      /**
       * @param {number} startIndex The index of the root.
       * @param {number} index The index of the node to move up.
       * @private
       */
      PriorityQueue.prototype.siftDown_ = function (startIndex, index) {
          var elements = this.elements_;
          var priorities = this.priorities_;
          var element = elements[index];
          var priority = priorities[index];
          while (index > startIndex) {
              var parentIndex = this.getParentIndex_(index);
              if (priorities[parentIndex] > priority) {
                  elements[index] = elements[parentIndex];
                  priorities[index] = priorities[parentIndex];
                  index = parentIndex;
              }
              else {
                  break;
              }
          }
          elements[index] = element;
          priorities[index] = priority;
      };
      /**
       * FIXME empty description for jsdoc
       */
      PriorityQueue.prototype.reprioritize = function () {
          var priorityFunction = this.priorityFunction_;
          var elements = this.elements_;
          var priorities = this.priorities_;
          var index = 0;
          var n = elements.length;
          var element, i, priority;
          for (i = 0; i < n; ++i) {
              element = elements[i];
              priority = priorityFunction(element);
              if (priority == DROP) {
                  delete this.queuedElements_[this.keyFunction_(element)];
              }
              else {
                  priorities[index] = priority;
                  elements[index++] = element;
              }
          }
          elements.length = index;
          priorities.length = index;
          this.heapify_();
      };
      return PriorityQueue;
  }());

  var __extends$h =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {function(import("./Tile.js").default, string, import("./coordinate.js").Coordinate, number): number} PriorityFunction
   */
  var TileQueue = /** @class */ (function (_super) {
      __extends$h(TileQueue, _super);
      /**
       * @param {PriorityFunction} tilePriorityFunction Tile priority function.
       * @param {function(): ?} tileChangeCallback Function called on each tile change event.
       */
      function TileQueue(tilePriorityFunction, tileChangeCallback) {
          var _this = _super.call(this, 
          /**
           * @param {Array} element Element.
           * @return {number} Priority.
           */
          function (element) {
              return tilePriorityFunction.apply(null, element);
          }, 
          /**
           * @param {Array} element Element.
           * @return {string} Key.
           */
          function (element) {
              return ( /** @type {import("./Tile.js").default} */(element[0]).getKey());
          }) || this;
          /** @private */
          _this.boundHandleTileChange_ = _this.handleTileChange.bind(_this);
          /**
           * @private
           * @type {function(): ?}
           */
          _this.tileChangeCallback_ = tileChangeCallback;
          /**
           * @private
           * @type {number}
           */
          _this.tilesLoading_ = 0;
          /**
           * @private
           * @type {!Object<string,boolean>}
           */
          _this.tilesLoadingKeys_ = {};
          return _this;
      }
      /**
       * @inheritDoc
       */
      TileQueue.prototype.enqueue = function (element) {
          var added = _super.prototype.enqueue.call(this, element);
          if (added) {
              var tile = element[0];
              tile.addEventListener(EventType.CHANGE, this.boundHandleTileChange_);
          }
          return added;
      };
      /**
       * @return {number} Number of tiles loading.
       */
      TileQueue.prototype.getTilesLoading = function () {
          return this.tilesLoading_;
      };
      /**
       * @param {import("./events/Event.js").default} event Event.
       * @protected
       */
      TileQueue.prototype.handleTileChange = function (event) {
          var tile = /** @type {import("./Tile.js").default} */ (event.target);
          var state = tile.getState();
          if (tile.hifi && state === TileState.LOADED || state === TileState.ERROR || state === TileState.EMPTY) {
              tile.removeEventListener(EventType.CHANGE, this.boundHandleTileChange_);
              var tileKey = tile.getKey();
              if (tileKey in this.tilesLoadingKeys_) {
                  delete this.tilesLoadingKeys_[tileKey];
                  --this.tilesLoading_;
              }
              this.tileChangeCallback_();
          }
      };
      /**
       * @param {number} maxTotalLoading Maximum number tiles to load simultaneously.
       * @param {number} maxNewLoads Maximum number of new tiles to load.
       */
      TileQueue.prototype.loadMoreTiles = function (maxTotalLoading, maxNewLoads) {
          var newLoads = 0;
          var state, tile, tileKey;
          while (this.tilesLoading_ < maxTotalLoading && newLoads < maxNewLoads &&
              this.getCount() > 0) {
              tile = /** @type {import("./Tile.js").default} */ (this.dequeue()[0]);
              tileKey = tile.getKey();
              state = tile.getState();
              if (state === TileState.IDLE && !(tileKey in this.tilesLoadingKeys_)) {
                  this.tilesLoadingKeys_[tileKey] = true;
                  ++this.tilesLoading_;
                  ++newLoads;
                  tile.load();
              }
          }
      };
      return TileQueue;
  }(PriorityQueue));
  /**
   * @param {import('./PluggableMap.js').FrameState} frameState Frame state.
   * @param {import("./Tile.js").default} tile Tile.
   * @param {string} tileSourceKey Tile source key.
   * @param {import("./coordinate.js").Coordinate} tileCenter Tile center.
   * @param {number} tileResolution Tile resolution.
   * @return {number} Tile priority.
   */
  function getTilePriority(frameState, tile, tileSourceKey, tileCenter, tileResolution) {
      // Filter out tiles at higher zoom levels than the current zoom level, or that
      // are outside the visible extent.
      if (!frameState || !(tileSourceKey in frameState.wantedTiles)) {
          return DROP;
      }
      if (!frameState.wantedTiles[tileSourceKey][tile.getKey()]) {
          return DROP;
      }
      // Prioritize the highest zoom level tiles closest to the focus.
      // Tiles at higher zoom levels are prioritized using Math.log(tileResolution).
      // Within a zoom level, tiles are prioritized by the distance in pixels between
      // the center of the tile and the center of the viewport.  The factor of 65536
      // means that the prioritization should behave as desired for tiles up to
      // 65536 * Math.log(2) = 45426 pixels from the focus.
      var center = frameState.viewState.center;
      var deltaX = tileCenter[0] - center[0];
      var deltaY = tileCenter[1] - center[1];
      return 65536 * Math.log(tileResolution) +
          Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution;
  }

  /**
   * @module ol/centerconstraint
   */
  /**
   * @typedef {function((import("./coordinate.js").Coordinate|undefined), number, import("./size.js").Size, boolean=): (import("./coordinate.js").Coordinate|undefined)} Type
   */
  /**
   * @param {import("./extent.js").Extent} extent Extent.
   * @param {boolean} onlyCenter If true, the constraint will only apply to the view center.
   * @param {boolean} smooth If true, the view will be able to go slightly out of the given extent
   * (only during interaction and animation).
   * @return {Type} The constraint.
   */
  function createExtent(extent, onlyCenter, smooth) {
      return (
      /**
       * @param {import("./coordinate.js").Coordinate|undefined} center Center.
       * @param {number} resolution Resolution.
       * @param {import("./size.js").Size} size Viewport size; unused if `onlyCenter` was specified.
       * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
       * @return {import("./coordinate.js").Coordinate|undefined} Center.
       */
      function (center, resolution, size, opt_isMoving) {
          if (center) {
              var viewWidth = onlyCenter ? 0 : size[0] * resolution;
              var viewHeight = onlyCenter ? 0 : size[1] * resolution;
              var minX = extent[0] + viewWidth / 2;
              var maxX = extent[2] - viewWidth / 2;
              var minY = extent[1] + viewHeight / 2;
              var maxY = extent[3] - viewHeight / 2;
              // note: when zooming out of bounds, min and max values for x and y may
              // end up inverted (min > max); this has to be accounted for
              if (minX > maxX) {
                  minX = (maxX + minX) / 2;
                  maxX = minX;
              }
              if (minY > maxY) {
                  minY = (maxY + minY) / 2;
                  maxY = minY;
              }
              var x = clamp(center[0], minX, maxX);
              var y = clamp(center[1], minY, maxY);
              var ratio = 30 * resolution;
              // during an interaction, allow some overscroll
              if (opt_isMoving && smooth) {
                  x += -ratio * Math.log(1 + Math.max(0, minX - center[0]) / ratio) +
                      ratio * Math.log(1 + Math.max(0, center[0] - maxX) / ratio);
                  y += -ratio * Math.log(1 + Math.max(0, minY - center[1]) / ratio) +
                      ratio * Math.log(1 + Math.max(0, center[1] - maxY) / ratio);
              }
              return [x, y];
          }
          else {
              return undefined;
          }
      });
  }
  /**
   * @param {import("./coordinate.js").Coordinate=} center Center.
   * @return {import("./coordinate.js").Coordinate|undefined} Center.
   */
  function none(center) {
      return center;
  }

  /**
   * @module ol/resolutionconstraint
   */
  /**
   * @typedef {function((number|undefined), number, import("./size.js").Size, boolean=): (number|undefined)} Type
   */
  /**
   * Returns a modified resolution taking into account the viewport size and maximum
   * allowed extent.
   * @param {number} resolution Resolution
   * @param {import("./extent.js").Extent=} maxExtent Maximum allowed extent.
   * @param {import("./size.js").Size} viewportSize Viewport size.
   * @param {boolean} showFullExtent Whether to show the full extent.
   * @return {number} Capped resolution.
   */
  function getViewportClampedResolution(resolution, maxExtent, viewportSize, showFullExtent) {
      var xResolution = getWidth(maxExtent) / viewportSize[0];
      var yResolution = getHeight(maxExtent) / viewportSize[1];
      if (showFullExtent) {
          return Math.min(resolution, Math.max(xResolution, yResolution));
      }
      return Math.min(resolution, Math.min(xResolution, yResolution));
  }
  /**
   * Returns a modified resolution to be between maxResolution and minResolution while
   * still allowing the value to be slightly out of bounds.
   * Note: the computation is based on the logarithm function (ln):
   *  - at 1, ln(x) is 0
   *  - above 1, ln(x) keeps increasing but at a much slower pace than x
   * The final result is clamped to prevent getting too far away from bounds.
   * @param {number} resolution Resolution.
   * @param {number} maxResolution Max resolution.
   * @param {number} minResolution Min resolution.
   * @return {number} Smoothed resolution.
   */
  function getSmoothClampedResolution(resolution, maxResolution, minResolution) {
      var result = Math.min(resolution, maxResolution);
      var ratio = 50;
      result *= Math.log(1 + ratio * Math.max(0, resolution / maxResolution - 1)) / ratio + 1;
      if (minResolution) {
          result = Math.max(result, minResolution);
          result /= Math.log(1 + ratio * Math.max(0, minResolution / resolution - 1)) / ratio + 1;
      }
      return clamp(result, minResolution / 2, maxResolution * 2);
  }
  /**
   * @param {Array<number>} resolutions Resolutions.
   * @param {boolean=} opt_smooth If true, the view will be able to slightly exceed resolution limits. Default: true.
   * @param {import("./extent.js").Extent=} opt_maxExtent Maximum allowed extent.
   * @param {boolean=} opt_showFullExtent If true, allows us to show the full extent. Default: false.
   * @return {Type} Zoom function.
   */
  function createSnapToResolutions(resolutions, opt_smooth, opt_maxExtent, opt_showFullExtent) {
      return (
      /**
       * @param {number|undefined} resolution Resolution.
       * @param {number} direction Direction.
       * @param {import("./size.js").Size} size Viewport size.
       * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
       * @return {number|undefined} Resolution.
       */
      function (resolution, direction, size, opt_isMoving) {
          if (resolution !== undefined) {
              var maxResolution = resolutions[0];
              var minResolution = resolutions[resolutions.length - 1];
              var cappedMaxRes = opt_maxExtent ?
                  getViewportClampedResolution(maxResolution, opt_maxExtent, size, opt_showFullExtent) :
                  maxResolution;
              // during interacting or animating, allow intermediary values
              if (opt_isMoving) {
                  var smooth = opt_smooth !== undefined ? opt_smooth : true;
                  if (!smooth) {
                      return clamp(resolution, minResolution, cappedMaxRes);
                  }
                  return getSmoothClampedResolution(resolution, cappedMaxRes, minResolution);
              }
              var capped = Math.min(cappedMaxRes, resolution);
              var z = Math.floor(linearFindNearest(resolutions, capped, direction));
              if (resolutions[z] > cappedMaxRes && z < resolutions.length - 1) {
                  return resolutions[z + 1];
              }
              return resolutions[z];
          }
          else {
              return undefined;
          }
      });
  }
  /**
   * @param {number} power Power.
   * @param {number} maxResolution Maximum resolution.
   * @param {number=} opt_minResolution Minimum resolution.
   * @param {boolean=} opt_smooth If true, the view will be able to slightly exceed resolution limits. Default: true.
   * @param {import("./extent.js").Extent=} opt_maxExtent Maximum allowed extent.
   * @param {boolean=} opt_showFullExtent If true, allows us to show the full extent. Default: false.
   * @return {Type} Zoom function.
   */
  function createSnapToPower(power, maxResolution, opt_minResolution, opt_smooth, opt_maxExtent, opt_showFullExtent) {
      return (
      /**
       * @param {number|undefined} resolution Resolution.
       * @param {number} direction Direction.
       * @param {import("./size.js").Size} size Viewport size.
       * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
       * @return {number|undefined} Resolution.
       */
      function (resolution, direction, size, opt_isMoving) {
          if (resolution !== undefined) {
              var cappedMaxRes = opt_maxExtent ?
                  getViewportClampedResolution(maxResolution, opt_maxExtent, size, opt_showFullExtent) :
                  maxResolution;
              var minResolution = opt_minResolution !== undefined ? opt_minResolution : 0;
              // during interacting or animating, allow intermediary values
              if (opt_isMoving) {
                  var smooth = opt_smooth !== undefined ? opt_smooth : true;
                  if (!smooth) {
                      return clamp(resolution, minResolution, cappedMaxRes);
                  }
                  return getSmoothClampedResolution(resolution, cappedMaxRes, minResolution);
              }
              var tolerance = 1e-9;
              var minZoomLevel = Math.ceil(Math.log(maxResolution / cappedMaxRes) / Math.log(power) - tolerance);
              var offset = -direction * (0.5 - tolerance) + 0.5;
              var capped = Math.min(cappedMaxRes, resolution);
              var cappedZoomLevel = Math.floor(Math.log(maxResolution / capped) / Math.log(power) + offset);
              var zoomLevel = Math.max(minZoomLevel, cappedZoomLevel);
              var newResolution = maxResolution / Math.pow(power, zoomLevel);
              return clamp(newResolution, minResolution, cappedMaxRes);
          }
          else {
              return undefined;
          }
      });
  }
  /**
   * @param {number} maxResolution Max resolution.
   * @param {number} minResolution Min resolution.
   * @param {boolean=} opt_smooth If true, the view will be able to slightly exceed resolution limits. Default: true.
   * @param {import("./extent.js").Extent=} opt_maxExtent Maximum allowed extent.
   * @param {boolean=} opt_showFullExtent If true, allows us to show the full extent. Default: false.
   * @return {Type} Zoom function.
   */
  function createMinMaxResolution(maxResolution, minResolution, opt_smooth, opt_maxExtent, opt_showFullExtent) {
      return (
      /**
       * @param {number|undefined} resolution Resolution.
       * @param {number} direction Direction.
       * @param {import("./size.js").Size} size Viewport size.
       * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
       * @return {number|undefined} Resolution.
       */
      function (resolution, direction, size, opt_isMoving) {
          if (resolution !== undefined) {
              var cappedMaxRes = opt_maxExtent ?
                  getViewportClampedResolution(maxResolution, opt_maxExtent, size, opt_showFullExtent) :
                  maxResolution;
              var smooth = opt_smooth !== undefined ? opt_smooth : true;
              if (!smooth || !opt_isMoving) {
                  return clamp(resolution, minResolution, cappedMaxRes);
              }
              return getSmoothClampedResolution(resolution, cappedMaxRes, minResolution);
          }
          else {
              return undefined;
          }
      });
  }

  /**
   * @module ol/rotationconstraint
   */
  /**
   * @typedef {function((number|undefined), boolean=): (number|undefined)} Type
   */
  /**
   * @param {number|undefined} rotation Rotation.
   * @return {number|undefined} Rotation.
   */
  function disable(rotation) {
      if (rotation !== undefined) {
          return 0;
      }
      else {
          return undefined;
      }
  }
  /**
   * @param {number|undefined} rotation Rotation.
   * @return {number|undefined} Rotation.
   */
  function none$1(rotation) {
      if (rotation !== undefined) {
          return rotation;
      }
      else {
          return undefined;
      }
  }
  /**
   * @param {number} n N.
   * @return {Type} Rotation constraint.
   */
  function createSnapToN(n) {
      var theta = 2 * Math.PI / n;
      return (
      /**
       * @param {number|undefined} rotation Rotation.
       * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
       * @return {number|undefined} Rotation.
       */
      function (rotation, opt_isMoving) {
          if (opt_isMoving) {
              return rotation;
          }
          if (rotation !== undefined) {
              rotation = Math.floor(rotation / theta + 0.5) * theta;
              return rotation;
          }
          else {
              return undefined;
          }
      });
  }
  /**
   * @param {number=} opt_tolerance Tolerance.
   * @return {Type} Rotation constraint.
   */
  function createSnapToZero(opt_tolerance) {
      var tolerance = opt_tolerance || toRadians(5);
      return (
      /**
       * @param {number|undefined} rotation Rotation.
       * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
       * @return {number|undefined} Rotation.
       */
      function (rotation, opt_isMoving) {
          if (opt_isMoving) {
              return rotation;
          }
          if (rotation !== undefined) {
              if (Math.abs(rotation) <= tolerance) {
                  return 0;
              }
              else {
                  return rotation;
              }
          }
          else {
              return undefined;
          }
      });
  }

  /**
   * @module ol/ViewHint
   */
  /**
   * @enum {number}
   */
  var ViewHint = {
      ANIMATING: 0,
      INTERACTING: 1
  };

  /**
   * @module ol/ViewProperty
   */
  /**
   * @enum {string}
   */
  var ViewProperty = {
      CENTER: 'center',
      RESOLUTION: 'resolution',
      ROTATION: 'rotation'
  };

  /**
   * @module ol/string
   */
  /**
   * Adapted from https://github.com/omichelsen/compare-versions/blob/master/index.js
   * @param {string|number} v1 First version
   * @param {string|number} v2 Second version
   * @returns {number} Value
   */
  function compareVersions(v1, v2) {
      var s1 = ('' + v1).split('.');
      var s2 = ('' + v2).split('.');
      for (var i = 0; i < Math.max(s1.length, s2.length); i++) {
          var n1 = parseInt(s1[i] || '0', 10);
          var n2 = parseInt(s2[i] || '0', 10);
          if (n1 > n2) {
              return 1;
          }
          if (n2 > n1) {
              return -1;
          }
      }
      return 0;
  }

  /**
   * @module ol/coordinate
   */
  /**
   * An array of numbers representing an xy coordinate. Example: `[16, 48]`.
   * @typedef {Array<number>} Coordinate
   * @api
   */
  /**
   * A function that takes a {@link module:ol/coordinate~Coordinate} and
   * transforms it into a `{string}`.
   *
   * @typedef {function((Coordinate|undefined)): string} CoordinateFormat
   * @api
   */
  /**
   * Add `delta` to `coordinate`. `coordinate` is modified in place and returned
   * by the function.
   *
   * Example:
   *
   *     import {add} from 'ol/coordinate';
   *
   *     var coord = [7.85, 47.983333];
   *     add(coord, [-2, 4]);
   *     // coord is now [5.85, 51.983333]
   *
   * @param {Coordinate} coordinate Coordinate.
   * @param {Coordinate} delta Delta.
   * @return {Coordinate} The input coordinate adjusted by
   * the given delta.
   * @api
   */
  function add$2(coordinate, delta) {
      coordinate[0] += +delta[0];
      coordinate[1] += +delta[1];
      return coordinate;
  }
  /**
   * @param {Coordinate} coordinate1 First coordinate.
   * @param {Coordinate} coordinate2 Second coordinate.
   * @return {boolean} The two coordinates are equal.
   */
  function equals$2(coordinate1, coordinate2) {
      var equals = true;
      for (var i = coordinate1.length - 1; i >= 0; --i) {
          if (coordinate1[i] != coordinate2[i]) {
              equals = false;
              break;
          }
      }
      return equals;
  }
  /**
   * Rotate `coordinate` by `angle`. `coordinate` is modified in place and
   * returned by the function.
   *
   * Example:
   *
   *     import {rotate} from 'ol/coordinate';
   *
   *     var coord = [7.85, 47.983333];
   *     var rotateRadians = Math.PI / 2; // 90 degrees
   *     rotate(coord, rotateRadians);
   *     // coord is now [-47.983333, 7.85]
   *
   * @param {Coordinate} coordinate Coordinate.
   * @param {number} angle Angle in radian.
   * @return {Coordinate} Coordinate.
   * @api
   */
  function rotate$1(coordinate, angle) {
      var cosAngle = Math.cos(angle);
      var sinAngle = Math.sin(angle);
      var x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;
      var y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;
      coordinate[0] = x;
      coordinate[1] = y;
      return coordinate;
  }
  /**
   * Scale `coordinate` by `scale`. `coordinate` is modified in place and returned
   * by the function.
   *
   * Example:
   *
   *     import {scale as scaleCoordinate} from 'ol/coordinate';
   *
   *     var coord = [7.85, 47.983333];
   *     var scale = 1.2;
   *     scaleCoordinate(coord, scale);
   *     // coord is now [9.42, 57.5799996]
   *
   * @param {Coordinate} coordinate Coordinate.
   * @param {number} scale Scale factor.
   * @return {Coordinate} Coordinate.
   */
  function scale$3(coordinate, scale) {
      coordinate[0] *= scale;
      coordinate[1] *= scale;
      return coordinate;
  }
  /**
   * Modifies the provided coordinate in-place to be within the real world
   * extent. The lower projection extent boundary is inclusive, the upper one
   * exclusive.
   *
   * @param {Coordinate} coordinate Coordinate.
   * @param {import("./proj/Projection.js").default} projection Projection
   * @return {Coordinate} The coordinate within the real world extent.
   */
  function wrapX$2(coordinate, projection) {
      var projectionExtent = projection.getExtent();
      if (projection.canWrapX() && (coordinate[0] < projectionExtent[0] || coordinate[0] >= projectionExtent[2])) {
          var worldWidth = getWidth(projectionExtent);
          var worldsAway = Math.floor((coordinate[0] - projectionExtent[0]) / worldWidth);
          coordinate[0] -= (worldsAway * worldWidth);
      }
      return coordinate;
  }

  /**
   * @module ol/easing
   */
  /**
   * Start slow and speed up.
   * @param {number} t Input between 0 and 1.
   * @return {number} Output between 0 and 1.
   * @api
   */
  function easeIn(t) {
      return Math.pow(t, 3);
  }
  /**
   * Start fast and slow down.
   * @param {number} t Input between 0 and 1.
   * @return {number} Output between 0 and 1.
   * @api
   */
  function easeOut(t) {
      return 1 - easeIn(1 - t);
  }
  /**
   * Start slow, speed up, and then slow down again.
   * @param {number} t Input between 0 and 1.
   * @return {number} Output between 0 and 1.
   * @api
   */
  function inAndOut(t) {
      return 3 * t * t - 2 * t * t * t;
  }
  /**
   * Maintain a constant speed over time.
   * @param {number} t Input between 0 and 1.
   * @return {number} Output between 0 and 1.
   * @api
   */
  function linear(t) {
      return t;
  }

  /**
   * @module ol/geom/GeometryLayout
   */
  /**
   * The coordinate layout for geometries, indicating whether a 3rd or 4th z ('Z')
   * or measure ('M') coordinate is available. Supported values are `'XY'`,
   * `'XYZ'`, `'XYM'`, `'XYZM'`.
   * @enum {string}
   */
  var GeometryLayout = {
      XY: 'XY',
      XYZ: 'XYZ',
      XYM: 'XYM',
      XYZM: 'XYZM'
  };

  var __extends$i =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @type {import("../transform.js").Transform}
   */
  var tmpTransform$1 = create();
  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Base class for vector geometries.
   *
   * To get notified of changes to the geometry, register a listener for the
   * generic `change` event on your geometry instance.
   *
   * @abstract
   * @api
   */
  var Geometry = /** @class */ (function (_super) {
      __extends$i(Geometry, _super);
      function Geometry() {
          var _this = _super.call(this) || this;
          /**
           * @private
           * @type {import("../extent.js").Extent}
           */
          _this.extent_ = createEmpty();
          /**
           * @private
           * @type {number}
           */
          _this.extentRevision_ = -1;
          /**
           * @protected
           * @type {number}
           */
          _this.simplifiedGeometryMaxMinSquaredTolerance = 0;
          /**
           * @protected
           * @type {number}
           */
          _this.simplifiedGeometryRevision = 0;
          /**
           * Get a transformed and simplified version of the geometry.
           * @abstract
           * @param {number} revision The geometry revision.
           * @param {number} squaredTolerance Squared tolerance.
           * @param {import("../proj.js").TransformFunction} [opt_transform] Optional transform function.
           * @return {Geometry} Simplified geometry.
           */
          _this.simplifyTransformedInternal = memoizeOne(function (revision, squaredTolerance, opt_transform) {
              if (!opt_transform) {
                  return this.getSimplifiedGeometry(squaredTolerance);
              }
              var clone = this.clone();
              clone.applyTransform(opt_transform);
              return clone.getSimplifiedGeometry(squaredTolerance);
          });
          return _this;
      }
      /**
       * Get a transformed and simplified version of the geometry.
       * @abstract
       * @param {number} squaredTolerance Squared tolerance.
       * @param {import("../proj.js").TransformFunction} [opt_transform] Optional transform function.
       * @return {Geometry} Simplified geometry.
       */
      Geometry.prototype.simplifyTransformed = function (squaredTolerance, opt_transform) {
          return this.simplifyTransformedInternal(this.getRevision(), squaredTolerance, opt_transform);
      };
      /**
       * Make a complete copy of the geometry.
       * @abstract
       * @return {!Geometry} Clone.
       */
      Geometry.prototype.clone = function () {
          return abstract();
      };
      /**
       * @abstract
       * @param {number} x X.
       * @param {number} y Y.
       * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
       * @param {number} minSquaredDistance Minimum squared distance.
       * @return {number} Minimum squared distance.
       */
      Geometry.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {
          return abstract();
      };
      /**
       * @param {number} x X.
       * @param {number} y Y.
       * @return {boolean} Contains (x, y).
       */
      Geometry.prototype.containsXY = function (x, y) {
          var coord = this.getClosestPoint([x, y]);
          return coord[0] === x && coord[1] === y;
      };
      /**
       * Return the closest point of the geometry to the passed point as
       * {@link module:ol/coordinate~Coordinate coordinate}.
       * @param {import("../coordinate.js").Coordinate} point Point.
       * @param {import("../coordinate.js").Coordinate=} opt_closestPoint Closest point.
       * @return {import("../coordinate.js").Coordinate} Closest point.
       * @api
       */
      Geometry.prototype.getClosestPoint = function (point, opt_closestPoint) {
          var closestPoint = opt_closestPoint ? opt_closestPoint : [NaN, NaN];
          this.closestPointXY(point[0], point[1], closestPoint, Infinity);
          return closestPoint;
      };
      /**
       * Returns true if this geometry includes the specified coordinate. If the
       * coordinate is on the boundary of the geometry, returns false.
       * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
       * @return {boolean} Contains coordinate.
       * @api
       */
      Geometry.prototype.intersectsCoordinate = function (coordinate) {
          return this.containsXY(coordinate[0], coordinate[1]);
      };
      /**
       * @abstract
       * @param {import("../extent.js").Extent} extent Extent.
       * @protected
       * @return {import("../extent.js").Extent} extent Extent.
       */
      Geometry.prototype.computeExtent = function (extent) {
          return abstract();
      };
      /**
       * Get the extent of the geometry.
       * @param {import("../extent.js").Extent=} opt_extent Extent.
       * @return {import("../extent.js").Extent} extent Extent.
       * @api
       */
      Geometry.prototype.getExtent = function (opt_extent) {
          if (this.extentRevision_ != this.getRevision()) {
              this.extent_ = this.computeExtent(this.extent_);
              this.extentRevision_ = this.getRevision();
          }
          return returnOrUpdate(this.extent_, opt_extent);
      };
      /**
       * Rotate the geometry around a given coordinate. This modifies the geometry
       * coordinates in place.
       * @abstract
       * @param {number} angle Rotation angle in radians.
       * @param {import("../coordinate.js").Coordinate} anchor The rotation center.
       * @api
       */
      Geometry.prototype.rotate = function (angle, anchor) {
          abstract();
      };
      /**
       * Scale the geometry (with an optional origin).  This modifies the geometry
       * coordinates in place.
       * @abstract
       * @param {number} sx The scaling factor in the x-direction.
       * @param {number=} opt_sy The scaling factor in the y-direction (defaults to
       *     sx).
       * @param {import("../coordinate.js").Coordinate=} opt_anchor The scale origin (defaults to the center
       *     of the geometry extent).
       * @api
       */
      Geometry.prototype.scale = function (sx, opt_sy, opt_anchor) {
          abstract();
      };
      /**
       * Create a simplified version of this geometry.  For linestrings, this uses
       * the [Douglas Peucker](https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm)
       * algorithm.  For polygons, a quantization-based
       * simplification is used to preserve topology.
       * @param {number} tolerance The tolerance distance for simplification.
       * @return {Geometry} A new, simplified version of the original geometry.
       * @api
       */
      Geometry.prototype.simplify = function (tolerance) {
          return this.getSimplifiedGeometry(tolerance * tolerance);
      };
      /**
       * Create a simplified version of this geometry using the Douglas Peucker
       * algorithm.
       * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.
       * @abstract
       * @param {number} squaredTolerance Squared tolerance.
       * @return {Geometry} Simplified geometry.
       */
      Geometry.prototype.getSimplifiedGeometry = function (squaredTolerance) {
          return abstract();
      };
      /**
       * Get the type of this geometry.
       * @abstract
       * @return {import("./GeometryType.js").default} Geometry type.
       */
      Geometry.prototype.getType = function () {
          return abstract();
      };
      /**
       * Apply a transform function to the coordinates of the geometry.
       * The geometry is modified in place.
       * If you do not want the geometry modified in place, first `clone()` it and
       * then use this function on the clone.
       * @abstract
       * @param {import("../proj.js").TransformFunction} transformFn Transform function.
       * Called with a flat array of geometry coordinates.
       */
      Geometry.prototype.applyTransform = function (transformFn) {
          abstract();
      };
      /**
       * Test if the geometry and the passed extent intersect.
       * @abstract
       * @param {import("../extent.js").Extent} extent Extent.
       * @return {boolean} `true` if the geometry and the extent intersect.
       */
      Geometry.prototype.intersectsExtent = function (extent) {
          return abstract();
      };
      /**
       * Translate the geometry.  This modifies the geometry coordinates in place.  If
       * instead you want a new geometry, first `clone()` this geometry.
       * @abstract
       * @param {number} deltaX Delta X.
       * @param {number} deltaY Delta Y.
       * @api
       */
      Geometry.prototype.translate = function (deltaX, deltaY) {
          abstract();
      };
      /**
       * Transform each coordinate of the geometry from one coordinate reference
       * system to another. The geometry is modified in place.
       * For example, a line will be transformed to a line and a circle to a circle.
       * If you do not want the geometry modified in place, first `clone()` it and
       * then use this function on the clone.
       *
       * @param {import("../proj.js").ProjectionLike} source The current projection.  Can be a
       *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
       * @param {import("../proj.js").ProjectionLike} destination The desired projection.  Can be a
       *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
       * @return {Geometry} This geometry.  Note that original geometry is
       *     modified in place.
       * @api
       */
      Geometry.prototype.transform = function (source, destination) {
          /** @type {import("../proj/Projection.js").default} */
          var sourceProj = get$4(source);
          var transformFn = sourceProj.getUnits() == Units.TILE_PIXELS ?
              function (inCoordinates, outCoordinates, stride) {
                  var pixelExtent = sourceProj.getExtent();
                  var projectedExtent = sourceProj.getWorldExtent();
                  var scale = getHeight(projectedExtent) / getHeight(pixelExtent);
                  compose(tmpTransform$1, projectedExtent[0], projectedExtent[3], scale, -scale, 0, 0, 0);
                  transform2D(inCoordinates, 0, inCoordinates.length, stride, tmpTransform$1, outCoordinates);
                  return getTransform(sourceProj, destination)(inCoordinates, outCoordinates, stride);
              } :
              getTransform(sourceProj, destination);
          this.applyTransform(transformFn);
          return this;
      };
      return Geometry;
  }(BaseObject));

  var __extends$j =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @classdesc
   * Abstract base class; only used for creating subclasses; do not instantiate
   * in apps, as cannot be rendered.
   *
   * @abstract
   * @api
   */
  var SimpleGeometry = /** @class */ (function (_super) {
      __extends$j(SimpleGeometry, _super);
      function SimpleGeometry() {
          var _this = _super.call(this) || this;
          /**
           * @protected
           * @type {GeometryLayout}
           */
          _this.layout = GeometryLayout.XY;
          /**
           * @protected
           * @type {number}
           */
          _this.stride = 2;
          /**
           * @protected
           * @type {Array<number>}
           */
          _this.flatCoordinates = null;
          return _this;
      }
      /**
       * @inheritDoc
       */
      SimpleGeometry.prototype.computeExtent = function (extent) {
          return createOrUpdateFromFlatCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);
      };
      /**
       * @abstract
       * @return {Array<*>} Coordinates.
       */
      SimpleGeometry.prototype.getCoordinates = function () {
          return abstract();
      };
      /**
       * Return the first coordinate of the geometry.
       * @return {import("../coordinate.js").Coordinate} First coordinate.
       * @api
       */
      SimpleGeometry.prototype.getFirstCoordinate = function () {
          return this.flatCoordinates.slice(0, this.stride);
      };
      /**
       * @return {Array<number>} Flat coordinates.
       */
      SimpleGeometry.prototype.getFlatCoordinates = function () {
          return this.flatCoordinates;
      };
      /**
       * Return the last coordinate of the geometry.
       * @return {import("../coordinate.js").Coordinate} Last point.
       * @api
       */
      SimpleGeometry.prototype.getLastCoordinate = function () {
          return this.flatCoordinates.slice(this.flatCoordinates.length - this.stride);
      };
      /**
       * Return the {@link module:ol/geom/GeometryLayout layout} of the geometry.
       * @return {GeometryLayout} Layout.
       * @api
       */
      SimpleGeometry.prototype.getLayout = function () {
          return this.layout;
      };
      /**
       * @inheritDoc
       */
      SimpleGeometry.prototype.getSimplifiedGeometry = function (squaredTolerance) {
          if (this.simplifiedGeometryRevision !== this.getRevision()) {
              this.simplifiedGeometryMaxMinSquaredTolerance = 0;
              this.simplifiedGeometryRevision = this.getRevision();
          }
          // If squaredTolerance is negative or if we know that simplification will not
          // have any effect then just return this.
          if (squaredTolerance < 0 ||
              (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&
                  squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance)) {
              return this;
          }
          var simplifiedGeometry = this.getSimplifiedGeometryInternal(squaredTolerance);
          var simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();
          if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {
              return simplifiedGeometry;
          }
          else {
              // Simplification did not actually remove any coordinates.  We now know
              // that any calls to getSimplifiedGeometry with a squaredTolerance less
              // than or equal to the current squaredTolerance will also not have any
              // effect.  This allows us to short circuit simplification (saving CPU
              // cycles) and prevents the cache of simplified geometries from filling
              // up with useless identical copies of this geometry (saving memory).
              this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;
              return this;
          }
      };
      /**
       * @param {number} squaredTolerance Squared tolerance.
       * @return {SimpleGeometry} Simplified geometry.
       * @protected
       */
      SimpleGeometry.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {
          return this;
      };
      /**
       * @return {number} Stride.
       */
      SimpleGeometry.prototype.getStride = function () {
          return this.stride;
      };
      /**
       * @param {GeometryLayout} layout Layout.
       * @param {Array<number>} flatCoordinates Flat coordinates.
       */
      SimpleGeometry.prototype.setFlatCoordinates = function (layout, flatCoordinates) {
          this.stride = getStrideForLayout(layout);
          this.layout = layout;
          this.flatCoordinates = flatCoordinates;
      };
      /**
       * @abstract
       * @param {!Array<*>} coordinates Coordinates.
       * @param {GeometryLayout=} opt_layout Layout.
       */
      SimpleGeometry.prototype.setCoordinates = function (coordinates, opt_layout) {
          abstract();
      };
      /**
       * @param {GeometryLayout|undefined} layout Layout.
       * @param {Array<*>} coordinates Coordinates.
       * @param {number} nesting Nesting.
       * @protected
       */
      SimpleGeometry.prototype.setLayout = function (layout, coordinates, nesting) {
          /** @type {number} */
          var stride;
          if (layout) {
              stride = getStrideForLayout(layout);
          }
          else {
              for (var i = 0; i < nesting; ++i) {
                  if (coordinates.length === 0) {
                      this.layout = GeometryLayout.XY;
                      this.stride = 2;
                      return;
                  }
                  else {
                      coordinates = /** @type {Array} */ (coordinates[0]);
                  }
              }
              stride = coordinates.length;
              layout = getLayoutForStride(stride);
          }
          this.layout = layout;
          this.stride = stride;
      };
      /**
       * Apply a transform function to the coordinates of the geometry.
       * The geometry is modified in place.
       * If you do not want the geometry modified in place, first `clone()` it and
       * then use this function on the clone.
       * @param {import("../proj.js").TransformFunction} transformFn Transform function.
       * Called with a flat array of geometry coordinates.
       * @api
       */
      SimpleGeometry.prototype.applyTransform = function (transformFn) {
          if (this.flatCoordinates) {
              transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);
              this.changed();
          }
      };
      /**
       * Rotate the geometry around a given coordinate. This modifies the geometry
       * coordinates in place.
       * @param {number} angle Rotation angle in radians.
       * @param {import("../coordinate.js").Coordinate} anchor The rotation center.
       * @api
       */
      SimpleGeometry.prototype.rotate = function (angle, anchor) {
          var flatCoordinates = this.getFlatCoordinates();
          if (flatCoordinates) {
              var stride = this.getStride();
              rotate(flatCoordinates, 0, flatCoordinates.length, stride, angle, anchor, flatCoordinates);
              this.changed();
          }
      };
      /**
       * Scale the geometry (with an optional origin).  This modifies the geometry
       * coordinates in place.
        * @param {number} sx The scaling factor in the x-direction.
       * @param {number=} opt_sy The scaling factor in the y-direction (defaults to
       *     sx).
       * @param {import("../coordinate.js").Coordinate=} opt_anchor The scale origin (defaults to the center
       *     of the geometry extent).
       * @api
       */
      SimpleGeometry.prototype.scale = function (sx, opt_sy, opt_anchor) {
          var sy = opt_sy;
          if (sy === undefined) {
              sy = sx;
          }
          var anchor = opt_anchor;
          if (!anchor) {
              anchor = getCenter(this.getExtent());
          }
          var flatCoordinates = this.getFlatCoordinates();
          if (flatCoordinates) {
              var stride = this.getStride();
              scale$1(flatCoordinates, 0, flatCoordinates.length, stride, sx, sy, anchor, flatCoordinates);
              this.changed();
          }
      };
      /**
       * Translate the geometry.  This modifies the geometry coordinates in place.  If
       * instead you want a new geometry, first `clone()` this geometry.
       * @param {number} deltaX Delta X.
       * @param {number} deltaY Delta Y.
       * @api
       */
      SimpleGeometry.prototype.translate = function (deltaX, deltaY) {
          var flatCoordinates = this.getFlatCoordinates();
          if (flatCoordinates) {
              var stride = this.getStride();
              translate$1(flatCoordinates, 0, flatCoordinates.length, stride, deltaX, deltaY, flatCoordinates);
              this.changed();
          }
      };
      return SimpleGeometry;
  }(Geometry));
  /**
   * @param {number} stride Stride.
   * @return {GeometryLayout} layout Layout.
   */
  function getLayoutForStride(stride) {
      var layout;
      if (stride == 2) {
          layout = GeometryLayout.XY;
      }
      else if (stride == 3) {
          layout = GeometryLayout.XYZ;
      }
      else if (stride == 4) {
          layout = GeometryLayout.XYZM;
      }
      return (
      /** @type {GeometryLayout} */ (layout));
  }
  /**
   * @param {GeometryLayout} layout Layout.
   * @return {number} Stride.
   */
  function getStrideForLayout(layout) {
      var stride;
      if (layout == GeometryLayout.XY) {
          stride = 2;
      }
      else if (layout == GeometryLayout.XYZ || layout == GeometryLayout.XYM) {
          stride = 3;
      }
      else if (layout == GeometryLayout.XYZM) {
          stride = 4;
      }
      return /** @type {number} */ (stride);
  }
  /**
   * @param {SimpleGeometry} simpleGeometry Simple geometry.
   * @param {import("../transform.js").Transform} transform Transform.
   * @param {Array<number>=} opt_dest Destination.
   * @return {Array<number>} Transformed flat coordinates.
   */
  function transformGeom2D(simpleGeometry, transform, opt_dest) {
      var flatCoordinates = simpleGeometry.getFlatCoordinates();
      if (!flatCoordinates) {
          return null;
      }
      else {
          var stride = simpleGeometry.getStride();
          return transform2D(flatCoordinates, 0, flatCoordinates.length, stride, transform, opt_dest);
      }
  }

  /**
   * @module ol/geom/flat/area
   */
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @return {number} Area.
   */
  function linearRing(flatCoordinates, offset, end, stride) {
      var twiceArea = 0;
      var x1 = flatCoordinates[end - stride];
      var y1 = flatCoordinates[end - stride + 1];
      for (; offset < end; offset += stride) {
          var x2 = flatCoordinates[offset];
          var y2 = flatCoordinates[offset + 1];
          twiceArea += y1 * x2 - x1 * y2;
          x1 = x2;
          y1 = y2;
      }
      return twiceArea / 2;
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @return {number} Area.
   */
  function linearRings(flatCoordinates, offset, ends, stride) {
      var area = 0;
      for (var i = 0, ii = ends.length; i < ii; ++i) {
          var end = ends[i];
          area += linearRing(flatCoordinates, offset, end, stride);
          offset = end;
      }
      return area;
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @return {number} Area.
   */
  function linearRingss$1(flatCoordinates, offset, endss, stride) {
      var area = 0;
      for (var i = 0, ii = endss.length; i < ii; ++i) {
          var ends = endss[i];
          area += linearRings(flatCoordinates, offset, ends, stride);
          offset = ends[ends.length - 1];
      }
      return area;
  }

  /**
   * @module ol/geom/flat/closest
   */
  /**
   * Returns the point on the 2D line segment flatCoordinates[offset1] to
   * flatCoordinates[offset2] that is closest to the point (x, y).  Extra
   * dimensions are linearly interpolated.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset1 Offset 1.
   * @param {number} offset2 Offset 2.
   * @param {number} stride Stride.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {Array<number>} closestPoint Closest point.
   */
  function assignClosest(flatCoordinates, offset1, offset2, stride, x, y, closestPoint) {
      var x1 = flatCoordinates[offset1];
      var y1 = flatCoordinates[offset1 + 1];
      var dx = flatCoordinates[offset2] - x1;
      var dy = flatCoordinates[offset2 + 1] - y1;
      var offset;
      if (dx === 0 && dy === 0) {
          offset = offset1;
      }
      else {
          var t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);
          if (t > 1) {
              offset = offset2;
          }
          else if (t > 0) {
              for (var i = 0; i < stride; ++i) {
                  closestPoint[i] = lerp(flatCoordinates[offset1 + i], flatCoordinates[offset2 + i], t);
              }
              closestPoint.length = stride;
              return;
          }
          else {
              offset = offset1;
          }
      }
      for (var i = 0; i < stride; ++i) {
          closestPoint[i] = flatCoordinates[offset + i];
      }
      closestPoint.length = stride;
  }
  /**
   * Return the squared of the largest distance between any pair of consecutive
   * coordinates.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} max Max squared delta.
   * @return {number} Max squared delta.
   */
  function maxSquaredDelta(flatCoordinates, offset, end, stride, max) {
      var x1 = flatCoordinates[offset];
      var y1 = flatCoordinates[offset + 1];
      for (offset += stride; offset < end; offset += stride) {
          var x2 = flatCoordinates[offset];
          var y2 = flatCoordinates[offset + 1];
          var squaredDelta = squaredDistance(x1, y1, x2, y2);
          if (squaredDelta > max) {
              max = squaredDelta;
          }
          x1 = x2;
          y1 = y2;
      }
      return max;
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {number} max Max squared delta.
   * @return {number} Max squared delta.
   */
  function arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max) {
      for (var i = 0, ii = ends.length; i < ii; ++i) {
          var end = ends[i];
          max = maxSquaredDelta(flatCoordinates, offset, end, stride, max);
          offset = end;
      }
      return max;
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {number} max Max squared delta.
   * @return {number} Max squared delta.
   */
  function multiArrayMaxSquaredDelta(flatCoordinates, offset, endss, stride, max) {
      for (var i = 0, ii = endss.length; i < ii; ++i) {
          var ends = endss[i];
          max = arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max);
          offset = ends[ends.length - 1];
      }
      return max;
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} maxDelta Max delta.
   * @param {boolean} isRing Is ring.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {Array<number>} closestPoint Closest point.
   * @param {number} minSquaredDistance Minimum squared distance.
   * @param {Array<number>=} opt_tmpPoint Temporary point object.
   * @return {number} Minimum squared distance.
   */
  function assignClosestPoint(flatCoordinates, offset, end, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, opt_tmpPoint) {
      if (offset == end) {
          return minSquaredDistance;
      }
      var i, squaredDistance$1;
      if (maxDelta === 0) {
          // All points are identical, so just test the first point.
          squaredDistance$1 = squaredDistance(x, y, flatCoordinates[offset], flatCoordinates[offset + 1]);
          if (squaredDistance$1 < minSquaredDistance) {
              for (i = 0; i < stride; ++i) {
                  closestPoint[i] = flatCoordinates[offset + i];
              }
              closestPoint.length = stride;
              return squaredDistance$1;
          }
          else {
              return minSquaredDistance;
          }
      }
      var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];
      var index = offset + stride;
      while (index < end) {
          assignClosest(flatCoordinates, index - stride, index, stride, x, y, tmpPoint);
          squaredDistance$1 = squaredDistance(x, y, tmpPoint[0], tmpPoint[1]);
          if (squaredDistance$1 < minSquaredDistance) {
              minSquaredDistance = squaredDistance$1;
              for (i = 0; i < stride; ++i) {
                  closestPoint[i] = tmpPoint[i];
              }
              closestPoint.length = stride;
              index += stride;
          }
          else {
              // Skip ahead multiple points, because we know that all the skipped
              // points cannot be any closer than the closest point we have found so
              // far.  We know this because we know how close the current point is, how
              // close the closest point we have found so far is, and the maximum
              // distance between consecutive points.  For example, if we're currently
              // at distance 10, the best we've found so far is 3, and that the maximum
              // distance between consecutive points is 2, then we'll need to skip at
              // least (10 - 3) / 2 == 3 (rounded down) points to have any chance of
              // finding a closer point.  We use Math.max(..., 1) to ensure that we
              // always advance at least one point, to avoid an infinite loop.
              index += stride * Math.max(((Math.sqrt(squaredDistance$1) -
                  Math.sqrt(minSquaredDistance)) / maxDelta) | 0, 1);
          }
      }
      if (isRing) {
          // Check the closing segment.
          assignClosest(flatCoordinates, end - stride, offset, stride, x, y, tmpPoint);
          squaredDistance$1 = squaredDistance(x, y, tmpPoint[0], tmpPoint[1]);
          if (squaredDistance$1 < minSquaredDistance) {
              minSquaredDistance = squaredDistance$1;
              for (i = 0; i < stride; ++i) {
                  closestPoint[i] = tmpPoint[i];
              }
              closestPoint.length = stride;
          }
      }
      return minSquaredDistance;
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {number} maxDelta Max delta.
   * @param {boolean} isRing Is ring.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {Array<number>} closestPoint Closest point.
   * @param {number} minSquaredDistance Minimum squared distance.
   * @param {Array<number>=} opt_tmpPoint Temporary point object.
   * @return {number} Minimum squared distance.
   */
  function assignClosestArrayPoint(flatCoordinates, offset, ends, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, opt_tmpPoint) {
      var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];
      for (var i = 0, ii = ends.length; i < ii; ++i) {
          var end = ends[i];
          minSquaredDistance = assignClosestPoint(flatCoordinates, offset, end, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);
          offset = end;
      }
      return minSquaredDistance;
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {number} maxDelta Max delta.
   * @param {boolean} isRing Is ring.
   * @param {number} x X.
   * @param {number} y Y.
   * @param {Array<number>} closestPoint Closest point.
   * @param {number} minSquaredDistance Minimum squared distance.
   * @param {Array<number>=} opt_tmpPoint Temporary point object.
   * @return {number} Minimum squared distance.
   */
  function assignClosestMultiArrayPoint(flatCoordinates, offset, endss, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, opt_tmpPoint) {
      var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];
      for (var i = 0, ii = endss.length; i < ii; ++i) {
          var ends = endss[i];
          minSquaredDistance = assignClosestArrayPoint(flatCoordinates, offset, ends, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);
          offset = ends[ends.length - 1];
      }
      return minSquaredDistance;
  }

  /**
   * @module ol/geom/flat/deflate
   */
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
   * @param {number} stride Stride.
   * @return {number} offset Offset.
   */
  function deflateCoordinate(flatCoordinates, offset, coordinate, stride) {
      for (var i = 0, ii = coordinate.length; i < ii; ++i) {
          flatCoordinates[offset++] = coordinate[i];
      }
      return offset;
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<import("../../coordinate.js").Coordinate>} coordinates Coordinates.
   * @param {number} stride Stride.
   * @return {number} offset Offset.
   */
  function deflateCoordinates(flatCoordinates, offset, coordinates, stride) {
      for (var i = 0, ii = coordinates.length; i < ii; ++i) {
          var coordinate = coordinates[i];
          for (var j = 0; j < stride; ++j) {
              flatCoordinates[offset++] = coordinate[j];
          }
      }
      return offset;
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<import("../../coordinate.js").Coordinate>>} coordinatess Coordinatess.
   * @param {number} stride Stride.
   * @param {Array<number>=} opt_ends Ends.
   * @return {Array<number>} Ends.
   */
  function deflateCoordinatesArray(flatCoordinates, offset, coordinatess, stride, opt_ends) {
      var ends = opt_ends ? opt_ends : [];
      var i = 0;
      for (var j = 0, jj = coordinatess.length; j < jj; ++j) {
          var end = deflateCoordinates(flatCoordinates, offset, coordinatess[j], stride);
          ends[i++] = end;
          offset = end;
      }
      ends.length = i;
      return ends;
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<Array<import("../../coordinate.js").Coordinate>>>} coordinatesss Coordinatesss.
   * @param {number} stride Stride.
   * @param {Array<Array<number>>=} opt_endss Endss.
   * @return {Array<Array<number>>} Endss.
   */
  function deflateMultiCoordinatesArray(flatCoordinates, offset, coordinatesss, stride, opt_endss) {
      var endss = opt_endss ? opt_endss : [];
      var i = 0;
      for (var j = 0, jj = coordinatesss.length; j < jj; ++j) {
          var ends = deflateCoordinatesArray(flatCoordinates, offset, coordinatesss[j], stride, endss[i]);
          endss[i++] = ends;
          offset = ends[ends.length - 1];
      }
      endss.length = i;
      return endss;
  }

  /**
   * @module ol/geom/flat/inflate
   */
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {Array<import("../../coordinate.js").Coordinate>=} opt_coordinates Coordinates.
   * @return {Array<import("../../coordinate.js").Coordinate>} Coordinates.
   */
  function inflateCoordinates(flatCoordinates, offset, end, stride, opt_coordinates) {
      var coordinates = opt_coordinates !== undefined ? opt_coordinates : [];
      var i = 0;
      for (var j = offset; j < end; j += stride) {
          coordinates[i++] = flatCoordinates.slice(j, j + stride);
      }
      coordinates.length = i;
      return coordinates;
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {Array<Array<import("../../coordinate.js").Coordinate>>=} opt_coordinatess Coordinatess.
   * @return {Array<Array<import("../../coordinate.js").Coordinate>>} Coordinatess.
   */
  function inflateCoordinatesArray(flatCoordinates, offset, ends, stride, opt_coordinatess) {
      var coordinatess = opt_coordinatess !== undefined ? opt_coordinatess : [];
      var i = 0;
      for (var j = 0, jj = ends.length; j < jj; ++j) {
          var end = ends[j];
          coordinatess[i++] = inflateCoordinates(flatCoordinates, offset, end, stride, coordinatess[i]);
          offset = end;
      }
      coordinatess.length = i;
      return coordinatess;
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {Array<Array<Array<import("../../coordinate.js").Coordinate>>>=} opt_coordinatesss
   *     Coordinatesss.
   * @return {Array<Array<Array<import("../../coordinate.js").Coordinate>>>} Coordinatesss.
   */
  function inflateMultiCoordinatesArray(flatCoordinates, offset, endss, stride, opt_coordinatesss) {
      var coordinatesss = opt_coordinatesss !== undefined ? opt_coordinatesss : [];
      var i = 0;
      for (var j = 0, jj = endss.length; j < jj; ++j) {
          var ends = endss[j];
          coordinatesss[i++] = inflateCoordinatesArray(flatCoordinates, offset, ends, stride, coordinatesss[i]);
          offset = ends[ends.length - 1];
      }
      coordinatesss.length = i;
      return coordinatesss;
  }

  /**
   * @module ol/geom/flat/simplify
   */
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} squaredTolerance Squared tolerance.
   * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
   *     coordinates.
   * @param {number} simplifiedOffset Simplified offset.
   * @return {number} Simplified offset.
   */
  function douglasPeucker(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset) {
      var n = (end - offset) / stride;
      if (n < 3) {
          for (; offset < end; offset += stride) {
              simplifiedFlatCoordinates[simplifiedOffset++] =
                  flatCoordinates[offset];
              simplifiedFlatCoordinates[simplifiedOffset++] =
                  flatCoordinates[offset + 1];
          }
          return simplifiedOffset;
      }
      /** @type {Array<number>} */
      var markers = new Array(n);
      markers[0] = 1;
      markers[n - 1] = 1;
      /** @type {Array<number>} */
      var stack = [offset, end - stride];
      var index = 0;
      while (stack.length > 0) {
          var last = stack.pop();
          var first = stack.pop();
          var maxSquaredDistance = 0;
          var x1 = flatCoordinates[first];
          var y1 = flatCoordinates[first + 1];
          var x2 = flatCoordinates[last];
          var y2 = flatCoordinates[last + 1];
          for (var i = first + stride; i < last; i += stride) {
              var x = flatCoordinates[i];
              var y = flatCoordinates[i + 1];
              var squaredDistance_1 = squaredSegmentDistance(x, y, x1, y1, x2, y2);
              if (squaredDistance_1 > maxSquaredDistance) {
                  index = i;
                  maxSquaredDistance = squaredDistance_1;
              }
          }
          if (maxSquaredDistance > squaredTolerance) {
              markers[(index - offset) / stride] = 1;
              if (first + stride < index) {
                  stack.push(first, index);
              }
              if (index + stride < last) {
                  stack.push(index, last);
              }
          }
      }
      for (var i = 0; i < n; ++i) {
          if (markers[i]) {
              simplifiedFlatCoordinates[simplifiedOffset++] =
                  flatCoordinates[offset + i * stride];
              simplifiedFlatCoordinates[simplifiedOffset++] =
                  flatCoordinates[offset + i * stride + 1];
          }
      }
      return simplifiedOffset;
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {number} squaredTolerance Squared tolerance.
   * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
   *     coordinates.
   * @param {number} simplifiedOffset Simplified offset.
   * @param {Array<number>} simplifiedEnds Simplified ends.
   * @return {number} Simplified offset.
   */
  function douglasPeuckerArray(flatCoordinates, offset, ends, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds) {
      for (var i = 0, ii = ends.length; i < ii; ++i) {
          var end = ends[i];
          simplifiedOffset = douglasPeucker(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset);
          simplifiedEnds.push(simplifiedOffset);
          offset = end;
      }
      return simplifiedOffset;
  }
  /**
   * @param {number} value Value.
   * @param {number} tolerance Tolerance.
   * @return {number} Rounded value.
   */
  function snap(value, tolerance) {
      return tolerance * Math.round(value / tolerance);
  }
  /**
   * Simplifies a line string using an algorithm designed by Tim Schaub.
   * Coordinates are snapped to the nearest value in a virtual grid and
   * consecutive duplicate coordinates are discarded.  This effectively preserves
   * topology as the simplification of any subsection of a line string is
   * independent of the rest of the line string.  This means that, for examples,
   * the common edge between two polygons will be simplified to the same line
   * string independently in both polygons.  This implementation uses a single
   * pass over the coordinates and eliminates intermediate collinear points.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {number} tolerance Tolerance.
   * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
   *     coordinates.
   * @param {number} simplifiedOffset Simplified offset.
   * @return {number} Simplified offset.
   */
  function quantize(flatCoordinates, offset, end, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset) {
      // do nothing if the line is empty
      if (offset == end) {
          return simplifiedOffset;
      }
      // snap the first coordinate (P1)
      var x1 = snap(flatCoordinates[offset], tolerance);
      var y1 = snap(flatCoordinates[offset + 1], tolerance);
      offset += stride;
      // add the first coordinate to the output
      simplifiedFlatCoordinates[simplifiedOffset++] = x1;
      simplifiedFlatCoordinates[simplifiedOffset++] = y1;
      // find the next coordinate that does not snap to the same value as the first
      // coordinate (P2)
      var x2, y2;
      do {
          x2 = snap(flatCoordinates[offset], tolerance);
          y2 = snap(flatCoordinates[offset + 1], tolerance);
          offset += stride;
          if (offset == end) {
              // all coordinates snap to the same value, the line collapses to a point
              // push the last snapped value anyway to ensure that the output contains
              // at least two points
              // FIXME should we really return at least two points anyway?
              simplifiedFlatCoordinates[simplifiedOffset++] = x2;
              simplifiedFlatCoordinates[simplifiedOffset++] = y2;
              return simplifiedOffset;
          }
      } while (x2 == x1 && y2 == y1);
      while (offset < end) {
          // snap the next coordinate (P3)
          var x3 = snap(flatCoordinates[offset], tolerance);
          var y3 = snap(flatCoordinates[offset + 1], tolerance);
          offset += stride;
          // skip P3 if it is equal to P2
          if (x3 == x2 && y3 == y2) {
              continue;
          }
          // calculate the delta between P1 and P2
          var dx1 = x2 - x1;
          var dy1 = y2 - y1;
          // calculate the delta between P3 and P1
          var dx2 = x3 - x1;
          var dy2 = y3 - y1;
          // if P1, P2, and P3 are colinear and P3 is further from P1 than P2 is from
          // P1 in the same direction then P2 is on the straight line between P1 and
          // P3
          if ((dx1 * dy2 == dy1 * dx2) &&
              ((dx1 < 0 && dx2 < dx1) || dx1 == dx2 || (dx1 > 0 && dx2 > dx1)) &&
              ((dy1 < 0 && dy2 < dy1) || dy1 == dy2 || (dy1 > 0 && dy2 > dy1))) {
              // discard P2 and set P2 = P3
              x2 = x3;
              y2 = y3;
              continue;
          }
          // either P1, P2, and P3 are not colinear, or they are colinear but P3 is
          // between P3 and P1 or on the opposite half of the line to P2.  add P2,
          // and continue with P1 = P2 and P2 = P3
          simplifiedFlatCoordinates[simplifiedOffset++] = x2;
          simplifiedFlatCoordinates[simplifiedOffset++] = y2;
          x1 = x2;
          y1 = y2;
          x2 = x3;
          y2 = y3;
      }
      // add the last point (P2)
      simplifiedFlatCoordinates[simplifiedOffset++] = x2;
      simplifiedFlatCoordinates[simplifiedOffset++] = y2;
      return simplifiedOffset;
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {number} tolerance Tolerance.
   * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
   *     coordinates.
   * @param {number} simplifiedOffset Simplified offset.
   * @param {Array<number>} simplifiedEnds Simplified ends.
   * @return {number} Simplified offset.
   */
  function quantizeArray(flatCoordinates, offset, ends, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds) {
      for (var i = 0, ii = ends.length; i < ii; ++i) {
          var end = ends[i];
          simplifiedOffset = quantize(flatCoordinates, offset, end, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset);
          simplifiedEnds.push(simplifiedOffset);
          offset = end;
      }
      return simplifiedOffset;
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {number} tolerance Tolerance.
   * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
   *     coordinates.
   * @param {number} simplifiedOffset Simplified offset.
   * @param {Array<Array<number>>} simplifiedEndss Simplified endss.
   * @return {number} Simplified offset.
   */
  function quantizeMultiArray(flatCoordinates, offset, endss, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEndss) {
      for (var i = 0, ii = endss.length; i < ii; ++i) {
          var ends = endss[i];
          var simplifiedEnds = [];
          simplifiedOffset = quantizeArray(flatCoordinates, offset, ends, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds);
          simplifiedEndss.push(simplifiedEnds);
          offset = ends[ends.length - 1];
      }
      return simplifiedOffset;
  }

  var __extends$k =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @classdesc
   * Linear ring geometry. Only used as part of polygon; cannot be rendered
   * on its own.
   *
   * @api
   */
  var LinearRing = /** @class */ (function (_super) {
      __extends$k(LinearRing, _super);
      /**
       * @param {Array<import("../coordinate.js").Coordinate>|Array<number>} coordinates Coordinates.
       *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.
       * @param {GeometryLayout=} opt_layout Layout.
       */
      function LinearRing(coordinates, opt_layout) {
          var _this = _super.call(this) || this;
          /**
           * @private
           * @type {number}
           */
          _this.maxDelta_ = -1;
          /**
           * @private
           * @type {number}
           */
          _this.maxDeltaRevision_ = -1;
          if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {
              _this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));
          }
          else {
              _this.setCoordinates(/** @type {Array<import("../coordinate.js").Coordinate>} */ (coordinates), opt_layout);
          }
          return _this;
      }
      /**
       * Make a complete copy of the geometry.
       * @return {!LinearRing} Clone.
       * @override
       * @api
       */
      LinearRing.prototype.clone = function () {
          return new LinearRing(this.flatCoordinates.slice(), this.layout);
      };
      /**
       * @inheritDoc
       */
      LinearRing.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {
          if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
              return minSquaredDistance;
          }
          if (this.maxDeltaRevision_ != this.getRevision()) {
              this.maxDelta_ = Math.sqrt(maxSquaredDelta(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));
              this.maxDeltaRevision_ = this.getRevision();
          }
          return assignClosestPoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);
      };
      /**
       * Return the area of the linear ring on projected plane.
       * @return {number} Area (on projected plane).
       * @api
       */
      LinearRing.prototype.getArea = function () {
          return linearRing(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
      };
      /**
       * Return the coordinates of the linear ring.
       * @return {Array<import("../coordinate.js").Coordinate>} Coordinates.
       * @override
       * @api
       */
      LinearRing.prototype.getCoordinates = function () {
          return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
      };
      /**
       * @inheritDoc
       */
      LinearRing.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {
          var simplifiedFlatCoordinates = [];
          simplifiedFlatCoordinates.length = douglasPeucker(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);
          return new LinearRing(simplifiedFlatCoordinates, GeometryLayout.XY);
      };
      /**
       * @inheritDoc
       * @api
       */
      LinearRing.prototype.getType = function () {
          return GeometryType.LINEAR_RING;
      };
      /**
       * @inheritDoc
       */
      LinearRing.prototype.intersectsExtent = function (extent) {
          return false;
      };
      /**
       * Set the coordinates of the linear ring.
       * @param {!Array<import("../coordinate.js").Coordinate>} coordinates Coordinates.
       * @param {GeometryLayout=} opt_layout Layout.
       * @override
       * @api
       */
      LinearRing.prototype.setCoordinates = function (coordinates, opt_layout) {
          this.setLayout(opt_layout, coordinates, 1);
          if (!this.flatCoordinates) {
              this.flatCoordinates = [];
          }
          this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);
          this.changed();
      };
      return LinearRing;
  }(SimpleGeometry));

  var __extends$l =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @classdesc
   * Point geometry.
   *
   * @api
   */
  var Point = /** @class */ (function (_super) {
      __extends$l(Point, _super);
      /**
       * @param {import("../coordinate.js").Coordinate} coordinates Coordinates.
       * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
       */
      function Point(coordinates, opt_layout) {
          var _this = _super.call(this) || this;
          _this.setCoordinates(coordinates, opt_layout);
          return _this;
      }
      /**
       * Make a complete copy of the geometry.
       * @return {!Point} Clone.
       * @override
       * @api
       */
      Point.prototype.clone = function () {
          var point = new Point(this.flatCoordinates.slice(), this.layout);
          return point;
      };
      /**
       * @inheritDoc
       */
      Point.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {
          var flatCoordinates = this.flatCoordinates;
          var squaredDistance$1 = squaredDistance(x, y, flatCoordinates[0], flatCoordinates[1]);
          if (squaredDistance$1 < minSquaredDistance) {
              var stride = this.stride;
              for (var i = 0; i < stride; ++i) {
                  closestPoint[i] = flatCoordinates[i];
              }
              closestPoint.length = stride;
              return squaredDistance$1;
          }
          else {
              return minSquaredDistance;
          }
      };
      /**
       * Return the coordinate of the point.
       * @return {import("../coordinate.js").Coordinate} Coordinates.
       * @override
       * @api
       */
      Point.prototype.getCoordinates = function () {
          return !this.flatCoordinates ? [] : this.flatCoordinates.slice();
      };
      /**
       * @inheritDoc
       */
      Point.prototype.computeExtent = function (extent) {
          return createOrUpdateFromCoordinate(this.flatCoordinates, extent);
      };
      /**
       * @inheritDoc
       * @api
       */
      Point.prototype.getType = function () {
          return GeometryType.POINT;
      };
      /**
       * @inheritDoc
       * @api
       */
      Point.prototype.intersectsExtent = function (extent) {
          return containsXY(extent, this.flatCoordinates[0], this.flatCoordinates[1]);
      };
      /**
       * @inheritDoc
       * @api
       */
      Point.prototype.setCoordinates = function (coordinates, opt_layout) {
          this.setLayout(opt_layout, coordinates, 0);
          if (!this.flatCoordinates) {
              this.flatCoordinates = [];
          }
          this.flatCoordinates.length = deflateCoordinate(this.flatCoordinates, 0, coordinates, this.stride);
          this.changed();
      };
      return Point;
  }(SimpleGeometry));

  /**
   * @module ol/geom/flat/segments
   */
  /**
   * This function calls `callback` for each segment of the flat coordinates
   * array. If the callback returns a truthy value the function returns that
   * value immediately. Otherwise the function returns `false`.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {function(import("../../coordinate.js").Coordinate, import("../../coordinate.js").Coordinate): T} callback Function
   *     called for each segment.
   * @return {T|boolean} Value.
   * @template T
   */
  function forEach(flatCoordinates, offset, end, stride, callback) {
      var point1 = [flatCoordinates[offset], flatCoordinates[offset + 1]];
      var point2 = [];
      var ret;
      for (; (offset + stride) < end; offset += stride) {
          point2[0] = flatCoordinates[offset + stride];
          point2[1] = flatCoordinates[offset + stride + 1];
          ret = callback(point1, point2);
          if (ret) {
              return ret;
          }
          point1[0] = point2[0];
          point1[1] = point2[1];
      }
      return false;
  }

  /**
   * @module ol/geom/flat/intersectsextent
   */
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @return {boolean} True if the geometry and the extent intersect.
   */
  function intersectsLineString(flatCoordinates, offset, end, stride, extent) {
      var coordinatesExtent = extendFlatCoordinates(createEmpty(), flatCoordinates, offset, end, stride);
      if (!intersects(extent, coordinatesExtent)) {
          return false;
      }
      if (containsExtent(extent, coordinatesExtent)) {
          return true;
      }
      if (coordinatesExtent[0] >= extent[0] &&
          coordinatesExtent[2] <= extent[2]) {
          return true;
      }
      if (coordinatesExtent[1] >= extent[1] &&
          coordinatesExtent[3] <= extent[3]) {
          return true;
      }
      return forEach(flatCoordinates, offset, end, stride, 
      /**
       * @param {import("../../coordinate.js").Coordinate} point1 Start point.
       * @param {import("../../coordinate.js").Coordinate} point2 End point.
       * @return {boolean} `true` if the segment and the extent intersect,
       *     `false` otherwise.
       */
      function (point1, point2) {
          return intersectsSegment(extent, point1, point2);
      });
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @return {boolean} True if the geometry and the extent intersect.
   */
  function intersectsLineStringArray(flatCoordinates, offset, ends, stride, extent) {
      for (var i = 0, ii = ends.length; i < ii; ++i) {
          if (intersectsLineString(flatCoordinates, offset, ends[i], stride, extent)) {
              return true;
          }
          offset = ends[i];
      }
      return false;
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @return {boolean} True if the geometry and the extent intersect.
   */
  function intersectsLinearRing(flatCoordinates, offset, end, stride, extent) {
      if (intersectsLineString(flatCoordinates, offset, end, stride, extent)) {
          return true;
      }
      if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[0], extent[1])) {
          return true;
      }
      if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[0], extent[3])) {
          return true;
      }
      if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[2], extent[1])) {
          return true;
      }
      if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[2], extent[3])) {
          return true;
      }
      return false;
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @return {boolean} True if the geometry and the extent intersect.
   */
  function intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent) {
      if (!intersectsLinearRing(flatCoordinates, offset, ends[0], stride, extent)) {
          return false;
      }
      if (ends.length === 1) {
          return true;
      }
      for (var i = 1, ii = ends.length; i < ii; ++i) {
          if (linearRingContainsExtent(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {
              if (!intersectsLineString(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {
                  return false;
              }
          }
      }
      return true;
  }
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Endss.
   * @param {number} stride Stride.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @return {boolean} True if the geometry and the extent intersect.
   */
  function intersectsLinearRingMultiArray(flatCoordinates, offset, endss, stride, extent) {
      for (var i = 0, ii = endss.length; i < ii; ++i) {
          var ends = endss[i];
          if (intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent)) {
              return true;
          }
          offset = ends[ends.length - 1];
      }
      return false;
  }

  /**
   * @module ol/geom/flat/reverse
   */
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   */
  function coordinates(flatCoordinates, offset, end, stride) {
      while (offset < end - stride) {
          for (var i = 0; i < stride; ++i) {
              var tmp = flatCoordinates[offset + i];
              flatCoordinates[offset + i] = flatCoordinates[end - stride + i];
              flatCoordinates[end - stride + i] = tmp;
          }
          offset += stride;
          end -= stride;
      }
  }

  /**
   * @module ol/geom/flat/orient
   */
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @return {boolean} Is clockwise.
   */
  function linearRingIsClockwise(flatCoordinates, offset, end, stride) {
      // http://tinyurl.com/clockwise-method
      // https://github.com/OSGeo/gdal/blob/trunk/gdal/ogr/ogrlinearring.cpp
      var edge = 0;
      var x1 = flatCoordinates[end - stride];
      var y1 = flatCoordinates[end - stride + 1];
      for (; offset < end; offset += stride) {
          var x2 = flatCoordinates[offset];
          var y2 = flatCoordinates[offset + 1];
          edge += (x2 - x1) * (y2 + y1);
          x1 = x2;
          y1 = y2;
      }
      return edge > 0;
  }
  /**
   * Determines if linear rings are oriented.  By default, left-hand orientation
   * is tested (first ring must be clockwise, remaining rings counter-clockwise).
   * To test for right-hand orientation, use the `opt_right` argument.
   *
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Array of end indexes.
   * @param {number} stride Stride.
   * @param {boolean=} opt_right Test for right-hand orientation
   *     (counter-clockwise exterior ring and clockwise interior rings).
   * @return {boolean} Rings are correctly oriented.
   */
  function linearRingsAreOriented(flatCoordinates, offset, ends, stride, opt_right) {
      var right = opt_right !== undefined ? opt_right : false;
      for (var i = 0, ii = ends.length; i < ii; ++i) {
          var end = ends[i];
          var isClockwise = linearRingIsClockwise(flatCoordinates, offset, end, stride);
          if (i === 0) {
              if ((right && isClockwise) || (!right && !isClockwise)) {
                  return false;
              }
          }
          else {
              if ((right && !isClockwise) || (!right && isClockwise)) {
                  return false;
              }
          }
          offset = end;
      }
      return true;
  }
  /**
   * Determines if linear rings are oriented.  By default, left-hand orientation
   * is tested (first ring must be clockwise, remaining rings counter-clockwise).
   * To test for right-hand orientation, use the `opt_right` argument.
   *
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Array of array of end indexes.
   * @param {number} stride Stride.
   * @param {boolean=} opt_right Test for right-hand orientation
   *     (counter-clockwise exterior ring and clockwise interior rings).
   * @return {boolean} Rings are correctly oriented.
   */
  function linearRingssAreOriented(flatCoordinates, offset, endss, stride, opt_right) {
      for (var i = 0, ii = endss.length; i < ii; ++i) {
          var ends = endss[i];
          if (!linearRingsAreOriented(flatCoordinates, offset, ends, stride, opt_right)) {
              return false;
          }
          if (ends.length) {
              offset = ends[ends.length - 1];
          }
      }
      return true;
  }
  /**
   * Orient coordinates in a flat array of linear rings.  By default, rings
   * are oriented following the left-hand rule (clockwise for exterior and
   * counter-clockwise for interior rings).  To orient according to the
   * right-hand rule, use the `opt_right` argument.
   *
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<number>} ends Ends.
   * @param {number} stride Stride.
   * @param {boolean=} opt_right Follow the right-hand rule for orientation.
   * @return {number} End.
   */
  function orientLinearRings(flatCoordinates, offset, ends, stride, opt_right) {
      var right = opt_right !== undefined ? opt_right : false;
      for (var i = 0, ii = ends.length; i < ii; ++i) {
          var end = ends[i];
          var isClockwise = linearRingIsClockwise(flatCoordinates, offset, end, stride);
          var reverse = i === 0 ?
              (right && isClockwise) || (!right && !isClockwise) :
              (right && !isClockwise) || (!right && isClockwise);
          if (reverse) {
              coordinates(flatCoordinates, offset, end, stride);
          }
          offset = end;
      }
      return offset;
  }
  /**
   * Orient coordinates in a flat array of linear rings.  By default, rings
   * are oriented following the left-hand rule (clockwise for exterior and
   * counter-clockwise for interior rings).  To orient according to the
   * right-hand rule, use the `opt_right` argument.
   *
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {Array<Array<number>>} endss Array of array of end indexes.
   * @param {number} stride Stride.
   * @param {boolean=} opt_right Follow the right-hand rule for orientation.
   * @return {number} End.
   */
  function orientLinearRingsArray(flatCoordinates, offset, endss, stride, opt_right) {
      for (var i = 0, ii = endss.length; i < ii; ++i) {
          offset = orientLinearRings(flatCoordinates, offset, endss[i], stride, opt_right);
      }
      return offset;
  }

  var __extends$m =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @classdesc
   * Polygon geometry.
   *
   * @api
   */
  var Polygon = /** @class */ (function (_super) {
      __extends$m(Polygon, _super);
      /**
       * @param {!Array<Array<import("../coordinate.js").Coordinate>>|!Array<number>} coordinates
       *     Array of linear rings that define the polygon. The first linear ring of the
       *     array defines the outer-boundary or surface of the polygon. Each subsequent
       *     linear ring defines a hole in the surface of the polygon. A linear ring is
       *     an array of vertices' coordinates where the first coordinate and the last are
       *     equivalent. (For internal use, flat coordinates in combination with
       *     `opt_layout` and `opt_ends` are also accepted.)
       * @param {GeometryLayout=} opt_layout Layout.
       * @param {Array<number>=} opt_ends Ends (for internal use with flat coordinates).
       */
      function Polygon(coordinates, opt_layout, opt_ends) {
          var _this = _super.call(this) || this;
          /**
           * @type {Array<number>}
           * @private
           */
          _this.ends_ = [];
          /**
           * @private
           * @type {number}
           */
          _this.flatInteriorPointRevision_ = -1;
          /**
           * @private
           * @type {import("../coordinate.js").Coordinate}
           */
          _this.flatInteriorPoint_ = null;
          /**
           * @private
           * @type {number}
           */
          _this.maxDelta_ = -1;
          /**
           * @private
           * @type {number}
           */
          _this.maxDeltaRevision_ = -1;
          /**
           * @private
           * @type {number}
           */
          _this.orientedRevision_ = -1;
          /**
           * @private
           * @type {Array<number>}
           */
          _this.orientedFlatCoordinates_ = null;
          if (opt_layout !== undefined && opt_ends) {
              _this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));
              _this.ends_ = opt_ends;
          }
          else {
              _this.setCoordinates(/** @type {Array<Array<import("../coordinate.js").Coordinate>>} */ (coordinates), opt_layout);
          }
          return _this;
      }
      /**
       * Append the passed linear ring to this polygon.
       * @param {LinearRing} linearRing Linear ring.
       * @api
       */
      Polygon.prototype.appendLinearRing = function (linearRing) {
          if (!this.flatCoordinates) {
              this.flatCoordinates = linearRing.getFlatCoordinates().slice();
          }
          else {
              extend$1(this.flatCoordinates, linearRing.getFlatCoordinates());
          }
          this.ends_.push(this.flatCoordinates.length);
          this.changed();
      };
      /**
       * Make a complete copy of the geometry.
       * @return {!Polygon} Clone.
       * @override
       * @api
       */
      Polygon.prototype.clone = function () {
          return new Polygon(this.flatCoordinates.slice(), this.layout, this.ends_.slice());
      };
      /**
       * @inheritDoc
       */
      Polygon.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {
          if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
              return minSquaredDistance;
          }
          if (this.maxDeltaRevision_ != this.getRevision()) {
              this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(this.flatCoordinates, 0, this.ends_, this.stride, 0));
              this.maxDeltaRevision_ = this.getRevision();
          }
          return assignClosestArrayPoint(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);
      };
      /**
       * @inheritDoc
       */
      Polygon.prototype.containsXY = function (x, y) {
          return linearRingsContainsXY(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, x, y);
      };
      /**
       * Return the area of the polygon on projected plane.
       * @return {number} Area (on projected plane).
       * @api
       */
      Polygon.prototype.getArea = function () {
          return linearRings(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride);
      };
      /**
       * Get the coordinate array for this geometry.  This array has the structure
       * of a GeoJSON coordinate array for polygons.
       *
       * @param {boolean=} opt_right Orient coordinates according to the right-hand
       *     rule (counter-clockwise for exterior and clockwise for interior rings).
       *     If `false`, coordinates will be oriented according to the left-hand rule
       *     (clockwise for exterior and counter-clockwise for interior rings).
       *     By default, coordinate orientation will depend on how the geometry was
       *     constructed.
       * @return {Array<Array<import("../coordinate.js").Coordinate>>} Coordinates.
       * @override
       * @api
       */
      Polygon.prototype.getCoordinates = function (opt_right) {
          var flatCoordinates;
          if (opt_right !== undefined) {
              flatCoordinates = this.getOrientedFlatCoordinates().slice();
              orientLinearRings(flatCoordinates, 0, this.ends_, this.stride, opt_right);
          }
          else {
              flatCoordinates = this.flatCoordinates;
          }
          return inflateCoordinatesArray(flatCoordinates, 0, this.ends_, this.stride);
      };
      /**
       * @return {Array<number>} Ends.
       */
      Polygon.prototype.getEnds = function () {
          return this.ends_;
      };
      /**
       * @return {Array<number>} Interior point.
       */
      Polygon.prototype.getFlatInteriorPoint = function () {
          if (this.flatInteriorPointRevision_ != this.getRevision()) {
              var flatCenter = getCenter(this.getExtent());
              this.flatInteriorPoint_ = getInteriorPointOfArray(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, flatCenter, 0);
              this.flatInteriorPointRevision_ = this.getRevision();
          }
          return this.flatInteriorPoint_;
      };
      /**
       * Return an interior point of the polygon.
       * @return {Point} Interior point as XYM coordinate, where M is the
       * length of the horizontal intersection that the point belongs to.
       * @api
       */
      Polygon.prototype.getInteriorPoint = function () {
          return new Point(this.getFlatInteriorPoint(), GeometryLayout.XYM);
      };
      /**
       * Return the number of rings of the polygon,  this includes the exterior
       * ring and any interior rings.
       *
       * @return {number} Number of rings.
       * @api
       */
      Polygon.prototype.getLinearRingCount = function () {
          return this.ends_.length;
      };
      /**
       * Return the Nth linear ring of the polygon geometry. Return `null` if the
       * given index is out of range.
       * The exterior linear ring is available at index `0` and the interior rings
       * at index `1` and beyond.
       *
       * @param {number} index Index.
       * @return {LinearRing} Linear ring.
       * @api
       */
      Polygon.prototype.getLinearRing = function (index) {
          if (index < 0 || this.ends_.length <= index) {
              return null;
          }
          return new LinearRing(this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);
      };
      /**
       * Return the linear rings of the polygon.
       * @return {Array<LinearRing>} Linear rings.
       * @api
       */
      Polygon.prototype.getLinearRings = function () {
          var layout = this.layout;
          var flatCoordinates = this.flatCoordinates;
          var ends = this.ends_;
          var linearRings = [];
          var offset = 0;
          for (var i = 0, ii = ends.length; i < ii; ++i) {
              var end = ends[i];
              var linearRing = new LinearRing(flatCoordinates.slice(offset, end), layout);
              linearRings.push(linearRing);
              offset = end;
          }
          return linearRings;
      };
      /**
       * @return {Array<number>} Oriented flat coordinates.
       */
      Polygon.prototype.getOrientedFlatCoordinates = function () {
          if (this.orientedRevision_ != this.getRevision()) {
              var flatCoordinates = this.flatCoordinates;
              if (linearRingsAreOriented(flatCoordinates, 0, this.ends_, this.stride)) {
                  this.orientedFlatCoordinates_ = flatCoordinates;
              }
              else {
                  this.orientedFlatCoordinates_ = flatCoordinates.slice();
                  this.orientedFlatCoordinates_.length =
                      orientLinearRings(this.orientedFlatCoordinates_, 0, this.ends_, this.stride);
              }
              this.orientedRevision_ = this.getRevision();
          }
          return this.orientedFlatCoordinates_;
      };
      /**
       * @inheritDoc
       */
      Polygon.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {
          var simplifiedFlatCoordinates = [];
          var simplifiedEnds = [];
          simplifiedFlatCoordinates.length = quantizeArray(this.flatCoordinates, 0, this.ends_, this.stride, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEnds);
          return new Polygon(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEnds);
      };
      /**
       * @inheritDoc
       * @api
       */
      Polygon.prototype.getType = function () {
          return GeometryType.POLYGON;
      };
      /**
       * @inheritDoc
       * @api
       */
      Polygon.prototype.intersectsExtent = function (extent) {
          return intersectsLinearRingArray(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, extent);
      };
      /**
       * Set the coordinates of the polygon.
       * @param {!Array<Array<import("../coordinate.js").Coordinate>>} coordinates Coordinates.
       * @param {GeometryLayout=} opt_layout Layout.
       * @override
       * @api
       */
      Polygon.prototype.setCoordinates = function (coordinates, opt_layout) {
          this.setLayout(opt_layout, coordinates, 2);
          if (!this.flatCoordinates) {
              this.flatCoordinates = [];
          }
          var ends = deflateCoordinatesArray(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);
          this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];
          this.changed();
      };
      return Polygon;
  }(SimpleGeometry));
  /**
   * Create a polygon from an extent. The layout used is `XY`.
   * @param {import("../extent.js").Extent} extent The extent.
   * @return {Polygon} The polygon.
   * @api
   */
  function fromExtent(extent) {
      var minX = extent[0];
      var minY = extent[1];
      var maxX = extent[2];
      var maxY = extent[3];
      var flatCoordinates = [minX, minY, minX, maxY, maxX, maxY, maxX, minY, minX, minY];
      return new Polygon(flatCoordinates, GeometryLayout.XY, [flatCoordinates.length]);
  }

  var __extends$n =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * An animation configuration
   *
   * @typedef {Object} Animation
   * @property {import("./coordinate.js").Coordinate} [sourceCenter]
   * @property {import("./coordinate.js").Coordinate} [targetCenter]
   * @property {number} [sourceResolution]
   * @property {number} [targetResolution]
   * @property {number} [sourceRotation]
   * @property {number} [targetRotation]
   * @property {import("./coordinate.js").Coordinate} [anchor]
   * @property {number} start
   * @property {number} duration
   * @property {boolean} complete
   * @property {function(number):number} easing
   * @property {function(boolean)} callback
   */
  /**
   * @typedef {Object} Constraints
   * @property {import("./centerconstraint.js").Type} center
   * @property {import("./resolutionconstraint.js").Type} resolution
   * @property {import("./rotationconstraint.js").Type} rotation
   */
  /**
   * @typedef {Object} FitOptions
   * @property {import("./size.js").Size} [size] The size in pixels of the box to fit
   * the extent into. Default is the current size of the first map in the DOM that
   * uses this view, or `[100, 100]` if no such map is found.
   * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be
   * cleared inside the view. Values in the array are top, right, bottom and left
   * padding.
   * @property {boolean} [nearest=false] If the view `constrainResolution` option is `true`,
   * get the nearest extent instead of the closest that actually fits the view.
   * @property {number} [minResolution=0] Minimum resolution that we zoom to.
   * @property {number} [maxZoom] Maximum zoom level that we zoom to. If
   * `minResolution` is given, this property is ignored.
   * @property {number} [duration] The duration of the animation in milliseconds.
   * By default, there is no animation to the target extent.
   * @property {function(number):number} [easing] The easing function used during
   * the animation (defaults to {@link module:ol/easing~inAndOut}).
   * The function will be called for each frame with a number representing a
   * fraction of the animation's duration.  The function should return a number
   * between 0 and 1 representing the progress toward the destination state.
   * @property {function(boolean)} [callback] Function called when the view is in
   * its final position. The callback will be called with `true` if the animation
   * series completed on its own or `false` if it was cancelled.
   */
  /**
   * @typedef {Object} ViewOptions
   * @property {import("./coordinate.js").Coordinate} [center] The initial center for
   * the view. If a user projection is not set, the coordinate system for the center is
   * specified with the `projection` option. Layer sources will not be fetched if this
   * is not set, but the center can be set later with {@link #setCenter}.
   * @property {boolean|number} [constrainRotation=true] Rotation constraint.
   * `false` means no constraint. `true` means no constraint, but snap to zero
   * near zero. A number constrains the rotation to that number of values. For
   * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.
   * @property {boolean} [enableRotation=true] Enable rotation.
   * If `false`, a rotation constraint that always sets the rotation to zero is
   * used. The `constrainRotation` option has no effect if `enableRotation` is
   * `false`.
   * @property {import("./extent.js").Extent} [extent] The extent that constrains the
   * view, in other words, nothing outside of this extent can be visible on the map.
   * @property {boolean} [constrainOnlyCenter=false] If true, the extent
   * constraint will only apply to the view center and not the whole extent.
   * @property {boolean} [smoothExtentConstraint=true] If true, the extent
   * constraint will be applied smoothly, i.e. allow the view to go slightly outside
   * of the given `extent`.
   * @property {number} [maxResolution] The maximum resolution used to determine
   * the resolution constraint. It is used together with `minResolution` (or
   * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way
   * that the projection's validity extent fits in a 256x256 px tile. If the
   * projection is Spherical Mercator (the default) then `maxResolution` defaults
   * to `40075016.68557849 / 256 = 156543.03392804097`.
   * @property {number} [minResolution] The minimum resolution used to determine
   * the resolution constraint.  It is used together with `maxResolution` (or
   * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29
   * zoom levels (with a factor of 2). If the projection is Spherical Mercator
   * (the default) then `minResolution` defaults to
   * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.
   * @property {number} [maxZoom=28] The maximum zoom level used to determine the
   * resolution constraint. It is used together with `minZoom` (or
   * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also
   * provided, it is given precedence over `maxZoom`.
   * @property {number} [minZoom=0] The minimum zoom level used to determine the
   * resolution constraint. It is used together with `maxZoom` (or
   * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also
   * provided, it is given precedence over `minZoom`.
   * @property {boolean} [multiWorld=false] If `false` the view is constrained so
   * only one world is visible, and you cannot pan off the edge.  If `true` the map
   * may show multiple worlds at low zoom levels.  Only used if the `projection` is
   * global.  Note that if `extent` is also provided it is given precedence.
   * @property {boolean} [constrainResolution=false] If true, the view will always
   * animate to the closest zoom level after an interaction; false means
   * intermediary zoom levels are allowed.
   * @property {boolean} [smoothResolutionConstraint=true] If true, the resolution
   * min/max values will be applied smoothly, i. e. allow the view to exceed slightly
   * the given resolution or zoom bounds.
   * @property {boolean} [showFullExtent=false] Allow the view to be zoomed out to
   * show the full configured extent. By default, when a view is configured with an
   * extent, users will not be able to zoom out so the viewport exceeds the extent in
   * either dimension. This means the full extent may not be visible if the viewport
   * is taller or wider than the aspect ratio of the configured extent. If
   * showFullExtent is true, the user will be able to zoom out so that the viewport
   * exceeds the height or width of the configured extent, but not both, allowing the
   * full extent to be shown.
   * @property {import("./proj.js").ProjectionLike} [projection='EPSG:3857'] The
   * projection. The default is Spherical Mercator.
   * @property {number} [resolution] The initial resolution for the view. The
   * units are `projection` units per pixel (e.g. meters per pixel). An
   * alternative to setting this is to set `zoom`. Layer sources will not be
   * fetched if neither this nor `zoom` are defined, but they can be set later
   * with {@link #setZoom} or {@link #setResolution}.
   * @property {Array<number>} [resolutions] Resolutions to determine the
   * resolution constraint. If set the `maxResolution`, `minResolution`,
   * `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.
   * @property {number} [rotation=0] The initial rotation for the view in radians
   * (positive rotation clockwise, 0 means North).
   * @property {number} [zoom] Only used if `resolution` is not defined. Zoom
   * level used to calculate the initial resolution for the view.
   * @property {number} [zoomFactor=2] The zoom factor used to compute the
   * corresponding resolution.
   */
  /**
   * @typedef {Object} AnimationOptions
   * @property {import("./coordinate.js").Coordinate} [center] The center of the view at the end of
   * the animation.
   * @property {number} [zoom] The zoom level of the view at the end of the
   * animation. This takes precedence over `resolution`.
   * @property {number} [resolution] The resolution of the view at the end
   * of the animation.  If `zoom` is also provided, this option will be ignored.
   * @property {number} [rotation] The rotation of the view at the end of
   * the animation.
   * @property {import("./coordinate.js").Coordinate} [anchor] Optional anchor to remain fixed
   * during a rotation or resolution animation.
   * @property {number} [duration=1000] The duration of the animation in milliseconds.
   * @property {function(number):number} [easing] The easing function used
   * during the animation (defaults to {@link module:ol/easing~inAndOut}).
   * The function will be called for each frame with a number representing a
   * fraction of the animation's duration.  The function should return a number
   * between 0 and 1 representing the progress toward the destination state.
   */
  /**
   * @typedef {Object} State
   * @property {import("./coordinate.js").Coordinate} center
   * @property {import("./proj/Projection.js").default} projection
   * @property {number} resolution
   * @property {number} rotation
   * @property {number} zoom
   */
  /**
   * Default min zoom level for the map view.
   * @type {number}
   */
  var DEFAULT_MIN_ZOOM = 0;
  /**
   * @classdesc
   * A View object represents a simple 2D view of the map.
   *
   * This is the object to act upon to change the center, resolution,
   * and rotation of the map.
   *
   * A View has a `projection`. The projection determines the
   * coordinate system of the center, and its units determine the units of the
   * resolution (projection units per pixel). The default projection is
   * Spherical Mercator (EPSG:3857).
   *
   * ### The view states
   *
   * A View is determined by three states: `center`, `resolution`,
   * and `rotation`. Each state has a corresponding getter and setter, e.g.
   * `getCenter` and `setCenter` for the `center` state.
   *
   * The `zoom` state is actually not saved on the view: all computations
   * internally use the `resolution` state. Still, the `setZoom` and `getZoom`
   * methods are available, as well as `getResolutionForZoom` and
   * `getZoomForResolution` to switch from one system to the other.
   *
   * ### The constraints
   *
   * `setCenter`, `setResolution` and `setRotation` can be used to change the
   * states of the view, but any constraint defined in the constructor will
   * be applied along the way.
   *
   * A View object can have a *resolution constraint*, a *rotation constraint*
   * and a *center constraint*.
   *
   * The *resolution constraint* typically restricts min/max values and
   * snaps to specific resolutions. It is determined by the following
   * options: `resolutions`, `maxResolution`, `maxZoom` and `zoomFactor`.
   * If `resolutions` is set, the other three options are ignored. See
   * documentation for each option for more information. By default, the view
   * only has a min/max restriction and allow intermediary zoom levels when
   * pinch-zooming for example.
   *
   * The *rotation constraint* snaps to specific angles. It is determined
   * by the following options: `enableRotation` and `constrainRotation`.
   * By default rotation is allowed and its value is snapped to zero when approaching the
   * horizontal.
   *
   * The *center constraint* is determined by the `extent` option. By
   * default the view center is not constrained at all.
   *
   * ### Changing the view state
   *
   * It is important to note that `setZoom`, `setResolution`, `setCenter` and
   * `setRotation` are subject to the above mentioned constraints. As such, it
   * may sometimes not be possible to know in advance the resulting state of the
   * View. For example, calling `setResolution(10)` does not guarantee that
   * `getResolution()` will return `10`.
   *
   * A consequence of this is that, when applying a delta on the view state, one
   * should use `adjustCenter`, `adjustRotation`, `adjustZoom` and `adjustResolution`
   * rather than the corresponding setters. This will let view do its internal
   * computations. Besides, the `adjust*` methods also take an `opt_anchor`
   * argument which allows specifying an origin for the transformation.
   *
   * ### Interacting with the view
   *
   * View constraints are usually only applied when the view is *at rest*, meaning that
   * no interaction or animation is ongoing. As such, if the user puts the view in a
   * state that is not equivalent to a constrained one (e.g. rotating the view when
   * the snap angle is 0), an animation will be triggered at the interaction end to
   * put back the view to a stable state;
   *
   * @api
   */
  var View = /** @class */ (function (_super) {
      __extends$n(View, _super);
      /**
       * @param {ViewOptions=} opt_options View options.
       */
      function View(opt_options) {
          var _this = _super.call(this) || this;
          var options = assign({}, opt_options);
          /**
           * @private
           * @type {Array<number>}
           */
          _this.hints_ = [0, 0];
          /**
           * @private
           * @type {Array<Array<Animation>>}
           */
          _this.animations_ = [];
          /**
           * @private
           * @type {number|undefined}
           */
          _this.updateAnimationKey_;
          /**
           * @private
           * @const
           * @type {import("./proj/Projection.js").default}
           */
          _this.projection_ = createProjection(options.projection, 'EPSG:3857');
          /**
           * @private
           * @type {import("./size.js").Size}
           */
          _this.viewportSize_ = [100, 100];
          /**
           * @private
           * @type {import("./coordinate.js").Coordinate|undefined}
           */
          _this.targetCenter_ = null;
          /**
           * @private
           * @type {number|undefined}
           */
          _this.targetResolution_;
          /**
           * @private
           * @type {number|undefined}
           */
          _this.targetRotation_;
          /**
           * @private
           * @type {import("./coordinate.js").Coordinate|undefined}
           */
          _this.cancelAnchor_ = undefined;
          if (options.center) {
              options.center = fromUserCoordinate(options.center, _this.projection_);
          }
          if (options.extent) {
              options.extent = fromUserExtent(options.extent, _this.projection_);
          }
          _this.applyOptions_(options);
          return _this;
      }
      /**
       * Set up the view with the given options.
       * @param {ViewOptions} options View options.
       */
      View.prototype.applyOptions_ = function (options) {
          /**
           * @type {Object<string, *>}
           */
          var properties = {};
          var resolutionConstraintInfo = createResolutionConstraint(options);
          /**
           * @private
           * @type {number}
           */
          this.maxResolution_ = resolutionConstraintInfo.maxResolution;
          /**
           * @private
           * @type {number}
           */
          this.minResolution_ = resolutionConstraintInfo.minResolution;
          /**
           * @private
           * @type {number}
           */
          this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;
          /**
           * @private
           * @type {Array<number>|undefined}
           */
          this.resolutions_ = options.resolutions;
          /**
           * @private
           * @type {number}
           */
          this.minZoom_ = resolutionConstraintInfo.minZoom;
          var centerConstraint = createCenterConstraint(options);
          var resolutionConstraint = resolutionConstraintInfo.constraint;
          var rotationConstraint = createRotationConstraint(options);
          /**
           * @private
           * @type {Constraints}
           */
          this.constraints_ = {
              center: centerConstraint,
              resolution: resolutionConstraint,
              rotation: rotationConstraint
          };
          this.setRotation(options.rotation !== undefined ? options.rotation : 0);
          this.setCenterInternal(options.center !== undefined ? options.center : null);
          if (options.resolution !== undefined) {
              this.setResolution(options.resolution);
          }
          else if (options.zoom !== undefined) {
              this.setZoom(options.zoom);
          }
          this.setProperties(properties);
          /**
           * @private
           * @type {ViewOptions}
           */
          this.options_ = options;
      };
      /**
       * Get an updated version of the view options used to construct the view.  The
       * current resolution (or zoom), center, and rotation are applied to any stored
       * options.  The provided options can be used to apply new min/max zoom or
       * resolution limits.
       * @param {ViewOptions} newOptions New options to be applied.
       * @return {ViewOptions} New options updated with the current view state.
       */
      View.prototype.getUpdatedOptions_ = function (newOptions) {
          var options = assign({}, this.options_);
          // preserve resolution (or zoom)
          if (options.resolution !== undefined) {
              options.resolution = this.getResolution();
          }
          else {
              options.zoom = this.getZoom();
          }
          // preserve center
          options.center = this.getCenterInternal();
          // preserve rotation
          options.rotation = this.getRotation();
          return assign({}, options, newOptions);
      };
      /**
       * Animate the view.  The view's center, zoom (or resolution), and rotation
       * can be animated for smooth transitions between view states.  For example,
       * to animate the view to a new zoom level:
       *
       *     view.animate({zoom: view.getZoom() + 1});
       *
       * By default, the animation lasts one second and uses in-and-out easing.  You
       * can customize this behavior by including `duration` (in milliseconds) and
       * `easing` options (see {@link module:ol/easing}).
       *
       * To chain together multiple animations, call the method with multiple
       * animation objects.  For example, to first zoom and then pan:
       *
       *     view.animate({zoom: 10}, {center: [0, 0]});
       *
       * If you provide a function as the last argument to the animate method, it
       * will get called at the end of an animation series.  The callback will be
       * called with `true` if the animation series completed on its own or `false`
       * if it was cancelled.
       *
       * Animations are cancelled by user interactions (e.g. dragging the map) or by
       * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`
       * (or another method that calls one of these).
       *
       * @param {...(AnimationOptions|function(boolean): void)} var_args Animation
       *     options.  Multiple animations can be run in series by passing multiple
       *     options objects.  To run multiple animations in parallel, call the method
       *     multiple times.  An optional callback can be provided as a final
       *     argument.  The callback will be called with a boolean indicating whether
       *     the animation completed without being cancelled.
       * @api
       */
      View.prototype.animate = function (var_args) {
          if (this.isDef() && !this.getAnimating()) {
              this.resolveConstraints(0);
          }
          var args = new Array(arguments.length);
          for (var i = 0; i < args.length; ++i) {
              var options = arguments[i];
              if (options.center) {
                  options = assign({}, options);
                  options.center = fromUserCoordinate(options.center, this.getProjection());
              }
              if (options.anchor) {
                  options = assign({}, options);
                  options.anchor = fromUserCoordinate(options.anchor, this.getProjection());
              }
              args[i] = options;
          }
          this.animateInternal.apply(this, args);
      };
      /**
       * @param {...(AnimationOptions|function(boolean): void)} var_args Animation options.
       */
      View.prototype.animateInternal = function (var_args) {
          var animationCount = arguments.length;
          var callback;
          if (animationCount > 1 && typeof arguments[animationCount - 1] === 'function') {
              callback = arguments[animationCount - 1];
              --animationCount;
          }
          if (!this.isDef()) {
              // if view properties are not yet set, shortcut to the final state
              var state = arguments[animationCount - 1];
              if (state.center) {
                  this.setCenterInternal(state.center);
              }
              if (state.zoom !== undefined) {
                  this.setZoom(state.zoom);
              }
              if (state.rotation !== undefined) {
                  this.setRotation(state.rotation);
              }
              if (callback) {
                  animationCallback(callback, true);
              }
              return;
          }
          var start = Date.now();
          var center = this.targetCenter_.slice();
          var resolution = this.targetResolution_;
          var rotation = this.targetRotation_;
          var series = [];
          for (var i = 0; i < animationCount; ++i) {
              var options = /** @type {AnimationOptions} */ (arguments[i]);
              var animation = {
                  start: start,
                  complete: false,
                  anchor: options.anchor,
                  duration: options.duration !== undefined ? options.duration : 1000,
                  easing: options.easing || inAndOut,
                  callback: callback
              };
              if (options.center) {
                  animation.sourceCenter = center;
                  animation.targetCenter = options.center.slice();
                  center = animation.targetCenter;
              }
              if (options.zoom !== undefined) {
                  animation.sourceResolution = resolution;
                  animation.targetResolution = this.getResolutionForZoom(options.zoom);
                  resolution = animation.targetResolution;
              }
              else if (options.resolution) {
                  animation.sourceResolution = resolution;
                  animation.targetResolution = options.resolution;
                  resolution = animation.targetResolution;
              }
              if (options.rotation !== undefined) {
                  animation.sourceRotation = rotation;
                  var delta = modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;
                  animation.targetRotation = rotation + delta;
                  rotation = animation.targetRotation;
              }
              // check if animation is a no-op
              if (isNoopAnimation(animation)) {
                  animation.complete = true;
                  // we still push it onto the series for callback handling
              }
              else {
                  start += animation.duration;
              }
              series.push(animation);
          }
          this.animations_.push(series);
          this.setHint(ViewHint.ANIMATING, 1);
          this.updateAnimations_();
      };
      /**
       * Determine if the view is being animated.
       * @return {boolean} The view is being animated.
       * @api
       */
      View.prototype.getAnimating = function () {
          return this.hints_[ViewHint.ANIMATING] > 0;
      };
      /**
       * Determine if the user is interacting with the view, such as panning or zooming.
       * @return {boolean} The view is being interacted with.
       * @api
       */
      View.prototype.getInteracting = function () {
          return this.hints_[ViewHint.INTERACTING] > 0;
      };
      /**
       * Cancel any ongoing animations.
       * @api
       */
      View.prototype.cancelAnimations = function () {
          this.setHint(ViewHint.ANIMATING, -this.hints_[ViewHint.ANIMATING]);
          var anchor;
          for (var i = 0, ii = this.animations_.length; i < ii; ++i) {
              var series = this.animations_[i];
              if (series[0].callback) {
                  animationCallback(series[0].callback, false);
              }
              if (!anchor) {
                  for (var j = 0, jj = series.length; j < jj; ++j) {
                      var animation = series[j];
                      if (!animation.complete) {
                          anchor = animation.anchor;
                          break;
                      }
                  }
              }
          }
          this.animations_.length = 0;
          this.cancelAnchor_ = anchor;
      };
      /**
       * Update all animations.
       */
      View.prototype.updateAnimations_ = function () {
          if (this.updateAnimationKey_ !== undefined) {
              cancelAnimationFrame(this.updateAnimationKey_);
              this.updateAnimationKey_ = undefined;
          }
          if (!this.getAnimating()) {
              return;
          }
          var now = Date.now();
          var more = false;
          for (var i = this.animations_.length - 1; i >= 0; --i) {
              var series = this.animations_[i];
              var seriesComplete = true;
              for (var j = 0, jj = series.length; j < jj; ++j) {
                  var animation = series[j];
                  if (animation.complete) {
                      continue;
                  }
                  var elapsed = now - animation.start;
                  var fraction = animation.duration > 0 ? elapsed / animation.duration : 1;
                  if (fraction >= 1) {
                      animation.complete = true;
                      fraction = 1;
                  }
                  else {
                      seriesComplete = false;
                  }
                  var progress = animation.easing(fraction);
                  if (animation.sourceCenter) {
                      var x0 = animation.sourceCenter[0];
                      var y0 = animation.sourceCenter[1];
                      var x1 = animation.targetCenter[0];
                      var y1 = animation.targetCenter[1];
                      var x = x0 + progress * (x1 - x0);
                      var y = y0 + progress * (y1 - y0);
                      this.targetCenter_ = [x, y];
                  }
                  if (animation.sourceResolution && animation.targetResolution) {
                      var resolution = progress === 1 ?
                          animation.targetResolution :
                          animation.sourceResolution + progress * (animation.targetResolution - animation.sourceResolution);
                      if (animation.anchor) {
                          var size = this.getViewportSize_(this.getRotation());
                          var constrainedResolution = this.constraints_.resolution(resolution, 0, size, true);
                          this.targetCenter_ = this.calculateCenterZoom(constrainedResolution, animation.anchor);
                      }
                      this.targetResolution_ = resolution;
                      this.applyTargetState_(true);
                  }
                  if (animation.sourceRotation !== undefined && animation.targetRotation !== undefined) {
                      var rotation = progress === 1 ?
                          modulo(animation.targetRotation + Math.PI, 2 * Math.PI) - Math.PI :
                          animation.sourceRotation + progress * (animation.targetRotation - animation.sourceRotation);
                      if (animation.anchor) {
                          var constrainedRotation = this.constraints_.rotation(rotation, true);
                          this.targetCenter_ = this.calculateCenterRotate(constrainedRotation, animation.anchor);
                      }
                      this.targetRotation_ = rotation;
                  }
                  this.applyTargetState_(true);
                  more = true;
                  if (!animation.complete) {
                      break;
                  }
              }
              if (seriesComplete) {
                  this.animations_[i] = null;
                  this.setHint(ViewHint.ANIMATING, -1);
                  var callback = series[0].callback;
                  if (callback) {
                      animationCallback(callback, true);
                  }
              }
          }
          // prune completed series
          this.animations_ = this.animations_.filter(Boolean);
          if (more && this.updateAnimationKey_ === undefined) {
              this.updateAnimationKey_ = requestAnimationFrame(this.updateAnimations_.bind(this));
          }
      };
      /**
       * @param {number} rotation Target rotation.
       * @param {import("./coordinate.js").Coordinate} anchor Rotation anchor.
       * @return {import("./coordinate.js").Coordinate|undefined} Center for rotation and anchor.
       */
      View.prototype.calculateCenterRotate = function (rotation, anchor) {
          var center;
          var currentCenter = this.getCenterInternal();
          if (currentCenter !== undefined) {
              center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];
              rotate$1(center, rotation - this.getRotation());
              add$2(center, anchor);
          }
          return center;
      };
      /**
       * @param {number} resolution Target resolution.
       * @param {import("./coordinate.js").Coordinate} anchor Zoom anchor.
       * @return {import("./coordinate.js").Coordinate|undefined} Center for resolution and anchor.
       */
      View.prototype.calculateCenterZoom = function (resolution, anchor) {
          var center;
          var currentCenter = this.getCenterInternal();
          var currentResolution = this.getResolution();
          if (currentCenter !== undefined && currentResolution !== undefined) {
              var x = anchor[0] - resolution * (anchor[0] - currentCenter[0]) / currentResolution;
              var y = anchor[1] - resolution * (anchor[1] - currentCenter[1]) / currentResolution;
              center = [x, y];
          }
          return center;
      };
      /**
       * Returns the current viewport size.
       * @private
       * @param {number=} opt_rotation Take into account the rotation of the viewport when giving the size
       * @return {import("./size.js").Size} Viewport size or `[100, 100]` when no viewport is found.
       */
      View.prototype.getViewportSize_ = function (opt_rotation) {
          var size = this.viewportSize_;
          if (opt_rotation) {
              var w = size[0];
              var h = size[1];
              return [
                  Math.abs(w * Math.cos(opt_rotation)) + Math.abs(h * Math.sin(opt_rotation)),
                  Math.abs(w * Math.sin(opt_rotation)) + Math.abs(h * Math.cos(opt_rotation))
              ];
          }
          else {
              return size;
          }
      };
      /**
       * Stores the viewport size on the view. The viewport size is not read every time from the DOM
       * to avoid performance hit and layout reflow.
       * This should be done on map size change.
       * @param {import("./size.js").Size=} opt_size Viewport size; if undefined, [100, 100] is assumed
       */
      View.prototype.setViewportSize = function (opt_size) {
          this.viewportSize_ = Array.isArray(opt_size) ? opt_size.slice() : [100, 100];
          this.resolveConstraints(0);
      };
      /**
       * Get the view center.
       * @return {import("./coordinate.js").Coordinate|undefined} The center of the view.
       * @observable
       * @api
       */
      View.prototype.getCenter = function () {
          var center = this.getCenterInternal();
          if (!center) {
              return center;
          }
          return toUserCoordinate(center, this.getProjection());
      };
      /**
       * Get the view center without transforming to user projection.
       * @return {import("./coordinate.js").Coordinate|undefined} The center of the view.
       */
      View.prototype.getCenterInternal = function () {
          return /** @type {import("./coordinate.js").Coordinate|undefined} */ (this.get(ViewProperty.CENTER));
      };
      /**
       * @return {Constraints} Constraints.
       */
      View.prototype.getConstraints = function () {
          return this.constraints_;
      };
      /**
       * @return {boolean} Resolution constraint is set
       */
      View.prototype.getConstrainResolution = function () {
          return this.options_.constrainResolution;
      };
      /**
       * @param {Array<number>=} opt_hints Destination array.
       * @return {Array<number>} Hint.
       */
      View.prototype.getHints = function (opt_hints) {
          if (opt_hints !== undefined) {
              opt_hints[0] = this.hints_[0];
              opt_hints[1] = this.hints_[1];
              return opt_hints;
          }
          else {
              return this.hints_.slice();
          }
      };
      /**
       * Calculate the extent for the current view state and the passed size.
       * The size is the pixel dimensions of the box into which the calculated extent
       * should fit. In most cases you want to get the extent of the entire map,
       * that is `map.getSize()`.
       * @param {import("./size.js").Size=} opt_size Box pixel size. If not provided, the size
       * of the map that uses this view will be used.
       * @return {import("./extent.js").Extent} Extent.
       * @api
       */
      View.prototype.calculateExtent = function (opt_size) {
          var extent = this.calculateExtentInternal(opt_size);
          return toUserExtent(extent, this.getProjection());
      };
      /**
       * @param {import("./size.js").Size=} opt_size Box pixel size. If not provided, the size of the
       * first map that uses this view will be used.
       * @return {import("./extent.js").Extent} Extent.
       */
      View.prototype.calculateExtentInternal = function (opt_size) {
          var size = opt_size || this.getViewportSize_();
          var center = /** @type {!import("./coordinate.js").Coordinate} */ (this.getCenterInternal());
          assert(center, 1); // The view center is not defined
          var resolution = /** @type {!number} */ (this.getResolution());
          assert(resolution !== undefined, 2); // The view resolution is not defined
          var rotation = /** @type {!number} */ (this.getRotation());
          assert(rotation !== undefined, 3); // The view rotation is not defined
          return getForViewAndSize(center, resolution, rotation, size);
      };
      /**
       * Get the maximum resolution of the view.
       * @return {number} The maximum resolution of the view.
       * @api
       */
      View.prototype.getMaxResolution = function () {
          return this.maxResolution_;
      };
      /**
       * Get the minimum resolution of the view.
       * @return {number} The minimum resolution of the view.
       * @api
       */
      View.prototype.getMinResolution = function () {
          return this.minResolution_;
      };
      /**
       * Get the maximum zoom level for the view.
       * @return {number} The maximum zoom level.
       * @api
       */
      View.prototype.getMaxZoom = function () {
          return /** @type {number} */ (this.getZoomForResolution(this.minResolution_));
      };
      /**
       * Set a new maximum zoom level for the view.
       * @param {number} zoom The maximum zoom level.
       * @api
       */
      View.prototype.setMaxZoom = function (zoom) {
          this.applyOptions_(this.getUpdatedOptions_({ maxZoom: zoom }));
      };
      /**
       * Get the minimum zoom level for the view.
       * @return {number} The minimum zoom level.
       * @api
       */
      View.prototype.getMinZoom = function () {
          return /** @type {number} */ (this.getZoomForResolution(this.maxResolution_));
      };
      /**
       * Set a new minimum zoom level for the view.
       * @param {number} zoom The minimum zoom level.
       * @api
       */
      View.prototype.setMinZoom = function (zoom) {
          this.applyOptions_(this.getUpdatedOptions_({ minZoom: zoom }));
      };
      /**
       * Set whether the view shoud allow intermediary zoom levels.
       * @param {boolean} enabled Whether the resolution is constrained.
       * @api
       */
      View.prototype.setConstrainResolution = function (enabled) {
          this.applyOptions_(this.getUpdatedOptions_({ constrainResolution: enabled }));
      };
      /**
       * Get the view projection.
       * @return {import("./proj/Projection.js").default} The projection of the view.
       * @api
       */
      View.prototype.getProjection = function () {
          return this.projection_;
      };
      /**
       * Get the view resolution.
       * @return {number|undefined} The resolution of the view.
       * @observable
       * @api
       */
      View.prototype.getResolution = function () {
          return /** @type {number|undefined} */ (this.get(ViewProperty.RESOLUTION));
      };
      /**
       * Get the resolutions for the view. This returns the array of resolutions
       * passed to the constructor of the View, or undefined if none were given.
       * @return {Array<number>|undefined} The resolutions of the view.
       * @api
       */
      View.prototype.getResolutions = function () {
          return this.resolutions_;
      };
      /**
       * Get the resolution for a provided extent (in map units) and size (in pixels).
       * @param {import("./extent.js").Extent} extent Extent.
       * @param {import("./size.js").Size=} opt_size Box pixel size.
       * @return {number} The resolution at which the provided extent will render at
       *     the given size.
       * @api
       */
      View.prototype.getResolutionForExtent = function (extent, opt_size) {
          return this.getResolutionForExtentInternal(fromUserExtent(extent, this.getProjection()), opt_size);
      };
      /**
       * Get the resolution for a provided extent (in map units) and size (in pixels).
       * @param {import("./extent.js").Extent} extent Extent.
       * @param {import("./size.js").Size=} opt_size Box pixel size.
       * @return {number} The resolution at which the provided extent will render at
       *     the given size.
       */
      View.prototype.getResolutionForExtentInternal = function (extent, opt_size) {
          var size = opt_size || this.getViewportSize_();
          var xResolution = getWidth(extent) / size[0];
          var yResolution = getHeight(extent) / size[1];
          return Math.max(xResolution, yResolution);
      };
      /**
       * Return a function that returns a value between 0 and 1 for a
       * resolution. Exponential scaling is assumed.
       * @param {number=} opt_power Power.
       * @return {function(number): number} Resolution for value function.
       */
      View.prototype.getResolutionForValueFunction = function (opt_power) {
          var power = opt_power || 2;
          var maxResolution = this.getConstrainedResolution(this.maxResolution_);
          var minResolution = this.minResolution_;
          var max = Math.log(maxResolution / minResolution) / Math.log(power);
          return (
          /**
           * @param {number} value Value.
           * @return {number} Resolution.
           */
          function (value) {
              var resolution = maxResolution / Math.pow(power, value * max);
              return resolution;
          });
      };
      /**
       * Get the view rotation.
       * @return {number} The rotation of the view in radians.
       * @observable
       * @api
       */
      View.prototype.getRotation = function () {
          return /** @type {number} */ (this.get(ViewProperty.ROTATION));
      };
      /**
       * Return a function that returns a resolution for a value between
       * 0 and 1. Exponential scaling is assumed.
       * @param {number=} opt_power Power.
       * @return {function(number): number} Value for resolution function.
       */
      View.prototype.getValueForResolutionFunction = function (opt_power) {
          var logPower = Math.log(opt_power || 2);
          var maxResolution = this.getConstrainedResolution(this.maxResolution_);
          var minResolution = this.minResolution_;
          var max = Math.log(maxResolution / minResolution) / logPower;
          return (
          /**
           * @param {number} resolution Resolution.
           * @return {number} Value.
           */
          function (resolution) {
              var value = (Math.log(maxResolution / resolution) / logPower) / max;
              return value;
          });
      };
      /**
       * @return {State} View state.
       */
      View.prototype.getState = function () {
          var center = /** @type {import("./coordinate.js").Coordinate} */ (this.getCenterInternal());
          var projection = this.getProjection();
          var resolution = /** @type {number} */ (this.getResolution());
          var rotation = this.getRotation();
          return {
              center: center.slice(0),
              projection: projection !== undefined ? projection : null,
              resolution: resolution,
              rotation: rotation,
              zoom: this.getZoom()
          };
      };
      /**
       * Get the current zoom level. This method may return non-integer zoom levels
       * if the view does not constrain the resolution, or if an interaction or
       * animation is underway.
       * @return {number|undefined} Zoom.
       * @api
       */
      View.prototype.getZoom = function () {
          var zoom;
          var resolution = this.getResolution();
          if (resolution !== undefined) {
              zoom = this.getZoomForResolution(resolution);
          }
          return zoom;
      };
      /**
       * Get the zoom level for a resolution.
       * @param {number} resolution The resolution.
       * @return {number|undefined} The zoom level for the provided resolution.
       * @api
       */
      View.prototype.getZoomForResolution = function (resolution) {
          var offset = this.minZoom_ || 0;
          var max, zoomFactor;
          if (this.resolutions_) {
              var nearest = linearFindNearest(this.resolutions_, resolution, 1);
              offset = nearest;
              max = this.resolutions_[nearest];
              if (nearest == this.resolutions_.length - 1) {
                  zoomFactor = 2;
              }
              else {
                  zoomFactor = max / this.resolutions_[nearest + 1];
              }
          }
          else {
              max = this.maxResolution_;
              zoomFactor = this.zoomFactor_;
          }
          return offset + Math.log(max / resolution) / Math.log(zoomFactor);
      };
      /**
       * Get the resolution for a zoom level.
       * @param {number} zoom Zoom level.
       * @return {number} The view resolution for the provided zoom level.
       * @api
       */
      View.prototype.getResolutionForZoom = function (zoom) {
          if (this.resolutions_) {
              if (this.resolutions_.length <= 1) {
                  return 0;
              }
              var baseLevel = clamp(Math.floor(zoom), 0, this.resolutions_.length - 2);
              var zoomFactor = this.resolutions_[baseLevel] / this.resolutions_[baseLevel + 1];
              return this.resolutions_[baseLevel] / Math.pow(zoomFactor, clamp(zoom - baseLevel, 0, 1));
          }
          else {
              return this.maxResolution_ / Math.pow(this.zoomFactor_, zoom - this.minZoom_);
          }
      };
      /**
       * Fit the given geometry or extent based on the given map size and border.
       * The size is pixel dimensions of the box to fit the extent into.
       * In most cases you will want to use the map size, that is `map.getSize()`.
       * Takes care of the map angle.
       * @param {import("./geom/SimpleGeometry.js").default|import("./extent.js").Extent} geometryOrExtent The geometry or
       *     extent to fit the view to.
       * @param {FitOptions=} opt_options Options.
       * @api
       */
      View.prototype.fit = function (geometryOrExtent, opt_options) {
          var options = assign({ size: this.getViewportSize_() }, opt_options || {});
          /** @type {import("./geom/SimpleGeometry.js").default} */
          var geometry;
          assert(Array.isArray(geometryOrExtent) || typeof /** @type {?} */ (geometryOrExtent).getSimplifiedGeometry === 'function', 24); // Invalid extent or geometry provided as `geometry`
          if (Array.isArray(geometryOrExtent)) {
              assert(!isEmpty$1(geometryOrExtent), 25); // Cannot fit empty extent provided as `geometry`
              var extent = fromUserExtent(geometryOrExtent, this.getProjection());
              geometry = fromExtent(extent);
          }
          else if (geometryOrExtent.getType() === GeometryType.CIRCLE) {
              var extent = fromUserExtent(geometryOrExtent.getExtent(), this.getProjection());
              geometry = fromExtent(extent);
              geometry.rotate(this.getRotation(), getCenter(extent));
          }
          else {
              var userProjection = getUserProjection();
              if (userProjection) {
                  geometry = /** @type {import("./geom/SimpleGeometry.js").default} */ (geometryOrExtent.clone().transform(userProjection, this.getProjection()));
              }
              else {
                  geometry = geometryOrExtent;
              }
          }
          this.fitInternal(geometry, options);
      };
      /**
       * @param {import("./geom/SimpleGeometry.js").default} geometry The geometry.
       * @param {FitOptions=} opt_options Options.
       */
      View.prototype.fitInternal = function (geometry, opt_options) {
          var options = opt_options || {};
          var size = options.size;
          if (!size) {
              size = this.getViewportSize_();
          }
          var padding = options.padding !== undefined ? options.padding : [0, 0, 0, 0];
          var nearest = options.nearest !== undefined ? options.nearest : false;
          var minResolution;
          if (options.minResolution !== undefined) {
              minResolution = options.minResolution;
          }
          else if (options.maxZoom !== undefined) {
              minResolution = this.getResolutionForZoom(options.maxZoom);
          }
          else {
              minResolution = 0;
          }
          var coords = geometry.getFlatCoordinates();
          // calculate rotated extent
          var rotation = this.getRotation();
          var cosAngle = Math.cos(-rotation);
          var sinAngle = Math.sin(-rotation);
          var minRotX = +Infinity;
          var minRotY = +Infinity;
          var maxRotX = -Infinity;
          var maxRotY = -Infinity;
          var stride = geometry.getStride();
          for (var i = 0, ii = coords.length; i < ii; i += stride) {
              var rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;
              var rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;
              minRotX = Math.min(minRotX, rotX);
              minRotY = Math.min(minRotY, rotY);
              maxRotX = Math.max(maxRotX, rotX);
              maxRotY = Math.max(maxRotY, rotY);
          }
          // calculate resolution
          var resolution = this.getResolutionForExtentInternal([minRotX, minRotY, maxRotX, maxRotY], [size[0] - padding[1] - padding[3], size[1] - padding[0] - padding[2]]);
          resolution = isNaN(resolution) ? minResolution :
              Math.max(resolution, minResolution);
          resolution = this.getConstrainedResolution(resolution, nearest ? 0 : 1);
          // calculate center
          sinAngle = -sinAngle; // go back to original rotation
          var centerRotX = (minRotX + maxRotX) / 2;
          var centerRotY = (minRotY + maxRotY) / 2;
          centerRotX += (padding[1] - padding[3]) / 2 * resolution;
          centerRotY += (padding[0] - padding[2]) / 2 * resolution;
          var centerX = centerRotX * cosAngle - centerRotY * sinAngle;
          var centerY = centerRotY * cosAngle + centerRotX * sinAngle;
          var center = [centerX, centerY];
          var callback = options.callback ? options.callback : VOID;
          if (options.duration !== undefined) {
              this.animateInternal({
                  resolution: resolution,
                  center: this.getConstrainedCenter(center, resolution),
                  duration: options.duration,
                  easing: options.easing
              }, callback);
          }
          else {
              this.targetResolution_ = resolution;
              this.targetCenter_ = center;
              this.applyTargetState_(false, true);
              animationCallback(callback, true);
          }
      };
      /**
       * Center on coordinate and view position.
       * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
       * @param {import("./size.js").Size} size Box pixel size.
       * @param {import("./pixel.js").Pixel} position Position on the view to center on.
       * @api
       */
      View.prototype.centerOn = function (coordinate, size, position) {
          this.centerOnInternal(fromUserCoordinate(coordinate, this.getProjection()), size, position);
      };
      /**
       * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
       * @param {import("./size.js").Size} size Box pixel size.
       * @param {import("./pixel.js").Pixel} position Position on the view to center on.
       */
      View.prototype.centerOnInternal = function (coordinate, size, position) {
          // calculate rotated position
          var rotation = this.getRotation();
          var cosAngle = Math.cos(-rotation);
          var sinAngle = Math.sin(-rotation);
          var rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;
          var rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;
          var resolution = this.getResolution();
          rotX += (size[0] / 2 - position[0]) * resolution;
          rotY += (position[1] - size[1] / 2) * resolution;
          // go back to original angle
          sinAngle = -sinAngle; // go back to original rotation
          var centerX = rotX * cosAngle - rotY * sinAngle;
          var centerY = rotY * cosAngle + rotX * sinAngle;
          this.setCenterInternal([centerX, centerY]);
      };
      /**
       * @return {boolean} Is defined.
       */
      View.prototype.isDef = function () {
          return !!this.getCenterInternal() && this.getResolution() !== undefined;
      };
      /**
       * Adds relative coordinates to the center of the view. Any extent constraint will apply.
       * @param {import("./coordinate.js").Coordinate} deltaCoordinates Relative value to add.
       * @api
       */
      View.prototype.adjustCenter = function (deltaCoordinates) {
          var center = toUserCoordinate(this.targetCenter_, this.getProjection());
          this.setCenter([center[0] + deltaCoordinates[0], center[1] + deltaCoordinates[1]]);
      };
      /**
       * Adds relative coordinates to the center of the view. Any extent constraint will apply.
       * @param {import("./coordinate.js").Coordinate} deltaCoordinates Relative value to add.
       */
      View.prototype.adjustCenterInternal = function (deltaCoordinates) {
          var center = this.targetCenter_;
          this.setCenterInternal([center[0] + deltaCoordinates[0], center[1] + deltaCoordinates[1]]);
      };
      /**
       * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution
       * constraint will apply.
       * @param {number} ratio The ratio to apply on the view resolution.
       * @param {import("./coordinate.js").Coordinate=} opt_anchor The origin of the transformation.
       * @api
       */
      View.prototype.adjustResolution = function (ratio, opt_anchor) {
          var anchor = opt_anchor && fromUserCoordinate(opt_anchor, this.getProjection());
          this.adjustResolutionInternal(ratio, anchor);
      };
      /**
       * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution
       * constraint will apply.
       * @param {number} ratio The ratio to apply on the view resolution.
       * @param {import("./coordinate.js").Coordinate=} opt_anchor The origin of the transformation.
       */
      View.prototype.adjustResolutionInternal = function (ratio, opt_anchor) {
          var isMoving = this.getAnimating() || this.getInteracting();
          var size = this.getViewportSize_(this.getRotation());
          var newResolution = this.constraints_.resolution(this.targetResolution_ * ratio, 0, size, isMoving);
          if (opt_anchor) {
              this.targetCenter_ = this.calculateCenterZoom(newResolution, opt_anchor);
          }
          this.targetResolution_ *= ratio;
          this.applyTargetState_();
      };
      /**
       * Adds a value to the view zoom level, optionally using an anchor. Any resolution
       * constraint will apply.
       * @param {number} delta Relative value to add to the zoom level.
       * @param {import("./coordinate.js").Coordinate=} opt_anchor The origin of the transformation.
       * @api
       */
      View.prototype.adjustZoom = function (delta, opt_anchor) {
          this.adjustResolution(Math.pow(this.zoomFactor_, -delta), opt_anchor);
      };
      /**
       * Adds a value to the view rotation, optionally using an anchor. Any rotation
       * constraint will apply.
       * @param {number} delta Relative value to add to the zoom rotation, in radians.
       * @param {import("./coordinate.js").Coordinate=} opt_anchor The rotation center.
       * @api
       */
      View.prototype.adjustRotation = function (delta, opt_anchor) {
          if (opt_anchor) {
              opt_anchor = fromUserCoordinate(opt_anchor, this.getProjection());
          }
          this.adjustRotationInternal(delta, opt_anchor);
      };
      /**
       * @param {number} delta Relative value to add to the zoom rotation, in radians.
       * @param {import("./coordinate.js").Coordinate=} opt_anchor The rotation center.
       */
      View.prototype.adjustRotationInternal = function (delta, opt_anchor) {
          var isMoving = this.getAnimating() || this.getInteracting();
          var newRotation = this.constraints_.rotation(this.targetRotation_ + delta, isMoving);
          if (opt_anchor) {
              this.targetCenter_ = this.calculateCenterRotate(newRotation, opt_anchor);
          }
          this.targetRotation_ += delta;
          this.applyTargetState_();
      };
      /**
       * Set the center of the current view. Any extent constraint will apply.
       * @param {import("./coordinate.js").Coordinate|undefined} center The center of the view.
       * @observable
       * @api
       */
      View.prototype.setCenter = function (center) {
          this.setCenterInternal(fromUserCoordinate(center, this.getProjection()));
      };
      /**
       * Set the center using the view projection (not the user projection).
       * @param {import("./coordinate.js").Coordinate|undefined} center The center of the view.
       */
      View.prototype.setCenterInternal = function (center) {
          this.targetCenter_ = center;
          this.applyTargetState_();
      };
      /**
       * @param {ViewHint} hint Hint.
       * @param {number} delta Delta.
       * @return {number} New value.
       */
      View.prototype.setHint = function (hint, delta) {
          this.hints_[hint] += delta;
          this.changed();
          return this.hints_[hint];
      };
      /**
       * Set the resolution for this view. Any resolution constraint will apply.
       * @param {number|undefined} resolution The resolution of the view.
       * @observable
       * @api
       */
      View.prototype.setResolution = function (resolution) {
          this.targetResolution_ = resolution;
          this.applyTargetState_();
      };
      /**
       * Set the rotation for this view. Any rotation constraint will apply.
       * @param {number} rotation The rotation of the view in radians.
       * @observable
       * @api
       */
      View.prototype.setRotation = function (rotation) {
          this.targetRotation_ = rotation;
          this.applyTargetState_();
      };
      /**
       * Zoom to a specific zoom level. Any resolution constrain will apply.
       * @param {number} zoom Zoom level.
       * @api
       */
      View.prototype.setZoom = function (zoom) {
          this.setResolution(this.getResolutionForZoom(zoom));
      };
      /**
       * Recompute rotation/resolution/center based on target values.
       * Note: we have to compute rotation first, then resolution and center considering that
       * parameters can influence one another in case a view extent constraint is present.
       * @param {boolean=} opt_doNotCancelAnims Do not cancel animations.
       * @param {boolean=} opt_forceMoving Apply constraints as if the view is moving.
       * @private
       */
      View.prototype.applyTargetState_ = function (opt_doNotCancelAnims, opt_forceMoving) {
          var isMoving = this.getAnimating() || this.getInteracting() || opt_forceMoving;
          // compute rotation
          var newRotation = this.constraints_.rotation(this.targetRotation_, isMoving);
          var size = this.getViewportSize_(newRotation);
          var newResolution = this.constraints_.resolution(this.targetResolution_, 0, size, isMoving);
          var newCenter = this.constraints_.center(this.targetCenter_, newResolution, size, isMoving);
          if (this.get(ViewProperty.ROTATION) !== newRotation) {
              this.set(ViewProperty.ROTATION, newRotation);
          }
          if (this.get(ViewProperty.RESOLUTION) !== newResolution) {
              this.set(ViewProperty.RESOLUTION, newResolution);
          }
          if (!this.get(ViewProperty.CENTER) || !equals$2(this.get(ViewProperty.CENTER), newCenter)) {
              this.set(ViewProperty.CENTER, newCenter);
          }
          if (this.getAnimating() && !opt_doNotCancelAnims) {
              this.cancelAnimations();
          }
          this.cancelAnchor_ = undefined;
      };
      /**
       * If any constraints need to be applied, an animation will be triggered.
       * This is typically done on interaction end.
       * Note: calling this with a duration of 0 will apply the constrained values straight away,
       * without animation.
       * @param {number=} opt_duration The animation duration in ms.
       * @param {number=} opt_resolutionDirection Which direction to zoom.
       * @param {import("./coordinate.js").Coordinate=} opt_anchor The origin of the transformation.
       */
      View.prototype.resolveConstraints = function (opt_duration, opt_resolutionDirection, opt_anchor) {
          var duration = opt_duration !== undefined ? opt_duration : 200;
          var direction = opt_resolutionDirection || 0;
          var newRotation = this.constraints_.rotation(this.targetRotation_);
          var size = this.getViewportSize_(newRotation);
          var newResolution = this.constraints_.resolution(this.targetResolution_, direction, size);
          var newCenter = this.constraints_.center(this.targetCenter_, newResolution, size);
          if (duration === 0 && !this.cancelAnchor_) {
              this.targetResolution_ = newResolution;
              this.targetRotation_ = newRotation;
              this.targetCenter_ = newCenter;
              this.applyTargetState_();
              return;
          }
          var anchor = opt_anchor || (duration === 0 ? this.cancelAnchor_ : undefined);
          this.cancelAnchor_ = undefined;
          if (this.getResolution() !== newResolution ||
              this.getRotation() !== newRotation ||
              !this.getCenterInternal() ||
              !equals$2(this.getCenterInternal(), newCenter)) {
              if (this.getAnimating()) {
                  this.cancelAnimations();
              }
              this.animateInternal({
                  rotation: newRotation,
                  center: newCenter,
                  resolution: newResolution,
                  duration: duration,
                  easing: easeOut,
                  anchor: anchor
              });
          }
      };
      /**
       * Notify the View that an interaction has started.
       * The view state will be resolved to a stable one if needed
       * (depending on its constraints).
       * @api
       */
      View.prototype.beginInteraction = function () {
          this.resolveConstraints(0);
          this.setHint(ViewHint.INTERACTING, 1);
      };
      /**
       * Notify the View that an interaction has ended. The view state will be resolved
       * to a stable one if needed (depending on its constraints).
       * @param {number=} opt_duration Animation duration in ms.
       * @param {number=} opt_resolutionDirection Which direction to zoom.
       * @param {import("./coordinate.js").Coordinate=} opt_anchor The origin of the transformation.
       * @api
       */
      View.prototype.endInteraction = function (opt_duration, opt_resolutionDirection, opt_anchor) {
          var anchor = opt_anchor && fromUserCoordinate(opt_anchor, this.getProjection());
          this.endInteractionInternal(opt_duration, opt_resolutionDirection, anchor);
      };
      /**
       * Notify the View that an interaction has ended. The view state will be resolved
       * to a stable one if needed (depending on its constraints).
       * @param {number=} opt_duration Animation duration in ms.
       * @param {number=} opt_resolutionDirection Which direction to zoom.
       * @param {import("./coordinate.js").Coordinate=} opt_anchor The origin of the transformation.
       */
      View.prototype.endInteractionInternal = function (opt_duration, opt_resolutionDirection, opt_anchor) {
          this.setHint(ViewHint.INTERACTING, -1);
          this.resolveConstraints(opt_duration, opt_resolutionDirection, opt_anchor);
      };
      /**
       * Get a valid position for the view center according to the current constraints.
       * @param {import("./coordinate.js").Coordinate|undefined} targetCenter Target center position.
       * @param {number=} opt_targetResolution Target resolution. If not supplied, the current one will be used.
       * This is useful to guess a valid center position at a different zoom level.
       * @return {import("./coordinate.js").Coordinate|undefined} Valid center position.
       */
      View.prototype.getConstrainedCenter = function (targetCenter, opt_targetResolution) {
          var size = this.getViewportSize_(this.getRotation());
          return this.constraints_.center(targetCenter, opt_targetResolution || this.getResolution(), size);
      };
      /**
       * Get a valid zoom level according to the current view constraints.
       * @param {number|undefined} targetZoom Target zoom.
       * @param {number=} [opt_direction=0] Indicate which resolution should be used
       * by a renderer if the view resolution does not match any resolution of the tile source.
       * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
       * will be used. If -1, the nearest higher resolution will be used.
       * @return {number|undefined} Valid zoom level.
       */
      View.prototype.getConstrainedZoom = function (targetZoom, opt_direction) {
          var targetRes = this.getResolutionForZoom(targetZoom);
          return this.getZoomForResolution(this.getConstrainedResolution(targetRes, opt_direction));
      };
      /**
       * Get a valid resolution according to the current view constraints.
       * @param {number|undefined} targetResolution Target resolution.
       * @param {number=} [opt_direction=0] Indicate which resolution should be used
       * by a renderer if the view resolution does not match any resolution of the tile source.
       * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
       * will be used. If -1, the nearest higher resolution will be used.
       * @return {number|undefined} Valid resolution.
       */
      View.prototype.getConstrainedResolution = function (targetResolution, opt_direction) {
          var direction = opt_direction || 0;
          var size = this.getViewportSize_(this.getRotation());
          return this.constraints_.resolution(targetResolution, direction, size);
      };
      return View;
  }(BaseObject));
  /**
   * @param {Function} callback Callback.
   * @param {*} returnValue Return value.
   */
  function animationCallback(callback, returnValue) {
      setTimeout(function () {
          callback(returnValue);
      }, 0);
  }
  /**
   * @param {ViewOptions} options View options.
   * @return {import("./centerconstraint.js").Type} The constraint.
   */
  function createCenterConstraint(options) {
      if (options.extent !== undefined) {
          var smooth = options.smoothExtentConstraint !== undefined ? options.smoothExtentConstraint : true;
          return createExtent(options.extent, options.constrainOnlyCenter, smooth);
      }
      var projection = createProjection(options.projection, 'EPSG:3857');
      if (options.multiWorld !== true && projection.isGlobal()) {
          var extent = projection.getExtent().slice();
          extent[0] = -Infinity;
          extent[2] = Infinity;
          return createExtent(extent, false, false);
      }
      return none;
  }
  /**
   * @param {ViewOptions} options View options.
   * @return {{constraint: import("./resolutionconstraint.js").Type, maxResolution: number,
   *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.
   */
  function createResolutionConstraint(options) {
      var resolutionConstraint;
      var maxResolution;
      var minResolution;
      // TODO: move these to be ol constants
      // see https://github.com/openlayers/openlayers/issues/2076
      var defaultMaxZoom = 28;
      var defaultZoomFactor = 2;
      var minZoom = options.minZoom !== undefined ?
          options.minZoom : DEFAULT_MIN_ZOOM;
      var maxZoom = options.maxZoom !== undefined ?
          options.maxZoom : defaultMaxZoom;
      var zoomFactor = options.zoomFactor !== undefined ?
          options.zoomFactor : defaultZoomFactor;
      var multiWorld = options.multiWorld !== undefined ?
          options.multiWorld : false;
      var smooth = options.smoothResolutionConstraint !== undefined ? options.smoothResolutionConstraint : true;
      var showFullExtent = options.showFullExtent !== undefined ? options.showFullExtent : false;
      var projection = createProjection(options.projection, 'EPSG:3857');
      var projExtent = projection.getExtent();
      var constrainOnlyCenter = options.constrainOnlyCenter;
      var extent = options.extent;
      if (!multiWorld && !extent && projection.isGlobal()) {
          constrainOnlyCenter = false;
          extent = projExtent;
      }
      if (options.resolutions !== undefined) {
          var resolutions = options.resolutions;
          maxResolution = resolutions[minZoom];
          minResolution = resolutions[maxZoom] !== undefined ?
              resolutions[maxZoom] : resolutions[resolutions.length - 1];
          if (options.constrainResolution) {
              resolutionConstraint = createSnapToResolutions(resolutions, smooth, !constrainOnlyCenter && extent, showFullExtent);
          }
          else {
              resolutionConstraint = createMinMaxResolution(maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);
          }
      }
      else {
          // calculate the default min and max resolution
          var size = !projExtent ?
              // use an extent that can fit the whole world if need be
              360 * METERS_PER_UNIT[Units.DEGREES] /
                  projection.getMetersPerUnit() :
              Math.max(getWidth(projExtent), getHeight(projExtent));
          var defaultMaxResolution = size / DEFAULT_TILE_SIZE / Math.pow(defaultZoomFactor, DEFAULT_MIN_ZOOM);
          var defaultMinResolution = defaultMaxResolution / Math.pow(defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM);
          // user provided maxResolution takes precedence
          maxResolution = options.maxResolution;
          if (maxResolution !== undefined) {
              minZoom = 0;
          }
          else {
              maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);
          }
          // user provided minResolution takes precedence
          minResolution = options.minResolution;
          if (minResolution === undefined) {
              if (options.maxZoom !== undefined) {
                  if (options.maxResolution !== undefined) {
                      minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);
                  }
                  else {
                      minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);
                  }
              }
              else {
                  minResolution = defaultMinResolution;
              }
          }
          // given discrete zoom levels, minResolution may be different than provided
          maxZoom = minZoom + Math.floor(Math.log(maxResolution / minResolution) / Math.log(zoomFactor));
          minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);
          if (options.constrainResolution) {
              resolutionConstraint = createSnapToPower(zoomFactor, maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);
          }
          else {
              resolutionConstraint = createMinMaxResolution(maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);
          }
      }
      return { constraint: resolutionConstraint, maxResolution: maxResolution,
          minResolution: minResolution, minZoom: minZoom, zoomFactor: zoomFactor };
  }
  /**
   * @param {ViewOptions} options View options.
   * @return {import("./rotationconstraint.js").Type} Rotation constraint.
   */
  function createRotationConstraint(options) {
      var enableRotation = options.enableRotation !== undefined ?
          options.enableRotation : true;
      if (enableRotation) {
          var constrainRotation = options.constrainRotation;
          if (constrainRotation === undefined || constrainRotation === true) {
              return createSnapToZero();
          }
          else if (constrainRotation === false) {
              return none$1;
          }
          else if (typeof constrainRotation === 'number') {
              return createSnapToN(constrainRotation);
          }
          else {
              return none$1;
          }
      }
      else {
          return disable;
      }
  }
  /**
   * Determine if an animation involves no view change.
   * @param {Animation} animation The animation.
   * @return {boolean} The animation involves no view change.
   */
  function isNoopAnimation(animation) {
      if (animation.sourceCenter && animation.targetCenter) {
          if (!equals$2(animation.sourceCenter, animation.targetCenter)) {
              return false;
          }
      }
      if (animation.sourceResolution !== animation.targetResolution) {
          return false;
      }
      if (animation.sourceRotation !== animation.targetRotation) {
          return false;
      }
      return true;
  }

  /**
   * @module ol/layer/Property
   */
  /**
   * @enum {string}
   */
  var LayerProperty = {
      OPACITY: 'opacity',
      VISIBLE: 'visible',
      EXTENT: 'extent',
      Z_INDEX: 'zIndex',
      MAX_RESOLUTION: 'maxResolution',
      MIN_RESOLUTION: 'minResolution',
      MAX_ZOOM: 'maxZoom',
      MIN_ZOOM: 'minZoom',
      SOURCE: 'source'
  };

  var __extends$o =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
   * visible.
   * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
   * be visible.
   */
  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Note that with {@link module:ol/layer/Base} and all its subclasses, any property set in
   * the options is set as a {@link module:ol/Object} property on the layer object, so
   * is observable, and has get/set accessors.
   *
   * @api
   */
  var BaseLayer = /** @class */ (function (_super) {
      __extends$o(BaseLayer, _super);
      /**
       * @param {Options} options Layer options.
       */
      function BaseLayer(options) {
          var _this = _super.call(this) || this;
          /**
           * @type {Object<string, *>}
           */
          var properties = assign({}, options);
          properties[LayerProperty.OPACITY] =
              options.opacity !== undefined ? options.opacity : 1;
          assert(typeof properties[LayerProperty.OPACITY] === 'number', 64); // Layer opacity must be a number
          properties[LayerProperty.VISIBLE] =
              options.visible !== undefined ? options.visible : true;
          properties[LayerProperty.Z_INDEX] = options.zIndex;
          properties[LayerProperty.MAX_RESOLUTION] =
              options.maxResolution !== undefined ? options.maxResolution : Infinity;
          properties[LayerProperty.MIN_RESOLUTION] =
              options.minResolution !== undefined ? options.minResolution : 0;
          properties[LayerProperty.MIN_ZOOM] =
              options.minZoom !== undefined ? options.minZoom : -Infinity;
          properties[LayerProperty.MAX_ZOOM] =
              options.maxZoom !== undefined ? options.maxZoom : Infinity;
          /**
           * @type {string}
           * @private
           */
          _this.className_ = properties.className !== undefined ? options.className : 'ol-layer';
          delete properties.className;
          _this.setProperties(properties);
          /**
           * @type {import("./Layer.js").State}
           * @private
           */
          _this.state_ = null;
          return _this;
      }
      /**
       * @return {string} CSS class name.
       */
      BaseLayer.prototype.getClassName = function () {
          return this.className_;
      };
      /**
       * This method is not meant to be called by layers or layer renderers because the state
       * is incorrect if the layer is included in a layer group.
       *
       * @param {boolean=} opt_managed Layer is managed.
       * @return {import("./Layer.js").State} Layer state.
       */
      BaseLayer.prototype.getLayerState = function (opt_managed) {
          /** @type {import("./Layer.js").State} */
          var state = this.state_ || /** @type {?} */ ({
              layer: this,
              managed: opt_managed === undefined ? true : opt_managed
          });
          var zIndex = this.getZIndex();
          state.opacity = clamp(Math.round(this.getOpacity() * 100) / 100, 0, 1);
          state.sourceState = this.getSourceState();
          state.visible = this.getVisible();
          state.extent = this.getExtent();
          state.zIndex = zIndex !== undefined ? zIndex : (state.managed === false ? Infinity : 0);
          state.maxResolution = this.getMaxResolution();
          state.minResolution = Math.max(this.getMinResolution(), 0);
          state.minZoom = this.getMinZoom();
          state.maxZoom = this.getMaxZoom();
          this.state_ = state;
          return state;
      };
      /**
       * @abstract
       * @param {Array<import("./Layer.js").default>=} opt_array Array of layers (to be
       *     modified in place).
       * @return {Array<import("./Layer.js").default>} Array of layers.
       */
      BaseLayer.prototype.getLayersArray = function (opt_array) {
          return abstract();
      };
      /**
       * @abstract
       * @param {Array<import("./Layer.js").State>=} opt_states Optional list of layer
       *     states (to be modified in place).
       * @return {Array<import("./Layer.js").State>} List of layer states.
       */
      BaseLayer.prototype.getLayerStatesArray = function (opt_states) {
          return abstract();
      };
      /**
       * Return the {@link module:ol/extent~Extent extent} of the layer or `undefined` if it
       * will be visible regardless of extent.
       * @return {import("../extent.js").Extent|undefined} The layer extent.
       * @observable
       * @api
       */
      BaseLayer.prototype.getExtent = function () {
          return (
          /** @type {import("../extent.js").Extent|undefined} */ (this.get(LayerProperty.EXTENT)));
      };
      /**
       * Return the maximum resolution of the layer.
       * @return {number} The maximum resolution of the layer.
       * @observable
       * @api
       */
      BaseLayer.prototype.getMaxResolution = function () {
          return /** @type {number} */ (this.get(LayerProperty.MAX_RESOLUTION));
      };
      /**
       * Return the minimum resolution of the layer.
       * @return {number} The minimum resolution of the layer.
       * @observable
       * @api
       */
      BaseLayer.prototype.getMinResolution = function () {
          return /** @type {number} */ (this.get(LayerProperty.MIN_RESOLUTION));
      };
      /**
       * Return the minimum zoom level of the layer.
       * @return {number} The minimum zoom level of the layer.
       * @observable
       * @api
       */
      BaseLayer.prototype.getMinZoom = function () {
          return /** @type {number} */ (this.get(LayerProperty.MIN_ZOOM));
      };
      /**
       * Return the maximum zoom level of the layer.
       * @return {number} The maximum zoom level of the layer.
       * @observable
       * @api
       */
      BaseLayer.prototype.getMaxZoom = function () {
          return /** @type {number} */ (this.get(LayerProperty.MAX_ZOOM));
      };
      /**
       * Return the opacity of the layer (between 0 and 1).
       * @return {number} The opacity of the layer.
       * @observable
       * @api
       */
      BaseLayer.prototype.getOpacity = function () {
          return /** @type {number} */ (this.get(LayerProperty.OPACITY));
      };
      /**
       * @abstract
       * @return {import("../source/State.js").default} Source state.
       */
      BaseLayer.prototype.getSourceState = function () {
          return abstract();
      };
      /**
       * Return the visibility of the layer (`true` or `false`).
       * @return {boolean} The visibility of the layer.
       * @observable
       * @api
       */
      BaseLayer.prototype.getVisible = function () {
          return /** @type {boolean} */ (this.get(LayerProperty.VISIBLE));
      };
      /**
       * Return the Z-index of the layer, which is used to order layers before
       * rendering. The default Z-index is 0.
       * @return {number} The Z-index of the layer.
       * @observable
       * @api
       */
      BaseLayer.prototype.getZIndex = function () {
          return /** @type {number} */ (this.get(LayerProperty.Z_INDEX));
      };
      /**
       * Set the extent at which the layer is visible.  If `undefined`, the layer
       * will be visible at all extents.
       * @param {import("../extent.js").Extent|undefined} extent The extent of the layer.
       * @observable
       * @api
       */
      BaseLayer.prototype.setExtent = function (extent) {
          this.set(LayerProperty.EXTENT, extent);
      };
      /**
       * Set the maximum resolution at which the layer is visible.
       * @param {number} maxResolution The maximum resolution of the layer.
       * @observable
       * @api
       */
      BaseLayer.prototype.setMaxResolution = function (maxResolution) {
          this.set(LayerProperty.MAX_RESOLUTION, maxResolution);
      };
      /**
       * Set the minimum resolution at which the layer is visible.
       * @param {number} minResolution The minimum resolution of the layer.
       * @observable
       * @api
       */
      BaseLayer.prototype.setMinResolution = function (minResolution) {
          this.set(LayerProperty.MIN_RESOLUTION, minResolution);
      };
      /**
       * Set the maximum zoom (exclusive) at which the layer is visible.
       * Note that the zoom levels for layer visibility are based on the
       * view zoom level, which may be different from a tile source zoom level.
       * @param {number} maxZoom The maximum zoom of the layer.
       * @observable
       * @api
       */
      BaseLayer.prototype.setMaxZoom = function (maxZoom) {
          this.set(LayerProperty.MAX_ZOOM, maxZoom);
      };
      /**
       * Set the minimum zoom (inclusive) at which the layer is visible.
       * Note that the zoom levels for layer visibility are based on the
       * view zoom level, which may be different from a tile source zoom level.
       * @param {number} minZoom The minimum zoom of the layer.
       * @observable
       * @api
       */
      BaseLayer.prototype.setMinZoom = function (minZoom) {
          this.set(LayerProperty.MIN_ZOOM, minZoom);
      };
      /**
       * Set the opacity of the layer, allowed values range from 0 to 1.
       * @param {number} opacity The opacity of the layer.
       * @observable
       * @api
       */
      BaseLayer.prototype.setOpacity = function (opacity) {
          assert(typeof opacity === 'number', 64); // Layer opacity must be a number
          this.set(LayerProperty.OPACITY, opacity);
      };
      /**
       * Set the visibility of the layer (`true` or `false`).
       * @param {boolean} visible The visibility of the layer.
       * @observable
       * @api
       */
      BaseLayer.prototype.setVisible = function (visible) {
          this.set(LayerProperty.VISIBLE, visible);
      };
      /**
       * Set Z-index of the layer, which is used to order layers before rendering.
       * The default Z-index is 0.
       * @param {number} zindex The z-index of the layer.
       * @observable
       * @api
       */
      BaseLayer.prototype.setZIndex = function (zindex) {
          this.set(LayerProperty.Z_INDEX, zindex);
      };
      /**
       * @inheritDoc
       */
      BaseLayer.prototype.disposeInternal = function () {
          if (this.state_) {
              this.state_.layer = null;
              this.state_ = null;
          }
          _super.prototype.disposeInternal.call(this);
      };
      return BaseLayer;
  }(BaseObject));

  /**
   * @module ol/source/State
   */
  /**
   * @enum {string}
   * State of the source, one of 'undefined', 'loading', 'ready' or 'error'.
   */
  var SourceState = {
      UNDEFINED: 'undefined',
      LOADING: 'loading',
      READY: 'ready',
      ERROR: 'error'
  };

  var __extends$p =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {Object} Options
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
   * visible.
   * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
   * be visible.
   * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
   * visible.
   * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
   * be visible.
   * @property {Array<import("./Base.js").default>|import("../Collection.js").default<import("./Base.js").default>} [layers] Child layers.
   */
  /**
   * @enum {string}
   * @private
   */
  var Property$1 = {
      LAYERS: 'layers'
  };
  /**
   * @classdesc
   * A {@link module:ol/Collection~Collection} of layers that are handled together.
   *
   * A generic `change` event is triggered when the group/Collection changes.
   *
   * @api
   */
  var LayerGroup = /** @class */ (function (_super) {
      __extends$p(LayerGroup, _super);
      /**
       * @param {Options=} opt_options Layer options.
       */
      function LayerGroup(opt_options) {
          var _this = this;
          var options = opt_options || {};
          var baseOptions = /** @type {Options} */ (assign({}, options));
          delete baseOptions.layers;
          var layers = options.layers;
          _this = _super.call(this, baseOptions) || this;
          /**
           * @private
           * @type {Array<import("../events.js").EventsKey>}
           */
          _this.layersListenerKeys_ = [];
          /**
           * @private
           * @type {Object<string, Array<import("../events.js").EventsKey>>}
           */
          _this.listenerKeys_ = {};
          _this.addEventListener(getChangeEventType(Property$1.LAYERS), _this.handleLayersChanged_);
          if (layers) {
              if (Array.isArray(layers)) {
                  layers = new Collection$2(layers.slice(), { unique: true });
              }
              else {
                  assert(typeof /** @type {?} */ (layers).getArray === 'function', 43); // Expected `layers` to be an array or a `Collection`
              }
          }
          else {
              layers = new Collection$2(undefined, { unique: true });
          }
          _this.setLayers(layers);
          return _this;
      }
      /**
       * @private
       */
      LayerGroup.prototype.handleLayerChange_ = function () {
          this.changed();
      };
      /**
       * @private
       */
      LayerGroup.prototype.handleLayersChanged_ = function () {
          this.layersListenerKeys_.forEach(unlistenByKey);
          this.layersListenerKeys_.length = 0;
          var layers = this.getLayers();
          this.layersListenerKeys_.push(listen(layers, CollectionEventType.ADD, this.handleLayersAdd_, this), listen(layers, CollectionEventType.REMOVE, this.handleLayersRemove_, this));
          for (var id in this.listenerKeys_) {
              this.listenerKeys_[id].forEach(unlistenByKey);
          }
          clear$1(this.listenerKeys_);
          var layersArray = layers.getArray();
          for (var i = 0, ii = layersArray.length; i < ii; i++) {
              var layer = layersArray[i];
              this.listenerKeys_[getUid(layer)] = [
                  listen(layer, ObjectEventType.PROPERTYCHANGE, this.handleLayerChange_, this),
                  listen(layer, EventType.CHANGE, this.handleLayerChange_, this)
              ];
          }
          this.changed();
      };
      /**
       * @param {import("../Collection.js").CollectionEvent} collectionEvent CollectionEvent.
       * @private
       */
      LayerGroup.prototype.handleLayersAdd_ = function (collectionEvent) {
          var layer = /** @type {import("./Base.js").default} */ (collectionEvent.element);
          this.listenerKeys_[getUid(layer)] = [
              listen(layer, ObjectEventType.PROPERTYCHANGE, this.handleLayerChange_, this),
              listen(layer, EventType.CHANGE, this.handleLayerChange_, this)
          ];
          this.changed();
      };
      /**
       * @param {import("../Collection.js").CollectionEvent} collectionEvent CollectionEvent.
       * @private
       */
      LayerGroup.prototype.handleLayersRemove_ = function (collectionEvent) {
          var layer = /** @type {import("./Base.js").default} */ (collectionEvent.element);
          var key = getUid(layer);
          this.listenerKeys_[key].forEach(unlistenByKey);
          delete this.listenerKeys_[key];
          this.changed();
      };
      /**
       * Returns the {@link module:ol/Collection collection} of {@link module:ol/layer/Layer~Layer layers}
       * in this group.
       * @return {!import("../Collection.js").default<import("./Base.js").default>} Collection of
       *   {@link module:ol/layer/Base layers} that are part of this group.
       * @observable
       * @api
       */
      LayerGroup.prototype.getLayers = function () {
          return (
          /** @type {!import("../Collection.js").default<import("./Base.js").default>} */ (this.get(Property$1.LAYERS)));
      };
      /**
       * Set the {@link module:ol/Collection collection} of {@link module:ol/layer/Layer~Layer layers}
       * in this group.
       * @param {!import("../Collection.js").default<import("./Base.js").default>} layers Collection of
       *   {@link module:ol/layer/Base layers} that are part of this group.
       * @observable
       * @api
       */
      LayerGroup.prototype.setLayers = function (layers) {
          this.set(Property$1.LAYERS, layers);
      };
      /**
       * @inheritDoc
       */
      LayerGroup.prototype.getLayersArray = function (opt_array) {
          var array = opt_array !== undefined ? opt_array : [];
          this.getLayers().forEach(function (layer) {
              layer.getLayersArray(array);
          });
          return array;
      };
      /**
       * @inheritDoc
       */
      LayerGroup.prototype.getLayerStatesArray = function (opt_states) {
          var states = opt_states !== undefined ? opt_states : [];
          var pos = states.length;
          this.getLayers().forEach(function (layer) {
              layer.getLayerStatesArray(states);
          });
          var ownLayerState = this.getLayerState();
          for (var i = pos, ii = states.length; i < ii; i++) {
              var layerState = states[i];
              layerState.opacity *= ownLayerState.opacity;
              layerState.visible = layerState.visible && ownLayerState.visible;
              layerState.maxResolution = Math.min(layerState.maxResolution, ownLayerState.maxResolution);
              layerState.minResolution = Math.max(layerState.minResolution, ownLayerState.minResolution);
              layerState.minZoom = Math.max(layerState.minZoom, ownLayerState.minZoom);
              layerState.maxZoom = Math.min(layerState.maxZoom, ownLayerState.maxZoom);
              if (ownLayerState.extent !== undefined) {
                  if (layerState.extent !== undefined) {
                      layerState.extent = getIntersection(layerState.extent, ownLayerState.extent);
                  }
                  else {
                      layerState.extent = ownLayerState.extent;
                  }
              }
          }
          return states;
      };
      /**
       * @inheritDoc
       */
      LayerGroup.prototype.getSourceState = function () {
          return SourceState.READY;
      };
      return LayerGroup;
  }(BaseLayer));

  var __extends$q =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * State of the current frame. Only `pixelRatio`, `time` and `viewState` should
   * be used in applications.
   * @typedef {Object} FrameState
   * @property {number} pixelRatio The pixel ratio of the frame.
   * @property {number} time The time when rendering of the frame was requested.
   * @property {import("./View.js").State} viewState The state of the current view.
   * @property {boolean} animate
   * @property {import("./transform.js").Transform} coordinateToPixelTransform
   * @property {null|import("./extent.js").Extent} extent
   * @property {Array<DeclutterItems>} declutterItems
   * @property {number} index
   * @property {Array<import("./layer/Layer.js").State>} layerStatesArray
   * @property {number} layerIndex
   * @property {import("./transform.js").Transform} pixelToCoordinateTransform
   * @property {Array<PostRenderFunction>} postRenderFunctions
   * @property {import("./size.js").Size} size
   * @property {TileQueue} tileQueue
   * @property {!Object<string, Object<string, boolean>>} usedTiles
   * @property {Array<number>} viewHints
   * @property {!Object<string, Object<string, boolean>>} wantedTiles
   */
  /**
   * @typedef {Object} DeclutterItems
   * @property {Array<*>} items Declutter items of an executor.
   * @property {number} opacity Layer opacity.
   */
  /**
   * @typedef {function(PluggableMap, ?FrameState): any} PostRenderFunction
   */
  /**
   * @typedef {Object} AtPixelOptions
   * @property {undefined|function(import("./layer/Layer.js").default): boolean} [layerFilter] Layer filter
   * function. The filter function will receive one argument, the
   * {@link module:ol/layer/Layer layer-candidate} and it should return a boolean value.
   * Only layers which are visible and for which this function returns `true`
   * will be tested for features. By default, all visible layers will be tested.
   * @property {number} [hitTolerance=0] Hit-detection tolerance in pixels. Pixels
   * inside the radius around the given position will be checked for features.
   * @property {boolean} [checkWrapped=true] Check-Wrapped Will check for for wrapped geometries inside the range of
   *   +/- 1 world width. Works only if a projection is used that can be wrapped.
   */
  /**
   * @typedef {Object} MapOptionsInternal
   * @property {Collection<import("./control/Control.js").default>} [controls]
   * @property {Collection<import("./interaction/Interaction.js").default>} [interactions]
   * @property {HTMLElement|Document} keyboardEventTarget
   * @property {Collection<import("./Overlay.js").default>} overlays
   * @property {Object<string, *>} values
   */
  /**
   * Object literal with config options for the map.
   * @typedef {Object} MapOptions
   * @property {Collection<import("./control/Control.js").default>|Array<import("./control/Control.js").default>} [controls]
   * Controls initially added to the map. If not specified,
   * {@link module:ol/control~defaults} is used.
   * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between
   * physical pixels and device-independent pixels (dips) on the device.
   * @property {Collection<import("./interaction/Interaction.js").default>|Array<import("./interaction/Interaction.js").default>} [interactions]
   * Interactions that are initially added to the map. If not specified,
   * {@link module:ol/interaction~defaults} is used.
   * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to
   * listen to keyboard events on. This determines when the `KeyboardPan` and
   * `KeyboardZoom` interactions trigger. For example, if this option is set to
   * `document` the keyboard interactions will always trigger. If this option is
   * not specified, the element the library listens to keyboard events on is the
   * map target (i.e. the user-provided div for the map). If this is not
   * `document`, the target element needs to be focused for key events to be
   * emitted, requiring that the target element has a `tabindex` attribute.
   * @property {Array<import("./layer/Base.js").default>|Collection<import("./layer/Base.js").default>|LayerGroup} [layers]
   * Layers. If this is not defined, a map with no layers will be rendered. Note
   * that layers are rendered in the order supplied, so if you want, for example,
   * a vector layer to appear on top of a tile layer, it must come after the tile
   * layer.
   * @property {number} [maxTilesLoading=16] Maximum number tiles to load
   * simultaneously.
   * @property {number} [moveTolerance=1] The minimum distance in pixels the
   * cursor must move to be detected as a map move event instead of a click.
   * Increasing this value can make it easier to click on the map.
   * @property {Collection<import("./Overlay.js").default>|Array<import("./Overlay.js").default>} [overlays]
   * Overlays initially added to the map. By default, no overlays are added.
   * @property {HTMLElement|string} [target] The container for the map, either the
   * element itself or the `id` of the element. If not specified at construction
   * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be
   * rendered.
   * @property {View} [view] The map's view.  No layer sources will be
   * fetched unless this is specified at construction time or through
   * {@link module:ol/Map~Map#setView}.
   */
  /**
   * @fires import("./MapBrowserEvent.js").MapBrowserEvent
   * @fires import("./MapEvent.js").MapEvent
   * @fires import("./render/Event.js").default#precompose
   * @fires import("./render/Event.js").default#postcompose
   * @fires import("./render/Event.js").default#rendercomplete
   * @api
   */
  var PluggableMap = /** @class */ (function (_super) {
      __extends$q(PluggableMap, _super);
      /**
       * @param {MapOptions} options Map options.
       */
      function PluggableMap(options) {
          var _this = _super.call(this) || this;
          var optionsInternal = createOptionsInternal(options);
          /** @private */
          _this.boundHandleBrowserEvent_ = _this.handleBrowserEvent.bind(_this);
          /**
           * @type {number}
           * @private
           */
          _this.maxTilesLoading_ = options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;
          /**
           * @private
           * @type {number}
           */
          _this.pixelRatio_ = options.pixelRatio !== undefined ?
              options.pixelRatio : DEVICE_PIXEL_RATIO;
          /**
           * @private
           * @type {*}
           */
          _this.postRenderTimeoutHandle_;
          /**
           * @private
           * @type {number|undefined}
           */
          _this.animationDelayKey_;
          /**
           * @private
           */
          _this.animationDelay_ = function () {
              this.animationDelayKey_ = undefined;
              this.renderFrame_(Date.now());
          }.bind(_this);
          /**
           * @private
           * @type {import("./transform.js").Transform}
           */
          _this.coordinateToPixelTransform_ = create();
          /**
           * @private
           * @type {import("./transform.js").Transform}
           */
          _this.pixelToCoordinateTransform_ = create();
          /**
           * @private
           * @type {number}
           */
          _this.frameIndex_ = 0;
          /**
           * @private
           * @type {?FrameState}
           */
          _this.frameState_ = null;
          /**
           * The extent at the previous 'moveend' event.
           * @private
           * @type {import("./extent.js").Extent}
           */
          _this.previousExtent_ = null;
          /**
           * @private
           * @type {?import("./events.js").EventsKey}
           */
          _this.viewPropertyListenerKey_ = null;
          /**
           * @private
           * @type {?import("./events.js").EventsKey}
           */
          _this.viewChangeListenerKey_ = null;
          /**
           * @private
           * @type {?Array<import("./events.js").EventsKey>}
           */
          _this.layerGroupPropertyListenerKeys_ = null;
          /**
           * @private
           * @type {!HTMLElement}
           */
          _this.viewport_ = document.createElement('div');
          _this.viewport_.className = 'ol-viewport' + ('ontouchstart' in window ? ' ol-touch' : '');
          _this.viewport_.style.position = 'relative';
          _this.viewport_.style.overflow = 'hidden';
          _this.viewport_.style.width = '100%';
          _this.viewport_.style.height = '100%';
          /**
           * @private
           * @type {!HTMLElement}
           */
          _this.overlayContainer_ = document.createElement('div');
          _this.overlayContainer_.style.position = 'absolute';
          _this.overlayContainer_.style.zIndex = '0';
          _this.overlayContainer_.style.width = '100%';
          _this.overlayContainer_.style.height = '100%';
          _this.overlayContainer_.className = 'ol-overlaycontainer';
          _this.viewport_.appendChild(_this.overlayContainer_);
          /**
           * @private
           * @type {!HTMLElement}
           */
          _this.overlayContainerStopEvent_ = document.createElement('div');
          _this.overlayContainerStopEvent_.style.position = 'absolute';
          _this.overlayContainerStopEvent_.style.zIndex = '0';
          _this.overlayContainerStopEvent_.style.width = '100%';
          _this.overlayContainerStopEvent_.style.height = '100%';
          _this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent';
          _this.viewport_.appendChild(_this.overlayContainerStopEvent_);
          /**
           * @private
           * @type {MapBrowserEventHandler}
           */
          _this.mapBrowserEventHandler_ = new MapBrowserEventHandler(_this, options.moveTolerance);
          var handleMapBrowserEvent = _this.handleMapBrowserEvent.bind(_this);
          for (var key in MapBrowserEventType) {
              _this.mapBrowserEventHandler_.addEventListener(MapBrowserEventType[key], handleMapBrowserEvent);
          }
          /**
           * @private
           * @type {HTMLElement|Document}
           */
          _this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;
          /**
           * @private
           * @type {?Array<import("./events.js").EventsKey>}
           */
          _this.keyHandlerKeys_ = null;
          var handleBrowserEvent = _this.handleBrowserEvent.bind(_this);
          _this.viewport_.addEventListener(EventType.CONTEXTMENU, handleBrowserEvent, false);
          _this.viewport_.addEventListener(EventType.WHEEL, handleBrowserEvent, PASSIVE_EVENT_LISTENERS ? { passive: false } : false);
          /**
           * @type {Collection<import("./control/Control.js").default>}
           * @protected
           */
          _this.controls = optionsInternal.controls || new Collection$2();
          /**
           * @type {Collection<import("./interaction/Interaction.js").default>}
           * @protected
           */
          _this.interactions = optionsInternal.interactions || new Collection$2();
          /**
           * @type {Collection<import("./Overlay.js").default>}
           * @private
           */
          _this.overlays_ = optionsInternal.overlays;
          /**
           * A lookup of overlays by id.
           * @private
           * @type {Object<string, import("./Overlay.js").default>}
           */
          _this.overlayIdIndex_ = {};
          /**
           * @type {import("./renderer/Map.js").default}
           * @private
           */
          _this.renderer_ = null;
          /**
           * @type {undefined|function(Event): void}
           * @private
           */
          _this.handleResize_;
          /**
           * @private
           * @type {!Array<PostRenderFunction>}
           */
          _this.postRenderFunctions_ = [];
          /**
           * @private
           * @type {TileQueue}
           */
          _this.tileQueue_ = new TileQueue(_this.getTilePriority.bind(_this), _this.handleTileChange_.bind(_this));
          _this.addEventListener(getChangeEventType(MapProperty.LAYERGROUP), _this.handleLayerGroupChanged_);
          _this.addEventListener(getChangeEventType(MapProperty.VIEW), _this.handleViewChanged_);
          _this.addEventListener(getChangeEventType(MapProperty.SIZE), _this.handleSizeChanged_);
          _this.addEventListener(getChangeEventType(MapProperty.TARGET), _this.handleTargetChanged_);
          // setProperties will trigger the rendering of the map if the map
          // is "defined" already.
          _this.setProperties(optionsInternal.values);
          _this.controls.forEach(
          /**
           * @param {import("./control/Control.js").default} control Control.
           * @this {PluggableMap}
           */
          function (control) {
              control.setMap(this);
          }.bind(_this));
          _this.controls.addEventListener(CollectionEventType.ADD, 
          /**
           * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
           */
          function (event) {
              event.element.setMap(this);
          }.bind(_this));
          _this.controls.addEventListener(CollectionEventType.REMOVE, 
          /**
           * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
           */
          function (event) {
              event.element.setMap(null);
          }.bind(_this));
          _this.interactions.forEach(
          /**
           * @param {import("./interaction/Interaction.js").default} interaction Interaction.
           * @this {PluggableMap}
           */
          function (interaction) {
              interaction.setMap(this);
          }.bind(_this));
          _this.interactions.addEventListener(CollectionEventType.ADD, 
          /**
           * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
           */
          function (event) {
              event.element.setMap(this);
          }.bind(_this));
          _this.interactions.addEventListener(CollectionEventType.REMOVE, 
          /**
           * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
           */
          function (event) {
              event.element.setMap(null);
          }.bind(_this));
          _this.overlays_.forEach(_this.addOverlayInternal_.bind(_this));
          _this.overlays_.addEventListener(CollectionEventType.ADD, 
          /**
           * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
           */
          function (event) {
              this.addOverlayInternal_(/** @type {import("./Overlay.js").default} */ (event.element));
          }.bind(_this));
          _this.overlays_.addEventListener(CollectionEventType.REMOVE, 
          /**
           * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
           */
          function (event) {
              var overlay = /** @type {import("./Overlay.js").default} */ (event.element);
              var id = overlay.getId();
              if (id !== undefined) {
                  delete this.overlayIdIndex_[id.toString()];
              }
              event.element.setMap(null);
          }.bind(_this));
          return _this;
      }
      /**
       * @abstract
       * @return {import("./renderer/Map.js").default} The map renderer
       */
      PluggableMap.prototype.createRenderer = function () {
          throw new Error('Use a map type that has a createRenderer method');
      };
      /**
       * Add the given control to the map.
       * @param {import("./control/Control.js").default} control Control.
       * @api
       */
      PluggableMap.prototype.addControl = function (control) {
          this.getControls().push(control);
      };
      /**
       * Add the given interaction to the map. If you want to add an interaction
       * at another point of the collection use `getInteraction()` and the methods
       * available on {@link module:ol/Collection~Collection}. This can be used to
       * stop the event propagation from the handleEvent function. The interactions
       * get to handle the events in the reverse order of this collection.
       * @param {import("./interaction/Interaction.js").default} interaction Interaction to add.
       * @api
       */
      PluggableMap.prototype.addInteraction = function (interaction) {
          this.getInteractions().push(interaction);
      };
      /**
       * Adds the given layer to the top of this map. If you want to add a layer
       * elsewhere in the stack, use `getLayers()` and the methods available on
       * {@link module:ol/Collection~Collection}.
       * @param {import("./layer/Base.js").default} layer Layer.
       * @api
       */
      PluggableMap.prototype.addLayer = function (layer) {
          var layers = this.getLayerGroup().getLayers();
          layers.push(layer);
      };
      /**
       * Add the given overlay to the map.
       * @param {import("./Overlay.js").default} overlay Overlay.
       * @api
       */
      PluggableMap.prototype.addOverlay = function (overlay) {
          this.getOverlays().push(overlay);
      };
      /**
       * This deals with map's overlay collection changes.
       * @param {import("./Overlay.js").default} overlay Overlay.
       * @private
       */
      PluggableMap.prototype.addOverlayInternal_ = function (overlay) {
          var id = overlay.getId();
          if (id !== undefined) {
              this.overlayIdIndex_[id.toString()] = overlay;
          }
          overlay.setMap(this);
      };
      /**
       *
       * @inheritDoc
       */
      PluggableMap.prototype.disposeInternal = function () {
          this.mapBrowserEventHandler_.dispose();
          this.viewport_.removeEventListener(EventType.CONTEXTMENU, this.boundHandleBrowserEvent_);
          this.viewport_.removeEventListener(EventType.WHEEL, this.boundHandleBrowserEvent_);
          if (this.handleResize_ !== undefined) {
              removeEventListener(EventType.RESIZE, this.handleResize_, false);
              this.handleResize_ = undefined;
          }
          this.setTarget(null);
          _super.prototype.disposeInternal.call(this);
      };
      /**
       * Detect features that intersect a pixel on the viewport, and execute a
       * callback with each intersecting feature. Layers included in the detection can
       * be configured through the `layerFilter` option in `opt_options`.
       * @param {import("./pixel.js").Pixel} pixel Pixel.
       * @param {function(this: S, import("./Feature.js").FeatureLike,
       *     import("./layer/Layer.js").default): T} callback Feature callback. The callback will be
       *     called with two arguments. The first argument is one
       *     {@link module:ol/Feature feature} or
       *     {@link module:ol/render/Feature render feature} at the pixel, the second is
       *     the {@link module:ol/layer/Layer layer} of the feature and will be null for
       *     unmanaged layers. To stop detection, callback functions can return a
       *     truthy value.
       * @param {AtPixelOptions=} opt_options Optional options.
       * @return {T|undefined} Callback result, i.e. the return value of last
       * callback execution, or the first truthy callback return value.
       * @template S,T
       * @api
       */
      PluggableMap.prototype.forEachFeatureAtPixel = function (pixel, callback, opt_options) {
          if (!this.frameState_) {
              return;
          }
          var coordinate = this.getCoordinateFromPixelInternal(pixel);
          opt_options = opt_options !== undefined ? opt_options : {};
          var hitTolerance = opt_options.hitTolerance !== undefined ?
              opt_options.hitTolerance * this.frameState_.pixelRatio : 0;
          var layerFilter = opt_options.layerFilter !== undefined ?
              opt_options.layerFilter : TRUE;
          var checkWrapped = opt_options.checkWrapped !== false;
          return this.renderer_.forEachFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, callback, null, layerFilter, null);
      };
      /**
       * Get all features that intersect a pixel on the viewport.
       * @param {import("./pixel.js").Pixel} pixel Pixel.
       * @param {AtPixelOptions=} opt_options Optional options.
       * @return {Array<import("./Feature.js").FeatureLike>} The detected features or
       * an empty array if none were found.
       * @api
       */
      PluggableMap.prototype.getFeaturesAtPixel = function (pixel, opt_options) {
          var features = [];
          this.forEachFeatureAtPixel(pixel, function (feature) {
              features.push(feature);
          }, opt_options);
          return features;
      };
      /**
       * Detect layers that have a color value at a pixel on the viewport, and
       * execute a callback with each matching layer. Layers included in the
       * detection can be configured through `opt_layerFilter`.
       *
       * Note: this may give false positives unless the map layers have had different `className`
       * properties assigned to them.
       *
       * @param {import("./pixel.js").Pixel} pixel Pixel.
       * @param {function(this: S, import("./layer/Layer.js").default, (Uint8ClampedArray|Uint8Array)): T} callback
       *     Layer callback. This callback will receive two arguments: first is the
       *     {@link module:ol/layer/Layer layer}, second argument is an array representing
       *     [R, G, B, A] pixel values (0 - 255) and will be `null` for layer types
       *     that do not currently support this argument. To stop detection, callback
       *     functions can return a truthy value.
       * @param {AtPixelOptions=} opt_options Configuration options.
       * @return {T|undefined} Callback result, i.e. the return value of last
       * callback execution, or the first truthy callback return value.
       * @template S,T
       * @api
       */
      PluggableMap.prototype.forEachLayerAtPixel = function (pixel, callback, opt_options) {
          if (!this.frameState_) {
              return;
          }
          var options = opt_options || {};
          var hitTolerance = options.hitTolerance !== undefined ?
              options.hitTolerance * this.frameState_.pixelRatio : 0;
          var layerFilter = options.layerFilter || TRUE;
          return this.renderer_.forEachLayerAtPixel(pixel, this.frameState_, hitTolerance, callback, layerFilter);
      };
      /**
       * Detect if features intersect a pixel on the viewport. Layers included in the
       * detection can be configured through `opt_layerFilter`.
       * @param {import("./pixel.js").Pixel} pixel Pixel.
       * @param {AtPixelOptions=} opt_options Optional options.
       * @return {boolean} Is there a feature at the given pixel?
       * @api
       */
      PluggableMap.prototype.hasFeatureAtPixel = function (pixel, opt_options) {
          if (!this.frameState_) {
              return false;
          }
          var coordinate = this.getCoordinateFromPixelInternal(pixel);
          opt_options = opt_options !== undefined ? opt_options : {};
          var layerFilter = opt_options.layerFilter !== undefined ? opt_options.layerFilter : TRUE;
          var hitTolerance = opt_options.hitTolerance !== undefined ?
              opt_options.hitTolerance * this.frameState_.pixelRatio : 0;
          var checkWrapped = opt_options.checkWrapped !== false;
          return this.renderer_.hasFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, layerFilter, null);
      };
      /**
       * Returns the coordinate in user projection for a browser event.
       * @param {Event} event Event.
       * @return {import("./coordinate.js").Coordinate} Coordinate.
       * @api
       */
      PluggableMap.prototype.getEventCoordinate = function (event) {
          return this.getCoordinateFromPixel(this.getEventPixel(event));
      };
      /**
       * Returns the coordinate in view projection for a browser event.
       * @param {Event} event Event.
       * @return {import("./coordinate.js").Coordinate} Coordinate.
       */
      PluggableMap.prototype.getEventCoordinateInternal = function (event) {
          return this.getCoordinateFromPixelInternal(this.getEventPixel(event));
      };
      /**
       * Returns the map pixel position for a browser event relative to the viewport.
       * @param {Event|TouchEvent} event Event.
       * @return {import("./pixel.js").Pixel} Pixel.
       * @api
       */
      PluggableMap.prototype.getEventPixel = function (event) {
          var viewportPosition = this.viewport_.getBoundingClientRect();
          var eventPosition = 'changedTouches' in event ?
              /** @type {TouchEvent} */ (event).changedTouches[0] :
              /** @type {MouseEvent} */ (event);
          return [
              eventPosition.clientX - viewportPosition.left,
              eventPosition.clientY - viewportPosition.top
          ];
      };
      /**
       * Get the target in which this map is rendered.
       * Note that this returns what is entered as an option or in setTarget:
       * if that was an element, it returns an element; if a string, it returns that.
       * @return {HTMLElement|string|undefined} The Element or id of the Element that the
       *     map is rendered in.
       * @observable
       * @api
       */
      PluggableMap.prototype.getTarget = function () {
          return /** @type {HTMLElement|string|undefined} */ (this.get(MapProperty.TARGET));
      };
      /**
       * Get the DOM element into which this map is rendered. In contrast to
       * `getTarget` this method always return an `Element`, or `null` if the
       * map has no target.
       * @return {HTMLElement} The element that the map is rendered in.
       * @api
       */
      PluggableMap.prototype.getTargetElement = function () {
          var target = this.getTarget();
          if (target !== undefined) {
              return typeof target === 'string' ? document.getElementById(target) : target;
          }
          else {
              return null;
          }
      };
      /**
       * Get the coordinate for a given pixel.  This returns a coordinate in the
       * user projection.
       * @param {import("./pixel.js").Pixel} pixel Pixel position in the map viewport.
       * @return {import("./coordinate.js").Coordinate} The coordinate for the pixel position.
       * @api
       */
      PluggableMap.prototype.getCoordinateFromPixel = function (pixel) {
          return toUserCoordinate(this.getCoordinateFromPixelInternal(pixel), this.getView().getProjection());
      };
      /**
       * Get the coordinate for a given pixel.  This returns a coordinate in the
       * map view projection.
       * @param {import("./pixel.js").Pixel} pixel Pixel position in the map viewport.
       * @return {import("./coordinate.js").Coordinate} The coordinate for the pixel position.
       */
      PluggableMap.prototype.getCoordinateFromPixelInternal = function (pixel) {
          var frameState = this.frameState_;
          if (!frameState) {
              return null;
          }
          else {
              return apply(frameState.pixelToCoordinateTransform, pixel.slice());
          }
      };
      /**
       * Get the map controls. Modifying this collection changes the controls
       * associated with the map.
       * @return {Collection<import("./control/Control.js").default>} Controls.
       * @api
       */
      PluggableMap.prototype.getControls = function () {
          return this.controls;
      };
      /**
       * Get the map overlays. Modifying this collection changes the overlays
       * associated with the map.
       * @return {Collection<import("./Overlay.js").default>} Overlays.
       * @api
       */
      PluggableMap.prototype.getOverlays = function () {
          return this.overlays_;
      };
      /**
       * Get an overlay by its identifier (the value returned by overlay.getId()).
       * Note that the index treats string and numeric identifiers as the same. So
       * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.
       * @param {string|number} id Overlay identifier.
       * @return {import("./Overlay.js").default} Overlay.
       * @api
       */
      PluggableMap.prototype.getOverlayById = function (id) {
          var overlay = this.overlayIdIndex_[id.toString()];
          return overlay !== undefined ? overlay : null;
      };
      /**
       * Get the map interactions. Modifying this collection changes the interactions
       * associated with the map.
       *
       * Interactions are used for e.g. pan, zoom and rotate.
       * @return {Collection<import("./interaction/Interaction.js").default>} Interactions.
       * @api
       */
      PluggableMap.prototype.getInteractions = function () {
          return this.interactions;
      };
      /**
       * Get the layergroup associated with this map.
       * @return {LayerGroup} A layer group containing the layers in this map.
       * @observable
       * @api
       */
      PluggableMap.prototype.getLayerGroup = function () {
          return (
          /** @type {LayerGroup} */ (this.get(MapProperty.LAYERGROUP)));
      };
      /**
       * Get the collection of layers associated with this map.
       * @return {!Collection<import("./layer/Base.js").default>} Layers.
       * @api
       */
      PluggableMap.prototype.getLayers = function () {
          var layers = this.getLayerGroup().getLayers();
          return layers;
      };
      /**
       * @return {boolean} Layers have sources that are still loading.
       */
      PluggableMap.prototype.getLoading = function () {
          var layerStatesArray = this.getLayerGroup().getLayerStatesArray();
          for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {
              var layer = layerStatesArray[i].layer;
              var source = /** @type {import("./layer/Layer.js").default} */ (layer).getSource();
              if (source && source.loading) {
                  return true;
              }
          }
          return false;
      };
      /**
       * Get the pixel for a coordinate.  This takes a coordinate in the user
       * projection and returns the corresponding pixel.
       * @param {import("./coordinate.js").Coordinate} coordinate A map coordinate.
       * @return {import("./pixel.js").Pixel} A pixel position in the map viewport.
       * @api
       */
      PluggableMap.prototype.getPixelFromCoordinate = function (coordinate) {
          var viewCoordinate = fromUserCoordinate(coordinate, this.getView().getProjection());
          return this.getPixelFromCoordinateInternal(viewCoordinate);
      };
      /**
       * Get the pixel for a coordinate.  This takes a coordinate in the map view
       * projection and returns the corresponding pixel.
       * @param {import("./coordinate.js").Coordinate} coordinate A map coordinate.
       * @return {import("./pixel.js").Pixel} A pixel position in the map viewport.
       */
      PluggableMap.prototype.getPixelFromCoordinateInternal = function (coordinate) {
          var frameState = this.frameState_;
          if (!frameState) {
              return null;
          }
          else {
              return apply(frameState.coordinateToPixelTransform, coordinate.slice(0, 2));
          }
      };
      /**
       * Get the map renderer.
       * @return {import("./renderer/Map.js").default} Renderer
       */
      PluggableMap.prototype.getRenderer = function () {
          return this.renderer_;
      };
      /**
       * Get the size of this map.
       * @return {import("./size.js").Size|undefined} The size in pixels of the map in the DOM.
       * @observable
       * @api
       */
      PluggableMap.prototype.getSize = function () {
          return (
          /** @type {import("./size.js").Size|undefined} */ (this.get(MapProperty.SIZE)));
      };
      /**
       * Get the view associated with this map. A view manages properties such as
       * center and resolution.
       * @return {View} The view that controls this map.
       * @observable
       * @api
       */
      PluggableMap.prototype.getView = function () {
          return (
          /** @type {View} */ (this.get(MapProperty.VIEW)));
      };
      /**
       * Get the element that serves as the map viewport.
       * @return {HTMLElement} Viewport.
       * @api
       */
      PluggableMap.prototype.getViewport = function () {
          return this.viewport_;
      };
      /**
       * Get the element that serves as the container for overlays.  Elements added to
       * this container will let mousedown and touchstart events through to the map,
       * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}
       * events.
       * @return {!HTMLElement} The map's overlay container.
       */
      PluggableMap.prototype.getOverlayContainer = function () {
          return this.overlayContainer_;
      };
      /**
       * Get the element that serves as a container for overlays that don't allow
       * event propagation. Elements added to this container won't let mousedown and
       * touchstart events through to the map, so clicks and gestures on an overlay
       * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.
       * @return {!HTMLElement} The map's overlay container that stops events.
       */
      PluggableMap.prototype.getOverlayContainerStopEvent = function () {
          return this.overlayContainerStopEvent_;
      };
      /**
       * @param {import("./Tile.js").default} tile Tile.
       * @param {string} tileSourceKey Tile source key.
       * @param {import("./coordinate.js").Coordinate} tileCenter Tile center.
       * @param {number} tileResolution Tile resolution.
       * @return {number} Tile priority.
       */
      PluggableMap.prototype.getTilePriority = function (tile, tileSourceKey, tileCenter, tileResolution) {
          return getTilePriority(this.frameState_, tile, tileSourceKey, tileCenter, tileResolution);
      };
      /**
       * @param {Event} browserEvent Browser event.
       * @param {string=} opt_type Type.
       */
      PluggableMap.prototype.handleBrowserEvent = function (browserEvent, opt_type) {
          var type = opt_type || browserEvent.type;
          var mapBrowserEvent = new MapBrowserEvent(type, this, browserEvent);
          this.handleMapBrowserEvent(mapBrowserEvent);
      };
      /**
       * @param {MapBrowserEvent} mapBrowserEvent The event to handle.
       */
      PluggableMap.prototype.handleMapBrowserEvent = function (mapBrowserEvent) {
          if (!this.frameState_) {
              // With no view defined, we cannot translate pixels into geographical
              // coordinates so interactions cannot be used.
              return;
          }
          var target = /** @type {Node} */ (mapBrowserEvent.originalEvent.target);
          if (!mapBrowserEvent.dragging) {
              if (this.overlayContainerStopEvent_.contains(target) || !(document.body.contains(target) || this.viewport_.getRootNode && this.viewport_.getRootNode().contains(target))) {
                  // Abort if the event target is a child of the container that doesn't allow
                  // event propagation or is no longer in the page. It's possible for the target to no longer
                  // be in the page if it has been removed in an event listener, this might happen in a Control
                  // that recreates it's content based on user interaction either manually or via a render
                  // in something like https://reactjs.org/
                  return;
              }
          }
          mapBrowserEvent.frameState = this.frameState_;
          var interactionsArray = this.getInteractions().getArray();
          if (this.dispatchEvent(mapBrowserEvent) !== false) {
              for (var i = interactionsArray.length - 1; i >= 0; i--) {
                  var interaction = interactionsArray[i];
                  if (!interaction.getActive()) {
                      continue;
                  }
                  var cont = interaction.handleEvent(mapBrowserEvent);
                  if (!cont) {
                      break;
                  }
              }
          }
      };
      /**
       * @protected
       */
      PluggableMap.prototype.handlePostRender = function () {
          var frameState = this.frameState_;
          // Manage the tile queue
          // Image loads are expensive and a limited resource, so try to use them
          // efficiently:
          // * When the view is static we allow a large number of parallel tile loads
          //   to complete the frame as quickly as possible.
          // * When animating or interacting, image loads can cause janks, so we reduce
          //   the maximum number of loads per frame and limit the number of parallel
          //   tile loads to remain reactive to view changes and to reduce the chance of
          //   loading tiles that will quickly disappear from view.
          var tileQueue = this.tileQueue_;
          if (!tileQueue.isEmpty()) {
              var maxTotalLoading = this.maxTilesLoading_;
              var maxNewLoads = maxTotalLoading;
              if (frameState) {
                  var hints = frameState.viewHints;
                  if (hints[ViewHint.ANIMATING] || hints[ViewHint.INTERACTING]) {
                      var lowOnFrameBudget = !IMAGE_DECODE && Date.now() - frameState.time > 8;
                      maxTotalLoading = lowOnFrameBudget ? 0 : 8;
                      maxNewLoads = lowOnFrameBudget ? 0 : 2;
                  }
              }
              if (tileQueue.getTilesLoading() < maxTotalLoading) {
                  tileQueue.reprioritize(); // FIXME only call if view has changed
                  tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);
              }
          }
          if (frameState && this.hasListener(RenderEventType.RENDERCOMPLETE) && !frameState.animate &&
              !this.tileQueue_.getTilesLoading() && !this.getLoading()) {
              this.renderer_.dispatchRenderEvent(RenderEventType.RENDERCOMPLETE, frameState);
          }
          var postRenderFunctions = this.postRenderFunctions_;
          for (var i = 0, ii = postRenderFunctions.length; i < ii; ++i) {
              postRenderFunctions[i](this, frameState);
          }
          postRenderFunctions.length = 0;
      };
      /**
       * @private
       */
      PluggableMap.prototype.handleSizeChanged_ = function () {
          if (this.getView()) {
              this.getView().resolveConstraints(0);
          }
          this.render();
      };
      /**
       * @private
       */
      PluggableMap.prototype.handleTargetChanged_ = function () {
          // target may be undefined, null, a string or an Element.
          // If it's a string we convert it to an Element before proceeding.
          // If it's not now an Element we remove the viewport from the DOM.
          // If it's an Element we append the viewport element to it.
          var targetElement;
          if (this.getTarget()) {
              targetElement = this.getTargetElement();
          }
          if (this.keyHandlerKeys_) {
              for (var i = 0, ii = this.keyHandlerKeys_.length; i < ii; ++i) {
                  unlistenByKey(this.keyHandlerKeys_[i]);
              }
              this.keyHandlerKeys_ = null;
          }
          if (!targetElement) {
              if (this.renderer_) {
                  clearTimeout(this.postRenderTimeoutHandle_);
                  this.postRenderFunctions_.length = 0;
                  this.renderer_.dispose();
                  this.renderer_ = null;
              }
              if (this.animationDelayKey_) {
                  cancelAnimationFrame(this.animationDelayKey_);
                  this.animationDelayKey_ = undefined;
              }
              removeNode(this.viewport_);
              if (this.handleResize_ !== undefined) {
                  removeEventListener(EventType.RESIZE, this.handleResize_, false);
                  this.handleResize_ = undefined;
              }
          }
          else {
              targetElement.appendChild(this.viewport_);
              if (!this.renderer_) {
                  this.renderer_ = this.createRenderer();
              }
              var keyboardEventTarget = !this.keyboardEventTarget_ ?
                  targetElement : this.keyboardEventTarget_;
              this.keyHandlerKeys_ = [
                  listen(keyboardEventTarget, EventType.KEYDOWN, this.handleBrowserEvent, this),
                  listen(keyboardEventTarget, EventType.KEYPRESS, this.handleBrowserEvent, this)
              ];
              if (!this.handleResize_) {
                  this.handleResize_ = this.updateSize.bind(this);
                  window.addEventListener(EventType.RESIZE, this.handleResize_, false);
              }
          }
          this.updateSize();
          // updateSize calls setSize, so no need to call this.render
          // ourselves here.
      };
      /**
       * @private
       */
      PluggableMap.prototype.handleTileChange_ = function () {
          this.render();
      };
      /**
       * @private
       */
      PluggableMap.prototype.handleViewPropertyChanged_ = function () {
          this.render();
      };
      /**
       * @private
       */
      PluggableMap.prototype.handleViewChanged_ = function () {
          if (this.viewPropertyListenerKey_) {
              unlistenByKey(this.viewPropertyListenerKey_);
              this.viewPropertyListenerKey_ = null;
          }
          if (this.viewChangeListenerKey_) {
              unlistenByKey(this.viewChangeListenerKey_);
              this.viewChangeListenerKey_ = null;
          }
          var view = this.getView();
          if (view) {
              this.updateViewportSize_();
              this.viewPropertyListenerKey_ = listen(view, ObjectEventType.PROPERTYCHANGE, this.handleViewPropertyChanged_, this);
              this.viewChangeListenerKey_ = listen(view, EventType.CHANGE, this.handleViewPropertyChanged_, this);
              view.resolveConstraints(0);
          }
          this.render();
      };
      /**
       * @private
       */
      PluggableMap.prototype.handleLayerGroupChanged_ = function () {
          if (this.layerGroupPropertyListenerKeys_) {
              this.layerGroupPropertyListenerKeys_.forEach(unlistenByKey);
              this.layerGroupPropertyListenerKeys_ = null;
          }
          var layerGroup = this.getLayerGroup();
          if (layerGroup) {
              this.layerGroupPropertyListenerKeys_ = [
                  listen(layerGroup, ObjectEventType.PROPERTYCHANGE, this.render, this),
                  listen(layerGroup, EventType.CHANGE, this.render, this)
              ];
          }
          this.render();
      };
      /**
       * @return {boolean} Is rendered.
       */
      PluggableMap.prototype.isRendered = function () {
          return !!this.frameState_;
      };
      /**
       * Requests an immediate render in a synchronous manner.
       * @api
       */
      PluggableMap.prototype.renderSync = function () {
          if (this.animationDelayKey_) {
              cancelAnimationFrame(this.animationDelayKey_);
          }
          this.animationDelay_();
      };
      /**
       * Redraws all text after new fonts have loaded
       */
      PluggableMap.prototype.redrawText = function () {
          var layerStates = this.getLayerGroup().getLayerStatesArray();
          for (var i = 0, ii = layerStates.length; i < ii; ++i) {
              var layer = layerStates[i].layer;
              if (layer.hasRenderer()) {
                  layer.getRenderer().handleFontsChanged();
              }
          }
      };
      /**
       * Request a map rendering (at the next animation frame).
       * @api
       */
      PluggableMap.prototype.render = function () {
          if (this.renderer_ && this.animationDelayKey_ === undefined) {
              this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);
          }
      };
      /**
       * Remove the given control from the map.
       * @param {import("./control/Control.js").default} control Control.
       * @return {import("./control/Control.js").default|undefined} The removed control (or undefined
       *     if the control was not found).
       * @api
       */
      PluggableMap.prototype.removeControl = function (control) {
          return this.getControls().remove(control);
      };
      /**
       * Remove the given interaction from the map.
       * @param {import("./interaction/Interaction.js").default} interaction Interaction to remove.
       * @return {import("./interaction/Interaction.js").default|undefined} The removed interaction (or
       *     undefined if the interaction was not found).
       * @api
       */
      PluggableMap.prototype.removeInteraction = function (interaction) {
          return this.getInteractions().remove(interaction);
      };
      /**
       * Removes the given layer from the map.
       * @param {import("./layer/Base.js").default} layer Layer.
       * @return {import("./layer/Base.js").default|undefined} The removed layer (or undefined if the
       *     layer was not found).
       * @api
       */
      PluggableMap.prototype.removeLayer = function (layer) {
          var layers = this.getLayerGroup().getLayers();
          return layers.remove(layer);
      };
      /**
       * Remove the given overlay from the map.
       * @param {import("./Overlay.js").default} overlay Overlay.
       * @return {import("./Overlay.js").default|undefined} The removed overlay (or undefined
       *     if the overlay was not found).
       * @api
       */
      PluggableMap.prototype.removeOverlay = function (overlay) {
          return this.getOverlays().remove(overlay);
      };
      /**
       * @param {number} time Time.
       * @private
       */
      PluggableMap.prototype.renderFrame_ = function (time) {
          var size = this.getSize();
          var view = this.getView();
          var previousFrameState = this.frameState_;
          /** @type {?FrameState} */
          var frameState = null;
          if (size !== undefined && hasArea(size) && view && view.isDef()) {
              var viewHints = view.getHints(this.frameState_ ? this.frameState_.viewHints : undefined);
              var viewState = view.getState();
              frameState = {
                  animate: false,
                  coordinateToPixelTransform: this.coordinateToPixelTransform_,
                  declutterItems: previousFrameState ? previousFrameState.declutterItems : [],
                  extent: getForViewAndSize(viewState.center, viewState.resolution, viewState.rotation, size),
                  index: this.frameIndex_++,
                  layerIndex: 0,
                  layerStatesArray: this.getLayerGroup().getLayerStatesArray(),
                  pixelRatio: this.pixelRatio_,
                  pixelToCoordinateTransform: this.pixelToCoordinateTransform_,
                  postRenderFunctions: [],
                  size: size,
                  tileQueue: this.tileQueue_,
                  time: time,
                  usedTiles: {},
                  viewState: viewState,
                  viewHints: viewHints,
                  wantedTiles: {}
              };
          }
          this.frameState_ = frameState;
          this.renderer_.renderFrame(frameState);
          if (frameState) {
              if (frameState.animate) {
                  this.render();
              }
              Array.prototype.push.apply(this.postRenderFunctions_, frameState.postRenderFunctions);
              if (previousFrameState) {
                  var moveStart = !this.previousExtent_ ||
                      (!isEmpty$1(this.previousExtent_) &&
                          !equals(frameState.extent, this.previousExtent_));
                  if (moveStart) {
                      this.dispatchEvent(new MapEvent(MapEventType.MOVESTART, this, previousFrameState));
                      this.previousExtent_ = createOrUpdateEmpty(this.previousExtent_);
                  }
              }
              var idle = this.previousExtent_ &&
                  !frameState.viewHints[ViewHint.ANIMATING] &&
                  !frameState.viewHints[ViewHint.INTERACTING] &&
                  !equals(frameState.extent, this.previousExtent_);
              if (idle) {
                  this.dispatchEvent(new MapEvent(MapEventType.MOVEEND, this, frameState));
                  clone(frameState.extent, this.previousExtent_);
              }
          }
          this.dispatchEvent(new MapEvent(MapEventType.POSTRENDER, this, frameState));
          this.postRenderTimeoutHandle_ = setTimeout(this.handlePostRender.bind(this), 0);
      };
      /**
       * Sets the layergroup of this map.
       * @param {LayerGroup} layerGroup A layer group containing the layers in this map.
       * @observable
       * @api
       */
      PluggableMap.prototype.setLayerGroup = function (layerGroup) {
          this.set(MapProperty.LAYERGROUP, layerGroup);
      };
      /**
       * Set the size of this map.
       * @param {import("./size.js").Size|undefined} size The size in pixels of the map in the DOM.
       * @observable
       * @api
       */
      PluggableMap.prototype.setSize = function (size) {
          this.set(MapProperty.SIZE, size);
      };
      /**
       * Set the target element to render this map into.
       * @param {HTMLElement|string|undefined} target The Element or id of the Element
       *     that the map is rendered in.
       * @observable
       * @api
       */
      PluggableMap.prototype.setTarget = function (target) {
          this.set(MapProperty.TARGET, target);
      };
      /**
       * Set the view for this map.
       * @param {View} view The view that controls this map.
       * @observable
       * @api
       */
      PluggableMap.prototype.setView = function (view) {
          this.set(MapProperty.VIEW, view);
      };
      /**
       * Force a recalculation of the map viewport size.  This should be called when
       * third-party code changes the size of the map viewport.
       * @api
       */
      PluggableMap.prototype.updateSize = function () {
          var targetElement = this.getTargetElement();
          if (!targetElement) {
              this.setSize(undefined);
          }
          else {
              var computedStyle = getComputedStyle(targetElement);
              this.setSize([
                  targetElement.offsetWidth -
                      parseFloat(computedStyle['borderLeftWidth']) -
                      parseFloat(computedStyle['paddingLeft']) -
                      parseFloat(computedStyle['paddingRight']) -
                      parseFloat(computedStyle['borderRightWidth']),
                  targetElement.offsetHeight -
                      parseFloat(computedStyle['borderTopWidth']) -
                      parseFloat(computedStyle['paddingTop']) -
                      parseFloat(computedStyle['paddingBottom']) -
                      parseFloat(computedStyle['borderBottomWidth'])
              ]);
          }
          this.updateViewportSize_();
      };
      /**
       * Recomputes the viewport size and save it on the view object (if any)
       * @private
       */
      PluggableMap.prototype.updateViewportSize_ = function () {
          var view = this.getView();
          if (view) {
              var size = undefined;
              var computedStyle = getComputedStyle(this.viewport_);
              if (computedStyle.width && computedStyle.height) {
                  size = [
                      parseInt(computedStyle.width, 10),
                      parseInt(computedStyle.height, 10)
                  ];
              }
              view.setViewportSize(size);
          }
      };
      return PluggableMap;
  }(BaseObject));
  /**
   * @param {MapOptions} options Map options.
   * @return {MapOptionsInternal} Internal map options.
   */
  function createOptionsInternal(options) {
      /**
       * @type {HTMLElement|Document}
       */
      var keyboardEventTarget = null;
      if (options.keyboardEventTarget !== undefined) {
          keyboardEventTarget = typeof options.keyboardEventTarget === 'string' ?
              document.getElementById(options.keyboardEventTarget) :
              options.keyboardEventTarget;
      }
      /**
       * @type {Object<string, *>}
       */
      var values = {};
      var layerGroup = options.layers && typeof /** @type {?} */ (options.layers).getLayers === 'function' ?
          /** @type {LayerGroup} */ (options.layers) : new LayerGroup({ layers: /** @type {Collection} */ (options.layers) });
      values[MapProperty.LAYERGROUP] = layerGroup;
      values[MapProperty.TARGET] = options.target;
      values[MapProperty.VIEW] = options.view !== undefined ?
          options.view : new View();
      var controls;
      if (options.controls !== undefined) {
          if (Array.isArray(options.controls)) {
              controls = new Collection$2(options.controls.slice());
          }
          else {
              assert(typeof /** @type {?} */ (options.controls).getArray === 'function', 47); // Expected `controls` to be an array or an `import("./Collection.js").Collection`
              controls = /** @type {Collection} */ (options.controls);
          }
      }
      var interactions;
      if (options.interactions !== undefined) {
          if (Array.isArray(options.interactions)) {
              interactions = new Collection$2(options.interactions.slice());
          }
          else {
              assert(typeof /** @type {?} */ (options.interactions).getArray === 'function', 48); // Expected `interactions` to be an array or an `import("./Collection.js").Collection`
              interactions = /** @type {Collection} */ (options.interactions);
          }
      }
      var overlays;
      if (options.overlays !== undefined) {
          if (Array.isArray(options.overlays)) {
              overlays = new Collection$2(options.overlays.slice());
          }
          else {
              assert(typeof /** @type {?} */ (options.overlays).getArray === 'function', 49); // Expected `overlays` to be an array or an `import("./Collection.js").Collection`
              overlays = options.overlays;
          }
      }
      else {
          overlays = new Collection$2();
      }
      return {
          controls: controls,
          interactions: interactions,
          keyboardEventTarget: keyboardEventTarget,
          overlays: overlays,
          values: values
      };
  }

  var __extends$r =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {Object} Options
   * @property {HTMLElement} [element] The element is the control's
   * container element. This only needs to be specified if you're developing
   * a custom control.
   * @property {function(import("../MapEvent.js").default)} [render] Function called when
   * the control should be re-rendered. This is called in a `requestAnimationFrame`
   * callback.
   * @property {HTMLElement|string} [target] Specify a target if you want
   * the control to be rendered outside of the map's viewport.
   */
  /**
   * @classdesc
   * A control is a visible widget with a DOM element in a fixed position on the
   * screen. They can involve user input (buttons), or be informational only;
   * the position is determined using CSS. By default these are placed in the
   * container with CSS class name `ol-overlaycontainer-stopevent`, but can use
   * any outside DOM element.
   *
   * This is the base class for controls. You can use it for simple custom
   * controls by creating the element with listeners, creating an instance:
   * ```js
   * var myControl = new Control({element: myElement});
   * ```
   * and then adding this to the map.
   *
   * The main advantage of having this as a control rather than a simple separate
   * DOM element is that preventing propagation is handled for you. Controls
   * will also be objects in a {@link module:ol/Collection~Collection}, so you can use their methods.
   *
   * You can also extend this base for your own control class. See
   * examples/custom-controls for an example of how to do this.
   *
   * @api
   */
  var Control = /** @class */ (function (_super) {
      __extends$r(Control, _super);
      /**
       * @param {Options} options Control options.
       */
      function Control(options) {
          var _this = _super.call(this) || this;
          /**
           * @protected
           * @type {HTMLElement}
           */
          _this.element = options.element ? options.element : null;
          /**
           * @private
           * @type {HTMLElement}
           */
          _this.target_ = null;
          /**
           * @private
           * @type {import("../PluggableMap.js").default}
           */
          _this.map_ = null;
          /**
           * @protected
           * @type {!Array<import("../events.js").EventsKey>}
           */
          _this.listenerKeys = [];
          /**
           * @private
           * @type {function(import("../MapEvent.js").default): void}
           */
          _this.render_ = options.render ? options.render : VOID;
          if (options.target) {
              _this.setTarget(options.target);
          }
          return _this;
      }
      /**
       * @inheritDoc
       */
      Control.prototype.disposeInternal = function () {
          removeNode(this.element);
          _super.prototype.disposeInternal.call(this);
      };
      /**
       * Get the map associated with this control.
       * @return {import("../PluggableMap.js").default} Map.
       * @api
       */
      Control.prototype.getMap = function () {
          return this.map_;
      };
      /**
       * Remove the control from its current map and attach it to the new map.
       * Subclasses may set up event handlers to get notified about changes to
       * the map here.
       * @param {import("../PluggableMap.js").default} map Map.
       * @api
       */
      Control.prototype.setMap = function (map) {
          if (this.map_) {
              removeNode(this.element);
          }
          for (var i = 0, ii = this.listenerKeys.length; i < ii; ++i) {
              unlistenByKey(this.listenerKeys[i]);
          }
          this.listenerKeys.length = 0;
          this.map_ = map;
          if (this.map_) {
              var target = this.target_ ?
                  this.target_ : map.getOverlayContainerStopEvent();
              target.appendChild(this.element);
              if (this.render !== VOID) {
                  this.listenerKeys.push(listen(map, MapEventType.POSTRENDER, this.render, this));
              }
              map.render();
          }
      };
      /**
       * Update the projection. Rendering of the coordinates is done in
       * `handleMouseMove` and `handleMouseUp`.
       * @param {import("../MapEvent.js").default} mapEvent Map event.
       * @api
       */
      Control.prototype.render = function (mapEvent) {
          this.render_.call(this, mapEvent);
      };
      /**
       * This function is used to set a target element for the control. It has no
       * effect if it is called after the control has been added to the map (i.e.
       * after `setMap` is called on the control). If no `target` is set in the
       * options passed to the control constructor and if `setTarget` is not called
       * then the control is added to the map's overlay container.
       * @param {HTMLElement|string} target Target.
       * @api
       */
      Control.prototype.setTarget = function (target) {
          this.target_ = typeof target === 'string' ?
              document.getElementById(target) :
              target;
      };
      return Control;
  }(BaseObject));

  var __extends$s =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {function(import("../PluggableMap.js").FrameState):HTMLElement} RenderFunction
   */
  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
   * visible.
   * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
   * be visible.
   * @property {import("../source/Source.js").default} [source] Source for this layer.  If not provided to the constructor,
   * the source can be set by calling {@link module:ol/layer/Layer#setSource layer.setSource(source)} after
   * construction.
   * @property {import("../PluggableMap.js").default} [map] Map.
   * @property {RenderFunction} [render] Render function. Takes the frame state as input and is expected to return an
   * HTML element. Will overwrite the default rendering for the layer.
   */
  /**
   * @typedef {Object} State
   * @property {import("./Base.js").default} layer
   * @property {number} opacity Opacity, the value is rounded to two digits to appear after the decimal point.
   * @property {SourceState} sourceState
   * @property {boolean} visible
   * @property {boolean} managed
   * @property {import("../extent.js").Extent} [extent]
   * @property {number} zIndex
   * @property {number} maxResolution
   * @property {number} minResolution
   * @property {number} minZoom
   * @property {number} maxZoom
   */
  /**
   * @classdesc
   * Base class from which all layer types are derived. This should only be instantiated
   * in the case where a custom layer is be added to the map with a custom `render` function.
   * Such a function can be specified in the `options` object, and is expected to return an HTML element.
   *
   * A visual representation of raster or vector map data.
   * Layers group together those properties that pertain to how the data is to be
   * displayed, irrespective of the source of that data.
   *
   * Layers are usually added to a map with {@link module:ol/Map#addLayer}. Components
   * like {@link module:ol/interaction/Select~Select} use unmanaged layers
   * internally. These unmanaged layers are associated with the map using
   * {@link module:ol/layer/Layer~Layer#setMap} instead.
   *
   * A generic `change` event is fired when the state of the source changes.
   *
   * Please note that for performance reasons several layers might get rendered to
   * the same HTML element, which will cause {@link module:ol/Map~Map#forEachLayerAtPixel} to
   * give false positives. To avoid this, apply different `className` properties to the
   * layers at creation time.
   *
   * @fires import("../render/Event.js").RenderEvent#prerender
   * @fires import("../render/Event.js").RenderEvent#postrender
   *
   * @template {import("../source/Source.js").default} SourceType
   * @api
   */
  var Layer = /** @class */ (function (_super) {
      __extends$s(Layer, _super);
      /**
       * @param {Options} options Layer options.
       */
      function Layer(options) {
          var _this = this;
          var baseOptions = assign({}, options);
          delete baseOptions.source;
          _this = _super.call(this, baseOptions) || this;
          /**
           * @private
           * @type {?import("../events.js").EventsKey}
           */
          _this.mapPrecomposeKey_ = null;
          /**
           * @private
           * @type {?import("../events.js").EventsKey}
           */
          _this.mapRenderKey_ = null;
          /**
           * @private
           * @type {?import("../events.js").EventsKey}
           */
          _this.sourceChangeKey_ = null;
          /**
           * @private
           * @type {import("../renderer/Layer.js").default}
           */
          _this.renderer_ = null;
          // Overwrite default render method with a custom one
          if (options.render) {
              _this.render = options.render;
          }
          if (options.map) {
              _this.setMap(options.map);
          }
          _this.addEventListener(getChangeEventType(LayerProperty.SOURCE), _this.handleSourcePropertyChange_);
          var source = options.source ? /** @type {SourceType} */ (options.source) : null;
          _this.setSource(source);
          return _this;
      }
      /**
       * @inheritDoc
       */
      Layer.prototype.getLayersArray = function (opt_array) {
          var array = opt_array ? opt_array : [];
          array.push(this);
          return array;
      };
      /**
       * @inheritDoc
       */
      Layer.prototype.getLayerStatesArray = function (opt_states) {
          var states = opt_states ? opt_states : [];
          states.push(this.getLayerState());
          return states;
      };
      /**
       * Get the layer source.
       * @return {SourceType} The layer source (or `null` if not yet set).
       * @observable
       * @api
       */
      Layer.prototype.getSource = function () {
          return /** @type {SourceType} */ (this.get(LayerProperty.SOURCE)) || null;
      };
      /**
        * @inheritDoc
        */
      Layer.prototype.getSourceState = function () {
          var source = this.getSource();
          return !source ? SourceState.UNDEFINED : source.getState();
      };
      /**
       * @private
       */
      Layer.prototype.handleSourceChange_ = function () {
          this.changed();
      };
      /**
       * @private
       */
      Layer.prototype.handleSourcePropertyChange_ = function () {
          if (this.sourceChangeKey_) {
              unlistenByKey(this.sourceChangeKey_);
              this.sourceChangeKey_ = null;
          }
          var source = this.getSource();
          if (source) {
              this.sourceChangeKey_ = listen(source, EventType.CHANGE, this.handleSourceChange_, this);
          }
          this.changed();
      };
      /**
       * @param {import("../pixel").Pixel} pixel Pixel.
       * @return {Promise<Array<import("../Feature").default>>} Promise that resolves with
       * an array of features.
       */
      Layer.prototype.getFeatures = function (pixel) {
          return this.renderer_.getFeatures(pixel);
      };
      /**
       * In charge to manage the rendering of the layer. One layer type is
       * bounded with one layer renderer.
       * @param {?import("../PluggableMap.js").FrameState} frameState Frame state.
       * @param {HTMLElement} target Target which the renderer may (but need not) use
       * for rendering its content.
       * @return {HTMLElement} The rendered element.
       */
      Layer.prototype.render = function (frameState, target) {
          var layerRenderer = this.getRenderer();
          if (layerRenderer.prepareFrame(frameState)) {
              return layerRenderer.renderFrame(frameState, target);
          }
      };
      /**
       * Sets the layer to be rendered on top of other layers on a map. The map will
       * not manage this layer in its layers collection, and the callback in
       * {@link module:ol/Map#forEachLayerAtPixel} will receive `null` as layer. This
       * is useful for temporary layers. To remove an unmanaged layer from the map,
       * use `#setMap(null)`.
       *
       * To add the layer to a map and have it managed by the map, use
       * {@link module:ol/Map#addLayer} instead.
       * @param {import("../PluggableMap.js").default} map Map.
       * @api
       */
      Layer.prototype.setMap = function (map) {
          if (this.mapPrecomposeKey_) {
              unlistenByKey(this.mapPrecomposeKey_);
              this.mapPrecomposeKey_ = null;
          }
          if (!map) {
              this.changed();
          }
          if (this.mapRenderKey_) {
              unlistenByKey(this.mapRenderKey_);
              this.mapRenderKey_ = null;
          }
          if (map) {
              this.mapPrecomposeKey_ = listen(map, RenderEventType.PRECOMPOSE, function (evt) {
                  var renderEvent = /** @type {import("../render/Event.js").default} */ (evt);
                  var layerStatesArray = renderEvent.frameState.layerStatesArray;
                  var layerState = this.getLayerState(false);
                  // A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both.
                  assert(!layerStatesArray.some(function (arrayLayerState) {
                      return arrayLayerState.layer === layerState.layer;
                  }), 67);
                  layerStatesArray.push(layerState);
              }, this);
              this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);
              this.changed();
          }
      };
      /**
       * Set the layer source.
       * @param {SourceType} source The layer source.
       * @observable
       * @api
       */
      Layer.prototype.setSource = function (source) {
          this.set(LayerProperty.SOURCE, source);
      };
      /**
       * Get the renderer for this layer.
       * @return {import("../renderer/Layer.js").default} The layer renderer.
       */
      Layer.prototype.getRenderer = function () {
          if (!this.renderer_) {
              this.renderer_ = this.createRenderer();
          }
          return this.renderer_;
      };
      /**
       * @return {boolean} The layer has a renderer.
       */
      Layer.prototype.hasRenderer = function () {
          return !!this.renderer_;
      };
      /**
       * Create a renderer for this layer.
       * @return {import("../renderer/Layer.js").default} A layer renderer.
       * @protected
       */
      Layer.prototype.createRenderer = function () {
          return null;
      };
      /**
       * @inheritDoc
       */
      Layer.prototype.disposeInternal = function () {
          this.setSource(null);
          _super.prototype.disposeInternal.call(this);
      };
      return Layer;
  }(BaseLayer));
  /**
   * Return `true` if the layer is visible and if the provided view state
   * has resolution and zoom levels that are in range of the layer's min/max.
   * @param {State} layerState Layer state.
   * @param {import("../View.js").State} viewState View state.
   * @return {boolean} The layer is visible at the given view state.
   */
  function inView(layerState, viewState) {
      if (!layerState.visible) {
          return false;
      }
      var resolution = viewState.resolution;
      if (resolution < layerState.minResolution || resolution >= layerState.maxResolution) {
          return false;
      }
      var zoom = viewState.zoom;
      return zoom > layerState.minZoom && zoom <= layerState.maxZoom;
  }

  var __extends$t =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-attribution'] CSS class name.
   * @property {HTMLElement|string} [target] Specify a target if you
   * want the control to be rendered outside of the map's
   * viewport.
   * @property {boolean} [collapsible] Specify if attributions can
   * be collapsed. If not specified, sources control this behavior with their
   * `attributionsCollapsible` setting.
   * @property {boolean} [collapsed=true] Specify if attributions should
   * be collapsed at startup.
   * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.
   * @property {string} [label='i'] Text label to use for the
   * collapsed attributions button.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string|HTMLElement} [collapseLabel='Â»'] Text label to use
   * for the expanded attributions button.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {function(import("../MapEvent.js").default)} [render] Function called when
   * the control should be re-rendered. This is called in a `requestAnimationFrame`
   * callback.
   */
  /**
   * @classdesc
   * Control to show all the attributions associated with the layer sources
   * in the map. This control is one of the default controls included in maps.
   * By default it will show in the bottom right portion of the map, but this can
   * be changed by using a css selector for `.ol-attribution`.
   *
   * @api
   */
  var Attribution = /** @class */ (function (_super) {
      __extends$t(Attribution, _super);
      /**
       * @param {Options=} opt_options Attribution options.
       */
      function Attribution(opt_options) {
          var _this = this;
          var options = opt_options ? opt_options : {};
          _this = _super.call(this, {
              element: document.createElement('div'),
              render: options.render || render,
              target: options.target
          }) || this;
          /**
           * @private
           * @type {HTMLElement}
           */
          _this.ulElement_ = document.createElement('ul');
          /**
           * @private
           * @type {boolean}
           */
          _this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;
          /**
           * @private
           * @type {boolean}
           */
          _this.overrideCollapsible_ = options.collapsible !== undefined;
          /**
           * @private
           * @type {boolean}
           */
          _this.collapsible_ = options.collapsible !== undefined ?
              options.collapsible : true;
          if (!_this.collapsible_) {
              _this.collapsed_ = false;
          }
          var className = options.className !== undefined ? options.className : 'ol-attribution';
          var tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Attributions';
          var collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\u00BB';
          if (typeof collapseLabel === 'string') {
              /**
               * @private
               * @type {HTMLElement}
               */
              _this.collapseLabel_ = document.createElement('span');
              _this.collapseLabel_.textContent = collapseLabel;
          }
          else {
              _this.collapseLabel_ = collapseLabel;
          }
          var label = options.label !== undefined ? options.label : 'i';
          if (typeof label === 'string') {
              /**
               * @private
               * @type {HTMLElement}
               */
              _this.label_ = document.createElement('span');
              _this.label_.textContent = label;
          }
          else {
              _this.label_ = label;
          }
          var activeLabel = (_this.collapsible_ && !_this.collapsed_) ?
              _this.collapseLabel_ : _this.label_;
          var button = document.createElement('button');
          button.setAttribute('type', 'button');
          button.title = tipLabel;
          button.appendChild(activeLabel);
          button.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);
          var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL +
              (_this.collapsed_ && _this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +
              (_this.collapsible_ ? '' : ' ol-uncollapsible');
          var element = _this.element;
          element.className = cssClasses;
          element.appendChild(_this.ulElement_);
          element.appendChild(button);
          /**
           * A list of currently rendered resolutions.
           * @type {Array<string>}
           * @private
           */
          _this.renderedAttributions_ = [];
          /**
           * @private
           * @type {boolean}
           */
          _this.renderedVisible_ = true;
          return _this;
      }
      /**
       * Collect a list of visible attributions and set the collapsible state.
       * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
       * @return {Array<string>} Attributions.
       * @private
       */
      Attribution.prototype.collectSourceAttributions_ = function (frameState) {
          /**
           * Used to determine if an attribution already exists.
           * @type {!Object<string, boolean>}
           */
          var lookup = {};
          /**
           * A list of visible attributions.
           * @type {Array<string>}
           */
          var visibleAttributions = [];
          var layerStatesArray = frameState.layerStatesArray;
          for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {
              var layerState = layerStatesArray[i];
              if (!inView(layerState, frameState.viewState)) {
                  continue;
              }
              var source = /** @type {import("../layer/Layer.js").default} */ (layerState.layer).getSource();
              if (!source) {
                  continue;
              }
              var attributionGetter = source.getAttributions();
              if (!attributionGetter) {
                  continue;
              }
              var attributions = attributionGetter(frameState);
              if (!attributions) {
                  continue;
              }
              if (!this.overrideCollapsible_ && source.getAttributionsCollapsible() === false) {
                  this.setCollapsible(false);
              }
              if (Array.isArray(attributions)) {
                  for (var j = 0, jj = attributions.length; j < jj; ++j) {
                      if (!(attributions[j] in lookup)) {
                          visibleAttributions.push(attributions[j]);
                          lookup[attributions[j]] = true;
                      }
                  }
              }
              else {
                  if (!(attributions in lookup)) {
                      visibleAttributions.push(attributions);
                      lookup[attributions] = true;
                  }
              }
          }
          return visibleAttributions;
      };
      /**
       * @private
       * @param {?import("../PluggableMap.js").FrameState} frameState Frame state.
       */
      Attribution.prototype.updateElement_ = function (frameState) {
          if (!frameState) {
              if (this.renderedVisible_) {
                  this.element.style.display = 'none';
                  this.renderedVisible_ = false;
              }
              return;
          }
          var attributions = this.collectSourceAttributions_(frameState);
          var visible = attributions.length > 0;
          if (this.renderedVisible_ != visible) {
              this.element.style.display = visible ? '' : 'none';
              this.renderedVisible_ = visible;
          }
          if (equals$1(attributions, this.renderedAttributions_)) {
              return;
          }
          removeChildren(this.ulElement_);
          // append the attributions
          for (var i = 0, ii = attributions.length; i < ii; ++i) {
              var element = document.createElement('li');
              element.innerHTML = attributions[i];
              this.ulElement_.appendChild(element);
          }
          this.renderedAttributions_ = attributions;
      };
      /**
       * @param {MouseEvent} event The event to handle
       * @private
       */
      Attribution.prototype.handleClick_ = function (event) {
          event.preventDefault();
          this.handleToggle_();
      };
      /**
       * @private
       */
      Attribution.prototype.handleToggle_ = function () {
          this.element.classList.toggle(CLASS_COLLAPSED);
          if (this.collapsed_) {
              replaceNode(this.collapseLabel_, this.label_);
          }
          else {
              replaceNode(this.label_, this.collapseLabel_);
          }
          this.collapsed_ = !this.collapsed_;
      };
      /**
       * Return `true` if the attribution is collapsible, `false` otherwise.
       * @return {boolean} True if the widget is collapsible.
       * @api
       */
      Attribution.prototype.getCollapsible = function () {
          return this.collapsible_;
      };
      /**
       * Set whether the attribution should be collapsible.
       * @param {boolean} collapsible True if the widget is collapsible.
       * @api
       */
      Attribution.prototype.setCollapsible = function (collapsible) {
          if (this.collapsible_ === collapsible) {
              return;
          }
          this.collapsible_ = collapsible;
          this.element.classList.toggle('ol-uncollapsible');
          if (!collapsible && this.collapsed_) {
              this.handleToggle_();
          }
      };
      /**
       * Collapse or expand the attribution according to the passed parameter. Will
       * not do anything if the attribution isn't collapsible or if the current
       * collapsed state is already the one requested.
       * @param {boolean} collapsed True if the widget is collapsed.
       * @api
       */
      Attribution.prototype.setCollapsed = function (collapsed) {
          if (!this.collapsible_ || this.collapsed_ === collapsed) {
              return;
          }
          this.handleToggle_();
      };
      /**
       * Return `true` when the attribution is currently collapsed or `false`
       * otherwise.
       * @return {boolean} True if the widget is collapsed.
       * @api
       */
      Attribution.prototype.getCollapsed = function () {
          return this.collapsed_;
      };
      return Attribution;
  }(Control));
  /**
   * Update the attribution element.
   * @param {import("../MapEvent.js").default} mapEvent Map event.
   * @this {Attribution}
   */
  function render(mapEvent) {
      this.updateElement_(mapEvent.frameState);
  }

  var __extends$u =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-rotate'] CSS class name.
   * @property {string|HTMLElement} [label='â§'] Text label to use for the rotate button.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string} [tipLabel='Reset rotation'] Text label to use for the rotate tip.
   * @property {number} [duration=250] Animation duration in milliseconds.
   * @property {boolean} [autoHide=true] Hide the control when rotation is 0.
   * @property {function(import("../MapEvent.js").default)} [render] Function called when the control should
   * be re-rendered. This is called in a `requestAnimationFrame` callback.
   * @property {function()} [resetNorth] Function called when the control is clicked.
   * This will override the default `resetNorth`.
   * @property {HTMLElement|string} [target] Specify a target if you want the control to be
   * rendered outside of the map's viewport.
   */
  /**
   * @classdesc
   * A button control to reset rotation to 0.
   * To style this control use css selector `.ol-rotate`. A `.ol-hidden` css
   * selector is added to the button when the rotation is 0.
   *
   * @api
   */
  var Rotate = /** @class */ (function (_super) {
      __extends$u(Rotate, _super);
      /**
       * @param {Options=} opt_options Rotate options.
       */
      function Rotate(opt_options) {
          var _this = this;
          var options = opt_options ? opt_options : {};
          _this = _super.call(this, {
              element: document.createElement('div'),
              render: options.render || render$1,
              target: options.target
          }) || this;
          var className = options.className !== undefined ? options.className : 'ol-rotate';
          var label = options.label !== undefined ? options.label : '\u21E7';
          /**
           * @type {HTMLElement}
           * @private
           */
          _this.label_ = null;
          if (typeof label === 'string') {
              _this.label_ = document.createElement('span');
              _this.label_.className = 'ol-compass';
              _this.label_.textContent = label;
          }
          else {
              _this.label_ = label;
              _this.label_.classList.add('ol-compass');
          }
          var tipLabel = options.tipLabel ? options.tipLabel : 'Reset rotation';
          var button = document.createElement('button');
          button.className = className + '-reset';
          button.setAttribute('type', 'button');
          button.title = tipLabel;
          button.appendChild(_this.label_);
          button.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);
          var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;
          var element = _this.element;
          element.className = cssClasses;
          element.appendChild(button);
          _this.callResetNorth_ = options.resetNorth ? options.resetNorth : undefined;
          /**
           * @type {number}
           * @private
           */
          _this.duration_ = options.duration !== undefined ? options.duration : 250;
          /**
           * @type {boolean}
           * @private
           */
          _this.autoHide_ = options.autoHide !== undefined ? options.autoHide : true;
          /**
           * @private
           * @type {number|undefined}
           */
          _this.rotation_ = undefined;
          if (_this.autoHide_) {
              _this.element.classList.add(CLASS_HIDDEN);
          }
          return _this;
      }
      /**
       * @param {MouseEvent} event The event to handle
       * @private
       */
      Rotate.prototype.handleClick_ = function (event) {
          event.preventDefault();
          if (this.callResetNorth_ !== undefined) {
              this.callResetNorth_();
          }
          else {
              this.resetNorth_();
          }
      };
      /**
       * @private
       */
      Rotate.prototype.resetNorth_ = function () {
          var map = this.getMap();
          var view = map.getView();
          if (!view) {
              // the map does not have a view, so we can't act
              // upon it
              return;
          }
          var rotation = view.getRotation();
          if (rotation !== undefined) {
              if (this.duration_ > 0 && rotation % (2 * Math.PI) !== 0) {
                  view.animate({
                      rotation: 0,
                      duration: this.duration_,
                      easing: easeOut
                  });
              }
              else {
                  view.setRotation(0);
              }
          }
      };
      return Rotate;
  }(Control));
  /**
   * Update the rotate control element.
   * @param {import("../MapEvent.js").default} mapEvent Map event.
   * @this {Rotate}
   */
  function render$1(mapEvent) {
      var frameState = mapEvent.frameState;
      if (!frameState) {
          return;
      }
      var rotation = frameState.viewState.rotation;
      if (rotation != this.rotation_) {
          var transform = 'rotate(' + rotation + 'rad)';
          if (this.autoHide_) {
              var contains = this.element.classList.contains(CLASS_HIDDEN);
              if (!contains && rotation === 0) {
                  this.element.classList.add(CLASS_HIDDEN);
              }
              else if (contains && rotation !== 0) {
                  this.element.classList.remove(CLASS_HIDDEN);
              }
          }
          this.label_.style.transform = transform;
      }
      this.rotation_ = rotation;
  }

  var __extends$v =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {Object} Options
   * @property {number} [duration=250] Animation duration in milliseconds.
   * @property {string} [className='ol-zoom'] CSS class name.
   * @property {string|HTMLElement} [zoomInLabel='+'] Text label to use for the zoom-in
   * button. Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string|HTMLElement} [zoomOutLabel='-'] Text label to use for the zoom-out button.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string} [zoomInTipLabel='Zoom in'] Text label to use for the button tip.
   * @property {string} [zoomOutTipLabel='Zoom out'] Text label to use for the button tip.
   * @property {number} [delta=1] The zoom delta applied on each click.
   * @property {HTMLElement|string} [target] Specify a target if you want the control to be
   * rendered outside of the map's viewport.
   */
  /**
   * @classdesc
   * A control with 2 buttons, one for zoom in and one for zoom out.
   * This control is one of the default controls of a map. To style this control
   * use css selectors `.ol-zoom-in` and `.ol-zoom-out`.
   *
   * @api
   */
  var Zoom = /** @class */ (function (_super) {
      __extends$v(Zoom, _super);
      /**
       * @param {Options=} opt_options Zoom options.
       */
      function Zoom(opt_options) {
          var _this = this;
          var options = opt_options ? opt_options : {};
          _this = _super.call(this, {
              element: document.createElement('div'),
              target: options.target
          }) || this;
          var className = options.className !== undefined ? options.className : 'ol-zoom';
          var delta = options.delta !== undefined ? options.delta : 1;
          var zoomInLabel = options.zoomInLabel !== undefined ? options.zoomInLabel : '+';
          var zoomOutLabel = options.zoomOutLabel !== undefined ? options.zoomOutLabel : '\u2212';
          var zoomInTipLabel = options.zoomInTipLabel !== undefined ?
              options.zoomInTipLabel : 'Zoom in';
          var zoomOutTipLabel = options.zoomOutTipLabel !== undefined ?
              options.zoomOutTipLabel : 'Zoom out';
          var inElement = document.createElement('button');
          inElement.className = className + '-in';
          inElement.setAttribute('type', 'button');
          inElement.title = zoomInTipLabel;
          inElement.appendChild(typeof zoomInLabel === 'string' ? document.createTextNode(zoomInLabel) : zoomInLabel);
          inElement.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this, delta), false);
          var outElement = document.createElement('button');
          outElement.className = className + '-out';
          outElement.setAttribute('type', 'button');
          outElement.title = zoomOutTipLabel;
          outElement.appendChild(typeof zoomOutLabel === 'string' ? document.createTextNode(zoomOutLabel) : zoomOutLabel);
          outElement.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this, -delta), false);
          var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;
          var element = _this.element;
          element.className = cssClasses;
          element.appendChild(inElement);
          element.appendChild(outElement);
          /**
           * @type {number}
           * @private
           */
          _this.duration_ = options.duration !== undefined ? options.duration : 250;
          return _this;
      }
      /**
       * @param {number} delta Zoom delta.
       * @param {MouseEvent} event The event to handle
       * @private
       */
      Zoom.prototype.handleClick_ = function (delta, event) {
          event.preventDefault();
          this.zoomByDelta_(delta);
      };
      /**
       * @param {number} delta Zoom delta.
       * @private
       */
      Zoom.prototype.zoomByDelta_ = function (delta) {
          var map = this.getMap();
          var view = map.getView();
          if (!view) {
              // the map does not have a view, so we can't act
              // upon it
              return;
          }
          var currentZoom = view.getZoom();
          if (currentZoom !== undefined) {
              var newZoom = view.getConstrainedZoom(currentZoom + delta);
              if (this.duration_ > 0) {
                  if (view.getAnimating()) {
                      view.cancelAnimations();
                  }
                  view.animate({
                      zoom: newZoom,
                      duration: this.duration_,
                      easing: easeOut
                  });
              }
              else {
                  view.setZoom(newZoom);
              }
          }
      };
      return Zoom;
  }(Control));

  var __extends$w =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  var events = ['fullscreenchange', 'webkitfullscreenchange', 'MSFullscreenChange'];
  /**
   * @enum {string}
   */
  var FullScreenEventType = {
      /**
       * Triggered after the map entered fullscreen.
       * @event FullScreenEventType#enterfullscreen
       * @api
       */
      ENTERFULLSCREEN: 'enterfullscreen',
      /**
       * Triggered after the map leave fullscreen.
       * @event FullScreenEventType#leavefullscreen
       * @api
       */
      LEAVEFULLSCREEN: 'leavefullscreen'
  };
  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-full-screen'] CSS class name.
   * @property {string|Text} [label='\u2922'] Text label to use for the button.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string|Text} [labelActive='\u00d7'] Text label to use for the
   * button when full-screen is active.
   * Instead of text, also an element (e.g. a `span` element) can be used.
   * @property {string} [tipLabel='Toggle full-screen'] Text label to use for the button tip.
   * @property {boolean} [keys=false] Full keyboard access.
   * @property {HTMLElement|string} [target] Specify a target if you want the
   * control to be rendered outside of the map's viewport.
   * @property {HTMLElement|string} [source] The element to be displayed
   * fullscreen. When not provided, the element containing the map viewport will
   * be displayed fullscreen.
   */
  /**
   * @classdesc
   * Provides a button that when clicked fills up the full screen with the map.
   * The full screen source element is by default the element containing the map viewport unless
   * overridden by providing the `source` option. In which case, the dom
   * element introduced using this parameter will be displayed in full screen.
   *
   * When in full screen mode, a close button is shown to exit full screen mode.
   * The [Fullscreen API](http://www.w3.org/TR/fullscreen/) is used to
   * toggle the map in full screen mode.
   *
   * @fires FullScreenEventType#enterfullscreen
   * @fires FullScreenEventType#leavefullscreen
   * @api
   */
  var FullScreen = /** @class */ (function (_super) {
      __extends$w(FullScreen, _super);
      /**
       * @param {Options=} opt_options Options.
       */
      function FullScreen(opt_options) {
          var _this = this;
          var options = opt_options ? opt_options : {};
          _this = _super.call(this, {
              element: document.createElement('div'),
              target: options.target
          }) || this;
          /**
           * @private
           * @type {string}
           */
          _this.cssClassName_ = options.className !== undefined ? options.className :
              'ol-full-screen';
          var label = options.label !== undefined ? options.label : '\u2922';
          /**
           * @private
           * @type {Text}
           */
          _this.labelNode_ = typeof label === 'string' ?
              document.createTextNode(label) : label;
          var labelActive = options.labelActive !== undefined ? options.labelActive : '\u00d7';
          /**
           * @private
           * @type {Text}
           */
          _this.labelActiveNode_ = typeof labelActive === 'string' ?
              document.createTextNode(labelActive) : labelActive;
          /**
           * @private
           * @type {HTMLElement}
           */
          _this.button_ = document.createElement('button');
          var tipLabel = options.tipLabel ? options.tipLabel : 'Toggle full-screen';
          _this.setClassName_(_this.button_, isFullScreen());
          _this.button_.setAttribute('type', 'button');
          _this.button_.title = tipLabel;
          _this.button_.appendChild(_this.labelNode_);
          _this.button_.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);
          var cssClasses = _this.cssClassName_ + ' ' + CLASS_UNSELECTABLE +
              ' ' + CLASS_CONTROL + ' ' +
              (!isFullScreenSupported() ? CLASS_UNSUPPORTED : '');
          var element = _this.element;
          element.className = cssClasses;
          element.appendChild(_this.button_);
          /**
           * @private
           * @type {boolean}
           */
          _this.keys_ = options.keys !== undefined ? options.keys : false;
          /**
           * @private
           * @type {HTMLElement|string|undefined}
           */
          _this.source_ = options.source;
          return _this;
      }
      /**
       * @param {MouseEvent} event The event to handle
       * @private
       */
      FullScreen.prototype.handleClick_ = function (event) {
          event.preventDefault();
          this.handleFullScreen_();
      };
      /**
       * @private
       */
      FullScreen.prototype.handleFullScreen_ = function () {
          if (!isFullScreenSupported()) {
              return;
          }
          var map = this.getMap();
          if (!map) {
              return;
          }
          if (isFullScreen()) {
              exitFullScreen();
          }
          else {
              var element = void 0;
              if (this.source_) {
                  element = typeof this.source_ === 'string' ?
                      document.getElementById(this.source_) :
                      this.source_;
              }
              else {
                  element = map.getTargetElement();
              }
              if (this.keys_) {
                  requestFullScreenWithKeys(element);
              }
              else {
                  requestFullScreen(element);
              }
          }
      };
      /**
       * @private
       */
      FullScreen.prototype.handleFullScreenChange_ = function () {
          var map = this.getMap();
          if (isFullScreen()) {
              this.setClassName_(this.button_, true);
              replaceNode(this.labelActiveNode_, this.labelNode_);
              this.dispatchEvent(FullScreenEventType.ENTERFULLSCREEN);
          }
          else {
              this.setClassName_(this.button_, false);
              replaceNode(this.labelNode_, this.labelActiveNode_);
              this.dispatchEvent(FullScreenEventType.LEAVEFULLSCREEN);
          }
          if (map) {
              map.updateSize();
          }
      };
      /**
       * @param {HTMLElement} element Target element
       * @param {boolean} fullscreen True if fullscreen class name should be active
       * @private
       */
      FullScreen.prototype.setClassName_ = function (element, fullscreen) {
          var activeClassName = this.cssClassName_ + '-true';
          var inactiveClassName = this.cssClassName_ + '-false';
          var nextClassName = fullscreen ? activeClassName : inactiveClassName;
          element.classList.remove(activeClassName);
          element.classList.remove(inactiveClassName);
          element.classList.add(nextClassName);
      };
      /**
       * @inheritDoc
       * @api
       */
      FullScreen.prototype.setMap = function (map) {
          _super.prototype.setMap.call(this, map);
          if (map) {
              for (var i = 0, ii = events.length; i < ii; ++i) {
                  this.listenerKeys.push(listen(document, events[i], this.handleFullScreenChange_, this));
              }
          }
      };
      return FullScreen;
  }(Control));
  /**
   * @return {boolean} Fullscreen is supported by the current platform.
   */
  function isFullScreenSupported() {
      var body = document.body;
      return !!(body.webkitRequestFullscreen ||
          (body.msRequestFullscreen && document.msFullscreenEnabled) ||
          (body.requestFullscreen && document.fullscreenEnabled));
  }
  /**
   * @return {boolean} Element is currently in fullscreen.
   */
  function isFullScreen() {
      return !!(document.webkitIsFullScreen || document.msFullscreenElement || document.fullscreenElement);
  }
  /**
   * Request to fullscreen an element.
   * @param {HTMLElement} element Element to request fullscreen
   */
  function requestFullScreen(element) {
      if (element.requestFullscreen) {
          element.requestFullscreen();
      }
      else if (element.msRequestFullscreen) {
          element.msRequestFullscreen();
      }
      else if (element.webkitRequestFullscreen) {
          element.webkitRequestFullscreen();
      }
  }
  /**
   * Request to fullscreen an element with keyboard input.
   * @param {HTMLElement} element Element to request fullscreen
   */
  function requestFullScreenWithKeys(element) {
      if (element.webkitRequestFullscreen) {
          element.webkitRequestFullscreen();
      }
      else {
          requestFullScreen(element);
      }
  }
  /**
   * Exit fullscreen.
   */
  function exitFullScreen() {
      if (document.exitFullscreen) {
          document.exitFullscreen();
      }
      else if (document.msExitFullscreen) {
          document.msExitFullscreen();
      }
      else if (document.webkitExitFullscreen) {
          document.webkitExitFullscreen();
      }
  }

  /**
   * @module ol/render/Event
   */
  var __extends$x =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  var RenderEvent = /** @class */ (function (_super) {
      __extends$x(RenderEvent, _super);
      /**
       * @param {import("./EventType.js").default} type Type.
       * @param {import("../transform.js").Transform=} opt_inversePixelTransform Transform for
       *     CSS pixels to rendered pixels.
       * @param {import("../PluggableMap.js").FrameState=} opt_frameState Frame state.
       * @param {?CanvasRenderingContext2D=} opt_context Context.
       */
      function RenderEvent(type, opt_inversePixelTransform, opt_frameState, opt_context) {
          var _this = _super.call(this, type) || this;
          /**
           * Transform from CSS pixels (relative to the top-left corner of the map viewport)
           * to rendered pixels on this event's `context`.
           * @type {import("../transform.js").Transform|undefined}
           * @api
           */
          _this.inversePixelTransform = opt_inversePixelTransform;
          /**
           * An object representing the current render frame state.
           * @type {import("../PluggableMap.js").FrameState|undefined}
           * @api
           */
          _this.frameState = opt_frameState;
          /**
           * Canvas context. Not available when the event is dispatched by the map. Only available
           * when a Canvas renderer is used, null otherwise.
           * @type {CanvasRenderingContext2D|null|undefined}
           * @api
           */
          _this.context = opt_context;
          return _this;
      }
      return RenderEvent;
  }(BaseEvent));

  /**
   * @module ol/render/VectorContext
   */
  /**
   * @classdesc
   * Context for drawing geometries.  A vector context is available on render
   * events and does not need to be constructed directly.
   * @api
   */
  var VectorContext = /** @class */ (function () {
      function VectorContext() {
      }
      /**
       * Render a geometry with a custom renderer.
       *
       * @param {import("../geom/SimpleGeometry.js").default} geometry Geometry.
       * @param {import("../Feature.js").FeatureLike} feature Feature.
       * @param {Function} renderer Renderer.
       */
      VectorContext.prototype.drawCustom = function (geometry, feature, renderer) { };
      /**
       * Render a geometry.
       *
       * @param {import("../geom/Geometry.js").default} geometry The geometry to render.
       */
      VectorContext.prototype.drawGeometry = function (geometry) { };
      /**
       * Set the rendering style.
       *
       * @param {import("../style/Style.js").default} style The rendering style.
       */
      VectorContext.prototype.setStyle = function (style) { };
      /**
       * @param {import("../geom/Circle.js").default} circleGeometry Circle geometry.
       * @param {import("../Feature.js").default} feature Feature.
       */
      VectorContext.prototype.drawCircle = function (circleGeometry, feature) { };
      /**
       * @param {import("../Feature.js").default} feature Feature.
       * @param {import("../style/Style.js").default} style Style.
       */
      VectorContext.prototype.drawFeature = function (feature, style) { };
      /**
       * @param {import("../geom/GeometryCollection.js").default} geometryCollectionGeometry Geometry collection.
       * @param {import("../Feature.js").default} feature Feature.
       */
      VectorContext.prototype.drawGeometryCollection = function (geometryCollectionGeometry, feature) { };
      /**
       * @param {import("../geom/LineString.js").default|import("./Feature.js").default} lineStringGeometry Line string geometry.
       * @param {import("../Feature.js").FeatureLike} feature Feature.
       */
      VectorContext.prototype.drawLineString = function (lineStringGeometry, feature) { };
      /**
       * @param {import("../geom/MultiLineString.js").default|import("./Feature.js").default} multiLineStringGeometry MultiLineString geometry.
       * @param {import("../Feature.js").FeatureLike} feature Feature.
       */
      VectorContext.prototype.drawMultiLineString = function (multiLineStringGeometry, feature) { };
      /**
       * @param {import("../geom/MultiPoint.js").default|import("./Feature.js").default} multiPointGeometry MultiPoint geometry.
       * @param {import("../Feature.js").FeatureLike} feature Feature.
       */
      VectorContext.prototype.drawMultiPoint = function (multiPointGeometry, feature) { };
      /**
       * @param {import("../geom/MultiPolygon.js").default} multiPolygonGeometry MultiPolygon geometry.
       * @param {import("../Feature.js").FeatureLike} feature Feature.
       */
      VectorContext.prototype.drawMultiPolygon = function (multiPolygonGeometry, feature) { };
      /**
       * @param {import("../geom/Point.js").default|import("./Feature.js").default} pointGeometry Point geometry.
       * @param {import("../Feature.js").FeatureLike} feature Feature.
       */
      VectorContext.prototype.drawPoint = function (pointGeometry, feature) { };
      /**
       * @param {import("../geom/Polygon.js").default|import("./Feature.js").default} polygonGeometry Polygon geometry.
       * @param {import("../Feature.js").FeatureLike} feature Feature.
       */
      VectorContext.prototype.drawPolygon = function (polygonGeometry, feature) { };
      /**
       * @param {import("../geom/Geometry.js").default|import("./Feature.js").default} geometry Geometry.
       * @param {import("../Feature.js").FeatureLike} feature Feature.
       */
      VectorContext.prototype.drawText = function (geometry, feature) { };
      /**
       * @param {import("../style/Fill.js").default} fillStyle Fill style.
       * @param {import("../style/Stroke.js").default} strokeStyle Stroke style.
       */
      VectorContext.prototype.setFillStrokeStyle = function (fillStyle, strokeStyle) { };
      /**
       * @param {import("../style/Image.js").default} imageStyle Image style.
       * @param {import("./canvas.js").DeclutterGroup=} opt_declutterGroup Declutter.
       */
      VectorContext.prototype.setImageStyle = function (imageStyle, opt_declutterGroup) { };
      /**
       * @param {import("../style/Text.js").default} textStyle Text style.
       * @param {import("./canvas.js").DeclutterGroups=} opt_declutterGroups Declutter.
       */
      VectorContext.prototype.setTextStyle = function (textStyle, opt_declutterGroups) { };
      return VectorContext;
  }());

  /**
   * @module ol/render/canvas/Immediate
   */
  // FIXME test, especially polygons with holes and multipolygons
  // FIXME need to handle large thick features (where pixel size matters)
  // FIXME add offset and end to ol/geom/flat/transform~transform2D?
  var __extends$y =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @classdesc
   * A concrete subclass of {@link module:ol/render/VectorContext} that implements
   * direct rendering of features and geometries to an HTML5 Canvas context.
   * Instances of this class are created internally by the library and
   * provided to application code as vectorContext member of the
   * {@link module:ol/render/Event~RenderEvent} object associated with postcompose, precompose and
   * render events emitted by layers and maps.
   */
  var CanvasImmediateRenderer = /** @class */ (function (_super) {
      __extends$y(CanvasImmediateRenderer, _super);
      /**
       * @param {CanvasRenderingContext2D} context Context.
       * @param {number} pixelRatio Pixel ratio.
       * @param {import("../../extent.js").Extent} extent Extent.
       * @param {import("../../transform.js").Transform} transform Transform.
       * @param {number} viewRotation View rotation.
       * @param {number=} opt_squaredTolerance Optional squared tolerance for simplification.
       * @param {import("../../proj.js").TransformFunction=} opt_userTransform Transform from user to view projection.
       */
      function CanvasImmediateRenderer(context, pixelRatio, extent, transform, viewRotation, opt_squaredTolerance, opt_userTransform) {
          var _this = _super.call(this) || this;
          /**
           * @private
           * @type {CanvasRenderingContext2D}
           */
          _this.context_ = context;
          /**
           * @private
           * @type {number}
           */
          _this.pixelRatio_ = pixelRatio;
          /**
           * @private
           * @type {import("../../extent.js").Extent}
           */
          _this.extent_ = extent;
          /**
           * @private
           * @type {import("../../transform.js").Transform}
           */
          _this.transform_ = transform;
          /**
           * @private
           * @type {number}
           */
          _this.viewRotation_ = viewRotation;
          /**
           * @private
           * @type {number}
           */
          _this.squaredTolerance_ = opt_squaredTolerance;
          /**
           * @private
           * @type {import("../../proj.js").TransformFunction}
           */
          _this.userTransform_ = opt_userTransform;
          /**
           * @private
           * @type {?import("../canvas.js").FillState}
           */
          _this.contextFillState_ = null;
          /**
           * @private
           * @type {?import("../canvas.js").StrokeState}
           */
          _this.contextStrokeState_ = null;
          /**
           * @private
           * @type {?import("../canvas.js").TextState}
           */
          _this.contextTextState_ = null;
          /**
           * @private
           * @type {?import("../canvas.js").FillState}
           */
          _this.fillState_ = null;
          /**
           * @private
           * @type {?import("../canvas.js").StrokeState}
           */
          _this.strokeState_ = null;
          /**
           * @private
           * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}
           */
          _this.image_ = null;
          /**
           * @private
           * @type {number}
           */
          _this.imageAnchorX_ = 0;
          /**
           * @private
           * @type {number}
           */
          _this.imageAnchorY_ = 0;
          /**
           * @private
           * @type {number}
           */
          _this.imageHeight_ = 0;
          /**
           * @private
           * @type {number}
           */
          _this.imageOpacity_ = 0;
          /**
           * @private
           * @type {number}
           */
          _this.imageOriginX_ = 0;
          /**
           * @private
           * @type {number}
           */
          _this.imageOriginY_ = 0;
          /**
           * @private
           * @type {boolean}
           */
          _this.imageRotateWithView_ = false;
          /**
           * @private
           * @type {number}
           */
          _this.imageRotation_ = 0;
          /**
           * @private
           * @type {number}
           */
          _this.imageScale_ = 0;
          /**
           * @private
           * @type {number}
           */
          _this.imageWidth_ = 0;
          /**
           * @private
           * @type {string}
           */
          _this.text_ = '';
          /**
           * @private
           * @type {number}
           */
          _this.textOffsetX_ = 0;
          /**
           * @private
           * @type {number}
           */
          _this.textOffsetY_ = 0;
          /**
           * @private
           * @type {boolean}
           */
          _this.textRotateWithView_ = false;
          /**
           * @private
           * @type {number}
           */
          _this.textRotation_ = 0;
          /**
           * @private
           * @type {number}
           */
          _this.textScale_ = 0;
          /**
           * @private
           * @type {?import("../canvas.js").FillState}
           */
          _this.textFillState_ = null;
          /**
           * @private
           * @type {?import("../canvas.js").StrokeState}
           */
          _this.textStrokeState_ = null;
          /**
           * @private
           * @type {?import("../canvas.js").TextState}
           */
          _this.textState_ = null;
          /**
           * @private
           * @type {Array<number>}
           */
          _this.pixelCoordinates_ = [];
          /**
           * @private
           * @type {import("../../transform.js").Transform}
           */
          _this.tmpLocalTransform_ = create();
          return _this;
      }
      /**
       * @param {Array<number>} flatCoordinates Flat coordinates.
       * @param {number} offset Offset.
       * @param {number} end End.
       * @param {number} stride Stride.
       * @private
       */
      CanvasImmediateRenderer.prototype.drawImages_ = function (flatCoordinates, offset, end, stride) {
          if (!this.image_) {
              return;
          }
          var pixelCoordinates = transform2D(flatCoordinates, offset, end, 2, this.transform_, this.pixelCoordinates_);
          var context = this.context_;
          var localTransform = this.tmpLocalTransform_;
          var alpha = context.globalAlpha;
          if (this.imageOpacity_ != 1) {
              context.globalAlpha = alpha * this.imageOpacity_;
          }
          var rotation = this.imageRotation_;
          if (this.imageRotateWithView_) {
              rotation += this.viewRotation_;
          }
          for (var i = 0, ii = pixelCoordinates.length; i < ii; i += 2) {
              var x = pixelCoordinates[i] - this.imageAnchorX_;
              var y = pixelCoordinates[i + 1] - this.imageAnchorY_;
              if (rotation !== 0 || this.imageScale_ != 1) {
                  var centerX = x + this.imageAnchorX_;
                  var centerY = y + this.imageAnchorY_;
                  compose(localTransform, centerX, centerY, this.imageScale_, this.imageScale_, rotation, -centerX, -centerY);
                  context.setTransform.apply(context, localTransform);
              }
              context.drawImage(this.image_, this.imageOriginX_, this.imageOriginY_, this.imageWidth_, this.imageHeight_, x, y, this.imageWidth_, this.imageHeight_);
          }
          if (rotation !== 0 || this.imageScale_ != 1) {
              context.setTransform(1, 0, 0, 1, 0, 0);
          }
          if (this.imageOpacity_ != 1) {
              context.globalAlpha = alpha;
          }
      };
      /**
       * @param {Array<number>} flatCoordinates Flat coordinates.
       * @param {number} offset Offset.
       * @param {number} end End.
       * @param {number} stride Stride.
       * @private
       */
      CanvasImmediateRenderer.prototype.drawText_ = function (flatCoordinates, offset, end, stride) {
          if (!this.textState_ || this.text_ === '') {
              return;
          }
          if (this.textFillState_) {
              this.setContextFillState_(this.textFillState_);
          }
          if (this.textStrokeState_) {
              this.setContextStrokeState_(this.textStrokeState_);
          }
          this.setContextTextState_(this.textState_);
          var pixelCoordinates = transform2D(flatCoordinates, offset, end, stride, this.transform_, this.pixelCoordinates_);
          var context = this.context_;
          var rotation = this.textRotation_;
          if (this.textRotateWithView_) {
              rotation += this.viewRotation_;
          }
          for (; offset < end; offset += stride) {
              var x = pixelCoordinates[offset] + this.textOffsetX_;
              var y = pixelCoordinates[offset + 1] + this.textOffsetY_;
              if (rotation !== 0 || this.textScale_ != 1) {
                  var localTransform = compose(this.tmpLocalTransform_, x, y, this.textScale_, this.textScale_, rotation, -x, -y);
                  context.setTransform.apply(context, localTransform);
              }
              if (this.textStrokeState_) {
                  context.strokeText(this.text_, x, y);
              }
              if (this.textFillState_) {
                  context.fillText(this.text_, x, y);
              }
          }
          if (rotation !== 0 || this.textScale_ != 1) {
              context.setTransform(1, 0, 0, 1, 0, 0);
          }
      };
      /**
       * @param {Array<number>} flatCoordinates Flat coordinates.
       * @param {number} offset Offset.
       * @param {number} end End.
       * @param {number} stride Stride.
       * @param {boolean} close Close.
       * @private
       * @return {number} end End.
       */
      CanvasImmediateRenderer.prototype.moveToLineTo_ = function (flatCoordinates, offset, end, stride, close) {
          var context = this.context_;
          var pixelCoordinates = transform2D(flatCoordinates, offset, end, stride, this.transform_, this.pixelCoordinates_);
          context.moveTo(pixelCoordinates[0], pixelCoordinates[1]);
          var length = pixelCoordinates.length;
          if (close) {
              length -= 2;
          }
          for (var i = 2; i < length; i += 2) {
              context.lineTo(pixelCoordinates[i], pixelCoordinates[i + 1]);
          }
          if (close) {
              context.closePath();
          }
          return end;
      };
      /**
       * @param {Array<number>} flatCoordinates Flat coordinates.
       * @param {number} offset Offset.
       * @param {Array<number>} ends Ends.
       * @param {number} stride Stride.
       * @private
       * @return {number} End.
       */
      CanvasImmediateRenderer.prototype.drawRings_ = function (flatCoordinates, offset, ends, stride) {
          for (var i = 0, ii = ends.length; i < ii; ++i) {
              offset = this.moveToLineTo_(flatCoordinates, offset, ends[i], stride, true);
          }
          return offset;
      };
      /**
       * Render a circle geometry into the canvas.  Rendering is immediate and uses
       * the current fill and stroke styles.
       *
       * @param {import("../../geom/Circle.js").default} geometry Circle geometry.
       * @override
       * @api
       */
      CanvasImmediateRenderer.prototype.drawCircle = function (geometry) {
          if (!intersects(this.extent_, geometry.getExtent())) {
              return;
          }
          if (this.fillState_ || this.strokeState_) {
              if (this.fillState_) {
                  this.setContextFillState_(this.fillState_);
              }
              if (this.strokeState_) {
                  this.setContextStrokeState_(this.strokeState_);
              }
              var pixelCoordinates = transformGeom2D(geometry, this.transform_, this.pixelCoordinates_);
              var dx = pixelCoordinates[2] - pixelCoordinates[0];
              var dy = pixelCoordinates[3] - pixelCoordinates[1];
              var radius = Math.sqrt(dx * dx + dy * dy);
              var context = this.context_;
              context.beginPath();
              context.arc(pixelCoordinates[0], pixelCoordinates[1], radius, 0, 2 * Math.PI);
              if (this.fillState_) {
                  context.fill();
              }
              if (this.strokeState_) {
                  context.stroke();
              }
          }
          if (this.text_ !== '') {
              this.drawText_(geometry.getCenter(), 0, 2, 2);
          }
      };
      /**
       * Set the rendering style.  Note that since this is an immediate rendering API,
       * any `zIndex` on the provided style will be ignored.
       *
       * @param {import("../../style/Style.js").default} style The rendering style.
       * @override
       * @api
       */
      CanvasImmediateRenderer.prototype.setStyle = function (style) {
          this.setFillStrokeStyle(style.getFill(), style.getStroke());
          this.setImageStyle(style.getImage());
          this.setTextStyle(style.getText());
      };
      /**
       * @param {import("../../transform.js").Transform} transform Transform.
       */
      CanvasImmediateRenderer.prototype.setTransform = function (transform) {
          this.transform_ = transform;
      };
      /**
       * Render a geometry into the canvas.  Call
       * {@link module:ol/render/canvas/Immediate#setStyle} first to set the rendering style.
       *
       * @param {import("../../geom/Geometry.js").default|import("../Feature.js").default} geometry The geometry to render.
       * @override
       * @api
       */
      CanvasImmediateRenderer.prototype.drawGeometry = function (geometry) {
          var type = geometry.getType();
          switch (type) {
              case GeometryType.POINT:
                  this.drawPoint(/** @type {import("../../geom/Point.js").default} */ (geometry));
                  break;
              case GeometryType.LINE_STRING:
                  this.drawLineString(/** @type {import("../../geom/LineString.js").default} */ (geometry));
                  break;
              case GeometryType.POLYGON:
                  this.drawPolygon(/** @type {import("../../geom/Polygon.js").default} */ (geometry));
                  break;
              case GeometryType.MULTI_POINT:
                  this.drawMultiPoint(/** @type {import("../../geom/MultiPoint.js").default} */ (geometry));
                  break;
              case GeometryType.MULTI_LINE_STRING:
                  this.drawMultiLineString(/** @type {import("../../geom/MultiLineString.js").default} */ (geometry));
                  break;
              case GeometryType.MULTI_POLYGON:
                  this.drawMultiPolygon(/** @type {import("../../geom/MultiPolygon.js").default} */ (geometry));
                  break;
              case GeometryType.GEOMETRY_COLLECTION:
                  this.drawGeometryCollection(/** @type {import("../../geom/GeometryCollection.js").default} */ (geometry));
                  break;
              case GeometryType.CIRCLE:
                  this.drawCircle(/** @type {import("../../geom/Circle.js").default} */ (geometry));
                  break;
          }
      };
      /**
       * Render a feature into the canvas.  Note that any `zIndex` on the provided
       * style will be ignored - features are rendered immediately in the order that
       * this method is called.  If you need `zIndex` support, you should be using an
       * {@link module:ol/layer/Vector~VectorLayer} instead.
       *
       * @param {import("../../Feature.js").default} feature Feature.
       * @param {import("../../style/Style.js").default} style Style.
       * @override
       * @api
       */
      CanvasImmediateRenderer.prototype.drawFeature = function (feature, style) {
          var geometry = style.getGeometryFunction()(feature);
          if (!geometry || !intersects(this.extent_, geometry.getExtent())) {
              return;
          }
          this.setStyle(style);
          this.drawGeometry(geometry);
      };
      /**
       * Render a GeometryCollection to the canvas.  Rendering is immediate and
       * uses the current styles appropriate for each geometry in the collection.
       *
       * @param {import("../../geom/GeometryCollection.js").default} geometry Geometry collection.
       * @override
       */
      CanvasImmediateRenderer.prototype.drawGeometryCollection = function (geometry) {
          var geometries = geometry.getGeometriesArray();
          for (var i = 0, ii = geometries.length; i < ii; ++i) {
              this.drawGeometry(geometries[i]);
          }
      };
      /**
       * Render a Point geometry into the canvas.  Rendering is immediate and uses
       * the current style.
       *
       * @param {import("../../geom/Point.js").default|import("../Feature.js").default} geometry Point geometry.
       * @override
       */
      CanvasImmediateRenderer.prototype.drawPoint = function (geometry) {
          if (this.squaredTolerance_) {
              geometry = /** @type {import("../../geom/Point.js").default} */ (geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_));
          }
          var flatCoordinates = geometry.getFlatCoordinates();
          var stride = geometry.getStride();
          if (this.image_) {
              this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);
          }
          if (this.text_ !== '') {
              this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);
          }
      };
      /**
       * Render a MultiPoint geometry  into the canvas.  Rendering is immediate and
       * uses the current style.
       *
       * @param {import("../../geom/MultiPoint.js").default|import("../Feature.js").default} geometry MultiPoint geometry.
       * @override
       */
      CanvasImmediateRenderer.prototype.drawMultiPoint = function (geometry) {
          if (this.squaredTolerance_) {
              geometry = /** @type {import("../../geom/MultiPoint.js").default} */ (geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_));
          }
          var flatCoordinates = geometry.getFlatCoordinates();
          var stride = geometry.getStride();
          if (this.image_) {
              this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);
          }
          if (this.text_ !== '') {
              this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);
          }
      };
      /**
       * Render a LineString into the canvas.  Rendering is immediate and uses
       * the current style.
       *
       * @param {import("../../geom/LineString.js").default|import("../Feature.js").default} geometry LineString geometry.
       * @override
       */
      CanvasImmediateRenderer.prototype.drawLineString = function (geometry) {
          if (this.squaredTolerance_) {
              geometry = /** @type {import("../../geom/LineString.js").default} */ (geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_));
          }
          if (!intersects(this.extent_, geometry.getExtent())) {
              return;
          }
          if (this.strokeState_) {
              this.setContextStrokeState_(this.strokeState_);
              var context = this.context_;
              var flatCoordinates = geometry.getFlatCoordinates();
              context.beginPath();
              this.moveToLineTo_(flatCoordinates, 0, flatCoordinates.length, geometry.getStride(), false);
              context.stroke();
          }
          if (this.text_ !== '') {
              var flatMidpoint = geometry.getFlatMidpoint();
              this.drawText_(flatMidpoint, 0, 2, 2);
          }
      };
      /**
       * Render a MultiLineString geometry into the canvas.  Rendering is immediate
       * and uses the current style.
       *
       * @param {import("../../geom/MultiLineString.js").default|import("../Feature.js").default} geometry MultiLineString geometry.
       * @override
       */
      CanvasImmediateRenderer.prototype.drawMultiLineString = function (geometry) {
          if (this.squaredTolerance_) {
              geometry = /** @type {import("../../geom/MultiLineString.js").default} */ (geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_));
          }
          var geometryExtent = geometry.getExtent();
          if (!intersects(this.extent_, geometryExtent)) {
              return;
          }
          if (this.strokeState_) {
              this.setContextStrokeState_(this.strokeState_);
              var context = this.context_;
              var flatCoordinates = geometry.getFlatCoordinates();
              var offset = 0;
              var ends = /** @type {Array<number>} */ (geometry.getEnds());
              var stride = geometry.getStride();
              context.beginPath();
              for (var i = 0, ii = ends.length; i < ii; ++i) {
                  offset = this.moveToLineTo_(flatCoordinates, offset, ends[i], stride, false);
              }
              context.stroke();
          }
          if (this.text_ !== '') {
              var flatMidpoints = geometry.getFlatMidpoints();
              this.drawText_(flatMidpoints, 0, flatMidpoints.length, 2);
          }
      };
      /**
       * Render a Polygon geometry into the canvas.  Rendering is immediate and uses
       * the current style.
       *
       * @param {import("../../geom/Polygon.js").default|import("../Feature.js").default} geometry Polygon geometry.
       * @override
       */
      CanvasImmediateRenderer.prototype.drawPolygon = function (geometry) {
          if (this.squaredTolerance_) {
              geometry = /** @type {import("../../geom/Polygon.js").default} */ (geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_));
          }
          if (!intersects(this.extent_, geometry.getExtent())) {
              return;
          }
          if (this.strokeState_ || this.fillState_) {
              if (this.fillState_) {
                  this.setContextFillState_(this.fillState_);
              }
              if (this.strokeState_) {
                  this.setContextStrokeState_(this.strokeState_);
              }
              var context = this.context_;
              context.beginPath();
              this.drawRings_(geometry.getOrientedFlatCoordinates(), 0, /** @type {Array<number>} */ (geometry.getEnds()), geometry.getStride());
              if (this.fillState_) {
                  context.fill();
              }
              if (this.strokeState_) {
                  context.stroke();
              }
          }
          if (this.text_ !== '') {
              var flatInteriorPoint = geometry.getFlatInteriorPoint();
              this.drawText_(flatInteriorPoint, 0, 2, 2);
          }
      };
      /**
       * Render MultiPolygon geometry into the canvas.  Rendering is immediate and
       * uses the current style.
       * @param {import("../../geom/MultiPolygon.js").default} geometry MultiPolygon geometry.
       * @override
       */
      CanvasImmediateRenderer.prototype.drawMultiPolygon = function (geometry) {
          if (this.squaredTolerance_) {
              geometry = /** @type {import("../../geom/MultiPolygon.js").default} */ (geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_));
          }
          if (!intersects(this.extent_, geometry.getExtent())) {
              return;
          }
          if (this.strokeState_ || this.fillState_) {
              if (this.fillState_) {
                  this.setContextFillState_(this.fillState_);
              }
              if (this.strokeState_) {
                  this.setContextStrokeState_(this.strokeState_);
              }
              var context = this.context_;
              var flatCoordinates = geometry.getOrientedFlatCoordinates();
              var offset = 0;
              var endss = geometry.getEndss();
              var stride = geometry.getStride();
              context.beginPath();
              for (var i = 0, ii = endss.length; i < ii; ++i) {
                  var ends = endss[i];
                  offset = this.drawRings_(flatCoordinates, offset, ends, stride);
              }
              if (this.fillState_) {
                  context.fill();
              }
              if (this.strokeState_) {
                  context.stroke();
              }
          }
          if (this.text_ !== '') {
              var flatInteriorPoints = geometry.getFlatInteriorPoints();
              this.drawText_(flatInteriorPoints, 0, flatInteriorPoints.length, 2);
          }
      };
      /**
       * @param {import("../canvas.js").FillState} fillState Fill state.
       * @private
       */
      CanvasImmediateRenderer.prototype.setContextFillState_ = function (fillState) {
          var context = this.context_;
          var contextFillState = this.contextFillState_;
          if (!contextFillState) {
              context.fillStyle = fillState.fillStyle;
              this.contextFillState_ = {
                  fillStyle: fillState.fillStyle
              };
          }
          else {
              if (contextFillState.fillStyle != fillState.fillStyle) {
                  contextFillState.fillStyle = fillState.fillStyle;
                  context.fillStyle = fillState.fillStyle;
              }
          }
      };
      /**
       * @param {import("../canvas.js").StrokeState} strokeState Stroke state.
       * @private
       */
      CanvasImmediateRenderer.prototype.setContextStrokeState_ = function (strokeState) {
          var context = this.context_;
          var contextStrokeState = this.contextStrokeState_;
          if (!contextStrokeState) {
              context.lineCap = strokeState.lineCap;
              if (context.setLineDash) {
                  context.setLineDash(strokeState.lineDash);
                  context.lineDashOffset = strokeState.lineDashOffset;
              }
              context.lineJoin = strokeState.lineJoin;
              context.lineWidth = strokeState.lineWidth;
              context.miterLimit = strokeState.miterLimit;
              context.strokeStyle = strokeState.strokeStyle;
              this.contextStrokeState_ = {
                  lineCap: strokeState.lineCap,
                  lineDash: strokeState.lineDash,
                  lineDashOffset: strokeState.lineDashOffset,
                  lineJoin: strokeState.lineJoin,
                  lineWidth: strokeState.lineWidth,
                  miterLimit: strokeState.miterLimit,
                  strokeStyle: strokeState.strokeStyle
              };
          }
          else {
              if (contextStrokeState.lineCap != strokeState.lineCap) {
                  contextStrokeState.lineCap = strokeState.lineCap;
                  context.lineCap = strokeState.lineCap;
              }
              if (context.setLineDash) {
                  if (!equals$1(contextStrokeState.lineDash, strokeState.lineDash)) {
                      context.setLineDash(contextStrokeState.lineDash = strokeState.lineDash);
                  }
                  if (contextStrokeState.lineDashOffset != strokeState.lineDashOffset) {
                      contextStrokeState.lineDashOffset = strokeState.lineDashOffset;
                      context.lineDashOffset = strokeState.lineDashOffset;
                  }
              }
              if (contextStrokeState.lineJoin != strokeState.lineJoin) {
                  contextStrokeState.lineJoin = strokeState.lineJoin;
                  context.lineJoin = strokeState.lineJoin;
              }
              if (contextStrokeState.lineWidth != strokeState.lineWidth) {
                  contextStrokeState.lineWidth = strokeState.lineWidth;
                  context.lineWidth = strokeState.lineWidth;
              }
              if (contextStrokeState.miterLimit != strokeState.miterLimit) {
                  contextStrokeState.miterLimit = strokeState.miterLimit;
                  context.miterLimit = strokeState.miterLimit;
              }
              if (contextStrokeState.strokeStyle != strokeState.strokeStyle) {
                  contextStrokeState.strokeStyle = strokeState.strokeStyle;
                  context.strokeStyle = strokeState.strokeStyle;
              }
          }
      };
      /**
       * @param {import("../canvas.js").TextState} textState Text state.
       * @private
       */
      CanvasImmediateRenderer.prototype.setContextTextState_ = function (textState) {
          var context = this.context_;
          var contextTextState = this.contextTextState_;
          var textAlign = textState.textAlign ?
              textState.textAlign : defaultTextAlign;
          if (!contextTextState) {
              context.font = textState.font;
              context.textAlign = /** @type {CanvasTextAlign} */ (textAlign);
              context.textBaseline = /** @type {CanvasTextBaseline} */ (textState.textBaseline);
              this.contextTextState_ = {
                  font: textState.font,
                  textAlign: textAlign,
                  textBaseline: textState.textBaseline
              };
          }
          else {
              if (contextTextState.font != textState.font) {
                  contextTextState.font = textState.font;
                  context.font = textState.font;
              }
              if (contextTextState.textAlign != textAlign) {
                  contextTextState.textAlign = /** @type {CanvasTextAlign} */ (textAlign);
                  context.textAlign = /** @type {CanvasTextAlign} */ (textAlign);
              }
              if (contextTextState.textBaseline != textState.textBaseline) {
                  contextTextState.textBaseline = /** @type {CanvasTextBaseline} */ (textState.textBaseline);
                  context.textBaseline = /** @type {CanvasTextBaseline} */ (textState.textBaseline);
              }
          }
      };
      /**
       * Set the fill and stroke style for subsequent draw operations.  To clear
       * either fill or stroke styles, pass null for the appropriate parameter.
       *
       * @param {import("../../style/Fill.js").default} fillStyle Fill style.
       * @param {import("../../style/Stroke.js").default} strokeStyle Stroke style.
       * @override
       */
      CanvasImmediateRenderer.prototype.setFillStrokeStyle = function (fillStyle, strokeStyle) {
          if (!fillStyle) {
              this.fillState_ = null;
          }
          else {
              var fillStyleColor = fillStyle.getColor();
              this.fillState_ = {
                  fillStyle: asColorLike(fillStyleColor ?
                      fillStyleColor : defaultFillStyle)
              };
          }
          if (!strokeStyle) {
              this.strokeState_ = null;
          }
          else {
              var strokeStyleColor = strokeStyle.getColor();
              var strokeStyleLineCap = strokeStyle.getLineCap();
              var strokeStyleLineDash = strokeStyle.getLineDash();
              var strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();
              var strokeStyleLineJoin = strokeStyle.getLineJoin();
              var strokeStyleWidth = strokeStyle.getWidth();
              var strokeStyleMiterLimit = strokeStyle.getMiterLimit();
              this.strokeState_ = {
                  lineCap: strokeStyleLineCap !== undefined ?
                      strokeStyleLineCap : defaultLineCap,
                  lineDash: strokeStyleLineDash ?
                      strokeStyleLineDash : defaultLineDash,
                  lineDashOffset: strokeStyleLineDashOffset ?
                      strokeStyleLineDashOffset : defaultLineDashOffset,
                  lineJoin: strokeStyleLineJoin !== undefined ?
                      strokeStyleLineJoin : defaultLineJoin,
                  lineWidth: this.pixelRatio_ * (strokeStyleWidth !== undefined ?
                      strokeStyleWidth : defaultLineWidth),
                  miterLimit: strokeStyleMiterLimit !== undefined ?
                      strokeStyleMiterLimit : defaultMiterLimit,
                  strokeStyle: asColorLike(strokeStyleColor ?
                      strokeStyleColor : defaultStrokeStyle)
              };
          }
      };
      /**
       * Set the image style for subsequent draw operations.  Pass null to remove
       * the image style.
       *
       * @param {import("../../style/Image.js").default} imageStyle Image style.
       * @override
       */
      CanvasImmediateRenderer.prototype.setImageStyle = function (imageStyle) {
          if (!imageStyle) {
              this.image_ = null;
          }
          else {
              var imageAnchor = imageStyle.getAnchor();
              // FIXME pixel ratio
              var imageImage = imageStyle.getImage(1);
              var imageOrigin = imageStyle.getOrigin();
              var imageSize = imageStyle.getSize();
              this.imageAnchorX_ = imageAnchor[0];
              this.imageAnchorY_ = imageAnchor[1];
              this.imageHeight_ = imageSize[1];
              this.image_ = imageImage;
              this.imageOpacity_ = imageStyle.getOpacity();
              this.imageOriginX_ = imageOrigin[0];
              this.imageOriginY_ = imageOrigin[1];
              this.imageRotateWithView_ = imageStyle.getRotateWithView();
              this.imageRotation_ = imageStyle.getRotation();
              this.imageScale_ = imageStyle.getScale() * this.pixelRatio_;
              this.imageWidth_ = imageSize[0];
          }
      };
      /**
       * Set the text style for subsequent draw operations.  Pass null to
       * remove the text style.
       *
       * @param {import("../../style/Text.js").default} textStyle Text style.
       * @override
       */
      CanvasImmediateRenderer.prototype.setTextStyle = function (textStyle) {
          if (!textStyle) {
              this.text_ = '';
          }
          else {
              var textFillStyle = textStyle.getFill();
              if (!textFillStyle) {
                  this.textFillState_ = null;
              }
              else {
                  var textFillStyleColor = textFillStyle.getColor();
                  this.textFillState_ = {
                      fillStyle: asColorLike(textFillStyleColor ?
                          textFillStyleColor : defaultFillStyle)
                  };
              }
              var textStrokeStyle = textStyle.getStroke();
              if (!textStrokeStyle) {
                  this.textStrokeState_ = null;
              }
              else {
                  var textStrokeStyleColor = textStrokeStyle.getColor();
                  var textStrokeStyleLineCap = textStrokeStyle.getLineCap();
                  var textStrokeStyleLineDash = textStrokeStyle.getLineDash();
                  var textStrokeStyleLineDashOffset = textStrokeStyle.getLineDashOffset();
                  var textStrokeStyleLineJoin = textStrokeStyle.getLineJoin();
                  var textStrokeStyleWidth = textStrokeStyle.getWidth();
                  var textStrokeStyleMiterLimit = textStrokeStyle.getMiterLimit();
                  this.textStrokeState_ = {
                      lineCap: textStrokeStyleLineCap !== undefined ?
                          textStrokeStyleLineCap : defaultLineCap,
                      lineDash: textStrokeStyleLineDash ?
                          textStrokeStyleLineDash : defaultLineDash,
                      lineDashOffset: textStrokeStyleLineDashOffset ?
                          textStrokeStyleLineDashOffset : defaultLineDashOffset,
                      lineJoin: textStrokeStyleLineJoin !== undefined ?
                          textStrokeStyleLineJoin : defaultLineJoin,
                      lineWidth: textStrokeStyleWidth !== undefined ?
                          textStrokeStyleWidth : defaultLineWidth,
                      miterLimit: textStrokeStyleMiterLimit !== undefined ?
                          textStrokeStyleMiterLimit : defaultMiterLimit,
                      strokeStyle: asColorLike(textStrokeStyleColor ?
                          textStrokeStyleColor : defaultStrokeStyle)
                  };
              }
              var textFont = textStyle.getFont();
              var textOffsetX = textStyle.getOffsetX();
              var textOffsetY = textStyle.getOffsetY();
              var textRotateWithView = textStyle.getRotateWithView();
              var textRotation = textStyle.getRotation();
              var textScale = textStyle.getScale();
              var textText = textStyle.getText();
              var textTextAlign = textStyle.getTextAlign();
              var textTextBaseline = textStyle.getTextBaseline();
              this.textState_ = {
                  font: textFont !== undefined ?
                      textFont : defaultFont,
                  textAlign: textTextAlign !== undefined ?
                      textTextAlign : defaultTextAlign,
                  textBaseline: textTextBaseline !== undefined ?
                      textTextBaseline : defaultTextBaseline
              };
              this.text_ = textText !== undefined ? textText : '';
              this.textOffsetX_ =
                  textOffsetX !== undefined ? (this.pixelRatio_ * textOffsetX) : 0;
              this.textOffsetY_ =
                  textOffsetY !== undefined ? (this.pixelRatio_ * textOffsetY) : 0;
              this.textRotateWithView_ = textRotateWithView !== undefined ? textRotateWithView : false;
              this.textRotation_ = textRotation !== undefined ? textRotation : 0;
              this.textScale_ = this.pixelRatio_ * (textScale !== undefined ?
                  textScale : 1);
          }
      };
      return CanvasImmediateRenderer;
  }(VectorContext));

  /**
   * @module ol/render/canvas/BuilderType
   */
  /**
   * @enum {string}
   */
  var ReplayType = {
      CIRCLE: 'Circle',
      DEFAULT: 'Default',
      IMAGE: 'Image',
      LINE_STRING: 'LineString',
      POLYGON: 'Polygon',
      TEXT: 'Text'
  };

  /**
   * @module ol/renderer/vector
   */
  /**
   * Tolerance for geometry simplification in device pixels.
   * @type {number}
   */
  var SIMPLIFY_TOLERANCE = 0.5;
  /**
   * @const
   * @type {Object<import("../geom/GeometryType.js").default,
   *                function(import("../render/canvas/BuilderGroup.js").default, import("../geom/Geometry.js").default,
   *                         import("../style/Style.js").default, Object): void>}
   */
  var GEOMETRY_RENDERERS = {
      'Point': renderPointGeometry,
      'LineString': renderLineStringGeometry,
      'Polygon': renderPolygonGeometry,
      'MultiPoint': renderMultiPointGeometry,
      'MultiLineString': renderMultiLineStringGeometry,
      'MultiPolygon': renderMultiPolygonGeometry,
      'GeometryCollection': renderGeometryCollectionGeometry,
      'Circle': renderCircleGeometry
  };
  /**
   * @param {import("../Feature.js").FeatureLike} feature1 Feature 1.
   * @param {import("../Feature.js").FeatureLike} feature2 Feature 2.
   * @return {number} Order.
   */
  function defaultOrder(feature1, feature2) {
      return parseInt(getUid(feature1), 10) - parseInt(getUid(feature2), 10);
  }
  /**
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   * @return {number} Squared pixel tolerance.
   */
  function getSquaredTolerance(resolution, pixelRatio) {
      var tolerance = getTolerance(resolution, pixelRatio);
      return tolerance * tolerance;
  }
  /**
   * @param {number} resolution Resolution.
   * @param {number} pixelRatio Pixel ratio.
   * @return {number} Pixel tolerance.
   */
  function getTolerance(resolution, pixelRatio) {
      return SIMPLIFY_TOLERANCE * resolution / pixelRatio;
  }
  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Builder group.
   * @param {import("../geom/Circle.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").default} feature Feature.
   */
  function renderCircleGeometry(builderGroup, geometry, style, feature) {
      var fillStyle = style.getFill();
      var strokeStyle = style.getStroke();
      if (fillStyle || strokeStyle) {
          var circleReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.CIRCLE);
          circleReplay.setFillStrokeStyle(fillStyle, strokeStyle);
          circleReplay.drawCircle(geometry, feature);
      }
      var textStyle = style.getText();
      if (textStyle) {
          var textReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.TEXT);
          textReplay.setTextStyle(textStyle, builderGroup.addDeclutter(false));
          textReplay.drawText(geometry, feature);
      }
  }
  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {import("../style/Style.js").default} style Style.
   * @param {number} squaredTolerance Squared tolerance.
   * @param {function(import("../events/Event.js").default): void} listener Listener function.
   * @param {import("../proj.js").TransformFunction} [opt_transform] Transform from user to view projection.
   * @return {boolean} `true` if style is loading.
   * @template T
   */
  function renderFeature$1(replayGroup, feature, style, squaredTolerance, listener, opt_transform) {
      var loading = false;
      var imageStyle = style.getImage();
      if (imageStyle) {
          var imageState = imageStyle.getImageState();
          if (imageState == ImageState.LOADED || imageState == ImageState.ERROR) {
              imageStyle.unlistenImageChange(listener);
          }
          else {
              if (imageState == ImageState.IDLE) {
                  imageStyle.load();
              }
              imageState = imageStyle.getImageState();
              imageStyle.listenImageChange(listener);
              loading = true;
          }
      }
      renderFeatureInternal(replayGroup, feature, style, squaredTolerance, opt_transform);
      return loading;
  }
  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   * @param {import("../style/Style.js").default} style Style.
   * @param {number} squaredTolerance Squared tolerance.
   * @param {import("../proj.js").TransformFunction} [opt_transform] Optional transform function.
   */
  function renderFeatureInternal(replayGroup, feature, style, squaredTolerance, opt_transform) {
      var geometry = style.getGeometryFunction()(feature);
      if (!geometry) {
          return;
      }
      var simplifiedGeometry = geometry.simplifyTransformed(squaredTolerance, opt_transform);
      var renderer = style.getRenderer();
      if (renderer) {
          renderGeometry(replayGroup, simplifiedGeometry, style, feature);
      }
      else {
          var geometryRenderer = GEOMETRY_RENDERERS[simplifiedGeometry.getType()];
          geometryRenderer(replayGroup, simplifiedGeometry, style, feature);
      }
  }
  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
   * @param {import("../geom/Geometry.js").default|import("../render/Feature.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   */
  function renderGeometry(replayGroup, geometry, style, feature) {
      if (geometry.getType() == GeometryType.GEOMETRY_COLLECTION) {
          var geometries = /** @type {import("../geom/GeometryCollection.js").default} */ (geometry).getGeometries();
          for (var i = 0, ii = geometries.length; i < ii; ++i) {
              renderGeometry(replayGroup, geometries[i], style, feature);
          }
          return;
      }
      var replay = replayGroup.getBuilder(style.getZIndex(), ReplayType.DEFAULT);
      replay.drawCustom(/** @type {import("../geom/SimpleGeometry.js").default} */ (geometry), feature, style.getRenderer());
  }
  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
   * @param {import("../geom/GeometryCollection.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").default} feature Feature.
   */
  function renderGeometryCollectionGeometry(replayGroup, geometry, style, feature) {
      var geometries = geometry.getGeometriesArray();
      var i, ii;
      for (i = 0, ii = geometries.length; i < ii; ++i) {
          var geometryRenderer = GEOMETRY_RENDERERS[geometries[i].getType()];
          geometryRenderer(replayGroup, geometries[i], style, feature);
      }
  }
  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
   * @param {import("../geom/LineString.js").default|import("../render/Feature.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   */
  function renderLineStringGeometry(builderGroup, geometry, style, feature) {
      var strokeStyle = style.getStroke();
      if (strokeStyle) {
          var lineStringReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.LINE_STRING);
          lineStringReplay.setFillStrokeStyle(null, strokeStyle);
          lineStringReplay.drawLineString(geometry, feature);
      }
      var textStyle = style.getText();
      if (textStyle) {
          var textReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.TEXT);
          textReplay.setTextStyle(textStyle, builderGroup.addDeclutter(false));
          textReplay.drawText(geometry, feature);
      }
  }
  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
   * @param {import("../geom/MultiLineString.js").default|import("../render/Feature.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   */
  function renderMultiLineStringGeometry(builderGroup, geometry, style, feature) {
      var strokeStyle = style.getStroke();
      if (strokeStyle) {
          var lineStringReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.LINE_STRING);
          lineStringReplay.setFillStrokeStyle(null, strokeStyle);
          lineStringReplay.drawMultiLineString(geometry, feature);
      }
      var textStyle = style.getText();
      if (textStyle) {
          var textReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.TEXT);
          textReplay.setTextStyle(textStyle, builderGroup.addDeclutter(false));
          textReplay.drawText(geometry, feature);
      }
  }
  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
   * @param {import("../geom/MultiPolygon.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").default} feature Feature.
   */
  function renderMultiPolygonGeometry(builderGroup, geometry, style, feature) {
      var fillStyle = style.getFill();
      var strokeStyle = style.getStroke();
      if (strokeStyle || fillStyle) {
          var polygonReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.POLYGON);
          polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);
          polygonReplay.drawMultiPolygon(geometry, feature);
      }
      var textStyle = style.getText();
      if (textStyle) {
          var textReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.TEXT);
          textReplay.setTextStyle(textStyle, builderGroup.addDeclutter(false));
          textReplay.drawText(geometry, feature);
      }
  }
  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
   * @param {import("../geom/Point.js").default|import("../render/Feature.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   */
  function renderPointGeometry(builderGroup, geometry, style, feature) {
      var imageStyle = style.getImage();
      if (imageStyle) {
          if (imageStyle.getImageState() != ImageState.LOADED) {
              return;
          }
          var imageReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.IMAGE);
          imageReplay.setImageStyle(imageStyle, builderGroup.addDeclutter(false));
          imageReplay.drawPoint(geometry, feature);
      }
      var textStyle = style.getText();
      if (textStyle) {
          var textReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.TEXT);
          textReplay.setTextStyle(textStyle, builderGroup.addDeclutter(!!imageStyle));
          textReplay.drawText(geometry, feature);
      }
  }
  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
   * @param {import("../geom/MultiPoint.js").default|import("../render/Feature.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   */
  function renderMultiPointGeometry(builderGroup, geometry, style, feature) {
      var imageStyle = style.getImage();
      if (imageStyle) {
          if (imageStyle.getImageState() != ImageState.LOADED) {
              return;
          }
          var imageReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.IMAGE);
          imageReplay.setImageStyle(imageStyle, builderGroup.addDeclutter(false));
          imageReplay.drawMultiPoint(geometry, feature);
      }
      var textStyle = style.getText();
      if (textStyle) {
          var textReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.TEXT);
          textReplay.setTextStyle(textStyle, builderGroup.addDeclutter(!!imageStyle));
          textReplay.drawText(geometry, feature);
      }
  }
  /**
   * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
   * @param {import("../geom/Polygon.js").default|import("../render/Feature.js").default} geometry Geometry.
   * @param {import("../style/Style.js").default} style Style.
   * @param {import("../Feature.js").FeatureLike} feature Feature.
   */
  function renderPolygonGeometry(builderGroup, geometry, style, feature) {
      var fillStyle = style.getFill();
      var strokeStyle = style.getStroke();
      if (fillStyle || strokeStyle) {
          var polygonReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.POLYGON);
          polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);
          polygonReplay.drawPolygon(geometry, feature);
      }
      var textStyle = style.getText();
      if (textStyle) {
          var textReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.TEXT);
          textReplay.setTextStyle(textStyle, builderGroup.addDeclutter(false));
          textReplay.drawText(geometry, feature);
      }
  }

  /**
   * @module ol/render
   */
  /**
   * @param {import("./PluggableMap.js").FrameState} frameState Frame state.
   * @param {?} declutterTree Declutter tree.
   * @returns {?} Declutter tree.
   */
  function renderDeclutterItems(frameState, declutterTree) {
      if (declutterTree) {
          declutterTree.clear();
      }
      var items = frameState.declutterItems;
      for (var z = items.length - 1; z >= 0; --z) {
          var item = items[z];
          var zIndexItems = item.items;
          for (var i = 0, ii = zIndexItems.length; i < ii; i += 3) {
              declutterTree = zIndexItems[i].renderDeclutter(zIndexItems[i + 1], zIndexItems[i + 2], item.opacity, declutterTree);
          }
      }
      items.length = 0;
      return declutterTree;
  }

  var __extends$z =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @abstract
   */
  var MapRenderer = /** @class */ (function (_super) {
      __extends$z(MapRenderer, _super);
      /**
       * @param {import("../PluggableMap.js").default} map Map.
       */
      function MapRenderer(map) {
          var _this = _super.call(this) || this;
          /**
           * @private
           * @type {import("../PluggableMap.js").default}
           */
          _this.map_ = map;
          /**
           * @private
           */
          _this.declutterTree_ = null;
          return _this;
      }
      /**
       * @abstract
       * @param {import("../render/EventType.js").default} type Event type.
       * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
       */
      MapRenderer.prototype.dispatchRenderEvent = function (type, frameState) {
          abstract();
      };
      /**
       * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
       * @protected
       */
      MapRenderer.prototype.calculateMatrices2D = function (frameState) {
          var viewState = frameState.viewState;
          var coordinateToPixelTransform = frameState.coordinateToPixelTransform;
          var pixelToCoordinateTransform = frameState.pixelToCoordinateTransform;
          compose(coordinateToPixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / viewState.resolution, -1 / viewState.resolution, -viewState.rotation, -viewState.center[0], -viewState.center[1]);
          makeInverse(pixelToCoordinateTransform, coordinateToPixelTransform);
      };
      /**
       * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
       * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
       * @param {number} hitTolerance Hit tolerance in pixels.
       * @param {boolean} checkWrapped Check for wrapped geometries.
       * @param {function(this: S, import("../Feature.js").FeatureLike,
       *     import("../layer/Layer.js").default): T} callback Feature callback.
       * @param {S} thisArg Value to use as `this` when executing `callback`.
       * @param {function(this: U, import("../layer/Layer.js").default): boolean} layerFilter Layer filter
       *     function, only layers which are visible and for which this function
       *     returns `true` will be tested for features.  By default, all visible
       *     layers will be tested.
       * @param {U} thisArg2 Value to use as `this` when executing `layerFilter`.
       * @return {T|undefined} Callback result.
       * @template S,T,U
       */
      MapRenderer.prototype.forEachFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, checkWrapped, callback, thisArg, layerFilter, thisArg2) {
          var result;
          var viewState = frameState.viewState;
          /**
           * @param {boolean} managed Managed layer.
           * @param {import("../Feature.js").FeatureLike} feature Feature.
           * @param {import("../layer/Layer.js").default} layer Layer.
           * @return {?} Callback result.
           */
          function forEachFeatureAtCoordinate(managed, feature, layer) {
              return callback.call(thisArg, feature, managed ? layer : null);
          }
          var projection = viewState.projection;
          var translatedCoordinate = wrapX$2(coordinate.slice(), projection);
          var offsets = [[0, 0]];
          if (projection.canWrapX() && checkWrapped) {
              var projectionExtent = projection.getExtent();
              var worldWidth = getWidth(projectionExtent);
              offsets.push([-worldWidth, 0], [worldWidth, 0]);
          }
          var layerStates = frameState.layerStatesArray;
          var numLayers = layerStates.length;
          var declutteredFeatures;
          if (this.declutterTree_) {
              declutteredFeatures = this.declutterTree_.all().map(function (entry) {
                  return entry.value;
              });
          }
          var tmpCoord = [];
          for (var i = 0; i < offsets.length; i++) {
              for (var j = numLayers - 1; j >= 0; --j) {
                  var layerState = layerStates[j];
                  var layer = /** @type {import("../layer/Layer.js").default} */ (layerState.layer);
                  if (layer.hasRenderer() && inView(layerState, viewState) && layerFilter.call(thisArg2, layer)) {
                      var layerRenderer = layer.getRenderer();
                      var source = layer.getSource();
                      if (layerRenderer && source) {
                          var coordinates = source.getWrapX() ? translatedCoordinate : coordinate;
                          var callback_1 = forEachFeatureAtCoordinate.bind(null, layerState.managed);
                          tmpCoord[0] = coordinates[0] + offsets[i][0];
                          tmpCoord[1] = coordinates[1] + offsets[i][1];
                          result = layerRenderer.forEachFeatureAtCoordinate(tmpCoord, frameState, hitTolerance, callback_1, declutteredFeatures);
                      }
                      if (result) {
                          return result;
                      }
                  }
              }
          }
          return undefined;
      };
      /**
       * @abstract
       * @param {import("../pixel.js").Pixel} pixel Pixel.
       * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
       * @param {number} hitTolerance Hit tolerance in pixels.
       * @param {function(this: S, import("../layer/Layer.js").default, (Uint8ClampedArray|Uint8Array)): T} callback Layer
       *     callback.
       * @param {function(this: U, import("../layer/Layer.js").default): boolean} layerFilter Layer filter
       *     function, only layers which are visible and for which this function
       *     returns `true` will be tested for features.  By default, all visible
       *     layers will be tested.
       * @return {T|undefined} Callback result.
       * @template S,T,U
       */
      MapRenderer.prototype.forEachLayerAtPixel = function (pixel, frameState, hitTolerance, callback, layerFilter) {
          return abstract();
      };
      /**
       * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
       * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
       * @param {number} hitTolerance Hit tolerance in pixels.
       * @param {boolean} checkWrapped Check for wrapped geometries.
       * @param {function(this: U, import("../layer/Layer.js").default): boolean} layerFilter Layer filter
       *     function, only layers which are visible and for which this function
       *     returns `true` will be tested for features.  By default, all visible
       *     layers will be tested.
       * @param {U} thisArg Value to use as `this` when executing `layerFilter`.
       * @return {boolean} Is there a feature at the given coordinate?
       * @template U
       */
      MapRenderer.prototype.hasFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, checkWrapped, layerFilter, thisArg) {
          var hasFeature = this.forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, checkWrapped, TRUE, this, layerFilter, thisArg);
          return hasFeature !== undefined;
      };
      /**
       * @return {import("../PluggableMap.js").default} Map.
       */
      MapRenderer.prototype.getMap = function () {
          return this.map_;
      };
      /**
       * Render.
       * @param {?import("../PluggableMap.js").FrameState} frameState Frame state.
       */
      MapRenderer.prototype.renderFrame = function (frameState) {
          this.declutterTree_ = renderDeclutterItems(frameState, this.declutterTree_);
      };
      /**
       * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
       * @protected
       */
      MapRenderer.prototype.scheduleExpireIconCache = function (frameState) {
          if (shared$1.canExpireCache()) {
              frameState.postRenderFunctions.push(expireIconCache);
          }
      };
      return MapRenderer;
  }(Disposable));
  /**
   * @param {import("../PluggableMap.js").default} map Map.
   * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
   */
  function expireIconCache(map, frameState) {
      shared$1.expire();
  }

  var __extends$A =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @classdesc
   * Canvas map renderer.
   * @api
   */
  var CompositeMapRenderer = /** @class */ (function (_super) {
      __extends$A(CompositeMapRenderer, _super);
      /**
       * @param {import("../PluggableMap.js").default} map Map.
       */
      function CompositeMapRenderer(map) {
          var _this = _super.call(this, map) || this;
          /**
           * @type {import("../events.js").EventsKey}
           */
          _this.fontChangeListenerKey_ = listen(checkedFonts, ObjectEventType.PROPERTYCHANGE, map.redrawText.bind(map));
          /**
           * @private
           * @type {HTMLDivElement}
           */
          _this.element_ = document.createElement('div');
          var style = _this.element_.style;
          style.position = 'absolute';
          style.width = '100%';
          style.height = '100%';
          style.zIndex = '0';
          _this.element_.className = CLASS_UNSELECTABLE + ' ol-layers';
          var container = map.getViewport();
          container.insertBefore(_this.element_, container.firstChild || null);
          /**
           * @private
           * @type {Array<HTMLElement>}
           */
          _this.children_ = [];
          /**
           * @private
           * @type {boolean}
           */
          _this.renderedVisible_ = true;
          return _this;
      }
      /**
       * @param {import("../render/EventType.js").default} type Event type.
       * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
       */
      CompositeMapRenderer.prototype.dispatchRenderEvent = function (type, frameState) {
          var map = this.getMap();
          if (map.hasListener(type)) {
              var event_1 = new RenderEvent(type, undefined, frameState);
              map.dispatchEvent(event_1);
          }
      };
      CompositeMapRenderer.prototype.disposeInternal = function () {
          unlistenByKey(this.fontChangeListenerKey_);
          this.element_.parentNode.removeChild(this.element_);
          _super.prototype.disposeInternal.call(this);
      };
      /**
       * @inheritDoc
       */
      CompositeMapRenderer.prototype.renderFrame = function (frameState) {
          if (!frameState) {
              if (this.renderedVisible_) {
                  this.element_.style.display = 'none';
                  this.renderedVisible_ = false;
              }
              return;
          }
          this.calculateMatrices2D(frameState);
          this.dispatchRenderEvent(RenderEventType.PRECOMPOSE, frameState);
          var layerStatesArray = frameState.layerStatesArray.sort(function (a, b) {
              return a.zIndex - b.zIndex;
          });
          var viewState = frameState.viewState;
          this.children_.length = 0;
          var previousElement = null;
          for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {
              var layerState = layerStatesArray[i];
              frameState.layerIndex = i;
              if (!inView(layerState, viewState) ||
                  (layerState.sourceState != SourceState.READY && layerState.sourceState != SourceState.UNDEFINED)) {
                  continue;
              }
              var layer = layerState.layer;
              var element = layer.render(frameState, previousElement);
              if (!element) {
                  continue;
              }
              if (element !== previousElement) {
                  this.children_.push(element);
                  previousElement = element;
              }
          }
          _super.prototype.renderFrame.call(this, frameState);
          replaceChildren(this.element_, this.children_);
          this.dispatchRenderEvent(RenderEventType.POSTCOMPOSE, frameState);
          if (!this.renderedVisible_) {
              this.element_.style.display = '';
              this.renderedVisible_ = true;
          }
          this.scheduleExpireIconCache(frameState);
      };
      /**
       * @inheritDoc
       */
      CompositeMapRenderer.prototype.forEachLayerAtPixel = function (pixel, frameState, hitTolerance, callback, layerFilter) {
          var viewState = frameState.viewState;
          var layerStates = frameState.layerStatesArray;
          var numLayers = layerStates.length;
          for (var i = numLayers - 1; i >= 0; --i) {
              var layerState = layerStates[i];
              var layer = layerState.layer;
              if (layer.hasRenderer() && inView(layerState, viewState) && layerFilter(layer)) {
                  var layerRenderer = layer.getRenderer();
                  var data = layerRenderer.getDataAtPixel(pixel, frameState, hitTolerance);
                  if (data) {
                      var result = callback(layer, data);
                      if (result) {
                          return result;
                      }
                  }
              }
          }
          return undefined;
      };
      return CompositeMapRenderer;
  }(MapRenderer));

  /**
   * @module ol/control
   */
  /**
   * @typedef {Object} DefaultsOptions
   * @property {boolean} [attribution=true] Include
   * {@link module:ol/control/Attribution~Attribution}.
   * @property {import("./control/Attribution.js").Options} [attributionOptions]
   * Options for {@link module:ol/control/Attribution~Attribution}.
   * @property {boolean} [rotate=true] Include
   * {@link module:ol/control/Rotate~Rotate}.
   * @property {import("./control/Rotate.js").Options} [rotateOptions] Options
   * for {@link module:ol/control/Rotate~Rotate}.
   * @property {boolean} [zoom] Include {@link module:ol/control/Zoom~Zoom}.
   * @property {import("./control/Zoom.js").Options} [zoomOptions] Options for
   * {@link module:ol/control/Zoom~Zoom}.
   * @api
   */
  /**
   * Set of controls included in maps by default. Unless configured otherwise,
   * this returns a collection containing an instance of each of the following
   * controls:
   * * {@link module:ol/control/Zoom~Zoom}
   * * {@link module:ol/control/Rotate~Rotate}
   * * {@link module:ol/control/Attribution~Attribution}
   *
   * @param {DefaultsOptions=} opt_options
   * Defaults options.
   * @return {Collection<import("./control/Control.js").default>}
   * Controls.
   * @api
   */
  function defaults(opt_options) {
      var options = opt_options ? opt_options : {};
      var controls = new Collection$2();
      var zoomControl = options.zoom !== undefined ? options.zoom : true;
      if (zoomControl) {
          controls.push(new Zoom(options.zoomOptions));
      }
      var rotateControl = options.rotate !== undefined ? options.rotate : true;
      if (rotateControl) {
          controls.push(new Rotate(options.rotateOptions));
      }
      var attributionControl = options.attribution !== undefined ?
          options.attribution : true;
      if (attributionControl) {
          controls.push(new Attribution(options.attributionOptions));
      }
      return controls;
  }

  /**
   * @module ol/Kinetic
   */
  /**
   * @classdesc
   * Implementation of inertial deceleration for map movement.
   *
   * @api
   */
  var Kinetic = /** @class */ (function () {
      /**
       * @param {number} decay Rate of decay (must be negative).
       * @param {number} minVelocity Minimum velocity (pixels/millisecond).
       * @param {number} delay Delay to consider to calculate the kinetic
       *     initial values (milliseconds).
       */
      function Kinetic(decay, minVelocity, delay) {
          /**
           * @private
           * @type {number}
           */
          this.decay_ = decay;
          /**
           * @private
           * @type {number}
           */
          this.minVelocity_ = minVelocity;
          /**
           * @private
           * @type {number}
           */
          this.delay_ = delay;
          /**
           * @private
           * @type {Array<number>}
           */
          this.points_ = [];
          /**
           * @private
           * @type {number}
           */
          this.angle_ = 0;
          /**
           * @private
           * @type {number}
           */
          this.initialVelocity_ = 0;
      }
      /**
       * FIXME empty description for jsdoc
       */
      Kinetic.prototype.begin = function () {
          this.points_.length = 0;
          this.angle_ = 0;
          this.initialVelocity_ = 0;
      };
      /**
       * @param {number} x X.
       * @param {number} y Y.
       */
      Kinetic.prototype.update = function (x, y) {
          this.points_.push(x, y, Date.now());
      };
      /**
       * @return {boolean} Whether we should do kinetic animation.
       */
      Kinetic.prototype.end = function () {
          if (this.points_.length < 6) {
              // at least 2 points are required (i.e. there must be at least 6 elements
              // in the array)
              return false;
          }
          var delay = Date.now() - this.delay_;
          var lastIndex = this.points_.length - 3;
          if (this.points_[lastIndex + 2] < delay) {
              // the last tracked point is too old, which means that the user stopped
              // panning before releasing the map
              return false;
          }
          // get the first point which still falls into the delay time
          var firstIndex = lastIndex - 3;
          while (firstIndex > 0 && this.points_[firstIndex + 2] > delay) {
              firstIndex -= 3;
          }
          var duration = this.points_[lastIndex + 2] - this.points_[firstIndex + 2];
          // we don't want a duration of 0 (divide by zero)
          // we also make sure the user panned for a duration of at least one frame
          // (1/60s) to compute sane displacement values
          if (duration < 1000 / 60) {
              return false;
          }
          var dx = this.points_[lastIndex] - this.points_[firstIndex];
          var dy = this.points_[lastIndex + 1] - this.points_[firstIndex + 1];
          this.angle_ = Math.atan2(dy, dx);
          this.initialVelocity_ = Math.sqrt(dx * dx + dy * dy) / duration;
          return this.initialVelocity_ > this.minVelocity_;
      };
      /**
       * @return {number} Total distance travelled (pixels).
       */
      Kinetic.prototype.getDistance = function () {
          return (this.minVelocity_ - this.initialVelocity_) / this.decay_;
      };
      /**
       * @return {number} Angle of the kinetic panning animation (radians).
       */
      Kinetic.prototype.getAngle = function () {
          return this.angle_;
      };
      return Kinetic;
  }());

  /**
   * @module ol/interaction/Property
   */
  /**
   * @enum {string}
   */
  var InteractionProperty = {
      ACTIVE: 'active'
  };

  var __extends$B =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * Object literal with config options for interactions.
   * @typedef {Object} InteractionOptions
   * @property {function(import("../MapBrowserEvent.js").default):boolean} handleEvent
   * Method called by the map to notify the interaction that a browser event was
   * dispatched to the map. If the function returns a falsy value, propagation of
   * the event to other interactions in the map's interactions chain will be
   * prevented (this includes functions with no explicit return). The interactions
   * are traversed in reverse order of the interactions collection of the map.
   */
  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * User actions that change the state of the map. Some are similar to controls,
   * but are not associated with a DOM element.
   * For example, {@link module:ol/interaction/KeyboardZoom~KeyboardZoom} is
   * functionally the same as {@link module:ol/control/Zoom~Zoom}, but triggered
   * by a keyboard event not a button element event.
   * Although interactions do not have a DOM element, some of them do render
   * vectors and so are visible on the screen.
   * @api
   */
  var Interaction = /** @class */ (function (_super) {
      __extends$B(Interaction, _super);
      /**
       * @param {InteractionOptions} options Options.
       */
      function Interaction(options) {
          var _this = _super.call(this) || this;
          if (options.handleEvent) {
              _this.handleEvent = options.handleEvent;
          }
          /**
           * @private
           * @type {import("../PluggableMap.js").default}
           */
          _this.map_ = null;
          _this.setActive(true);
          return _this;
      }
      /**
       * Return whether the interaction is currently active.
       * @return {boolean} `true` if the interaction is active, `false` otherwise.
       * @observable
       * @api
       */
      Interaction.prototype.getActive = function () {
          return /** @type {boolean} */ (this.get(InteractionProperty.ACTIVE));
      };
      /**
       * Get the map associated with this interaction.
       * @return {import("../PluggableMap.js").default} Map.
       * @api
       */
      Interaction.prototype.getMap = function () {
          return this.map_;
      };
      /**
       * Handles the {@link module:ol/MapBrowserEvent map browser event}.
       * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
       * @return {boolean} `false` to stop event propagation.
       * @api
       */
      Interaction.prototype.handleEvent = function (mapBrowserEvent) {
          return true;
      };
      /**
       * Activate or deactivate the interaction.
       * @param {boolean} active Active.
       * @observable
       * @api
       */
      Interaction.prototype.setActive = function (active) {
          this.set(InteractionProperty.ACTIVE, active);
      };
      /**
       * Remove the interaction from its current map and attach it to the new map.
       * Subclasses may set up event handlers to get notified about changes to
       * the map here.
       * @param {import("../PluggableMap.js").default} map Map.
       */
      Interaction.prototype.setMap = function (map) {
          this.map_ = map;
      };
      return Interaction;
  }(BaseObject));
  /**
   * @param {import("../View.js").default} view View.
   * @param {import("../coordinate.js").Coordinate} delta Delta.
   * @param {number=} opt_duration Duration.
   */
  function pan(view, delta, opt_duration) {
      var currentCenter = view.getCenterInternal();
      if (currentCenter) {
          var center = [currentCenter[0] + delta[0], currentCenter[1] + delta[1]];
          view.animateInternal({
              duration: opt_duration !== undefined ? opt_duration : 250,
              easing: linear,
              center: view.getConstrainedCenter(center)
          });
      }
  }
  /**
   * @param {import("../View.js").default} view View.
   * @param {number} delta Delta from previous zoom level.
   * @param {import("../coordinate.js").Coordinate=} opt_anchor Anchor coordinate in the user projection.
   * @param {number=} opt_duration Duration.
   */
  function zoomByDelta(view, delta, opt_anchor, opt_duration) {
      var currentZoom = view.getZoom();
      if (currentZoom === undefined) {
          return;
      }
      var newZoom = view.getConstrainedZoom(currentZoom + delta);
      var newResolution = view.getResolutionForZoom(newZoom);
      if (view.getAnimating()) {
          view.cancelAnimations();
      }
      view.animate({
          resolution: newResolution,
          anchor: opt_anchor,
          duration: opt_duration !== undefined ? opt_duration : 250,
          easing: easeOut
      });
  }

  var __extends$C =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {Object} Options
   * @property {number} [duration=250] Animation duration in milliseconds.
   * @property {number} [delta=1] The zoom delta applied on each double click.
   */
  /**
   * @classdesc
   * Allows the user to zoom by double-clicking on the map.
   * @api
   */
  var DoubleClickZoom = /** @class */ (function (_super) {
      __extends$C(DoubleClickZoom, _super);
      /**
       * @param {Options=} opt_options Options.
       */
      function DoubleClickZoom(opt_options) {
          var _this = _super.call(this, {
              handleEvent: handleEvent
          }) || this;
          var options = opt_options ? opt_options : {};
          /**
           * @private
           * @type {number}
           */
          _this.delta_ = options.delta ? options.delta : 1;
          /**
           * @private
           * @type {number}
           */
          _this.duration_ = options.duration !== undefined ? options.duration : 250;
          return _this;
      }
      return DoubleClickZoom;
  }(Interaction));
  /**
   * Handles the {@link module:ol/MapBrowserEvent map browser event} (if it was a
   * doubleclick) and eventually zooms the map.
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} `false` to stop event propagation.
   * @this {DoubleClickZoom}
   */
  function handleEvent(mapBrowserEvent) {
      var stopEvent = false;
      if (mapBrowserEvent.type == MapBrowserEventType.DBLCLICK) {
          var browserEvent = /** @type {MouseEvent} */ (mapBrowserEvent.originalEvent);
          var map = mapBrowserEvent.map;
          var anchor = mapBrowserEvent.coordinate;
          var delta = browserEvent.shiftKey ? -this.delta_ : this.delta_;
          var view = map.getView();
          zoomByDelta(view, delta, anchor, this.duration_);
          mapBrowserEvent.preventDefault();
          stopEvent = true;
      }
      return !stopEvent;
  }

  /**
   * @module ol/events/condition
   */
  /**
   * Return `true` if only the alt-key and shift-key is pressed, `false` otherwise
   * (e.g. when additionally the platform-modifier-key is pressed).
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if only the alt and shift keys are pressed.
   * @api
   */
  var altShiftKeysOnly = function (mapBrowserEvent) {
      var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);
      return (originalEvent.altKey &&
          !(originalEvent.metaKey || originalEvent.ctrlKey) &&
          originalEvent.shiftKey);
  };
  /**
   * Return `true` if the map has the focus. This condition requires a map target
   * element with a `tabindex` attribute, e.g. `<div id="map" tabindex="1">`.
   *
   * @param {import("../MapBrowserEvent.js").default} event Map browser event.
   * @return {boolean} The map has the focus.
   * @api
   */
  var focus = function (event) {
      return event.target.getTargetElement() === document.activeElement;
  };
  /**
   * Return always true.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True.
   * @api
   */
  var always = TRUE;
  /**
   * Return `true` if the event has an "action"-producing mouse button.
   *
   * By definition, this includes left-click on windows/linux, and left-click
   * without the ctrl key on Macs.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} The result.
   */
  var mouseActionButton = function (mapBrowserEvent) {
      var originalEvent = /** @type {MouseEvent} */ (mapBrowserEvent.originalEvent);
      return originalEvent.button == 0 &&
          !(WEBKIT && MAC && originalEvent.ctrlKey);
  };
  /**
   * Return `true` if no modifier key (alt-, shift- or platform-modifier-key) is
   * pressed.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True only if there no modifier keys are pressed.
   * @api
   */
  var noModifierKeys = function (mapBrowserEvent) {
      var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);
      return (!originalEvent.altKey &&
          !(originalEvent.metaKey || originalEvent.ctrlKey) &&
          !originalEvent.shiftKey);
  };
  /**
   * Return `true` if only the shift-key is pressed, `false` otherwise (e.g. when
   * additionally the alt-key is pressed).
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if only the shift key is pressed.
   * @api
   */
  var shiftKeyOnly = function (mapBrowserEvent) {
      var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);
      return (!originalEvent.altKey &&
          !(originalEvent.metaKey || originalEvent.ctrlKey) &&
          originalEvent.shiftKey);
  };
  /**
   * Return `true` if the target element is not editable, i.e. not a `<input>`-,
   * `<select>`- or `<textarea>`-element, `false` otherwise.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True only if the target element is not editable.
   * @api
   */
  var targetNotEditable = function (mapBrowserEvent) {
      var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);
      var tagName = /** @type {Element} */ (originalEvent.target).tagName;
      return tagName !== 'INPUT' && tagName !== 'SELECT' && tagName !== 'TEXTAREA';
  };
  /**
   * Return `true` if the event originates from a mouse device.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if the event originates from a mouse device.
   * @api
   */
  var mouseOnly = function (mapBrowserEvent) {
      var pointerEvent = /** @type {import("../MapBrowserPointerEvent").default} */ (mapBrowserEvent).pointerEvent;
      assert(pointerEvent !== undefined, 56); // mapBrowserEvent must originate from a pointer event
      // see http://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType
      return pointerEvent.pointerType == 'mouse';
  };
  /**
   * Return `true` if the event originates from a primary pointer in
   * contact with the surface or if the left mouse button is pressed.
   * See http://www.w3.org/TR/pointerevents/#button-states.
   *
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} True if the event originates from a primary pointer.
   * @api
   */
  var primaryAction = function (mapBrowserEvent) {
      var pointerEvent = /** @type {import("../MapBrowserPointerEvent").default} */ (mapBrowserEvent).pointerEvent;
      assert(pointerEvent !== undefined, 56); // mapBrowserEvent must originate from a pointer event
      return pointerEvent.isPrimary && pointerEvent.button === 0;
  };

  var __extends$D =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {Object} Options
   * @property {function(import("../MapBrowserPointerEvent.js").default):boolean} [handleDownEvent]
   * Function handling "down" events. If the function returns `true` then a drag
   * sequence is started.
   * @property {function(import("../MapBrowserPointerEvent.js").default)} [handleDragEvent]
   * Function handling "drag" events. This function is called on "move" events
   * during a drag sequence.
   * @property {function(import("../MapBrowserEvent.js").default):boolean} [handleEvent]
   * Method called by the map to notify the interaction that a browser event was
   * dispatched to the map. The function may return `false` to prevent the
   * propagation of the event to other interactions in the map's interactions
   * chain.
   * @property {function(import("../MapBrowserPointerEvent.js").default)} [handleMoveEvent]
   * Function handling "move" events. This function is called on "move" events.
   * This functions is also called during a drag sequence, so during a drag
   * sequence both the `handleDragEvent` function and this function are called.
   * If `handleDownEvent` is defined and it returns true this function will not
   * be called during a drag sequence.
   * @property {function(import("../MapBrowserPointerEvent.js").default):boolean} [handleUpEvent]
   *  Function handling "up" events. If the function returns `false` then the
   * current drag sequence is stopped.
   * @property {function(boolean):boolean} [stopDown]
   * Should the down event be propagated to other interactions, or should be
   * stopped?
   */
  /**
   * @classdesc
   * Base class that calls user-defined functions on `down`, `move` and `up`
   * events. This class also manages "drag sequences".
   *
   * When the `handleDownEvent` user function returns `true` a drag sequence is
   * started. During a drag sequence the `handleDragEvent` user function is
   * called on `move` events. The drag sequence ends when the `handleUpEvent`
   * user function is called and returns `false`.
   * @api
   */
  var PointerInteraction = /** @class */ (function (_super) {
      __extends$D(PointerInteraction, _super);
      /**
       * @param {Options=} opt_options Options.
       */
      function PointerInteraction(opt_options) {
          var _this = this;
          var options = opt_options ? opt_options : {};
          _this = _super.call(this, /** @type {import("./Interaction.js").InteractionOptions} */ (options)) || this;
          if (options.handleDownEvent) {
              _this.handleDownEvent = options.handleDownEvent;
          }
          if (options.handleDragEvent) {
              _this.handleDragEvent = options.handleDragEvent;
          }
          if (options.handleMoveEvent) {
              _this.handleMoveEvent = options.handleMoveEvent;
          }
          if (options.handleUpEvent) {
              _this.handleUpEvent = options.handleUpEvent;
          }
          if (options.stopDown) {
              _this.stopDown = options.stopDown;
          }
          /**
           * @type {boolean}
           * @protected
           */
          _this.handlingDownUpSequence = false;
          /**
           * @type {!Object<string, PointerEvent>}
           * @private
           */
          _this.trackedPointers_ = {};
          /**
           * @type {Array<PointerEvent>}
           * @protected
           */
          _this.targetPointers = [];
          return _this;
      }
      /**
       * Returns the current number of pointers involved in the interaction,
       * e.g. `2` when two fingers are used.
       * @return {number} The number of pointers.
       * @api
       */
      PointerInteraction.prototype.getPointerCount = function () {
          return this.targetPointers.length;
      };
      /**
       * Handle pointer down events.
       * @param {import("../MapBrowserPointerEvent.js").default} mapBrowserEvent Event.
       * @return {boolean} If the event was consumed.
       * @protected
       */
      PointerInteraction.prototype.handleDownEvent = function (mapBrowserEvent) {
          return false;
      };
      /**
       * Handle pointer drag events.
       * @param {import("../MapBrowserPointerEvent.js").default} mapBrowserEvent Event.
       * @protected
       */
      PointerInteraction.prototype.handleDragEvent = function (mapBrowserEvent) { };
      /**
       * Handles the {@link module:ol/MapBrowserEvent map browser event} and may call into
       * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are
       * detected.
       * @override
       * @api
       */
      PointerInteraction.prototype.handleEvent = function (mapBrowserEvent) {
          if (!( /** @type {import("../MapBrowserPointerEvent.js").default} */(mapBrowserEvent).pointerEvent)) {
              return true;
          }
          var stopEvent = false;
          this.updateTrackedPointers_(mapBrowserEvent);
          if (this.handlingDownUpSequence) {
              if (mapBrowserEvent.type == MapBrowserEventType.POINTERDRAG) {
                  this.handleDragEvent(mapBrowserEvent);
              }
              else if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {
                  var handledUp = this.handleUpEvent(mapBrowserEvent);
                  this.handlingDownUpSequence = handledUp && this.targetPointers.length > 0;
              }
          }
          else {
              if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {
                  var handled = this.handleDownEvent(mapBrowserEvent);
                  this.handlingDownUpSequence = handled;
                  stopEvent = this.stopDown(handled);
              }
              else if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE) {
                  this.handleMoveEvent(mapBrowserEvent);
              }
          }
          return !stopEvent;
      };
      /**
       * Handle pointer move events.
       * @param {import("../MapBrowserPointerEvent.js").default} mapBrowserEvent Event.
       * @protected
       */
      PointerInteraction.prototype.handleMoveEvent = function (mapBrowserEvent) { };
      /**
       * Handle pointer up events.
       * @param {import("../MapBrowserPointerEvent.js").default} mapBrowserEvent Event.
       * @return {boolean} If the event was consumed.
       * @protected
       */
      PointerInteraction.prototype.handleUpEvent = function (mapBrowserEvent) {
          return false;
      };
      /**
       * This function is used to determine if "down" events should be propagated
       * to other interactions or should be stopped.
       * @param {boolean} handled Was the event handled by the interaction?
       * @return {boolean} Should the `down` event be stopped?
       */
      PointerInteraction.prototype.stopDown = function (handled) {
          return handled;
      };
      /**
       * @param {import("../MapBrowserPointerEvent.js").default} mapBrowserEvent Event.
       * @private
       */
      PointerInteraction.prototype.updateTrackedPointers_ = function (mapBrowserEvent) {
          if (isPointerDraggingEvent(mapBrowserEvent)) {
              var event_1 = mapBrowserEvent.pointerEvent;
              var id = event_1.pointerId.toString();
              if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {
                  delete this.trackedPointers_[id];
              }
              else if (mapBrowserEvent.type ==
                  MapBrowserEventType.POINTERDOWN) {
                  this.trackedPointers_[id] = event_1;
              }
              else if (id in this.trackedPointers_) {
                  // update only when there was a pointerdown event for this pointer
                  this.trackedPointers_[id] = event_1;
              }
              this.targetPointers = getValues(this.trackedPointers_);
          }
      };
      return PointerInteraction;
  }(Interaction));
  /**
   * @param {Array<PointerEvent>} pointerEvents List of events.
   * @return {import("../pixel.js").Pixel} Centroid pixel.
   */
  function centroid(pointerEvents) {
      var length = pointerEvents.length;
      var clientX = 0;
      var clientY = 0;
      for (var i = 0; i < length; i++) {
          clientX += pointerEvents[i].clientX;
          clientY += pointerEvents[i].clientY;
      }
      return [clientX / length, clientY / length];
  }
  /**
   * @param {import("../MapBrowserPointerEvent.js").default} mapBrowserEvent Event.
   * @return {boolean} Whether the event is a pointerdown, pointerdrag
   *     or pointerup event.
   */
  function isPointerDraggingEvent(mapBrowserEvent) {
      var type = mapBrowserEvent.type;
      return type === MapBrowserEventType.POINTERDOWN ||
          type === MapBrowserEventType.POINTERDRAG ||
          type === MapBrowserEventType.POINTERUP;
  }

  var __extends$E =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
   * to indicate whether that event should be handled.
   * Default is {@link module:ol/events/condition~noModifierKeys} and {@link module:ol/events/condition~primaryAction}.
   * In addition, if there is a `tabindex` attribute on the map element,
   * {@link module:ol/events/condition~focus} will also be applied.
   * @property {import("../Kinetic.js").default} [kinetic] Kinetic inertia to apply to the pan.
   */
  /**
   * @classdesc
   * Allows the user to pan the map by dragging the map.
   * @api
   */
  var DragPan = /** @class */ (function (_super) {
      __extends$E(DragPan, _super);
      /**
       * @param {Options=} opt_options Options.
       */
      function DragPan(opt_options) {
          var _this = _super.call(this, {
              stopDown: FALSE
          }) || this;
          var options = opt_options ? opt_options : {};
          /**
           * @private
           * @type {import("../Kinetic.js").default|undefined}
           */
          _this.kinetic_ = options.kinetic;
          /**
           * @type {import("../pixel.js").Pixel}
           */
          _this.lastCentroid = null;
          /**
           * @type {number}
           */
          _this.lastPointersCount_;
          /**
           * @type {boolean}
           */
          _this.panning_ = false;
          /**
           * @private
           * @type {import("../events/condition.js").Condition}
           */
          _this.condition_ = options.condition ? options.condition : defaultCondition;
          /**
           * @private
           * @type {boolean}
           */
          _this.noKinetic_ = false;
          return _this;
      }
      /**
       * @private
       * @param {import("../MapBrowserEvent").default} mapBrowserEvent Event.
       * @return {boolean} Condition passes.
       */
      DragPan.prototype.conditionInternal_ = function (mapBrowserEvent) {
          var pass = true;
          if (mapBrowserEvent.map.getTargetElement().hasAttribute('tabindex')) {
              pass = focus(mapBrowserEvent);
          }
          return pass && this.condition_(mapBrowserEvent);
      };
      /**
       * @inheritDoc
       */
      DragPan.prototype.handleDragEvent = function (mapBrowserEvent) {
          if (!this.panning_) {
              this.panning_ = true;
              this.getMap().getView().beginInteraction();
          }
          var targetPointers = this.targetPointers;
          var centroid$1 = centroid(targetPointers);
          if (targetPointers.length == this.lastPointersCount_) {
              if (this.kinetic_) {
                  this.kinetic_.update(centroid$1[0], centroid$1[1]);
              }
              if (this.lastCentroid) {
                  var delta = [
                      this.lastCentroid[0] - centroid$1[0],
                      centroid$1[1] - this.lastCentroid[1]
                  ];
                  var map = mapBrowserEvent.map;
                  var view = map.getView();
                  scale$3(delta, view.getResolution());
                  rotate$1(delta, view.getRotation());
                  view.adjustCenterInternal(delta);
              }
          }
          else if (this.kinetic_) {
              // reset so we don't overestimate the kinetic energy after
              // after one finger down, tiny drag, second finger down
              this.kinetic_.begin();
          }
          this.lastCentroid = centroid$1;
          this.lastPointersCount_ = targetPointers.length;
          mapBrowserEvent.originalEvent.preventDefault();
      };
      /**
       * @inheritDoc
       */
      DragPan.prototype.handleUpEvent = function (mapBrowserEvent) {
          var map = mapBrowserEvent.map;
          var view = map.getView();
          if (this.targetPointers.length === 0) {
              if (!this.noKinetic_ && this.kinetic_ && this.kinetic_.end()) {
                  var distance = this.kinetic_.getDistance();
                  var angle = this.kinetic_.getAngle();
                  var center = view.getCenterInternal();
                  var centerpx = map.getPixelFromCoordinateInternal(center);
                  var dest = map.getCoordinateFromPixelInternal([
                      centerpx[0] - distance * Math.cos(angle),
                      centerpx[1] - distance * Math.sin(angle)
                  ]);
                  view.animateInternal({
                      center: view.getConstrainedCenter(dest),
                      duration: 500,
                      easing: easeOut
                  });
              }
              if (this.panning_) {
                  this.panning_ = false;
                  view.endInteraction();
              }
              return false;
          }
          else {
              if (this.kinetic_) {
                  // reset so we don't overestimate the kinetic energy after
                  // after one finger up, tiny drag, second finger up
                  this.kinetic_.begin();
              }
              this.lastCentroid = null;
              return true;
          }
      };
      /**
       * @inheritDoc
       */
      DragPan.prototype.handleDownEvent = function (mapBrowserEvent) {
          if (this.targetPointers.length > 0 && this.conditionInternal_(mapBrowserEvent)) {
              var map = mapBrowserEvent.map;
              var view = map.getView();
              this.lastCentroid = null;
              // stop any current animation
              if (view.getAnimating()) {
                  view.cancelAnimations();
              }
              if (this.kinetic_) {
                  this.kinetic_.begin();
              }
              // No kinetic as soon as more than one pointer on the screen is
              // detected. This is to prevent nasty pans after pinch.
              this.noKinetic_ = this.targetPointers.length > 1;
              return true;
          }
          else {
              return false;
          }
      };
      return DragPan;
  }(PointerInteraction));
  /**
   * @param {import("../MapBrowserPointerEvent.js").default} mapBrowserEvent Browser event.
   * @return {boolean} Combined condition result.
   */
  function defaultCondition(mapBrowserEvent) {
      return noModifierKeys(mapBrowserEvent) && primaryAction(mapBrowserEvent);
  }

  var __extends$F =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [condition] A function that takes an
   * {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
   * to indicate whether that event should be handled.
   * Default is {@link module:ol/events/condition~altShiftKeysOnly}.
   * @property {number} [duration=250] Animation duration in milliseconds.
   */
  /**
   * @classdesc
   * Allows the user to rotate the map by clicking and dragging on the map,
   * normally combined with an {@link module:ol/events/condition} that limits
   * it to when the alt and shift keys are held down.
   *
   * This interaction is only supported for mouse devices.
   * @api
   */
  var DragRotate = /** @class */ (function (_super) {
      __extends$F(DragRotate, _super);
      /**
       * @param {Options=} opt_options Options.
       */
      function DragRotate(opt_options) {
          var _this = this;
          var options = opt_options ? opt_options : {};
          _this = _super.call(this, {
              stopDown: FALSE
          }) || this;
          /**
           * @private
           * @type {import("../events/condition.js").Condition}
           */
          _this.condition_ = options.condition ? options.condition : altShiftKeysOnly;
          /**
           * @private
           * @type {number|undefined}
           */
          _this.lastAngle_ = undefined;
          /**
           * @private
           * @type {number}
           */
          _this.duration_ = options.duration !== undefined ? options.duration : 250;
          return _this;
      }
      /**
       * @inheritDoc
       */
      DragRotate.prototype.handleDragEvent = function (mapBrowserEvent) {
          if (!mouseOnly(mapBrowserEvent)) {
              return;
          }
          var map = mapBrowserEvent.map;
          var view = map.getView();
          if (view.getConstraints().rotation === disable) {
              return;
          }
          var size = map.getSize();
          var offset = mapBrowserEvent.pixel;
          var theta = Math.atan2(size[1] / 2 - offset[1], offset[0] - size[0] / 2);
          if (this.lastAngle_ !== undefined) {
              var delta = theta - this.lastAngle_;
              view.adjustRotationInternal(-delta);
          }
          this.lastAngle_ = theta;
      };
      /**
       * @inheritDoc
       */
      DragRotate.prototype.handleUpEvent = function (mapBrowserEvent) {
          if (!mouseOnly(mapBrowserEvent)) {
              return true;
          }
          var map = mapBrowserEvent.map;
          var view = map.getView();
          view.endInteraction(this.duration_);
          return false;
      };
      /**
       * @inheritDoc
       */
      DragRotate.prototype.handleDownEvent = function (mapBrowserEvent) {
          if (!mouseOnly(mapBrowserEvent)) {
              return false;
          }
          if (mouseActionButton(mapBrowserEvent) && this.condition_(mapBrowserEvent)) {
              var map = mapBrowserEvent.map;
              map.getView().beginInteraction();
              this.lastAngle_ = undefined;
              return true;
          }
          else {
              return false;
          }
      };
      return DragRotate;
  }(PointerInteraction));

  /**
   * @module ol/render/Box
   */
  var __extends$G =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  var RenderBox = /** @class */ (function (_super) {
      __extends$G(RenderBox, _super);
      /**
       * @param {string} className CSS class name.
       */
      function RenderBox(className) {
          var _this = _super.call(this) || this;
          /**
           * @type {import("../geom/Polygon.js").default}
           * @private
           */
          _this.geometry_ = null;
          /**
           * @type {HTMLDivElement}
           * @private
           */
          _this.element_ = document.createElement('div');
          _this.element_.style.position = 'absolute';
          _this.element_.className = 'ol-box ' + className;
          /**
           * @private
           * @type {import("../PluggableMap.js").default}
           */
          _this.map_ = null;
          /**
           * @private
           * @type {import("../pixel.js").Pixel}
           */
          _this.startPixel_ = null;
          /**
           * @private
           * @type {import("../pixel.js").Pixel}
           */
          _this.endPixel_ = null;
          return _this;
      }
      /**
       * @inheritDoc
       */
      RenderBox.prototype.disposeInternal = function () {
          this.setMap(null);
      };
      /**
       * @private
       */
      RenderBox.prototype.render_ = function () {
          var startPixel = this.startPixel_;
          var endPixel = this.endPixel_;
          var px = 'px';
          var style = this.element_.style;
          style.left = Math.min(startPixel[0], endPixel[0]) + px;
          style.top = Math.min(startPixel[1], endPixel[1]) + px;
          style.width = Math.abs(endPixel[0] - startPixel[0]) + px;
          style.height = Math.abs(endPixel[1] - startPixel[1]) + px;
      };
      /**
       * @param {import("../PluggableMap.js").default} map Map.
       */
      RenderBox.prototype.setMap = function (map) {
          if (this.map_) {
              this.map_.getOverlayContainer().removeChild(this.element_);
              var style = this.element_.style;
              style.left = 'inherit';
              style.top = 'inherit';
              style.width = 'inherit';
              style.height = 'inherit';
          }
          this.map_ = map;
          if (this.map_) {
              this.map_.getOverlayContainer().appendChild(this.element_);
          }
      };
      /**
       * @param {import("../pixel.js").Pixel} startPixel Start pixel.
       * @param {import("../pixel.js").Pixel} endPixel End pixel.
       */
      RenderBox.prototype.setPixels = function (startPixel, endPixel) {
          this.startPixel_ = startPixel;
          this.endPixel_ = endPixel;
          this.createOrUpdateGeometry();
          this.render_();
      };
      /**
       * Creates or updates the cached geometry.
       */
      RenderBox.prototype.createOrUpdateGeometry = function () {
          var startPixel = this.startPixel_;
          var endPixel = this.endPixel_;
          var pixels = [
              startPixel,
              [startPixel[0], endPixel[1]],
              endPixel,
              [endPixel[0], startPixel[1]]
          ];
          var coordinates = pixels.map(this.map_.getCoordinateFromPixelInternal, this.map_);
          // close the polygon
          coordinates[4] = coordinates[0].slice();
          if (!this.geometry_) {
              this.geometry_ = new Polygon([coordinates]);
          }
          else {
              this.geometry_.setCoordinates([coordinates]);
          }
      };
      /**
       * @return {import("../geom/Polygon.js").default} Geometry.
       */
      RenderBox.prototype.getGeometry = function () {
          return this.geometry_;
      };
      return RenderBox;
  }(Disposable));

  var __extends$H =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * A function that takes a {@link module:ol/MapBrowserEvent} and two
   * {@link module:ol/pixel~Pixel}s and returns a `{boolean}`. If the condition is met,
   * true should be returned.
   * @typedef {function(this: ?, import("../MapBrowserEvent.js").default, import("../pixel.js").Pixel, import("../pixel.js").Pixel):boolean} EndCondition
   */
  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-dragbox'] CSS class name for styling the box.
   * @property {import("../events/condition.js").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
   * to indicate whether that event should be handled.
   * Default is {@link ol/events/condition~mouseActionButton}.
   * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the default
   * `boxEndCondition` function.
   * @property {EndCondition} [boxEndCondition] A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two
   * {@link module:ol/pixel~Pixel}s to indicate whether a `boxend` event should be fired.
   * Default is `true` if the area of the box is bigger than the `minArea` option.
   * @property {function(this:DragBox, import("../MapBrowserEvent.js").default)} [onBoxEnd] Code to execute just
   * before `boxend` is fired.
   */
  /**
   * @enum {string}
   */
  var DragBoxEventType = {
      /**
       * Triggered upon drag box start.
       * @event DragBoxEvent#boxstart
       * @api
       */
      BOXSTART: 'boxstart',
      /**
       * Triggered on drag when box is active.
       * @event DragBoxEvent#boxdrag
       * @api
       */
      BOXDRAG: 'boxdrag',
      /**
       * Triggered upon drag box end.
       * @event DragBoxEvent#boxend
       * @api
       */
      BOXEND: 'boxend'
  };
  /**
   * @classdesc
   * Events emitted by {@link module:ol/interaction/DragBox~DragBox} instances are instances of
   * this type.
   */
  var DragBoxEvent = /** @class */ (function (_super) {
      __extends$H(DragBoxEvent, _super);
      /**
       * @param {string} type The event type.
       * @param {import("../coordinate.js").Coordinate} coordinate The event coordinate.
       * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Originating event.
       */
      function DragBoxEvent(type, coordinate, mapBrowserEvent) {
          var _this = _super.call(this, type) || this;
          /**
           * The coordinate of the drag event.
           * @const
           * @type {import("../coordinate.js").Coordinate}
           * @api
           */
          _this.coordinate = coordinate;
          /**
           * @const
           * @type {import("../MapBrowserEvent.js").default}
           * @api
           */
          _this.mapBrowserEvent = mapBrowserEvent;
          return _this;
      }
      return DragBoxEvent;
  }(BaseEvent));
  /**
   * @classdesc
   * Allows the user to draw a vector box by clicking and dragging on the map,
   * normally combined with an {@link module:ol/events/condition} that limits
   * it to when the shift or other key is held down. This is used, for example,
   * for zooming to a specific area of the map
   * (see {@link module:ol/interaction/DragZoom~DragZoom} and
   * {@link module:ol/interaction/DragRotateAndZoom}).
   *
   * @fires DragBoxEvent
   * @api
   */
  var DragBox = /** @class */ (function (_super) {
      __extends$H(DragBox, _super);
      /**
       * @param {Options=} opt_options Options.
       */
      function DragBox(opt_options) {
          var _this = _super.call(this) || this;
          var options = opt_options ? opt_options : {};
          /**
           * @type {import("../render/Box.js").default}
           * @private
           */
          _this.box_ = new RenderBox(options.className || 'ol-dragbox');
          /**
           * @type {number}
           * @private
           */
          _this.minArea_ = options.minArea !== undefined ? options.minArea : 64;
          /**
           * Function to execute just before `onboxend` is fired
           * @type {function(this:DragBox, import("../MapBrowserEvent.js").default): void}
           * @private
           */
          _this.onBoxEnd_ = options.onBoxEnd ? options.onBoxEnd : VOID;
          /**
           * @type {import("../pixel.js").Pixel}
           * @private
           */
          _this.startPixel_ = null;
          /**
           * @private
           * @type {import("../events/condition.js").Condition}
           */
          _this.condition_ = options.condition ? options.condition : mouseActionButton;
          /**
           * @private
           * @type {EndCondition}
           */
          _this.boxEndCondition_ = options.boxEndCondition ?
              options.boxEndCondition : _this.defaultBoxEndCondition;
          return _this;
      }
      /**
       * The default condition for determining whether the boxend event
       * should fire.
       * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent The originating MapBrowserEvent
       *     leading to the box end.
       * @param {import("../pixel.js").Pixel} startPixel The starting pixel of the box.
       * @param {import("../pixel.js").Pixel} endPixel The end pixel of the box.
       * @return {boolean} Whether or not the boxend condition should be fired.
       */
      DragBox.prototype.defaultBoxEndCondition = function (mapBrowserEvent, startPixel, endPixel) {
          var width = endPixel[0] - startPixel[0];
          var height = endPixel[1] - startPixel[1];
          return width * width + height * height >= this.minArea_;
      };
      /**
       * Returns geometry of last drawn box.
       * @return {import("../geom/Polygon.js").default} Geometry.
       * @api
       */
      DragBox.prototype.getGeometry = function () {
          return this.box_.getGeometry();
      };
      /**
       * @inheritDoc
       */
      DragBox.prototype.handleDragEvent = function (mapBrowserEvent) {
          this.box_.setPixels(this.startPixel_, mapBrowserEvent.pixel);
          this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXDRAG, mapBrowserEvent.coordinate, mapBrowserEvent));
      };
      /**
       * @inheritDoc
       */
      DragBox.prototype.handleUpEvent = function (mapBrowserEvent) {
          this.box_.setMap(null);
          if (this.boxEndCondition_(mapBrowserEvent, this.startPixel_, mapBrowserEvent.pixel)) {
              this.onBoxEnd_(mapBrowserEvent);
              this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXEND, mapBrowserEvent.coordinate, mapBrowserEvent));
          }
          return false;
      };
      /**
       * @inheritDoc
       */
      DragBox.prototype.handleDownEvent = function (mapBrowserEvent) {
          if (this.condition_(mapBrowserEvent)) {
              this.startPixel_ = mapBrowserEvent.pixel;
              this.box_.setMap(mapBrowserEvent.map);
              this.box_.setPixels(this.startPixel_, this.startPixel_);
              this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXSTART, mapBrowserEvent.coordinate, mapBrowserEvent));
              return true;
          }
          else {
              return false;
          }
      };
      return DragBox;
  }(PointerInteraction));

  var __extends$I =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-dragzoom'] CSS class name for styling the
   * box.
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled.
   * Default is {@link module:ol/events/condition~shiftKeyOnly}.
   * @property {number} [duration=200] Animation duration in milliseconds.
   * @property {boolean} [out=false] Use interaction for zooming out.
   * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the parent default
   * `boxEndCondition` function.
   */
  /**
   * @classdesc
   * Allows the user to zoom the map by clicking and dragging on the map,
   * normally combined with an {@link module:ol/events/condition} that limits
   * it to when a key, shift by default, is held down.
   *
   * To change the style of the box, use CSS and the `.ol-dragzoom` selector, or
   * your custom one configured with `className`.
   * @api
   */
  var DragZoom = /** @class */ (function (_super) {
      __extends$I(DragZoom, _super);
      /**
       * @param {Options=} opt_options Options.
       */
      function DragZoom(opt_options) {
          var _this = this;
          var options = opt_options ? opt_options : {};
          var condition = options.condition ? options.condition : shiftKeyOnly;
          _this = _super.call(this, {
              condition: condition,
              className: options.className || 'ol-dragzoom',
              minArea: options.minArea,
              onBoxEnd: onBoxEnd
          }) || this;
          /**
           * @private
           * @type {number}
           */
          _this.duration_ = options.duration !== undefined ? options.duration : 200;
          /**
           * @private
           * @type {boolean}
           */
          _this.out_ = options.out !== undefined ? options.out : false;
          return _this;
      }
      return DragZoom;
  }(DragBox));
  /**
   * @this {DragZoom}
   */
  function onBoxEnd() {
      var map = this.getMap();
      var view = /** @type {!import("../View.js").default} */ (map.getView());
      var size = /** @type {!import("../size.js").Size} */ (map.getSize());
      var extent = this.getGeometry().getExtent();
      if (this.out_) {
          var mapExtent = view.calculateExtentInternal(size);
          var boxPixelExtent = createOrUpdateFromCoordinates([
              map.getPixelFromCoordinateInternal(getBottomLeft(extent)),
              map.getPixelFromCoordinateInternal(getTopRight(extent))
          ]);
          var factor = view.getResolutionForExtentInternal(boxPixelExtent, size);
          scaleFromCenter(mapExtent, 1 / factor);
          extent = mapExtent;
      }
      var resolution = view.getConstrainedResolution(view.getResolutionForExtentInternal(extent, size));
      var center = view.getConstrainedCenter(getCenter(extent), resolution);
      view.animateInternal({
          resolution: resolution,
          center: center,
          duration: this.duration_,
          easing: easeOut
      });
  }

  /**
   * @module ol/events/KeyCode
   */
  /**
   * @enum {number}
   * @const
   */
  var KeyCode = {
      LEFT: 37,
      UP: 38,
      RIGHT: 39,
      DOWN: 40
  };

  var __extends$J =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled. Default is
   * {@link module:ol/events/condition~noModifierKeys} and
   * {@link module:ol/events/condition~targetNotEditable}.
   * @property {number} [duration=100] Animation duration in milliseconds.
   * @property {number} [pixelDelta=128] The amount of pixels to pan on each key
   * press.
   */
  /**
   * @classdesc
   * Allows the user to pan the map using keyboard arrows.
   * Note that, although this interaction is by default included in maps,
   * the keys can only be used when browser focus is on the element to which
   * the keyboard events are attached. By default, this is the map div,
   * though you can change this with the `keyboardEventTarget` in
   * {@link module:ol/Map~Map}. `document` never loses focus but, for any other
   * element, focus will have to be on, and returned to, this element if the keys
   * are to function.
   * See also {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}.
   * @api
   */
  var KeyboardPan = /** @class */ (function (_super) {
      __extends$J(KeyboardPan, _super);
      /**
       * @param {Options=} opt_options Options.
       */
      function KeyboardPan(opt_options) {
          var _this = _super.call(this, {
              handleEvent: handleEvent$1
          }) || this;
          var options = opt_options || {};
          /**
           * @private
           * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Browser event.
           * @return {boolean} Combined condition result.
           */
          _this.defaultCondition_ = function (mapBrowserEvent) {
              return noModifierKeys(mapBrowserEvent) &&
                  targetNotEditable(mapBrowserEvent);
          };
          /**
           * @private
           * @type {import("../events/condition.js").Condition}
           */
          _this.condition_ = options.condition !== undefined ?
              options.condition : _this.defaultCondition_;
          /**
           * @private
           * @type {number}
           */
          _this.duration_ = options.duration !== undefined ? options.duration : 100;
          /**
           * @private
           * @type {number}
           */
          _this.pixelDelta_ = options.pixelDelta !== undefined ?
              options.pixelDelta : 128;
          return _this;
      }
      return KeyboardPan;
  }(Interaction));
  /**
   * Handles the {@link module:ol/MapBrowserEvent map browser event} if it was a
   * `KeyEvent`, and decides the direction to pan to (if an arrow key was
   * pressed).
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} `false` to stop event propagation.
   * @this {KeyboardPan}
   */
  function handleEvent$1(mapBrowserEvent) {
      var stopEvent = false;
      if (mapBrowserEvent.type == EventType.KEYDOWN) {
          var keyEvent = /** @type {KeyboardEvent} */ (mapBrowserEvent.originalEvent);
          var keyCode = keyEvent.keyCode;
          if (this.condition_(mapBrowserEvent) &&
              (keyCode == KeyCode.DOWN ||
                  keyCode == KeyCode.LEFT ||
                  keyCode == KeyCode.RIGHT ||
                  keyCode == KeyCode.UP)) {
              var map = mapBrowserEvent.map;
              var view = map.getView();
              var mapUnitsDelta = view.getResolution() * this.pixelDelta_;
              var deltaX = 0, deltaY = 0;
              if (keyCode == KeyCode.DOWN) {
                  deltaY = -mapUnitsDelta;
              }
              else if (keyCode == KeyCode.LEFT) {
                  deltaX = -mapUnitsDelta;
              }
              else if (keyCode == KeyCode.RIGHT) {
                  deltaX = mapUnitsDelta;
              }
              else {
                  deltaY = mapUnitsDelta;
              }
              var delta = [deltaX, deltaY];
              rotate$1(delta, view.getRotation());
              pan(view, delta, this.duration_);
              mapBrowserEvent.preventDefault();
              stopEvent = true;
          }
      }
      return !stopEvent;
  }

  var __extends$K =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {Object} Options
   * @property {number} [duration=100] Animation duration in milliseconds.
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled. Default is
   * {@link module:ol/events/condition~targetNotEditable}.
   * @property {number} [delta=1] The zoom level delta on each key press.
   */
  /**
   * @classdesc
   * Allows the user to zoom the map using keyboard + and -.
   * Note that, although this interaction is by default included in maps,
   * the keys can only be used when browser focus is on the element to which
   * the keyboard events are attached. By default, this is the map div,
   * though you can change this with the `keyboardEventTarget` in
   * {@link module:ol/Map~Map}. `document` never loses focus but, for any other
   * element, focus will have to be on, and returned to, this element if the keys
   * are to function.
   * See also {@link module:ol/interaction/KeyboardPan~KeyboardPan}.
   * @api
   */
  var KeyboardZoom = /** @class */ (function (_super) {
      __extends$K(KeyboardZoom, _super);
      /**
       * @param {Options=} opt_options Options.
       */
      function KeyboardZoom(opt_options) {
          var _this = _super.call(this, {
              handleEvent: handleEvent$2
          }) || this;
          var options = opt_options ? opt_options : {};
          /**
           * @private
           * @type {import("../events/condition.js").Condition}
           */
          _this.condition_ = options.condition ? options.condition : targetNotEditable;
          /**
           * @private
           * @type {number}
           */
          _this.delta_ = options.delta ? options.delta : 1;
          /**
           * @private
           * @type {number}
           */
          _this.duration_ = options.duration !== undefined ? options.duration : 100;
          return _this;
      }
      return KeyboardZoom;
  }(Interaction));
  /**
   * Handles the {@link module:ol/MapBrowserEvent map browser event} if it was a
   * `KeyEvent`, and decides whether to zoom in or out (depending on whether the
   * key pressed was '+' or '-').
   * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
   * @return {boolean} `false` to stop event propagation.
   * @this {KeyboardZoom}
   */
  function handleEvent$2(mapBrowserEvent) {
      var stopEvent = false;
      if (mapBrowserEvent.type == EventType.KEYDOWN ||
          mapBrowserEvent.type == EventType.KEYPRESS) {
          var keyEvent = /** @type {KeyboardEvent} */ (mapBrowserEvent.originalEvent);
          var charCode = keyEvent.charCode;
          if (this.condition_(mapBrowserEvent) &&
              (charCode == '+'.charCodeAt(0) || charCode == '-'.charCodeAt(0))) {
              var map = mapBrowserEvent.map;
              var delta = (charCode == '+'.charCodeAt(0)) ? this.delta_ : -this.delta_;
              var view = map.getView();
              zoomByDelta(view, delta, undefined, this.duration_);
              mapBrowserEvent.preventDefault();
              stopEvent = true;
          }
      }
      return !stopEvent;
  }

  var __extends$L =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @enum {string}
   */
  var Mode = {
      TRACKPAD: 'trackpad',
      WHEEL: 'wheel'
  };
  /**
   * @typedef {Object} Options
   * @property {import("../events/condition.js").Condition} [condition] A function that
   * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
   * boolean to indicate whether that event should be handled. Default is
   * {@link module:ol/events/condition~always}.
   * In addition, if there is a `tabindex` attribute on the map element,
   * {@link module:ol/events/condition~focus} will also be applied.
   * @property {number} [maxDelta=1] Maximum mouse wheel delta.
   * @property {number} [duration=250] Animation duration in milliseconds.
   * @property {number} [timeout=80] Mouse wheel timeout duration in milliseconds.
   * @property {boolean} [useAnchor=true] Enable zooming using the mouse's
   * location as the anchor. When set to `false`, zooming in and out will zoom to
   * the center of the screen instead of zooming on the mouse's location.
   */
  /**
   * @classdesc
   * Allows the user to zoom the map by scrolling the mouse wheel.
   * @api
   */
  var MouseWheelZoom = /** @class */ (function (_super) {
      __extends$L(MouseWheelZoom, _super);
      /**
       * @param {Options=} opt_options Options.
       */
      function MouseWheelZoom(opt_options) {
          var _this = this;
          var options = opt_options ? opt_options : {};
          _this = _super.call(this, /** @type {import("./Interaction.js").InteractionOptions} */ (options)) || this;
          /**
           * @private
           * @type {number}
           */
          _this.totalDelta_ = 0;
          /**
           * @private
           * @type {number}
           */
          _this.lastDelta_ = 0;
          /**
           * @private
           * @type {number}
           */
          _this.maxDelta_ = options.maxDelta !== undefined ? options.maxDelta : 1;
          /**
           * @private
           * @type {number}
           */
          _this.duration_ = options.duration !== undefined ? options.duration : 250;
          /**
           * @private
           * @type {number}
           */
          _this.timeout_ = options.timeout !== undefined ? options.timeout : 80;
          /**
           * @private
           * @type {boolean}
           */
          _this.useAnchor_ = options.useAnchor !== undefined ? options.useAnchor : true;
          /**
           * @private
           * @type {import("../events/condition.js").Condition}
           */
          _this.condition_ = options.condition ? options.condition : always;
          /**
           * @private
           * @type {?import("../coordinate.js").Coordinate}
           */
          _this.lastAnchor_ = null;
          /**
           * @private
           * @type {number|undefined}
           */
          _this.startTime_ = undefined;
          /**
           * @private
           * @type {?}
           */
          _this.timeoutId_;
          /**
           * @private
           * @type {Mode|undefined}
           */
          _this.mode_ = undefined;
          /**
           * Trackpad events separated by this delay will be considered separate
           * interactions.
           * @type {number}
           */
          _this.trackpadEventGap_ = 400;
          /**
           * @type {?}
           */
          _this.trackpadTimeoutId_;
          /**
           * The number of delta values per zoom level
           * @private
           * @type {number}
           */
          _this.deltaPerZoom_ = 300;
          return _this;
      }
      /**
       * @private
       * @param {import("../MapBrowserEvent").default} mapBrowserEvent Event.
       * @return {boolean} Condition passes.
       */
      MouseWheelZoom.prototype.conditionInternal_ = function (mapBrowserEvent) {
          var pass = true;
          if (mapBrowserEvent.map.getTargetElement().hasAttribute('tabindex')) {
              pass = focus(mapBrowserEvent);
          }
          return pass && this.condition_(mapBrowserEvent);
      };
      /**
       * @private
       */
      MouseWheelZoom.prototype.endInteraction_ = function () {
          this.trackpadTimeoutId_ = undefined;
          var view = this.getMap().getView();
          view.endInteraction(undefined, this.lastDelta_ ? (this.lastDelta_ > 0 ? 1 : -1) : 0, this.lastAnchor_);
      };
      /**
       * Handles the {@link module:ol/MapBrowserEvent map browser event} (if it was a mousewheel-event) and eventually
       * zooms the map.
       * @override
       */
      MouseWheelZoom.prototype.handleEvent = function (mapBrowserEvent) {
          if (!this.conditionInternal_(mapBrowserEvent)) {
              return true;
          }
          var type = mapBrowserEvent.type;
          if (type !== EventType.WHEEL) {
              return true;
          }
          mapBrowserEvent.preventDefault();
          var map = mapBrowserEvent.map;
          var wheelEvent = /** @type {WheelEvent} */ (mapBrowserEvent.originalEvent);
          if (this.useAnchor_) {
              this.lastAnchor_ = mapBrowserEvent.coordinate;
          }
          // Delta normalisation inspired by
          // https://github.com/mapbox/mapbox-gl-js/blob/001c7b9/js/ui/handler/scroll_zoom.js
          var delta;
          if (mapBrowserEvent.type == EventType.WHEEL) {
              delta = wheelEvent.deltaY;
              if (FIREFOX &&
                  wheelEvent.deltaMode === WheelEvent.DOM_DELTA_PIXEL) {
                  delta /= DEVICE_PIXEL_RATIO;
              }
              if (wheelEvent.deltaMode === WheelEvent.DOM_DELTA_LINE) {
                  delta *= 40;
              }
          }
          if (delta === 0) {
              return false;
          }
          else {
              this.lastDelta_ = delta;
          }
          var now = Date.now();
          if (this.startTime_ === undefined) {
              this.startTime_ = now;
          }
          if (!this.mode_ || now - this.startTime_ > this.trackpadEventGap_) {
              this.mode_ = Math.abs(delta) < 4 ?
                  Mode.TRACKPAD :
                  Mode.WHEEL;
          }
          var view = map.getView();
          if (this.mode_ === Mode.TRACKPAD && !view.getConstrainResolution()) {
              if (this.trackpadTimeoutId_) {
                  clearTimeout(this.trackpadTimeoutId_);
              }
              else {
                  if (view.getAnimating()) {
                      view.cancelAnimations();
                  }
                  view.beginInteraction();
              }
              this.trackpadTimeoutId_ = setTimeout(this.endInteraction_.bind(this), this.timeout_);
              view.adjustZoom(-delta / this.deltaPerZoom_, this.lastAnchor_);
              this.startTime_ = now;
              return false;
          }
          this.totalDelta_ += delta;
          var timeLeft = Math.max(this.timeout_ - (now - this.startTime_), 0);
          clearTimeout(this.timeoutId_);
          this.timeoutId_ = setTimeout(this.handleWheelZoom_.bind(this, map), timeLeft);
          return false;
      };
      /**
       * @private
       * @param {import("../PluggableMap.js").default} map Map.
       */
      MouseWheelZoom.prototype.handleWheelZoom_ = function (map) {
          var view = map.getView();
          if (view.getAnimating()) {
              view.cancelAnimations();
          }
          var delta = -clamp(this.totalDelta_, -this.maxDelta_ * this.deltaPerZoom_, this.maxDelta_ * this.deltaPerZoom_) / this.deltaPerZoom_;
          if (view.getConstrainResolution()) {
              // view has a zoom constraint, zoom by 1
              delta = delta ? delta > 0 ? 1 : -1 : 0;
          }
          zoomByDelta(view, delta, this.lastAnchor_, this.duration_);
          this.mode_ = undefined;
          this.totalDelta_ = 0;
          this.lastAnchor_ = null;
          this.startTime_ = undefined;
          this.timeoutId_ = undefined;
      };
      /**
       * Enable or disable using the mouse's location as an anchor when zooming
       * @param {boolean} useAnchor true to zoom to the mouse's location, false
       * to zoom to the center of the map
       * @api
       */
      MouseWheelZoom.prototype.setMouseAnchor = function (useAnchor) {
          this.useAnchor_ = useAnchor;
          if (!useAnchor) {
              this.lastAnchor_ = null;
          }
      };
      return MouseWheelZoom;
  }(Interaction));

  var __extends$M =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {Object} Options
   * @property {number} [duration=250] The duration of the animation in
   * milliseconds.
   * @property {number} [threshold=0.3] Minimal angle in radians to start a rotation.
   */
  /**
   * @classdesc
   * Allows the user to rotate the map by twisting with two fingers
   * on a touch screen.
   * @api
   */
  var PinchRotate = /** @class */ (function (_super) {
      __extends$M(PinchRotate, _super);
      /**
       * @param {Options=} opt_options Options.
       */
      function PinchRotate(opt_options) {
          var _this = this;
          var options = opt_options ? opt_options : {};
          var pointerOptions = /** @type {import("./Pointer.js").Options} */ (options);
          if (!pointerOptions.stopDown) {
              pointerOptions.stopDown = FALSE;
          }
          _this = _super.call(this, pointerOptions) || this;
          /**
           * @private
           * @type {import("../coordinate.js").Coordinate}
           */
          _this.anchor_ = null;
          /**
           * @private
           * @type {number|undefined}
           */
          _this.lastAngle_ = undefined;
          /**
           * @private
           * @type {boolean}
           */
          _this.rotating_ = false;
          /**
           * @private
           * @type {number}
           */
          _this.rotationDelta_ = 0.0;
          /**
           * @private
           * @type {number}
           */
          _this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;
          /**
           * @private
           * @type {number}
           */
          _this.duration_ = options.duration !== undefined ? options.duration : 250;
          return _this;
      }
      /**
       * @inheritDoc
       */
      PinchRotate.prototype.handleDragEvent = function (mapBrowserEvent) {
          var rotationDelta = 0.0;
          var touch0 = this.targetPointers[0];
          var touch1 = this.targetPointers[1];
          // angle between touches
          var angle = Math.atan2(touch1.clientY - touch0.clientY, touch1.clientX - touch0.clientX);
          if (this.lastAngle_ !== undefined) {
              var delta = angle - this.lastAngle_;
              this.rotationDelta_ += delta;
              if (!this.rotating_ &&
                  Math.abs(this.rotationDelta_) > this.threshold_) {
                  this.rotating_ = true;
              }
              rotationDelta = delta;
          }
          this.lastAngle_ = angle;
          var map = mapBrowserEvent.map;
          var view = map.getView();
          if (view.getConstraints().rotation === disable) {
              return;
          }
          // rotate anchor point.
          // FIXME: should be the intersection point between the lines:
          //     touch0,touch1 and previousTouch0,previousTouch1
          var viewportPosition = map.getViewport().getBoundingClientRect();
          var centroid$1 = centroid(this.targetPointers);
          centroid$1[0] -= viewportPosition.left;
          centroid$1[1] -= viewportPosition.top;
          this.anchor_ = map.getCoordinateFromPixelInternal(centroid$1);
          // rotate
          if (this.rotating_) {
              map.render();
              view.adjustRotationInternal(rotationDelta, this.anchor_);
          }
      };
      /**
       * @inheritDoc
       */
      PinchRotate.prototype.handleUpEvent = function (mapBrowserEvent) {
          if (this.targetPointers.length < 2) {
              var map = mapBrowserEvent.map;
              var view = map.getView();
              view.endInteraction(this.duration_);
              return false;
          }
          else {
              return true;
          }
      };
      /**
       * @inheritDoc
       */
      PinchRotate.prototype.handleDownEvent = function (mapBrowserEvent) {
          if (this.targetPointers.length >= 2) {
              var map = mapBrowserEvent.map;
              this.anchor_ = null;
              this.lastAngle_ = undefined;
              this.rotating_ = false;
              this.rotationDelta_ = 0.0;
              if (!this.handlingDownUpSequence) {
                  map.getView().beginInteraction();
              }
              return true;
          }
          else {
              return false;
          }
      };
      return PinchRotate;
  }(PointerInteraction));

  var __extends$N =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {Object} Options
   * @property {number} [duration=400] Animation duration in milliseconds.
   */
  /**
   * @classdesc
   * Allows the user to zoom the map by pinching with two fingers
   * on a touch screen.
   * @api
   */
  var PinchZoom = /** @class */ (function (_super) {
      __extends$N(PinchZoom, _super);
      /**
       * @param {Options=} opt_options Options.
       */
      function PinchZoom(opt_options) {
          var _this = this;
          var options = opt_options ? opt_options : {};
          var pointerOptions = /** @type {import("./Pointer.js").Options} */ (options);
          if (!pointerOptions.stopDown) {
              pointerOptions.stopDown = FALSE;
          }
          _this = _super.call(this, pointerOptions) || this;
          /**
           * @private
           * @type {import("../coordinate.js").Coordinate}
           */
          _this.anchor_ = null;
          /**
           * @private
           * @type {number}
           */
          _this.duration_ = options.duration !== undefined ? options.duration : 400;
          /**
           * @private
           * @type {number|undefined}
           */
          _this.lastDistance_ = undefined;
          /**
           * @private
           * @type {number}
           */
          _this.lastScaleDelta_ = 1;
          return _this;
      }
      /**
       * @inheritDoc
       */
      PinchZoom.prototype.handleDragEvent = function (mapBrowserEvent) {
          var scaleDelta = 1.0;
          var touch0 = this.targetPointers[0];
          var touch1 = this.targetPointers[1];
          var dx = touch0.clientX - touch1.clientX;
          var dy = touch0.clientY - touch1.clientY;
          // distance between touches
          var distance = Math.sqrt(dx * dx + dy * dy);
          if (this.lastDistance_ !== undefined) {
              scaleDelta = this.lastDistance_ / distance;
          }
          this.lastDistance_ = distance;
          var map = mapBrowserEvent.map;
          var view = map.getView();
          if (scaleDelta != 1.0) {
              this.lastScaleDelta_ = scaleDelta;
          }
          // scale anchor point.
          var viewportPosition = map.getViewport().getBoundingClientRect();
          var centroid$1 = centroid(this.targetPointers);
          centroid$1[0] -= viewportPosition.left;
          centroid$1[1] -= viewportPosition.top;
          this.anchor_ = map.getCoordinateFromPixelInternal(centroid$1);
          // scale, bypass the resolution constraint
          map.render();
          view.adjustResolutionInternal(scaleDelta, this.anchor_);
      };
      /**
       * @inheritDoc
       */
      PinchZoom.prototype.handleUpEvent = function (mapBrowserEvent) {
          if (this.targetPointers.length < 2) {
              var map = mapBrowserEvent.map;
              var view = map.getView();
              var direction = this.lastScaleDelta_ > 1 ? 1 : -1;
              view.endInteraction(this.duration_, direction);
              return false;
          }
          else {
              return true;
          }
      };
      /**
       * @inheritDoc
       */
      PinchZoom.prototype.handleDownEvent = function (mapBrowserEvent) {
          if (this.targetPointers.length >= 2) {
              var map = mapBrowserEvent.map;
              this.anchor_ = null;
              this.lastDistance_ = undefined;
              this.lastScaleDelta_ = 1;
              if (!this.handlingDownUpSequence) {
                  map.getView().beginInteraction();
              }
              return true;
          }
          else {
              return false;
          }
      };
      return PinchZoom;
  }(PointerInteraction));

  var __extends$O =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {typeof Feature|typeof import("./render/Feature.js").default} FeatureClass
   */
  /**
   * @typedef {Feature|import("./render/Feature.js").default} FeatureLike
   */
  /**
   * @classdesc
   * A vector object for geographic features with a geometry and other
   * attribute properties, similar to the features in vector file formats like
   * GeoJSON.
   *
   * Features can be styled individually with `setStyle`; otherwise they use the
   * style of their vector layer.
   *
   * Note that attribute properties are set as {@link module:ol/Object} properties on
   * the feature object, so they are observable, and have get/set accessors.
   *
   * Typically, a feature has a single geometry property. You can set the
   * geometry using the `setGeometry` method and get it with `getGeometry`.
   * It is possible to store more than one geometry on a feature using attribute
   * properties. By default, the geometry used for rendering is identified by
   * the property name `geometry`. If you want to use another geometry property
   * for rendering, use the `setGeometryName` method to change the attribute
   * property associated with the geometry for the feature.  For example:
   *
   * ```js
   *
   * import Feature from 'ol/Feature';
   * import Polygon from 'ol/geom/Polygon';
   * import Point from 'ol/geom/Point';
   *
   * var feature = new Feature({
   *   geometry: new Polygon(polyCoords),
   *   labelPoint: new Point(labelCoords),
   *   name: 'My Polygon'
   * });
   *
   * // get the polygon geometry
   * var poly = feature.getGeometry();
   *
   * // Render the feature as a point using the coordinates from labelPoint
   * feature.setGeometryName('labelPoint');
   *
   * // get the point geometry
   * var point = feature.getGeometry();
   * ```
   *
   * @api
   * @template {import("./geom/Geometry.js").default} Geometry
   */
  var Feature = /** @class */ (function (_super) {
      __extends$O(Feature, _super);
      /**
       * @param {Geometry|Object<string, *>=} opt_geometryOrProperties
       *     You may pass a Geometry object directly, or an object literal containing
       *     properties. If you pass an object literal, you may include a Geometry
       *     associated with a `geometry` key.
       */
      function Feature(opt_geometryOrProperties) {
          var _this = _super.call(this) || this;
          /**
           * @private
           * @type {number|string|undefined}
           */
          _this.id_ = undefined;
          /**
           * @type {string}
           * @private
           */
          _this.geometryName_ = 'geometry';
          /**
           * User provided style.
           * @private
           * @type {import("./style/Style.js").StyleLike}
           */
          _this.style_ = null;
          /**
           * @private
           * @type {import("./style/Style.js").StyleFunction|undefined}
           */
          _this.styleFunction_ = undefined;
          /**
           * @private
           * @type {?import("./events.js").EventsKey}
           */
          _this.geometryChangeKey_ = null;
          _this.addEventListener(getChangeEventType(_this.geometryName_), _this.handleGeometryChanged_);
          if (opt_geometryOrProperties) {
              if (typeof /** @type {?} */ (opt_geometryOrProperties).getSimplifiedGeometry === 'function') {
                  var geometry = /** @type {Geometry} */ (opt_geometryOrProperties);
                  _this.setGeometry(geometry);
              }
              else {
                  /** @type {Object<string, *>} */
                  var properties = opt_geometryOrProperties;
                  _this.setProperties(properties);
              }
          }
          return _this;
      }
      /**
       * Clone this feature. If the original feature has a geometry it
       * is also cloned. The feature id is not set in the clone.
       * @return {Feature} The clone.
       * @api
       */
      Feature.prototype.clone = function () {
          var clone = new Feature(this.getProperties());
          clone.setGeometryName(this.getGeometryName());
          var geometry = this.getGeometry();
          if (geometry) {
              clone.setGeometry(geometry.clone());
          }
          var style = this.getStyle();
          if (style) {
              clone.setStyle(style);
          }
          return clone;
      };
      /**
       * Get the feature's default geometry.  A feature may have any number of named
       * geometries.  The "default" geometry (the one that is rendered by default) is
       * set when calling {@link module:ol/Feature~Feature#setGeometry}.
       * @return {Geometry|undefined} The default geometry for the feature.
       * @api
       * @observable
       */
      Feature.prototype.getGeometry = function () {
          return (
          /** @type {Geometry|undefined} */ (this.get(this.geometryName_)));
      };
      /**
       * Get the feature identifier.  This is a stable identifier for the feature and
       * is either set when reading data from a remote source or set explicitly by
       * calling {@link module:ol/Feature~Feature#setId}.
       * @return {number|string|undefined} Id.
       * @api
       */
      Feature.prototype.getId = function () {
          return this.id_;
      };
      /**
       * Get the name of the feature's default geometry.  By default, the default
       * geometry is named `geometry`.
       * @return {string} Get the property name associated with the default geometry
       *     for this feature.
       * @api
       */
      Feature.prototype.getGeometryName = function () {
          return this.geometryName_;
      };
      /**
       * Get the feature's style. Will return what was provided to the
       * {@link module:ol/Feature~Feature#setStyle} method.
       * @return {import("./style/Style.js").StyleLike} The feature style.
       * @api
       */
      Feature.prototype.getStyle = function () {
          return this.style_;
      };
      /**
       * Get the feature's style function.
       * @return {import("./style/Style.js").StyleFunction|undefined} Return a function
       * representing the current style of this feature.
       * @api
       */
      Feature.prototype.getStyleFunction = function () {
          return this.styleFunction_;
      };
      /**
       * @private
       */
      Feature.prototype.handleGeometryChange_ = function () {
          this.changed();
      };
      /**
       * @private
       */
      Feature.prototype.handleGeometryChanged_ = function () {
          if (this.geometryChangeKey_) {
              unlistenByKey(this.geometryChangeKey_);
              this.geometryChangeKey_ = null;
          }
          var geometry = this.getGeometry();
          if (geometry) {
              this.geometryChangeKey_ = listen(geometry, EventType.CHANGE, this.handleGeometryChange_, this);
          }
          this.changed();
      };
      /**
       * Set the default geometry for the feature.  This will update the property
       * with the name returned by {@link module:ol/Feature~Feature#getGeometryName}.
       * @param {Geometry|undefined} geometry The new geometry.
       * @api
       * @observable
       */
      Feature.prototype.setGeometry = function (geometry) {
          this.set(this.geometryName_, geometry);
      };
      /**
       * Set the style for the feature.  This can be a single style object, an array
       * of styles, or a function that takes a resolution and returns an array of
       * styles. If it is `null` the feature has no style (a `null` style).
       * @param {import("./style/Style.js").StyleLike} style Style for this feature.
       * @api
       * @fires module:ol/events/Event~BaseEvent#event:change
       */
      Feature.prototype.setStyle = function (style) {
          this.style_ = style;
          this.styleFunction_ = !style ? undefined : createStyleFunction(style);
          this.changed();
      };
      /**
       * Set the feature id.  The feature id is considered stable and may be used when
       * requesting features or comparing identifiers returned from a remote source.
       * The feature id can be used with the
       * {@link module:ol/source/Vector~VectorSource#getFeatureById} method.
       * @param {number|string|undefined} id The feature id.
       * @api
       * @fires module:ol/events/Event~BaseEvent#event:change
       */
      Feature.prototype.setId = function (id) {
          this.id_ = id;
          this.changed();
      };
      /**
       * Set the property name to be used when getting the feature's default geometry.
       * When calling {@link module:ol/Feature~Feature#getGeometry}, the value of the property with
       * this name will be returned.
       * @param {string} name The property name of the default geometry.
       * @api
       */
      Feature.prototype.setGeometryName = function (name) {
          this.removeEventListener(getChangeEventType(this.geometryName_), this.handleGeometryChanged_);
          this.geometryName_ = name;
          this.addEventListener(getChangeEventType(this.geometryName_), this.handleGeometryChanged_);
          this.handleGeometryChanged_();
      };
      return Feature;
  }(BaseObject));
  /**
   * Convert the provided object into a feature style function.  Functions passed
   * through unchanged.  Arrays of Style or single style objects wrapped
   * in a new feature style function.
   * @param {!import("./style/Style.js").StyleFunction|!Array<import("./style/Style.js").default>|!import("./style/Style.js").default} obj
   *     A feature style function, a single style, or an array of styles.
   * @return {import("./style/Style.js").StyleFunction} A style function.
   */
  function createStyleFunction(obj) {
      if (typeof obj === 'function') {
          return obj;
      }
      else {
          /**
           * @type {Array<import("./style/Style.js").default>}
           */
          var styles_1;
          if (Array.isArray(obj)) {
              styles_1 = obj;
          }
          else {
              assert(typeof /** @type {?} */ (obj).getZIndex === 'function', 41); // Expected an `import("./style/Style.js").Style` or an array of `import("./style/Style.js").Style`
              var style = /** @type {import("./style/Style.js").default} */ (obj);
              styles_1 = [style];
          }
          return function () {
              return styles_1;
          };
      }
  }

  /**
   * @module ol/geom/flat/length
   */
  /**
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @return {number} Length.
   */
  function lineStringLength(flatCoordinates, offset, end, stride) {
      var x1 = flatCoordinates[offset];
      var y1 = flatCoordinates[offset + 1];
      var length = 0;
      for (var i = offset + stride; i < end; i += stride) {
          var x2 = flatCoordinates[i];
          var y2 = flatCoordinates[i + 1];
          length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
          x1 = x2;
          y1 = y2;
      }
      return length;
  }

  var __extends$P =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @classdesc
   * Linestring geometry.
   *
   * @api
   */
  var LineString = /** @class */ (function (_super) {
      __extends$P(LineString, _super);
      /**
       * @param {Array<import("../coordinate.js").Coordinate>|Array<number>} coordinates Coordinates.
       *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.
       * @param {GeometryLayout=} opt_layout Layout.
       */
      function LineString(coordinates, opt_layout) {
          var _this = _super.call(this) || this;
          /**
           * @private
           * @type {import("../coordinate.js").Coordinate}
           */
          _this.flatMidpoint_ = null;
          /**
           * @private
           * @type {number}
           */
          _this.flatMidpointRevision_ = -1;
          /**
           * @private
           * @type {number}
           */
          _this.maxDelta_ = -1;
          /**
           * @private
           * @type {number}
           */
          _this.maxDeltaRevision_ = -1;
          if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {
              _this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));
          }
          else {
              _this.setCoordinates(/** @type {Array<import("../coordinate.js").Coordinate>} */ (coordinates), opt_layout);
          }
          return _this;
      }
      /**
       * Append the passed coordinate to the coordinates of the linestring.
       * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
       * @api
       */
      LineString.prototype.appendCoordinate = function (coordinate) {
          if (!this.flatCoordinates) {
              this.flatCoordinates = coordinate.slice();
          }
          else {
              extend$1(this.flatCoordinates, coordinate);
          }
          this.changed();
      };
      /**
       * Make a complete copy of the geometry.
       * @return {!LineString} Clone.
       * @override
       * @api
       */
      LineString.prototype.clone = function () {
          return new LineString(this.flatCoordinates.slice(), this.layout);
      };
      /**
       * @inheritDoc
       */
      LineString.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {
          if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
              return minSquaredDistance;
          }
          if (this.maxDeltaRevision_ != this.getRevision()) {
              this.maxDelta_ = Math.sqrt(maxSquaredDelta(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));
              this.maxDeltaRevision_ = this.getRevision();
          }
          return assignClosestPoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);
      };
      /**
       * Iterate over each segment, calling the provided callback.
       * If the callback returns a truthy value the function returns that
       * value immediately. Otherwise the function returns `false`.
       *
       * @param {function(this: S, import("../coordinate.js").Coordinate, import("../coordinate.js").Coordinate): T} callback Function
       *     called for each segment. The function will receive two arguments, the start and end coordinates of the segment.
       * @return {T|boolean} Value.
       * @template T,S
       * @api
       */
      LineString.prototype.forEachSegment = function (callback) {
          return forEach(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, callback);
      };
      /**
       * Returns the coordinate at `m` using linear interpolation, or `null` if no
       * such coordinate exists.
       *
       * `opt_extrapolate` controls extrapolation beyond the range of Ms in the
       * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first
       * M will return the first coordinate and Ms greater than the last M will
       * return the last coordinate.
       *
       * @param {number} m M.
       * @param {boolean=} opt_extrapolate Extrapolate. Default is `false`.
       * @return {import("../coordinate.js").Coordinate} Coordinate.
       * @api
       */
      LineString.prototype.getCoordinateAtM = function (m, opt_extrapolate) {
          if (this.layout != GeometryLayout.XYM &&
              this.layout != GeometryLayout.XYZM) {
              return null;
          }
          var extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;
          return lineStringCoordinateAtM(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, m, extrapolate);
      };
      /**
       * Return the coordinates of the linestring.
       * @return {Array<import("../coordinate.js").Coordinate>} Coordinates.
       * @override
       * @api
       */
      LineString.prototype.getCoordinates = function () {
          return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
      };
      /**
       * Return the coordinate at the provided fraction along the linestring.
       * The `fraction` is a number between 0 and 1, where 0 is the start of the
       * linestring and 1 is the end.
       * @param {number} fraction Fraction.
       * @param {import("../coordinate.js").Coordinate=} opt_dest Optional coordinate whose values will
       *     be modified. If not provided, a new coordinate will be returned.
       * @return {import("../coordinate.js").Coordinate} Coordinate of the interpolated point.
       * @api
       */
      LineString.prototype.getCoordinateAt = function (fraction, opt_dest) {
          return interpolatePoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, fraction, opt_dest);
      };
      /**
       * Return the length of the linestring on projected plane.
       * @return {number} Length (on projected plane).
       * @api
       */
      LineString.prototype.getLength = function () {
          return lineStringLength(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
      };
      /**
       * @return {Array<number>} Flat midpoint.
       */
      LineString.prototype.getFlatMidpoint = function () {
          if (this.flatMidpointRevision_ != this.getRevision()) {
              this.flatMidpoint_ = this.getCoordinateAt(0.5, this.flatMidpoint_);
              this.flatMidpointRevision_ = this.getRevision();
          }
          return this.flatMidpoint_;
      };
      /**
       * @inheritDoc
       */
      LineString.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {
          var simplifiedFlatCoordinates = [];
          simplifiedFlatCoordinates.length = douglasPeucker(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);
          return new LineString(simplifiedFlatCoordinates, GeometryLayout.XY);
      };
      /**
       * @inheritDoc
       * @api
       */
      LineString.prototype.getType = function () {
          return GeometryType.LINE_STRING;
      };
      /**
       * @inheritDoc
       * @api
       */
      LineString.prototype.intersectsExtent = function (extent) {
          return intersectsLineString(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);
      };
      /**
       * Set the coordinates of the linestring.
       * @param {!Array<import("../coordinate.js").Coordinate>} coordinates Coordinates.
       * @param {GeometryLayout=} opt_layout Layout.
       * @override
       * @api
       */
      LineString.prototype.setCoordinates = function (coordinates, opt_layout) {
          this.setLayout(opt_layout, coordinates, 1);
          if (!this.flatCoordinates) {
              this.flatCoordinates = [];
          }
          this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);
          this.changed();
      };
      return LineString;
  }(SimpleGeometry));

  var __extends$Q =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @classdesc
   * Multi-linestring geometry.
   *
   * @api
   */
  var MultiLineString = /** @class */ (function (_super) {
      __extends$Q(MultiLineString, _super);
      /**
       * @param {Array<Array<import("../coordinate.js").Coordinate>|LineString>|Array<number>} coordinates
       *     Coordinates or LineString geometries. (For internal use, flat coordinates in
       *     combination with `opt_layout` and `opt_ends` are also accepted.)
       * @param {GeometryLayout=} opt_layout Layout.
       * @param {Array<number>=} opt_ends Flat coordinate ends for internal use.
       */
      function MultiLineString(coordinates, opt_layout, opt_ends) {
          var _this = _super.call(this) || this;
          /**
           * @type {Array<number>}
           * @private
           */
          _this.ends_ = [];
          /**
           * @private
           * @type {number}
           */
          _this.maxDelta_ = -1;
          /**
           * @private
           * @type {number}
           */
          _this.maxDeltaRevision_ = -1;
          if (Array.isArray(coordinates[0])) {
              _this.setCoordinates(/** @type {Array<Array<import("../coordinate.js").Coordinate>>} */ (coordinates), opt_layout);
          }
          else if (opt_layout !== undefined && opt_ends) {
              _this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));
              _this.ends_ = opt_ends;
          }
          else {
              var layout = _this.getLayout();
              var lineStrings = /** @type {Array<LineString>} */ (coordinates);
              var flatCoordinates = [];
              var ends = [];
              for (var i = 0, ii = lineStrings.length; i < ii; ++i) {
                  var lineString = lineStrings[i];
                  if (i === 0) {
                      layout = lineString.getLayout();
                  }
                  extend$1(flatCoordinates, lineString.getFlatCoordinates());
                  ends.push(flatCoordinates.length);
              }
              _this.setFlatCoordinates(layout, flatCoordinates);
              _this.ends_ = ends;
          }
          return _this;
      }
      /**
       * Append the passed linestring to the multilinestring.
       * @param {LineString} lineString LineString.
       * @api
       */
      MultiLineString.prototype.appendLineString = function (lineString) {
          if (!this.flatCoordinates) {
              this.flatCoordinates = lineString.getFlatCoordinates().slice();
          }
          else {
              extend$1(this.flatCoordinates, lineString.getFlatCoordinates().slice());
          }
          this.ends_.push(this.flatCoordinates.length);
          this.changed();
      };
      /**
       * Make a complete copy of the geometry.
       * @return {!MultiLineString} Clone.
       * @override
       * @api
       */
      MultiLineString.prototype.clone = function () {
          return new MultiLineString(this.flatCoordinates.slice(), this.layout, this.ends_.slice());
      };
      /**
       * @inheritDoc
       */
      MultiLineString.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {
          if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
              return minSquaredDistance;
          }
          if (this.maxDeltaRevision_ != this.getRevision()) {
              this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(this.flatCoordinates, 0, this.ends_, this.stride, 0));
              this.maxDeltaRevision_ = this.getRevision();
          }
          return assignClosestArrayPoint(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);
      };
      /**
       * Returns the coordinate at `m` using linear interpolation, or `null` if no
       * such coordinate exists.
       *
       * `opt_extrapolate` controls extrapolation beyond the range of Ms in the
       * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first
       * M will return the first coordinate and Ms greater than the last M will
       * return the last coordinate.
       *
       * `opt_interpolate` controls interpolation between consecutive LineStrings
       * within the MultiLineString. If `opt_interpolate` is `true` the coordinates
       * will be linearly interpolated between the last coordinate of one LineString
       * and the first coordinate of the next LineString.  If `opt_interpolate` is
       * `false` then the function will return `null` for Ms falling between
       * LineStrings.
       *
       * @param {number} m M.
       * @param {boolean=} opt_extrapolate Extrapolate. Default is `false`.
       * @param {boolean=} opt_interpolate Interpolate. Default is `false`.
       * @return {import("../coordinate.js").Coordinate} Coordinate.
       * @api
       */
      MultiLineString.prototype.getCoordinateAtM = function (m, opt_extrapolate, opt_interpolate) {
          if ((this.layout != GeometryLayout.XYM &&
              this.layout != GeometryLayout.XYZM) ||
              this.flatCoordinates.length === 0) {
              return null;
          }
          var extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;
          var interpolate = opt_interpolate !== undefined ? opt_interpolate : false;
          return lineStringsCoordinateAtM(this.flatCoordinates, 0, this.ends_, this.stride, m, extrapolate, interpolate);
      };
      /**
       * Return the coordinates of the multilinestring.
       * @return {Array<Array<import("../coordinate.js").Coordinate>>} Coordinates.
       * @override
       * @api
       */
      MultiLineString.prototype.getCoordinates = function () {
          return inflateCoordinatesArray(this.flatCoordinates, 0, this.ends_, this.stride);
      };
      /**
       * @return {Array<number>} Ends.
       */
      MultiLineString.prototype.getEnds = function () {
          return this.ends_;
      };
      /**
       * Return the linestring at the specified index.
       * @param {number} index Index.
       * @return {LineString} LineString.
       * @api
       */
      MultiLineString.prototype.getLineString = function (index) {
          if (index < 0 || this.ends_.length <= index) {
              return null;
          }
          return new LineString(this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);
      };
      /**
       * Return the linestrings of this multilinestring.
       * @return {Array<LineString>} LineStrings.
       * @api
       */
      MultiLineString.prototype.getLineStrings = function () {
          var flatCoordinates = this.flatCoordinates;
          var ends = this.ends_;
          var layout = this.layout;
          /** @type {Array<LineString>} */
          var lineStrings = [];
          var offset = 0;
          for (var i = 0, ii = ends.length; i < ii; ++i) {
              var end = ends[i];
              var lineString = new LineString(flatCoordinates.slice(offset, end), layout);
              lineStrings.push(lineString);
              offset = end;
          }
          return lineStrings;
      };
      /**
       * @return {Array<number>} Flat midpoints.
       */
      MultiLineString.prototype.getFlatMidpoints = function () {
          var midpoints = [];
          var flatCoordinates = this.flatCoordinates;
          var offset = 0;
          var ends = this.ends_;
          var stride = this.stride;
          for (var i = 0, ii = ends.length; i < ii; ++i) {
              var end = ends[i];
              var midpoint = interpolatePoint(flatCoordinates, offset, end, stride, 0.5);
              extend$1(midpoints, midpoint);
              offset = end;
          }
          return midpoints;
      };
      /**
       * @inheritDoc
       */
      MultiLineString.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {
          var simplifiedFlatCoordinates = [];
          var simplifiedEnds = [];
          simplifiedFlatCoordinates.length = douglasPeuckerArray(this.flatCoordinates, 0, this.ends_, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0, simplifiedEnds);
          return new MultiLineString(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEnds);
      };
      /**
       * @inheritDoc
       * @api
       */
      MultiLineString.prototype.getType = function () {
          return GeometryType.MULTI_LINE_STRING;
      };
      /**
       * @inheritDoc
       * @api
       */
      MultiLineString.prototype.intersectsExtent = function (extent) {
          return intersectsLineStringArray(this.flatCoordinates, 0, this.ends_, this.stride, extent);
      };
      /**
       * Set the coordinates of the multilinestring.
       * @param {!Array<Array<import("../coordinate.js").Coordinate>>} coordinates Coordinates.
       * @param {GeometryLayout=} opt_layout Layout.
       * @override
       * @api
       */
      MultiLineString.prototype.setCoordinates = function (coordinates, opt_layout) {
          this.setLayout(opt_layout, coordinates, 2);
          if (!this.flatCoordinates) {
              this.flatCoordinates = [];
          }
          var ends = deflateCoordinatesArray(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);
          this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];
          this.changed();
      };
      return MultiLineString;
  }(SimpleGeometry));

  var __extends$R =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @classdesc
   * Multi-point geometry.
   *
   * @api
   */
  var MultiPoint = /** @class */ (function (_super) {
      __extends$R(MultiPoint, _super);
      /**
       * @param {Array<import("../coordinate.js").Coordinate>|Array<number>} coordinates Coordinates.
       *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.
       * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
       */
      function MultiPoint(coordinates, opt_layout) {
          var _this = _super.call(this) || this;
          if (opt_layout && !Array.isArray(coordinates[0])) {
              _this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));
          }
          else {
              _this.setCoordinates(/** @type {Array<import("../coordinate.js").Coordinate>} */ (coordinates), opt_layout);
          }
          return _this;
      }
      /**
       * Append the passed point to this multipoint.
       * @param {Point} point Point.
       * @api
       */
      MultiPoint.prototype.appendPoint = function (point) {
          if (!this.flatCoordinates) {
              this.flatCoordinates = point.getFlatCoordinates().slice();
          }
          else {
              extend$1(this.flatCoordinates, point.getFlatCoordinates());
          }
          this.changed();
      };
      /**
       * Make a complete copy of the geometry.
       * @return {!MultiPoint} Clone.
       * @override
       * @api
       */
      MultiPoint.prototype.clone = function () {
          var multiPoint = new MultiPoint(this.flatCoordinates.slice(), this.layout);
          return multiPoint;
      };
      /**
       * @inheritDoc
       */
      MultiPoint.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {
          if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
              return minSquaredDistance;
          }
          var flatCoordinates = this.flatCoordinates;
          var stride = this.stride;
          for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {
              var squaredDistance$1 = squaredDistance(x, y, flatCoordinates[i], flatCoordinates[i + 1]);
              if (squaredDistance$1 < minSquaredDistance) {
                  minSquaredDistance = squaredDistance$1;
                  for (var j = 0; j < stride; ++j) {
                      closestPoint[j] = flatCoordinates[i + j];
                  }
                  closestPoint.length = stride;
              }
          }
          return minSquaredDistance;
      };
      /**
       * Return the coordinates of the multipoint.
       * @return {Array<import("../coordinate.js").Coordinate>} Coordinates.
       * @override
       * @api
       */
      MultiPoint.prototype.getCoordinates = function () {
          return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
      };
      /**
       * Return the point at the specified index.
       * @param {number} index Index.
       * @return {Point} Point.
       * @api
       */
      MultiPoint.prototype.getPoint = function (index) {
          var n = !this.flatCoordinates ? 0 : this.flatCoordinates.length / this.stride;
          if (index < 0 || n <= index) {
              return null;
          }
          return new Point(this.flatCoordinates.slice(index * this.stride, (index + 1) * this.stride), this.layout);
      };
      /**
       * Return the points of this multipoint.
       * @return {Array<Point>} Points.
       * @api
       */
      MultiPoint.prototype.getPoints = function () {
          var flatCoordinates = this.flatCoordinates;
          var layout = this.layout;
          var stride = this.stride;
          /** @type {Array<Point>} */
          var points = [];
          for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {
              var point = new Point(flatCoordinates.slice(i, i + stride), layout);
              points.push(point);
          }
          return points;
      };
      /**
       * @inheritDoc
       * @api
       */
      MultiPoint.prototype.getType = function () {
          return GeometryType.MULTI_POINT;
      };
      /**
       * @inheritDoc
       * @api
       */
      MultiPoint.prototype.intersectsExtent = function (extent) {
          var flatCoordinates = this.flatCoordinates;
          var stride = this.stride;
          for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {
              var x = flatCoordinates[i];
              var y = flatCoordinates[i + 1];
              if (containsXY(extent, x, y)) {
                  return true;
              }
          }
          return false;
      };
      /**
       * Set the coordinates of the multipoint.
       * @param {!Array<import("../coordinate.js").Coordinate>} coordinates Coordinates.
       * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
       * @override
       * @api
       */
      MultiPoint.prototype.setCoordinates = function (coordinates, opt_layout) {
          this.setLayout(opt_layout, coordinates, 1);
          if (!this.flatCoordinates) {
              this.flatCoordinates = [];
          }
          this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);
          this.changed();
      };
      return MultiPoint;
  }(SimpleGeometry));

  var __extends$S =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @classdesc
   * Multi-polygon geometry.
   *
   * @api
   */
  var MultiPolygon = /** @class */ (function (_super) {
      __extends$S(MultiPolygon, _super);
      /**
       * @param {Array<Array<Array<import("../coordinate.js").Coordinate>>|Polygon>|Array<number>} coordinates Coordinates.
       *     For internal use, flat coordinates in combination with `opt_layout` and `opt_endss` are also accepted.
       * @param {GeometryLayout=} opt_layout Layout.
       * @param {Array<Array<number>>=} opt_endss Array of ends for internal use with flat coordinates.
       */
      function MultiPolygon(coordinates, opt_layout, opt_endss) {
          var _this = _super.call(this) || this;
          /**
           * @type {Array<Array<number>>}
           * @private
           */
          _this.endss_ = [];
          /**
           * @private
           * @type {number}
           */
          _this.flatInteriorPointsRevision_ = -1;
          /**
           * @private
           * @type {Array<number>}
           */
          _this.flatInteriorPoints_ = null;
          /**
           * @private
           * @type {number}
           */
          _this.maxDelta_ = -1;
          /**
           * @private
           * @type {number}
           */
          _this.maxDeltaRevision_ = -1;
          /**
           * @private
           * @type {number}
           */
          _this.orientedRevision_ = -1;
          /**
           * @private
           * @type {Array<number>}
           */
          _this.orientedFlatCoordinates_ = null;
          if (!opt_endss && !Array.isArray(coordinates[0])) {
              var layout = _this.getLayout();
              var polygons = /** @type {Array<Polygon>} */ (coordinates);
              var flatCoordinates = [];
              var endss = [];
              for (var i = 0, ii = polygons.length; i < ii; ++i) {
                  var polygon = polygons[i];
                  if (i === 0) {
                      layout = polygon.getLayout();
                  }
                  var offset = flatCoordinates.length;
                  var ends = polygon.getEnds();
                  for (var j = 0, jj = ends.length; j < jj; ++j) {
                      ends[j] += offset;
                  }
                  extend$1(flatCoordinates, polygon.getFlatCoordinates());
                  endss.push(ends);
              }
              opt_layout = layout;
              coordinates = flatCoordinates;
              opt_endss = endss;
          }
          if (opt_layout !== undefined && opt_endss) {
              _this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));
              _this.endss_ = opt_endss;
          }
          else {
              _this.setCoordinates(/** @type {Array<Array<Array<import("../coordinate.js").Coordinate>>>} */ (coordinates), opt_layout);
          }
          return _this;
      }
      /**
       * Append the passed polygon to this multipolygon.
       * @param {Polygon} polygon Polygon.
       * @api
       */
      MultiPolygon.prototype.appendPolygon = function (polygon) {
          /** @type {Array<number>} */
          var ends;
          if (!this.flatCoordinates) {
              this.flatCoordinates = polygon.getFlatCoordinates().slice();
              ends = polygon.getEnds().slice();
              this.endss_.push();
          }
          else {
              var offset = this.flatCoordinates.length;
              extend$1(this.flatCoordinates, polygon.getFlatCoordinates());
              ends = polygon.getEnds().slice();
              for (var i = 0, ii = ends.length; i < ii; ++i) {
                  ends[i] += offset;
              }
          }
          this.endss_.push(ends);
          this.changed();
      };
      /**
       * Make a complete copy of the geometry.
       * @return {!MultiPolygon} Clone.
       * @override
       * @api
       */
      MultiPolygon.prototype.clone = function () {
          var len = this.endss_.length;
          var newEndss = new Array(len);
          for (var i = 0; i < len; ++i) {
              newEndss[i] = this.endss_[i].slice();
          }
          return new MultiPolygon(this.flatCoordinates.slice(), this.layout, newEndss);
      };
      /**
       * @inheritDoc
       */
      MultiPolygon.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {
          if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
              return minSquaredDistance;
          }
          if (this.maxDeltaRevision_ != this.getRevision()) {
              this.maxDelta_ = Math.sqrt(multiArrayMaxSquaredDelta(this.flatCoordinates, 0, this.endss_, this.stride, 0));
              this.maxDeltaRevision_ = this.getRevision();
          }
          return assignClosestMultiArrayPoint(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);
      };
      /**
       * @inheritDoc
       */
      MultiPolygon.prototype.containsXY = function (x, y) {
          return linearRingssContainsXY(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, x, y);
      };
      /**
       * Return the area of the multipolygon on projected plane.
       * @return {number} Area (on projected plane).
       * @api
       */
      MultiPolygon.prototype.getArea = function () {
          return linearRingss$1(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride);
      };
      /**
       * Get the coordinate array for this geometry.  This array has the structure
       * of a GeoJSON coordinate array for multi-polygons.
       *
       * @param {boolean=} opt_right Orient coordinates according to the right-hand
       *     rule (counter-clockwise for exterior and clockwise for interior rings).
       *     If `false`, coordinates will be oriented according to the left-hand rule
       *     (clockwise for exterior and counter-clockwise for interior rings).
       *     By default, coordinate orientation will depend on how the geometry was
       *     constructed.
       * @return {Array<Array<Array<import("../coordinate.js").Coordinate>>>} Coordinates.
       * @override
       * @api
       */
      MultiPolygon.prototype.getCoordinates = function (opt_right) {
          var flatCoordinates;
          if (opt_right !== undefined) {
              flatCoordinates = this.getOrientedFlatCoordinates().slice();
              orientLinearRingsArray(flatCoordinates, 0, this.endss_, this.stride, opt_right);
          }
          else {
              flatCoordinates = this.flatCoordinates;
          }
          return inflateMultiCoordinatesArray(flatCoordinates, 0, this.endss_, this.stride);
      };
      /**
       * @return {Array<Array<number>>} Endss.
       */
      MultiPolygon.prototype.getEndss = function () {
          return this.endss_;
      };
      /**
       * @return {Array<number>} Flat interior points.
       */
      MultiPolygon.prototype.getFlatInteriorPoints = function () {
          if (this.flatInteriorPointsRevision_ != this.getRevision()) {
              var flatCenters = linearRingss(this.flatCoordinates, 0, this.endss_, this.stride);
              this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, flatCenters);
              this.flatInteriorPointsRevision_ = this.getRevision();
          }
          return this.flatInteriorPoints_;
      };
      /**
       * Return the interior points as {@link module:ol/geom/MultiPoint multipoint}.
       * @return {MultiPoint} Interior points as XYM coordinates, where M is
       * the length of the horizontal intersection that the point belongs to.
       * @api
       */
      MultiPolygon.prototype.getInteriorPoints = function () {
          return new MultiPoint(this.getFlatInteriorPoints().slice(), GeometryLayout.XYM);
      };
      /**
       * @return {Array<number>} Oriented flat coordinates.
       */
      MultiPolygon.prototype.getOrientedFlatCoordinates = function () {
          if (this.orientedRevision_ != this.getRevision()) {
              var flatCoordinates = this.flatCoordinates;
              if (linearRingssAreOriented(flatCoordinates, 0, this.endss_, this.stride)) {
                  this.orientedFlatCoordinates_ = flatCoordinates;
              }
              else {
                  this.orientedFlatCoordinates_ = flatCoordinates.slice();
                  this.orientedFlatCoordinates_.length =
                      orientLinearRingsArray(this.orientedFlatCoordinates_, 0, this.endss_, this.stride);
              }
              this.orientedRevision_ = this.getRevision();
          }
          return this.orientedFlatCoordinates_;
      };
      /**
       * @inheritDoc
       */
      MultiPolygon.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {
          var simplifiedFlatCoordinates = [];
          var simplifiedEndss = [];
          simplifiedFlatCoordinates.length = quantizeMultiArray(this.flatCoordinates, 0, this.endss_, this.stride, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEndss);
          return new MultiPolygon(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEndss);
      };
      /**
       * Return the polygon at the specified index.
       * @param {number} index Index.
       * @return {Polygon} Polygon.
       * @api
       */
      MultiPolygon.prototype.getPolygon = function (index) {
          if (index < 0 || this.endss_.length <= index) {
              return null;
          }
          var offset;
          if (index === 0) {
              offset = 0;
          }
          else {
              var prevEnds = this.endss_[index - 1];
              offset = prevEnds[prevEnds.length - 1];
          }
          var ends = this.endss_[index].slice();
          var end = ends[ends.length - 1];
          if (offset !== 0) {
              for (var i = 0, ii = ends.length; i < ii; ++i) {
                  ends[i] -= offset;
              }
          }
          return new Polygon(this.flatCoordinates.slice(offset, end), this.layout, ends);
      };
      /**
       * Return the polygons of this multipolygon.
       * @return {Array<Polygon>} Polygons.
       * @api
       */
      MultiPolygon.prototype.getPolygons = function () {
          var layout = this.layout;
          var flatCoordinates = this.flatCoordinates;
          var endss = this.endss_;
          var polygons = [];
          var offset = 0;
          for (var i = 0, ii = endss.length; i < ii; ++i) {
              var ends = endss[i].slice();
              var end = ends[ends.length - 1];
              if (offset !== 0) {
                  for (var j = 0, jj = ends.length; j < jj; ++j) {
                      ends[j] -= offset;
                  }
              }
              var polygon = new Polygon(flatCoordinates.slice(offset, end), layout, ends);
              polygons.push(polygon);
              offset = end;
          }
          return polygons;
      };
      /**
       * @inheritDoc
       * @api
       */
      MultiPolygon.prototype.getType = function () {
          return GeometryType.MULTI_POLYGON;
      };
      /**
       * @inheritDoc
       * @api
       */
      MultiPolygon.prototype.intersectsExtent = function (extent) {
          return intersectsLinearRingMultiArray(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, extent);
      };
      /**
       * Set the coordinates of the multipolygon.
       * @param {!Array<Array<Array<import("../coordinate.js").Coordinate>>>} coordinates Coordinates.
       * @param {GeometryLayout=} opt_layout Layout.
       * @override
       * @api
       */
      MultiPolygon.prototype.setCoordinates = function (coordinates, opt_layout) {
          this.setLayout(opt_layout, coordinates, 3);
          if (!this.flatCoordinates) {
              this.flatCoordinates = [];
          }
          var endss = deflateMultiCoordinatesArray(this.flatCoordinates, 0, coordinates, this.stride, this.endss_);
          if (endss.length === 0) {
              this.flatCoordinates.length = 0;
          }
          else {
              var lastEnds = endss[endss.length - 1];
              this.flatCoordinates.length = lastEnds.length === 0 ?
                  0 : lastEnds[lastEnds.length - 1];
          }
          this.changed();
      };
      return MultiPolygon;
  }(SimpleGeometry));

  var __extends$T =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
   * visible.
   * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
   * be visible.
   * @property {import("../render.js").OrderFunction} [renderOrder] Render order. Function to be used when sorting
   * features before rendering. By default features are drawn in the order that they are created. Use
   * `null` to avoid the sort, but get an undefined draw order.
   * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the
   * renderer when getting features from the vector source for the rendering or hit-detection.
   * Recommended value: the size of the largest symbol, line width or label.
   * @property {import("../source/Vector.js").default} [source] Source.
   * @property {import("../PluggableMap.js").default} [map] Sets the layer as overlay on a map. The map will not manage
   * this layer in its layers collection, and the layer will be rendered on top. This is useful for
   * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
   * use {@link module:ol/Map#addLayer}.
   * @property {boolean} [declutter=false] Declutter images and text. Decluttering is applied to all
   * image and text styles of all Vector and VectorTile layers that have set this to `true`. The priority
   * is defined by the z-index of the layer, the `zIndex` of the style and the render order of features.
   * Higher z-index means higher priority. Within the same z-index, a feature rendered before another has
   * higher priority.
   * @property {import("../style/Style.js").StyleLike} [style] Layer style. See
   * {@link module:ol/style} for default style which will be used if this is not defined.
   * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will
   * be recreated during animations. This means that no vectors will be shown clipped, but the
   * setting will have a performance impact for large amounts of vector data. When set to `false`,
   * batches will be recreated when no animation is active.
   * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will
   * be recreated during interactions. See also `updateWhileAnimating`.
   */
  /**
   * @enum {string}
   * @private
   */
  var Property$2 = {
      RENDER_ORDER: 'renderOrder'
  };
  /**
   * @classdesc
   * Vector data that is rendered client-side.
   * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
   * property on the layer object; for example, setting `title: 'My Title'` in the
   * options means that `title` is observable, and has get/set accessors.
   *
   * @template {import("../source/Vector.js").default|import("../source/VectorTile.js").default} VectorSourceType
   * @extends {Layer<VectorSourceType>}
   * @api
   */
  var BaseVectorLayer = /** @class */ (function (_super) {
      __extends$T(BaseVectorLayer, _super);
      /**
       * @param {Options=} opt_options Options.
       */
      function BaseVectorLayer(opt_options) {
          var _this = this;
          var options = opt_options ? opt_options : {};
          var baseOptions = assign({}, options);
          delete baseOptions.style;
          delete baseOptions.renderBuffer;
          delete baseOptions.updateWhileAnimating;
          delete baseOptions.updateWhileInteracting;
          _this = _super.call(this, baseOptions) || this;
          /**
           * @private
           * @type {boolean}
           */
          _this.declutter_ = options.declutter !== undefined ? options.declutter : false;
          /**
           * @type {number}
           * @private
           */
          _this.renderBuffer_ = options.renderBuffer !== undefined ?
              options.renderBuffer : 100;
          /**
           * User provided style.
           * @type {import("../style/Style.js").StyleLike}
           * @private
           */
          _this.style_ = null;
          /**
           * Style function for use within the library.
           * @type {import("../style/Style.js").StyleFunction|undefined}
           * @private
           */
          _this.styleFunction_ = undefined;
          _this.setStyle(options.style);
          /**
           * @type {boolean}
           * @private
           */
          _this.updateWhileAnimating_ = options.updateWhileAnimating !== undefined ?
              options.updateWhileAnimating : false;
          /**
           * @type {boolean}
           * @private
           */
          _this.updateWhileInteracting_ = options.updateWhileInteracting !== undefined ?
              options.updateWhileInteracting : false;
          return _this;
      }
      /**
       * @return {boolean} Declutter.
       */
      BaseVectorLayer.prototype.getDeclutter = function () {
          return this.declutter_;
      };
      /**
       * Get the topmost feature that intersects the given pixel on the viewport. Returns a promise
       * that resolves with an array of features. The array will either contain the topmost feature
       * when a hit was detected, or it will be empty.
       *
       * The hit detection algorithm used for this method is optimized for performance, but is less
       * accurate than the one used in {@link import("../PluggableMap.js").default#getFeaturesAtPixel}: Text
       * is not considered, and icons are only represented by their bounding box instead of the exact
       * image.
       *
       * @param {import("../pixel.js").Pixel} pixel Pixel.
       * @return {Promise<Array<import("../Feature").default>>} Promise that resolves with an array of features.
       * @api
       */
      BaseVectorLayer.prototype.getFeatures = function (pixel) {
          return _super.prototype.getFeatures.call(this, pixel);
      };
      /**
       * @return {number|undefined} Render buffer.
       */
      BaseVectorLayer.prototype.getRenderBuffer = function () {
          return this.renderBuffer_;
      };
      /**
       * @return {function(import("../Feature.js").default, import("../Feature.js").default): number|null|undefined} Render
       *     order.
       */
      BaseVectorLayer.prototype.getRenderOrder = function () {
          return (
          /** @type {import("../render.js").OrderFunction|null|undefined} */ (this.get(Property$2.RENDER_ORDER)));
      };
      /**
       * Get the style for features.  This returns whatever was passed to the `style`
       * option at construction or to the `setStyle` method.
       * @return {import("../style/Style.js").StyleLike}
       *     Layer style.
       * @api
       */
      BaseVectorLayer.prototype.getStyle = function () {
          return this.style_;
      };
      /**
       * Get the style function.
       * @return {import("../style/Style.js").StyleFunction|undefined} Layer style function.
       * @api
       */
      BaseVectorLayer.prototype.getStyleFunction = function () {
          return this.styleFunction_;
      };
      /**
       * @return {boolean} Whether the rendered layer should be updated while
       *     animating.
       */
      BaseVectorLayer.prototype.getUpdateWhileAnimating = function () {
          return this.updateWhileAnimating_;
      };
      /**
       * @return {boolean} Whether the rendered layer should be updated while
       *     interacting.
       */
      BaseVectorLayer.prototype.getUpdateWhileInteracting = function () {
          return this.updateWhileInteracting_;
      };
      /**
       * @param {import("../render.js").OrderFunction|null|undefined} renderOrder
       *     Render order.
       */
      BaseVectorLayer.prototype.setRenderOrder = function (renderOrder) {
          this.set(Property$2.RENDER_ORDER, renderOrder);
      };
      /**
       * Set the style for features.  This can be a single style object, an array
       * of styles, or a function that takes a feature and resolution and returns
       * an array of styles. If it is `undefined` the default style is used. If
       * it is `null` the layer has no style (a `null` style), so only features
       * that have their own styles will be rendered in the layer. See
       * {@link module:ol/style} for information on the default style.
       * @param {import("../style/Style.js").default|Array<import("../style/Style.js").default>|import("../style/Style.js").StyleFunction|null|undefined} style Layer style.
       * @api
       */
      BaseVectorLayer.prototype.setStyle = function (style) {
          this.style_ = style !== undefined ? style : createDefaultStyle;
          this.styleFunction_ = style === null ?
              undefined : toFunction(this.style_);
          this.changed();
      };
      return BaseVectorLayer;
  }(Layer));

  /**
   * @module ol/render/canvas/Instruction
   */
  /**
   * @enum {number}
   */
  var Instruction = {
      BEGIN_GEOMETRY: 0,
      BEGIN_PATH: 1,
      CIRCLE: 2,
      CLOSE_PATH: 3,
      CUSTOM: 4,
      DRAW_CHARS: 5,
      DRAW_IMAGE: 6,
      END_GEOMETRY: 7,
      FILL: 8,
      MOVE_TO_LINE_TO: 9,
      SET_FILL_STYLE: 10,
      SET_STROKE_STYLE: 11,
      STROKE: 12
  };
  /**
   * @type {Array<Instruction>}
   */
  var fillInstruction = [Instruction.FILL];
  /**
   * @type {Array<Instruction>}
   */
  var strokeInstruction = [Instruction.STROKE];
  /**
   * @type {Array<Instruction>}
   */
  var beginPathInstruction = [Instruction.BEGIN_PATH];
  /**
   * @type {Array<Instruction>}
   */
  var closePathInstruction = [Instruction.CLOSE_PATH];

  var __extends$U =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {Object} SerializableInstructions
   * @property {Array<*>} instructions The rendering instructions.
   * @property {Array<*>} hitDetectionInstructions The rendering hit detection instructions.
   * @property {Array<number>} coordinates The array of all coordinates.
   * @property {!Object<string, import("../canvas.js").TextState>} [textStates] The text states (decluttering).
   * @property {!Object<string, import("../canvas.js").FillState>} [fillStates] The fill states (decluttering).
   * @property {!Object<string, import("../canvas.js").StrokeState>} [strokeStates] The stroke states (decluttering).
   */
  var CanvasBuilder = /** @class */ (function (_super) {
      __extends$U(CanvasBuilder, _super);
      /**
       * @param {number} tolerance Tolerance.
       * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
       * @param {number} resolution Resolution.
       * @param {number} pixelRatio Pixel ratio.
       */
      function CanvasBuilder(tolerance, maxExtent, resolution, pixelRatio) {
          var _this = _super.call(this) || this;
          /**
           * @protected
           * @type {number}
           */
          _this.tolerance = tolerance;
          /**
           * @protected
           * @const
           * @type {import("../../extent.js").Extent}
           */
          _this.maxExtent = maxExtent;
          /**
           * @protected
           * @type {number}
           */
          _this.pixelRatio = pixelRatio;
          /**
           * @protected
           * @type {number}
           */
          _this.maxLineWidth = 0;
          /**
           * @protected
           * @const
           * @type {number}
           */
          _this.resolution = resolution;
          /**
           * @private
           * @type {Array<*>}
           */
          _this.beginGeometryInstruction1_ = null;
          /**
           * @private
           * @type {Array<*>}
           */
          _this.beginGeometryInstruction2_ = null;
          /**
           * @private
           * @type {import("../../extent.js").Extent}
           */
          _this.bufferedMaxExtent_ = null;
          /**
           * @protected
           * @type {Array<*>}
           */
          _this.instructions = [];
          /**
           * @protected
           * @type {Array<number>}
           */
          _this.coordinates = [];
          /**
           * @private
           * @type {import("../../coordinate.js").Coordinate}
           */
          _this.tmpCoordinate_ = [];
          /**
           * @protected
           * @type {Array<*>}
           */
          _this.hitDetectionInstructions = [];
          /**
           * @protected
           * @type {import("../canvas.js").FillStrokeState}
           */
          _this.state = /** @type {import("../canvas.js").FillStrokeState} */ ({});
          return _this;
      }
      /**
       * @protected
       * @param {Array<number>} dashArray Dash array.
       * @return {Array<number>} Dash array with pixel ratio applied
       */
      CanvasBuilder.prototype.applyPixelRatio = function (dashArray) {
          var pixelRatio = this.pixelRatio;
          return pixelRatio == 1 ? dashArray : dashArray.map(function (dash) {
              return dash * pixelRatio;
          });
      };
      /**
       * @param {Array<number>} flatCoordinates Flat coordinates.
       * @param {number} offset Offset.
       * @param {number} end End.
       * @param {number} stride Stride.
       * @param {boolean} closed Last input coordinate equals first.
       * @param {boolean} skipFirst Skip first coordinate.
       * @protected
       * @return {number} My end.
       */
      CanvasBuilder.prototype.appendFlatCoordinates = function (flatCoordinates, offset, end, stride, closed, skipFirst) {
          var myEnd = this.coordinates.length;
          var extent = this.getBufferedMaxExtent();
          if (skipFirst) {
              offset += stride;
          }
          var lastXCoord = flatCoordinates[offset];
          var lastYCoord = flatCoordinates[offset + 1];
          var nextCoord = this.tmpCoordinate_;
          var skipped = true;
          var i, lastRel, nextRel;
          for (i = offset + stride; i < end; i += stride) {
              nextCoord[0] = flatCoordinates[i];
              nextCoord[1] = flatCoordinates[i + 1];
              nextRel = coordinateRelationship(extent, nextCoord);
              if (nextRel !== lastRel) {
                  if (skipped) {
                      this.coordinates[myEnd++] = lastXCoord;
                      this.coordinates[myEnd++] = lastYCoord;
                  }
                  this.coordinates[myEnd++] = nextCoord[0];
                  this.coordinates[myEnd++] = nextCoord[1];
                  skipped = false;
              }
              else if (nextRel === Relationship.INTERSECTING) {
                  this.coordinates[myEnd++] = nextCoord[0];
                  this.coordinates[myEnd++] = nextCoord[1];
                  skipped = false;
              }
              else {
                  skipped = true;
              }
              lastXCoord = nextCoord[0];
              lastYCoord = nextCoord[1];
              lastRel = nextRel;
          }
          // Last coordinate equals first or only one point to append:
          if ((closed && skipped) || i === offset + stride) {
              this.coordinates[myEnd++] = lastXCoord;
              this.coordinates[myEnd++] = lastYCoord;
          }
          return myEnd;
      };
      /**
       * @param {Array<number>} flatCoordinates Flat coordinates.
       * @param {number} offset Offset.
       * @param {Array<number>} ends Ends.
       * @param {number} stride Stride.
       * @param {Array<number>} builderEnds Builder ends.
       * @return {number} Offset.
       */
      CanvasBuilder.prototype.drawCustomCoordinates_ = function (flatCoordinates, offset, ends, stride, builderEnds) {
          for (var i = 0, ii = ends.length; i < ii; ++i) {
              var end = ends[i];
              var builderEnd = this.appendFlatCoordinates(flatCoordinates, offset, end, stride, false, false);
              builderEnds.push(builderEnd);
              offset = end;
          }
          return offset;
      };
      /**
       * @inheritDoc.
       */
      CanvasBuilder.prototype.drawCustom = function (geometry, feature, renderer) {
          this.beginGeometry(geometry, feature);
          var type = geometry.getType();
          var stride = geometry.getStride();
          var builderBegin = this.coordinates.length;
          var flatCoordinates, builderEnd, builderEnds, builderEndss;
          var offset;
          if (type == GeometryType.MULTI_POLYGON) {
              geometry = /** @type {import("../../geom/MultiPolygon.js").default} */ (geometry);
              flatCoordinates = geometry.getOrientedFlatCoordinates();
              builderEndss = [];
              var endss = geometry.getEndss();
              offset = 0;
              for (var i = 0, ii = endss.length; i < ii; ++i) {
                  var myEnds = [];
                  offset = this.drawCustomCoordinates_(flatCoordinates, offset, endss[i], stride, myEnds);
                  builderEndss.push(myEnds);
              }
              this.instructions.push([Instruction.CUSTOM,
                  builderBegin, builderEndss, geometry, renderer, inflateMultiCoordinatesArray]);
          }
          else if (type == GeometryType.POLYGON || type == GeometryType.MULTI_LINE_STRING) {
              builderEnds = [];
              flatCoordinates = (type == GeometryType.POLYGON) ?
                  /** @type {import("../../geom/Polygon.js").default} */ (geometry).getOrientedFlatCoordinates() :
                  geometry.getFlatCoordinates();
              offset = this.drawCustomCoordinates_(flatCoordinates, 0, 
              /** @type {import("../../geom/Polygon.js").default|import("../../geom/MultiLineString.js").default} */ (geometry).getEnds(), stride, builderEnds);
              this.instructions.push([Instruction.CUSTOM,
                  builderBegin, builderEnds, geometry, renderer, inflateCoordinatesArray]);
          }
          else if (type == GeometryType.LINE_STRING || type == GeometryType.MULTI_POINT) {
              flatCoordinates = geometry.getFlatCoordinates();
              builderEnd = this.appendFlatCoordinates(flatCoordinates, 0, flatCoordinates.length, stride, false, false);
              this.instructions.push([Instruction.CUSTOM,
                  builderBegin, builderEnd, geometry, renderer, inflateCoordinates]);
          }
          else if (type == GeometryType.POINT) {
              flatCoordinates = geometry.getFlatCoordinates();
              this.coordinates.push(flatCoordinates[0], flatCoordinates[1]);
              builderEnd = this.coordinates.length;
              this.instructions.push([Instruction.CUSTOM,
                  builderBegin, builderEnd, geometry, renderer]);
          }
          this.endGeometry(feature);
      };
      /**
       * @protected
       * @param {import("../../geom/Geometry").default|import("../Feature.js").default} geometry The geometry.
       * @param {import("../../Feature.js").FeatureLike} feature Feature.
       */
      CanvasBuilder.prototype.beginGeometry = function (geometry, feature) {
          var extent = geometry.getExtent();
          this.beginGeometryInstruction1_ = [Instruction.BEGIN_GEOMETRY, feature, 0, extent];
          this.instructions.push(this.beginGeometryInstruction1_);
          this.beginGeometryInstruction2_ = [Instruction.BEGIN_GEOMETRY, feature, 0, extent];
          this.hitDetectionInstructions.push(this.beginGeometryInstruction2_);
      };
      /**
       * @return {SerializableInstructions} the serializable instructions.
       */
      CanvasBuilder.prototype.finish = function () {
          return {
              instructions: this.instructions,
              hitDetectionInstructions: this.hitDetectionInstructions,
              coordinates: this.coordinates
          };
      };
      /**
       * Reverse the hit detection instructions.
       */
      CanvasBuilder.prototype.reverseHitDetectionInstructions = function () {
          var hitDetectionInstructions = this.hitDetectionInstructions;
          // step 1 - reverse array
          hitDetectionInstructions.reverse();
          // step 2 - reverse instructions within geometry blocks
          var i;
          var n = hitDetectionInstructions.length;
          var instruction;
          var type;
          var begin = -1;
          for (i = 0; i < n; ++i) {
              instruction = hitDetectionInstructions[i];
              type = /** @type {CanvasInstruction} */ (instruction[0]);
              if (type == Instruction.END_GEOMETRY) {
                  begin = i;
              }
              else if (type == Instruction.BEGIN_GEOMETRY) {
                  instruction[2] = i;
                  reverseSubArray(this.hitDetectionInstructions, begin, i);
                  begin = -1;
              }
          }
      };
      /**
       * @inheritDoc
       */
      CanvasBuilder.prototype.setFillStrokeStyle = function (fillStyle, strokeStyle) {
          var state = this.state;
          if (fillStyle) {
              var fillStyleColor = fillStyle.getColor();
              state.fillStyle = asColorLike(fillStyleColor ?
                  fillStyleColor : defaultFillStyle);
          }
          else {
              state.fillStyle = undefined;
          }
          if (strokeStyle) {
              var strokeStyleColor = strokeStyle.getColor();
              state.strokeStyle = asColorLike(strokeStyleColor ?
                  strokeStyleColor : defaultStrokeStyle);
              var strokeStyleLineCap = strokeStyle.getLineCap();
              state.lineCap = strokeStyleLineCap !== undefined ?
                  strokeStyleLineCap : defaultLineCap;
              var strokeStyleLineDash = strokeStyle.getLineDash();
              state.lineDash = strokeStyleLineDash ?
                  strokeStyleLineDash.slice() : defaultLineDash;
              var strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();
              state.lineDashOffset = strokeStyleLineDashOffset ?
                  strokeStyleLineDashOffset : defaultLineDashOffset;
              var strokeStyleLineJoin = strokeStyle.getLineJoin();
              state.lineJoin = strokeStyleLineJoin !== undefined ?
                  strokeStyleLineJoin : defaultLineJoin;
              var strokeStyleWidth = strokeStyle.getWidth();
              state.lineWidth = strokeStyleWidth !== undefined ?
                  strokeStyleWidth : defaultLineWidth;
              var strokeStyleMiterLimit = strokeStyle.getMiterLimit();
              state.miterLimit = strokeStyleMiterLimit !== undefined ?
                  strokeStyleMiterLimit : defaultMiterLimit;
              if (state.lineWidth > this.maxLineWidth) {
                  this.maxLineWidth = state.lineWidth;
                  // invalidate the buffered max extent cache
                  this.bufferedMaxExtent_ = null;
              }
          }
          else {
              state.strokeStyle = undefined;
              state.lineCap = undefined;
              state.lineDash = null;
              state.lineDashOffset = undefined;
              state.lineJoin = undefined;
              state.lineWidth = undefined;
              state.miterLimit = undefined;
          }
      };
      /**
       * @param {import("../canvas.js").FillStrokeState} state State.
       * @return {Array<*>} Fill instruction.
       */
      CanvasBuilder.prototype.createFill = function (state) {
          var fillStyle = state.fillStyle;
          /** @type {Array<*>} */
          var fillInstruction = [Instruction.SET_FILL_STYLE, fillStyle];
          if (typeof fillStyle !== 'string') {
              // Fill is a pattern or gradient - align it!
              fillInstruction.push(true);
          }
          return fillInstruction;
      };
      /**
       * @param {import("../canvas.js").FillStrokeState} state State.
       */
      CanvasBuilder.prototype.applyStroke = function (state) {
          this.instructions.push(this.createStroke(state));
      };
      /**
       * @param {import("../canvas.js").FillStrokeState} state State.
       * @return {Array<*>} Stroke instruction.
       */
      CanvasBuilder.prototype.createStroke = function (state) {
          return [
              Instruction.SET_STROKE_STYLE,
              state.strokeStyle, state.lineWidth * this.pixelRatio, state.lineCap,
              state.lineJoin, state.miterLimit,
              this.applyPixelRatio(state.lineDash), state.lineDashOffset * this.pixelRatio
          ];
      };
      /**
       * @param {import("../canvas.js").FillStrokeState} state State.
       * @param {function(this:CanvasBuilder, import("../canvas.js").FillStrokeState):Array<*>} createFill Create fill.
       */
      CanvasBuilder.prototype.updateFillStyle = function (state, createFill) {
          var fillStyle = state.fillStyle;
          if (typeof fillStyle !== 'string' || state.currentFillStyle != fillStyle) {
              if (fillStyle !== undefined) {
                  this.instructions.push(createFill.call(this, state));
              }
              state.currentFillStyle = fillStyle;
          }
      };
      /**
       * @param {import("../canvas.js").FillStrokeState} state State.
       * @param {function(this:CanvasBuilder, import("../canvas.js").FillStrokeState): void} applyStroke Apply stroke.
       */
      CanvasBuilder.prototype.updateStrokeStyle = function (state, applyStroke) {
          var strokeStyle = state.strokeStyle;
          var lineCap = state.lineCap;
          var lineDash = state.lineDash;
          var lineDashOffset = state.lineDashOffset;
          var lineJoin = state.lineJoin;
          var lineWidth = state.lineWidth;
          var miterLimit = state.miterLimit;
          if (state.currentStrokeStyle != strokeStyle ||
              state.currentLineCap != lineCap ||
              (lineDash != state.currentLineDash && !equals$1(state.currentLineDash, lineDash)) ||
              state.currentLineDashOffset != lineDashOffset ||
              state.currentLineJoin != lineJoin ||
              state.currentLineWidth != lineWidth ||
              state.currentMiterLimit != miterLimit) {
              if (strokeStyle !== undefined) {
                  applyStroke.call(this, state);
              }
              state.currentStrokeStyle = strokeStyle;
              state.currentLineCap = lineCap;
              state.currentLineDash = lineDash;
              state.currentLineDashOffset = lineDashOffset;
              state.currentLineJoin = lineJoin;
              state.currentLineWidth = lineWidth;
              state.currentMiterLimit = miterLimit;
          }
      };
      /**
       * @param {import("../../Feature.js").FeatureLike} feature Feature.
       */
      CanvasBuilder.prototype.endGeometry = function (feature) {
          this.beginGeometryInstruction1_[2] = this.instructions.length;
          this.beginGeometryInstruction1_ = null;
          this.beginGeometryInstruction2_[2] = this.hitDetectionInstructions.length;
          this.beginGeometryInstruction2_ = null;
          var endGeometryInstruction = [Instruction.END_GEOMETRY, feature];
          this.instructions.push(endGeometryInstruction);
          this.hitDetectionInstructions.push(endGeometryInstruction);
      };
      /**
       * Get the buffered rendering extent.  Rendering will be clipped to the extent
       * provided to the constructor.  To account for symbolizers that may intersect
       * this extent, we calculate a buffered extent (e.g. based on stroke width).
       * @return {import("../../extent.js").Extent} The buffered rendering extent.
       * @protected
       */
      CanvasBuilder.prototype.getBufferedMaxExtent = function () {
          if (!this.bufferedMaxExtent_) {
              this.bufferedMaxExtent_ = clone(this.maxExtent);
              if (this.maxLineWidth > 0) {
                  var width = this.resolution * (this.maxLineWidth + 1) / 2;
                  buffer(this.bufferedMaxExtent_, width, this.bufferedMaxExtent_);
              }
          }
          return this.bufferedMaxExtent_;
      };
      return CanvasBuilder;
  }(VectorContext));

  var __extends$V =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  var CanvasImageBuilder = /** @class */ (function (_super) {
      __extends$V(CanvasImageBuilder, _super);
      /**
       * @param {number} tolerance Tolerance.
       * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
       * @param {number} resolution Resolution.
       * @param {number} pixelRatio Pixel ratio.
       */
      function CanvasImageBuilder(tolerance, maxExtent, resolution, pixelRatio) {
          var _this = _super.call(this, tolerance, maxExtent, resolution, pixelRatio) || this;
          /**
           * @private
           * @type {import("../canvas.js").DeclutterGroups}
           */
          _this.declutterGroups_ = null;
          /**
           * @private
           * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}
           */
          _this.hitDetectionImage_ = null;
          /**
           * @private
           * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}
           */
          _this.image_ = null;
          /**
           * @private
           * @type {number|undefined}
           */
          _this.anchorX_ = undefined;
          /**
           * @private
           * @type {number|undefined}
           */
          _this.anchorY_ = undefined;
          /**
           * @private
           * @type {number|undefined}
           */
          _this.height_ = undefined;
          /**
           * @private
           * @type {number|undefined}
           */
          _this.opacity_ = undefined;
          /**
           * @private
           * @type {number|undefined}
           */
          _this.originX_ = undefined;
          /**
           * @private
           * @type {number|undefined}
           */
          _this.originY_ = undefined;
          /**
           * @private
           * @type {boolean|undefined}
           */
          _this.rotateWithView_ = undefined;
          /**
           * @private
           * @type {number|undefined}
           */
          _this.rotation_ = undefined;
          /**
           * @private
           * @type {number|undefined}
           */
          _this.scale_ = undefined;
          /**
           * @private
           * @type {number|undefined}
           */
          _this.width_ = undefined;
          return _this;
      }
      /**
       * @param {Array<number>} flatCoordinates Flat coordinates.
       * @param {number} offset Offset.
       * @param {number} end End.
       * @param {number} stride Stride.
       * @private
       * @return {number} My end.
       */
      CanvasImageBuilder.prototype.drawCoordinates_ = function (flatCoordinates, offset, end, stride) {
          return this.appendFlatCoordinates(flatCoordinates, offset, end, stride, false, false);
      };
      /**
       * @inheritDoc
       */
      CanvasImageBuilder.prototype.drawPoint = function (pointGeometry, feature) {
          if (!this.image_) {
              return;
          }
          this.beginGeometry(pointGeometry, feature);
          var flatCoordinates = pointGeometry.getFlatCoordinates();
          var stride = pointGeometry.getStride();
          var myBegin = this.coordinates.length;
          var myEnd = this.drawCoordinates_(flatCoordinates, 0, flatCoordinates.length, stride);
          this.instructions.push([
              Instruction.DRAW_IMAGE, myBegin, myEnd, this.image_,
              // Remaining arguments to DRAW_IMAGE are in alphabetical order
              this.anchorX_, this.anchorY_, this.declutterGroups_, this.height_, this.opacity_,
              this.originX_, this.originY_, this.rotateWithView_, this.rotation_,
              this.scale_ * this.pixelRatio, this.width_
          ]);
          this.hitDetectionInstructions.push([
              Instruction.DRAW_IMAGE, myBegin, myEnd, this.hitDetectionImage_,
              // Remaining arguments to DRAW_IMAGE are in alphabetical order
              this.anchorX_, this.anchorY_, this.declutterGroups_, this.height_, this.opacity_,
              this.originX_, this.originY_, this.rotateWithView_, this.rotation_,
              this.scale_, this.width_
          ]);
          this.endGeometry(feature);
      };
      /**
       * @inheritDoc
       */
      CanvasImageBuilder.prototype.drawMultiPoint = function (multiPointGeometry, feature) {
          if (!this.image_) {
              return;
          }
          this.beginGeometry(multiPointGeometry, feature);
          var flatCoordinates = multiPointGeometry.getFlatCoordinates();
          var stride = multiPointGeometry.getStride();
          var myBegin = this.coordinates.length;
          var myEnd = this.drawCoordinates_(flatCoordinates, 0, flatCoordinates.length, stride);
          this.instructions.push([
              Instruction.DRAW_IMAGE, myBegin, myEnd, this.image_,
              // Remaining arguments to DRAW_IMAGE are in alphabetical order
              this.anchorX_, this.anchorY_, this.declutterGroups_, this.height_, this.opacity_,
              this.originX_, this.originY_, this.rotateWithView_, this.rotation_,
              this.scale_ * this.pixelRatio, this.width_
          ]);
          this.hitDetectionInstructions.push([
              Instruction.DRAW_IMAGE, myBegin, myEnd, this.hitDetectionImage_,
              // Remaining arguments to DRAW_IMAGE are in alphabetical order
              this.anchorX_, this.anchorY_, this.declutterGroups_, this.height_, this.opacity_,
              this.originX_, this.originY_, this.rotateWithView_, this.rotation_,
              this.scale_, this.width_
          ]);
          this.endGeometry(feature);
      };
      /**
       * @inheritDoc
       */
      CanvasImageBuilder.prototype.finish = function () {
          this.reverseHitDetectionInstructions();
          // FIXME this doesn't really protect us against further calls to draw*Geometry
          this.anchorX_ = undefined;
          this.anchorY_ = undefined;
          this.hitDetectionImage_ = null;
          this.image_ = null;
          this.height_ = undefined;
          this.scale_ = undefined;
          this.opacity_ = undefined;
          this.originX_ = undefined;
          this.originY_ = undefined;
          this.rotateWithView_ = undefined;
          this.rotation_ = undefined;
          this.width_ = undefined;
          return _super.prototype.finish.call(this);
      };
      /**
       * @inheritDoc
       */
      CanvasImageBuilder.prototype.setImageStyle = function (imageStyle, declutterGroups) {
          var anchor = imageStyle.getAnchor();
          var size = imageStyle.getSize();
          var hitDetectionImage = imageStyle.getHitDetectionImage(1);
          var image = imageStyle.getImage(1);
          var origin = imageStyle.getOrigin();
          this.anchorX_ = anchor[0];
          this.anchorY_ = anchor[1];
          this.declutterGroups_ = /** @type {import("../canvas.js").DeclutterGroups} */ (declutterGroups);
          this.hitDetectionImage_ = hitDetectionImage;
          this.image_ = image;
          this.height_ = size[1];
          this.opacity_ = imageStyle.getOpacity();
          this.originX_ = origin[0];
          this.originY_ = origin[1];
          this.rotateWithView_ = imageStyle.getRotateWithView();
          this.rotation_ = imageStyle.getRotation();
          this.scale_ = imageStyle.getScale();
          this.width_ = size[0];
      };
      return CanvasImageBuilder;
  }(CanvasBuilder));

  var __extends$W =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  var CanvasLineStringBuilder = /** @class */ (function (_super) {
      __extends$W(CanvasLineStringBuilder, _super);
      /**
       * @param {number} tolerance Tolerance.
       * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
       * @param {number} resolution Resolution.
       * @param {number} pixelRatio Pixel ratio.
       */
      function CanvasLineStringBuilder(tolerance, maxExtent, resolution, pixelRatio) {
          return _super.call(this, tolerance, maxExtent, resolution, pixelRatio) || this;
      }
      /**
       * @param {Array<number>} flatCoordinates Flat coordinates.
       * @param {number} offset Offset.
       * @param {number} end End.
       * @param {number} stride Stride.
       * @private
       * @return {number} end.
       */
      CanvasLineStringBuilder.prototype.drawFlatCoordinates_ = function (flatCoordinates, offset, end, stride) {
          var myBegin = this.coordinates.length;
          var myEnd = this.appendFlatCoordinates(flatCoordinates, offset, end, stride, false, false);
          var moveToLineToInstruction = [Instruction.MOVE_TO_LINE_TO, myBegin, myEnd];
          this.instructions.push(moveToLineToInstruction);
          this.hitDetectionInstructions.push(moveToLineToInstruction);
          return end;
      };
      /**
       * @inheritDoc
       */
      CanvasLineStringBuilder.prototype.drawLineString = function (lineStringGeometry, feature) {
          var state = this.state;
          var strokeStyle = state.strokeStyle;
          var lineWidth = state.lineWidth;
          if (strokeStyle === undefined || lineWidth === undefined) {
              return;
          }
          this.updateStrokeStyle(state, this.applyStroke);
          this.beginGeometry(lineStringGeometry, feature);
          this.hitDetectionInstructions.push([
              Instruction.SET_STROKE_STYLE,
              state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin,
              state.miterLimit, state.lineDash, state.lineDashOffset
          ], beginPathInstruction);
          var flatCoordinates = lineStringGeometry.getFlatCoordinates();
          var stride = lineStringGeometry.getStride();
          this.drawFlatCoordinates_(flatCoordinates, 0, flatCoordinates.length, stride);
          this.hitDetectionInstructions.push(strokeInstruction);
          this.endGeometry(feature);
      };
      /**
       * @inheritDoc
       */
      CanvasLineStringBuilder.prototype.drawMultiLineString = function (multiLineStringGeometry, feature) {
          var state = this.state;
          var strokeStyle = state.strokeStyle;
          var lineWidth = state.lineWidth;
          if (strokeStyle === undefined || lineWidth === undefined) {
              return;
          }
          this.updateStrokeStyle(state, this.applyStroke);
          this.beginGeometry(multiLineStringGeometry, feature);
          this.hitDetectionInstructions.push([
              Instruction.SET_STROKE_STYLE,
              state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin,
              state.miterLimit, state.lineDash, state.lineDashOffset
          ], beginPathInstruction);
          var ends = multiLineStringGeometry.getEnds();
          var flatCoordinates = multiLineStringGeometry.getFlatCoordinates();
          var stride = multiLineStringGeometry.getStride();
          var offset = 0;
          for (var i = 0, ii = ends.length; i < ii; ++i) {
              offset = this.drawFlatCoordinates_(flatCoordinates, offset, ends[i], stride);
          }
          this.hitDetectionInstructions.push(strokeInstruction);
          this.endGeometry(feature);
      };
      /**
       * @inheritDoc
       */
      CanvasLineStringBuilder.prototype.finish = function () {
          var state = this.state;
          if (state.lastStroke != undefined && state.lastStroke != this.coordinates.length) {
              this.instructions.push(strokeInstruction);
          }
          this.reverseHitDetectionInstructions();
          this.state = null;
          return _super.prototype.finish.call(this);
      };
      /**
       * @inheritDoc.
       */
      CanvasLineStringBuilder.prototype.applyStroke = function (state) {
          if (state.lastStroke != undefined && state.lastStroke != this.coordinates.length) {
              this.instructions.push(strokeInstruction);
              state.lastStroke = this.coordinates.length;
          }
          state.lastStroke = 0;
          _super.prototype.applyStroke.call(this, state);
          this.instructions.push(beginPathInstruction);
      };
      return CanvasLineStringBuilder;
  }(CanvasBuilder));

  var __extends$X =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  var CanvasPolygonBuilder = /** @class */ (function (_super) {
      __extends$X(CanvasPolygonBuilder, _super);
      /**
       * @param {number} tolerance Tolerance.
       * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
       * @param {number} resolution Resolution.
       * @param {number} pixelRatio Pixel ratio.
       */
      function CanvasPolygonBuilder(tolerance, maxExtent, resolution, pixelRatio) {
          return _super.call(this, tolerance, maxExtent, resolution, pixelRatio) || this;
      }
      /**
       * @param {Array<number>} flatCoordinates Flat coordinates.
       * @param {number} offset Offset.
       * @param {Array<number>} ends Ends.
       * @param {number} stride Stride.
       * @private
       * @return {number} End.
       */
      CanvasPolygonBuilder.prototype.drawFlatCoordinatess_ = function (flatCoordinates, offset, ends, stride) {
          var state = this.state;
          var fill = state.fillStyle !== undefined;
          var stroke = state.strokeStyle !== undefined;
          var numEnds = ends.length;
          this.instructions.push(beginPathInstruction);
          this.hitDetectionInstructions.push(beginPathInstruction);
          for (var i = 0; i < numEnds; ++i) {
              var end = ends[i];
              var myBegin = this.coordinates.length;
              var myEnd = this.appendFlatCoordinates(flatCoordinates, offset, end, stride, true, !stroke);
              var moveToLineToInstruction = [Instruction.MOVE_TO_LINE_TO, myBegin, myEnd];
              this.instructions.push(moveToLineToInstruction);
              this.hitDetectionInstructions.push(moveToLineToInstruction);
              if (stroke) {
                  // Performance optimization: only call closePath() when we have a stroke.
                  // Otherwise the ring is closed already (see appendFlatCoordinates above).
                  this.instructions.push(closePathInstruction);
                  this.hitDetectionInstructions.push(closePathInstruction);
              }
              offset = end;
          }
          if (fill) {
              this.instructions.push(fillInstruction);
              this.hitDetectionInstructions.push(fillInstruction);
          }
          if (stroke) {
              this.instructions.push(strokeInstruction);
              this.hitDetectionInstructions.push(strokeInstruction);
          }
          return offset;
      };
      /**
       * @inheritDoc
       */
      CanvasPolygonBuilder.prototype.drawCircle = function (circleGeometry, feature) {
          var state = this.state;
          var fillStyle = state.fillStyle;
          var strokeStyle = state.strokeStyle;
          if (fillStyle === undefined && strokeStyle === undefined) {
              return;
          }
          this.setFillStrokeStyles_();
          this.beginGeometry(circleGeometry, feature);
          if (state.fillStyle !== undefined) {
              this.hitDetectionInstructions.push([
                  Instruction.SET_FILL_STYLE,
                  defaultFillStyle
              ]);
          }
          if (state.strokeStyle !== undefined) {
              this.hitDetectionInstructions.push([
                  Instruction.SET_STROKE_STYLE,
                  state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin,
                  state.miterLimit, state.lineDash, state.lineDashOffset
              ]);
          }
          var flatCoordinates = circleGeometry.getFlatCoordinates();
          var stride = circleGeometry.getStride();
          var myBegin = this.coordinates.length;
          this.appendFlatCoordinates(flatCoordinates, 0, flatCoordinates.length, stride, false, false);
          var circleInstruction = [Instruction.CIRCLE, myBegin];
          this.instructions.push(beginPathInstruction, circleInstruction);
          this.hitDetectionInstructions.push(beginPathInstruction, circleInstruction);
          if (state.fillStyle !== undefined) {
              this.instructions.push(fillInstruction);
              this.hitDetectionInstructions.push(fillInstruction);
          }
          if (state.strokeStyle !== undefined) {
              this.instructions.push(strokeInstruction);
              this.hitDetectionInstructions.push(strokeInstruction);
          }
          this.endGeometry(feature);
      };
      /**
       * @inheritDoc
       */
      CanvasPolygonBuilder.prototype.drawPolygon = function (polygonGeometry, feature) {
          var state = this.state;
          var fillStyle = state.fillStyle;
          var strokeStyle = state.strokeStyle;
          if (fillStyle === undefined && strokeStyle === undefined) {
              return;
          }
          this.setFillStrokeStyles_();
          this.beginGeometry(polygonGeometry, feature);
          if (state.fillStyle !== undefined) {
              this.hitDetectionInstructions.push([
                  Instruction.SET_FILL_STYLE,
                  defaultFillStyle
              ]);
          }
          if (state.strokeStyle !== undefined) {
              this.hitDetectionInstructions.push([
                  Instruction.SET_STROKE_STYLE,
                  state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin,
                  state.miterLimit, state.lineDash, state.lineDashOffset
              ]);
          }
          var ends = polygonGeometry.getEnds();
          var flatCoordinates = polygonGeometry.getOrientedFlatCoordinates();
          var stride = polygonGeometry.getStride();
          this.drawFlatCoordinatess_(flatCoordinates, 0, ends, stride);
          this.endGeometry(feature);
      };
      /**
       * @inheritDoc
       */
      CanvasPolygonBuilder.prototype.drawMultiPolygon = function (multiPolygonGeometry, feature) {
          var state = this.state;
          var fillStyle = state.fillStyle;
          var strokeStyle = state.strokeStyle;
          if (fillStyle === undefined && strokeStyle === undefined) {
              return;
          }
          this.setFillStrokeStyles_();
          this.beginGeometry(multiPolygonGeometry, feature);
          if (state.fillStyle !== undefined) {
              this.hitDetectionInstructions.push([
                  Instruction.SET_FILL_STYLE,
                  defaultFillStyle
              ]);
          }
          if (state.strokeStyle !== undefined) {
              this.hitDetectionInstructions.push([
                  Instruction.SET_STROKE_STYLE,
                  state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin,
                  state.miterLimit, state.lineDash, state.lineDashOffset
              ]);
          }
          var endss = multiPolygonGeometry.getEndss();
          var flatCoordinates = multiPolygonGeometry.getOrientedFlatCoordinates();
          var stride = multiPolygonGeometry.getStride();
          var offset = 0;
          for (var i = 0, ii = endss.length; i < ii; ++i) {
              offset = this.drawFlatCoordinatess_(flatCoordinates, offset, endss[i], stride);
          }
          this.endGeometry(feature);
      };
      /**
       * @inheritDoc
       */
      CanvasPolygonBuilder.prototype.finish = function () {
          this.reverseHitDetectionInstructions();
          this.state = null;
          // We want to preserve topology when drawing polygons.  Polygons are
          // simplified using quantization and point elimination. However, we might
          // have received a mix of quantized and non-quantized geometries, so ensure
          // that all are quantized by quantizing all coordinates in the batch.
          var tolerance = this.tolerance;
          if (tolerance !== 0) {
              var coordinates = this.coordinates;
              for (var i = 0, ii = coordinates.length; i < ii; ++i) {
                  coordinates[i] = snap(coordinates[i], tolerance);
              }
          }
          return _super.prototype.finish.call(this);
      };
      /**
       * @private
       */
      CanvasPolygonBuilder.prototype.setFillStrokeStyles_ = function () {
          var state = this.state;
          var fillStyle = state.fillStyle;
          if (fillStyle !== undefined) {
              this.updateFillStyle(state, this.createFill);
          }
          if (state.strokeStyle !== undefined) {
              this.updateStrokeStyle(state, this.applyStroke);
          }
      };
      return CanvasPolygonBuilder;
  }(CanvasBuilder));

  /**
   * @module ol/geom/flat/straightchunk
   */
  /**
   * @param {number} maxAngle Maximum acceptable angle delta between segments.
   * @param {Array<number>} flatCoordinates Flat coordinates.
   * @param {number} offset Offset.
   * @param {number} end End.
   * @param {number} stride Stride.
   * @return {Array<number>} Start and end of the first suitable chunk of the
   * given `flatCoordinates`.
   */
  function matchingChunk(maxAngle, flatCoordinates, offset, end, stride) {
      var chunkStart = offset;
      var chunkEnd = offset;
      var chunkM = 0;
      var m = 0;
      var start = offset;
      var acos, i, m12, m23, x1, y1, x12, y12, x23, y23;
      for (i = offset; i < end; i += stride) {
          var x2 = flatCoordinates[i];
          var y2 = flatCoordinates[i + 1];
          if (x1 !== undefined) {
              x23 = x2 - x1;
              y23 = y2 - y1;
              m23 = Math.sqrt(x23 * x23 + y23 * y23);
              if (x12 !== undefined) {
                  m += m12;
                  acos = Math.acos((x12 * x23 + y12 * y23) / (m12 * m23));
                  if (acos > maxAngle) {
                      if (m > chunkM) {
                          chunkM = m;
                          chunkStart = start;
                          chunkEnd = i;
                      }
                      m = 0;
                      start = i - stride;
                  }
              }
              m12 = m23;
              x12 = x23;
              y12 = y23;
          }
          x1 = x2;
          y1 = y2;
      }
      m += m23;
      return m > chunkM ? [start, i] : [chunkStart, chunkEnd];
  }

  var __extends$Y =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @const
   * @enum {number}
   */
  var TEXT_ALIGN = {
      'left': 0,
      'end': 0,
      'center': 0.5,
      'right': 1,
      'start': 1,
      'top': 0,
      'middle': 0.5,
      'hanging': 0.2,
      'alphabetic': 0.8,
      'ideographic': 0.8,
      'bottom': 1
  };
  var CanvasTextBuilder = /** @class */ (function (_super) {
      __extends$Y(CanvasTextBuilder, _super);
      /**
       * @param {number} tolerance Tolerance.
       * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
       * @param {number} resolution Resolution.
       * @param {number} pixelRatio Pixel ratio.
       */
      function CanvasTextBuilder(tolerance, maxExtent, resolution, pixelRatio) {
          var _this = _super.call(this, tolerance, maxExtent, resolution, pixelRatio) || this;
          /**
           * @private
           * @type {import("../canvas.js").DeclutterGroups}
           */
          _this.declutterGroups_;
          /**
           * @private
           * @type {Array<HTMLCanvasElement>}
           */
          _this.labels_ = null;
          /**
           * @private
           * @type {string}
           */
          _this.text_ = '';
          /**
           * @private
           * @type {number}
           */
          _this.textOffsetX_ = 0;
          /**
           * @private
           * @type {number}
           */
          _this.textOffsetY_ = 0;
          /**
           * @private
           * @type {boolean|undefined}
           */
          _this.textRotateWithView_ = undefined;
          /**
           * @private
           * @type {number}
           */
          _this.textRotation_ = 0;
          /**
           * @private
           * @type {?import("../canvas.js").FillState}
           */
          _this.textFillState_ = null;
          /**
           * @type {!Object<string, import("../canvas.js").FillState>}
           */
          _this.fillStates = {};
          /**
           * @private
           * @type {?import("../canvas.js").StrokeState}
           */
          _this.textStrokeState_ = null;
          /**
           * @type {!Object<string, import("../canvas.js").StrokeState>}
           */
          _this.strokeStates = {};
          /**
           * @private
           * @type {import("../canvas.js").TextState}
           */
          _this.textState_ = /** @type {import("../canvas.js").TextState} */ ({});
          /**
           * @type {!Object<string, import("../canvas.js").TextState>}
           */
          _this.textStates = {};
          /**
           * @private
           * @type {string}
           */
          _this.textKey_ = '';
          /**
           * @private
           * @type {string}
           */
          _this.fillKey_ = '';
          /**
           * @private
           * @type {string}
           */
          _this.strokeKey_ = '';
          return _this;
      }
      /**
       * @inheritDoc
       */
      CanvasTextBuilder.prototype.finish = function () {
          var instructions = _super.prototype.finish.call(this);
          instructions.textStates = this.textStates;
          instructions.fillStates = this.fillStates;
          instructions.strokeStates = this.strokeStates;
          return instructions;
      };
      /**
       * @inheritDoc
       */
      CanvasTextBuilder.prototype.drawText = function (geometry, feature) {
          var fillState = this.textFillState_;
          var strokeState = this.textStrokeState_;
          var textState = this.textState_;
          if (this.text_ === '' || !textState || (!fillState && !strokeState)) {
              return;
          }
          var begin = this.coordinates.length;
          var geometryType = geometry.getType();
          var flatCoordinates = null;
          var end = 2;
          var stride = 2;
          var i, ii;
          if (textState.placement === TextPlacement.LINE) {
              if (!intersects(this.getBufferedMaxExtent(), geometry.getExtent())) {
                  return;
              }
              var ends = void 0;
              flatCoordinates = geometry.getFlatCoordinates();
              stride = geometry.getStride();
              if (geometryType == GeometryType.LINE_STRING) {
                  ends = [flatCoordinates.length];
              }
              else if (geometryType == GeometryType.MULTI_LINE_STRING) {
                  ends = geometry.getEnds();
              }
              else if (geometryType == GeometryType.POLYGON) {
                  ends = geometry.getEnds().slice(0, 1);
              }
              else if (geometryType == GeometryType.MULTI_POLYGON) {
                  var endss = geometry.getEndss();
                  ends = [];
                  for (i = 0, ii = endss.length; i < ii; ++i) {
                      ends.push(endss[i][0]);
                  }
              }
              this.beginGeometry(geometry, feature);
              var textAlign = textState.textAlign;
              var flatOffset = 0;
              var flatEnd = void 0;
              for (var o = 0, oo = ends.length; o < oo; ++o) {
                  if (textAlign == undefined) {
                      var range = matchingChunk(textState.maxAngle, flatCoordinates, flatOffset, ends[o], stride);
                      flatOffset = range[0];
                      flatEnd = range[1];
                  }
                  else {
                      flatEnd = ends[o];
                  }
                  for (i = flatOffset; i < flatEnd; i += stride) {
                      this.coordinates.push(flatCoordinates[i], flatCoordinates[i + 1]);
                  }
                  end = this.coordinates.length;
                  flatOffset = ends[o];
                  var declutterGroup = this.declutterGroups_ ?
                      (o === 0 ? this.declutterGroups_[0] : [].concat(this.declutterGroups_[0])) :
                      null;
                  this.drawChars_(begin, end, declutterGroup);
                  begin = end;
              }
              this.endGeometry(feature);
          }
          else {
              var geometryWidths = null;
              if (!textState.overflow) {
                  geometryWidths = [];
              }
              switch (geometryType) {
                  case GeometryType.POINT:
                  case GeometryType.MULTI_POINT:
                      flatCoordinates = geometry.getFlatCoordinates();
                      end = flatCoordinates.length;
                      break;
                  case GeometryType.LINE_STRING:
                      flatCoordinates = /** @type {import("../../geom/LineString.js").default} */ (geometry).getFlatMidpoint();
                      break;
                  case GeometryType.CIRCLE:
                      flatCoordinates = /** @type {import("../../geom/Circle.js").default} */ (geometry).getCenter();
                      break;
                  case GeometryType.MULTI_LINE_STRING:
                      flatCoordinates = /** @type {import("../../geom/MultiLineString.js").default} */ (geometry).getFlatMidpoints();
                      end = flatCoordinates.length;
                      break;
                  case GeometryType.POLYGON:
                      flatCoordinates = /** @type {import("../../geom/Polygon.js").default} */ (geometry).getFlatInteriorPoint();
                      if (!textState.overflow) {
                          geometryWidths.push(flatCoordinates[2] / this.resolution);
                      }
                      stride = 3;
                      break;
                  case GeometryType.MULTI_POLYGON:
                      var interiorPoints = /** @type {import("../../geom/MultiPolygon.js").default} */ (geometry).getFlatInteriorPoints();
                      flatCoordinates = [];
                      for (i = 0, ii = interiorPoints.length; i < ii; i += 3) {
                          if (!textState.overflow) {
                              geometryWidths.push(interiorPoints[i + 2] / this.resolution);
                          }
                          flatCoordinates.push(interiorPoints[i], interiorPoints[i + 1]);
                      }
                      end = flatCoordinates.length;
                      if (end == 0) {
                          return;
                      }
                      break;
              }
              end = this.appendFlatCoordinates(flatCoordinates, 0, end, stride, false, false);
              this.saveTextStates_();
              if (textState.backgroundFill || textState.backgroundStroke) {
                  this.setFillStrokeStyle(textState.backgroundFill, textState.backgroundStroke);
                  if (textState.backgroundFill) {
                      this.updateFillStyle(this.state, this.createFill);
                      this.hitDetectionInstructions.push(this.createFill(this.state));
                  }
                  if (textState.backgroundStroke) {
                      this.updateStrokeStyle(this.state, this.applyStroke);
                      this.hitDetectionInstructions.push(this.createStroke(this.state));
                  }
              }
              this.beginGeometry(geometry, feature);
              // The image is unknown at this stage so we pass null; it will be computed at render time.
              // For clarity, we pass NaN for offsetX, offsetY, width and height, which will be computed at
              // render time.
              var pixelRatio_1 = this.pixelRatio;
              this.instructions.push([Instruction.DRAW_IMAGE, begin, end,
                  null, NaN, NaN, this.declutterGroups_, NaN, 1, 0, 0,
                  this.textRotateWithView_, this.textRotation_, 1, NaN,
                  textState.padding == defaultPadding ?
                      defaultPadding : textState.padding.map(function (p) {
                      return p * pixelRatio_1;
                  }),
                  !!textState.backgroundFill, !!textState.backgroundStroke,
                  this.text_, this.textKey_, this.strokeKey_, this.fillKey_,
                  this.textOffsetX_, this.textOffsetY_, geometryWidths
              ]);
              this.hitDetectionInstructions.push([Instruction.DRAW_IMAGE, begin, end,
                  null, NaN, NaN, this.declutterGroups_, NaN, 1, 0, 0,
                  this.textRotateWithView_, this.textRotation_, 1 / this.pixelRatio, NaN,
                  textState.padding,
                  !!textState.backgroundFill, !!textState.backgroundStroke,
                  this.text_, this.textKey_, this.strokeKey_, this.fillKey_,
                  this.textOffsetX_, this.textOffsetY_, geometryWidths
              ]);
              this.endGeometry(feature);
          }
      };
      /**
       * @private
       */
      CanvasTextBuilder.prototype.saveTextStates_ = function () {
          var strokeState = this.textStrokeState_;
          var textState = this.textState_;
          var fillState = this.textFillState_;
          var strokeKey = this.strokeKey_;
          if (strokeState) {
              if (!(strokeKey in this.strokeStates)) {
                  this.strokeStates[strokeKey] = {
                      strokeStyle: strokeState.strokeStyle,
                      lineCap: strokeState.lineCap,
                      lineDashOffset: strokeState.lineDashOffset,
                      lineWidth: strokeState.lineWidth,
                      lineJoin: strokeState.lineJoin,
                      miterLimit: strokeState.miterLimit,
                      lineDash: strokeState.lineDash
                  };
              }
          }
          var textKey = this.textKey_;
          if (!(textKey in this.textStates)) {
              this.textStates[textKey] = {
                  font: textState.font,
                  textAlign: textState.textAlign || defaultTextAlign,
                  textBaseline: textState.textBaseline || defaultTextBaseline,
                  scale: textState.scale
              };
          }
          var fillKey = this.fillKey_;
          if (fillState) {
              if (!(fillKey in this.fillStates)) {
                  this.fillStates[fillKey] = {
                      fillStyle: fillState.fillStyle
                  };
              }
          }
      };
      /**
       * @private
       * @param {number} begin Begin.
       * @param {number} end End.
       * @param {import("../canvas.js").DeclutterGroup} declutterGroup Declutter group.
       */
      CanvasTextBuilder.prototype.drawChars_ = function (begin, end, declutterGroup) {
          var strokeState = this.textStrokeState_;
          var textState = this.textState_;
          var strokeKey = this.strokeKey_;
          var textKey = this.textKey_;
          var fillKey = this.fillKey_;
          this.saveTextStates_();
          var pixelRatio = this.pixelRatio;
          var baseline = TEXT_ALIGN[textState.textBaseline];
          var offsetY = this.textOffsetY_ * pixelRatio;
          var text = this.text_;
          var textScale = textState.scale;
          var strokeWidth = strokeState ? strokeState.lineWidth * textScale / 2 : 0;
          this.instructions.push([Instruction.DRAW_CHARS,
              begin, end, baseline, declutterGroup,
              textState.overflow, fillKey, textState.maxAngle,
              pixelRatio,
              offsetY, strokeKey, strokeWidth * pixelRatio, text, textKey, 1
          ]);
          this.hitDetectionInstructions.push([Instruction.DRAW_CHARS,
              begin, end, baseline, declutterGroup,
              textState.overflow, fillKey, textState.maxAngle,
              1,
              offsetY, strokeKey, strokeWidth, text, textKey, 1 / pixelRatio
          ]);
      };
      /**
       * @inheritDoc
       */
      CanvasTextBuilder.prototype.setTextStyle = function (textStyle, declutterGroups) {
          var textState, fillState, strokeState;
          if (!textStyle) {
              this.text_ = '';
          }
          else {
              this.declutterGroups_ = /** @type {import("../canvas.js").DeclutterGroups} */ (declutterGroups);
              var textFillStyle = textStyle.getFill();
              if (!textFillStyle) {
                  fillState = null;
                  this.textFillState_ = fillState;
              }
              else {
                  fillState = this.textFillState_;
                  if (!fillState) {
                      fillState = /** @type {import("../canvas.js").FillState} */ ({});
                      this.textFillState_ = fillState;
                  }
                  fillState.fillStyle = asColorLike(textFillStyle.getColor() || defaultFillStyle);
              }
              var textStrokeStyle = textStyle.getStroke();
              if (!textStrokeStyle) {
                  strokeState = null;
                  this.textStrokeState_ = strokeState;
              }
              else {
                  strokeState = this.textStrokeState_;
                  if (!strokeState) {
                      strokeState = /** @type {import("../canvas.js").StrokeState} */ ({});
                      this.textStrokeState_ = strokeState;
                  }
                  var lineDash = textStrokeStyle.getLineDash();
                  var lineDashOffset = textStrokeStyle.getLineDashOffset();
                  var lineWidth = textStrokeStyle.getWidth();
                  var miterLimit = textStrokeStyle.getMiterLimit();
                  strokeState.lineCap = textStrokeStyle.getLineCap() || defaultLineCap;
                  strokeState.lineDash = lineDash ? lineDash.slice() : defaultLineDash;
                  strokeState.lineDashOffset =
                      lineDashOffset === undefined ? defaultLineDashOffset : lineDashOffset;
                  strokeState.lineJoin = textStrokeStyle.getLineJoin() || defaultLineJoin;
                  strokeState.lineWidth =
                      lineWidth === undefined ? defaultLineWidth : lineWidth;
                  strokeState.miterLimit =
                      miterLimit === undefined ? defaultMiterLimit : miterLimit;
                  strokeState.strokeStyle = asColorLike(textStrokeStyle.getColor() || defaultStrokeStyle);
              }
              textState = this.textState_;
              var font = textStyle.getFont() || defaultFont;
              registerFont(font);
              var textScale = textStyle.getScale();
              textState.overflow = textStyle.getOverflow();
              textState.font = font;
              textState.maxAngle = textStyle.getMaxAngle();
              textState.placement = textStyle.getPlacement();
              textState.textAlign = textStyle.getTextAlign();
              textState.textBaseline = textStyle.getTextBaseline() || defaultTextBaseline;
              textState.backgroundFill = textStyle.getBackgroundFill();
              textState.backgroundStroke = textStyle.getBackgroundStroke();
              textState.padding = textStyle.getPadding() || defaultPadding;
              textState.scale = textScale === undefined ? 1 : textScale;
              var textOffsetX = textStyle.getOffsetX();
              var textOffsetY = textStyle.getOffsetY();
              var textRotateWithView = textStyle.getRotateWithView();
              var textRotation = textStyle.getRotation();
              this.text_ = textStyle.getText() || '';
              this.textOffsetX_ = textOffsetX === undefined ? 0 : textOffsetX;
              this.textOffsetY_ = textOffsetY === undefined ? 0 : textOffsetY;
              this.textRotateWithView_ = textRotateWithView === undefined ? false : textRotateWithView;
              this.textRotation_ = textRotation === undefined ? 0 : textRotation;
              this.strokeKey_ = strokeState ?
                  (typeof strokeState.strokeStyle == 'string' ? strokeState.strokeStyle : getUid(strokeState.strokeStyle)) +
                      strokeState.lineCap + strokeState.lineDashOffset + '|' + strokeState.lineWidth +
                      strokeState.lineJoin + strokeState.miterLimit + '[' + strokeState.lineDash.join() + ']' :
                  '';
              this.textKey_ = textState.font + textState.scale + (textState.textAlign || '?') + (textState.textBaseline || '?');
              this.fillKey_ = fillState ?
                  (typeof fillState.fillStyle == 'string' ? fillState.fillStyle : ('|' + getUid(fillState.fillStyle))) :
                  '';
          }
      };
      return CanvasTextBuilder;
  }(CanvasBuilder));

  /**
   * @module ol/render/canvas/BuilderGroup
   */
  /**
   * @type {Object<import("./BuilderType").default, typeof Builder>}
   */
  var BATCH_CONSTRUCTORS = {
      'Circle': CanvasPolygonBuilder,
      'Default': CanvasBuilder,
      'Image': CanvasImageBuilder,
      'LineString': CanvasLineStringBuilder,
      'Polygon': CanvasPolygonBuilder,
      'Text': CanvasTextBuilder
  };
  var BuilderGroup = /** @class */ (function () {
      /**
       * @param {number} tolerance Tolerance.
       * @param {import("../../extent.js").Extent} maxExtent Max extent.
       * @param {number} resolution Resolution.
       * @param {number} pixelRatio Pixel ratio.
       * @param {boolean} declutter Decluttering enabled.
       */
      function BuilderGroup(tolerance, maxExtent, resolution, pixelRatio, declutter) {
          /**
           * @type {boolean}
           * @private
           */
          this.declutter_ = declutter;
          /**
           * @type {import("../canvas.js").DeclutterGroups}
           * @private
           */
          this.declutterGroups_ = null;
          /**
           * @private
           * @type {number}
           */
          this.tolerance_ = tolerance;
          /**
           * @private
           * @type {import("../../extent.js").Extent}
           */
          this.maxExtent_ = maxExtent;
          /**
           * @private
           * @type {number}
           */
          this.pixelRatio_ = pixelRatio;
          /**
           * @private
           * @type {number}
           */
          this.resolution_ = resolution;
          /**
           * @private
           * @type {!Object<string, !Object<import("./BuilderType").default, Builder>>}
           */
          this.buildersByZIndex_ = {};
      }
      /**
       * @param {boolean} group Group with previous builder.
       * @return {import("../canvas").DeclutterGroups} The resulting instruction groups.
       */
      BuilderGroup.prototype.addDeclutter = function (group) {
          var declutter = null;
          if (this.declutter_) {
              if (group) {
                  declutter = this.declutterGroups_;
                  /** @type {number} */ (declutter[0][4])++;
              }
              else {
                  declutter = [createEmpty()];
                  this.declutterGroups_ = declutter;
                  declutter[0].push(1);
              }
          }
          return declutter;
      };
      /**
       * @return {!Object<string, !Object<import("./BuilderType").default, import("./Builder.js").SerializableInstructions>>} The serializable instructions
       */
      BuilderGroup.prototype.finish = function () {
          var builderInstructions = {};
          for (var zKey in this.buildersByZIndex_) {
              builderInstructions[zKey] = builderInstructions[zKey] || {};
              var builders = this.buildersByZIndex_[zKey];
              for (var builderKey in builders) {
                  var builderInstruction = builders[builderKey].finish();
                  builderInstructions[zKey][builderKey] = builderInstruction;
              }
          }
          return builderInstructions;
      };
      /**
       * @param {number|undefined} zIndex Z index.
       * @param {import("./BuilderType.js").default} builderType Replay type.
       * @return {import("../VectorContext.js").default} Replay.
       */
      BuilderGroup.prototype.getBuilder = function (zIndex, builderType) {
          var zIndexKey = zIndex !== undefined ? zIndex.toString() : '0';
          var replays = this.buildersByZIndex_[zIndexKey];
          if (replays === undefined) {
              replays = {};
              this.buildersByZIndex_[zIndexKey] = replays;
          }
          var replay = replays[builderType];
          if (replay === undefined) {
              var Constructor = BATCH_CONSTRUCTORS[builderType];
              replay = new Constructor(this.tolerance_, this.maxExtent_, this.resolution_, this.pixelRatio_);
              replays[builderType] = replay;
          }
          return replay;
      };
      return BuilderGroup;
  }());

  /**
   * @module ol/geom/flat/textpath
   */
  /**
   * @param {Array<number>} flatCoordinates Path to put text on.
   * @param {number} offset Start offset of the `flatCoordinates`.
   * @param {number} end End offset of the `flatCoordinates`.
   * @param {number} stride Stride.
   * @param {string} text Text to place on the path.
   * @param {number} startM m along the path where the text starts.
   * @param {number} maxAngle Max angle between adjacent chars in radians.
   * @param {number} scale The product of the text scale and the device pixel ratio.
   * @param {function(string, string, Object<string, number>):number} measureAndCacheTextWidth Measure and cache text width.
   * @param {string} font The font.
   * @param {Object<string, number>} cache A cache of measured widths.
   * @return {Array<Array<*>>} The result array (or null if `maxAngle` was
   * exceeded). Entries of the array are x, y, anchorX, angle, chunk.
   */
  function drawTextOnPath(flatCoordinates, offset, end, stride, text, startM, maxAngle, scale, measureAndCacheTextWidth, font, cache) {
      var result = [];
      // Keep text upright
      var reverse = flatCoordinates[offset] > flatCoordinates[end - stride];
      var numChars = text.length;
      var x1 = flatCoordinates[offset];
      var y1 = flatCoordinates[offset + 1];
      offset += stride;
      var x2 = flatCoordinates[offset];
      var y2 = flatCoordinates[offset + 1];
      var segmentM = 0;
      var segmentLength = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
      var angleChanged = false;
      var index, previousAngle;
      for (var i = 0; i < numChars; ++i) {
          index = reverse ? numChars - i - 1 : i;
          var char = text[index];
          var charLength = scale * measureAndCacheTextWidth(font, char, cache);
          var charM = startM + charLength / 2;
          while (offset < end - stride && segmentM + segmentLength < charM) {
              x1 = x2;
              y1 = y2;
              offset += stride;
              x2 = flatCoordinates[offset];
              y2 = flatCoordinates[offset + 1];
              segmentM += segmentLength;
              segmentLength = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
          }
          var segmentPos = charM - segmentM;
          var angle = Math.atan2(y2 - y1, x2 - x1);
          if (reverse) {
              angle += angle > 0 ? -Math.PI : Math.PI;
          }
          if (previousAngle !== undefined) {
              var delta = angle - previousAngle;
              angleChanged = angleChanged || delta !== 0;
              delta += (delta > Math.PI) ? -2 * Math.PI : (delta < -Math.PI) ? 2 * Math.PI : 0;
              if (Math.abs(delta) > maxAngle) {
                  return null;
              }
          }
          previousAngle = angle;
          var interpolate = segmentPos / segmentLength;
          var x = lerp(x1, x2, interpolate);
          var y = lerp(y1, y2, interpolate);
          result[index] = [x, y, charLength / 2, angle, char];
          startM += charLength;
      }
      return angleChanged ? result : [[result[0][0], result[0][1], result[0][2], result[0][3], text]];
  }

  var rbush = createCommonjsModule(function (module, exports) {
  (function (global, factory) {
   module.exports = factory() ;
  }(commonjsGlobal, function () {
  function quickselect(arr, k, left, right, compare) {
      quickselectStep(arr, k, left || 0, right || (arr.length - 1), compare || defaultCompare);
  }

  function quickselectStep(arr, k, left, right, compare) {

      while (right > left) {
          if (right - left > 600) {
              var n = right - left + 1;
              var m = k - left + 1;
              var z = Math.log(n);
              var s = 0.5 * Math.exp(2 * z / 3);
              var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
              var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
              var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
              quickselectStep(arr, k, newLeft, newRight, compare);
          }

          var t = arr[k];
          var i = left;
          var j = right;

          swap(arr, left, k);
          if (compare(arr[right], t) > 0) { swap(arr, left, right); }

          while (i < j) {
              swap(arr, i, j);
              i++;
              j--;
              while (compare(arr[i], t) < 0) { i++; }
              while (compare(arr[j], t) > 0) { j--; }
          }

          if (compare(arr[left], t) === 0) { swap(arr, left, j); }
          else {
              j++;
              swap(arr, j, right);
          }

          if (j <= k) { left = j + 1; }
          if (k <= j) { right = j - 1; }
      }
  }

  function swap(arr, i, j) {
      var tmp = arr[i];
      arr[i] = arr[j];
      arr[j] = tmp;
  }

  function defaultCompare(a, b) {
      return a < b ? -1 : a > b ? 1 : 0;
  }

  var RBush = function RBush(maxEntries) {
      if ( maxEntries === void 0 ) maxEntries = 9;

      // max entries in a node is 9 by default; min node fill is 40% for best performance
      this._maxEntries = Math.max(4, maxEntries);
      this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));
      this.clear();
  };

  RBush.prototype.all = function all () {
      return this._all(this.data, []);
  };

  RBush.prototype.search = function search (bbox) {
      var node = this.data;
      var result = [];

      if (!intersects(bbox, node)) { return result; }

      var toBBox = this.toBBox;
      var nodesToSearch = [];

      while (node) {
          for (var i = 0; i < node.children.length; i++) {
              var child = node.children[i];
              var childBBox = node.leaf ? toBBox(child) : child;

              if (intersects(bbox, childBBox)) {
                  if (node.leaf) { result.push(child); }
                  else if (contains(bbox, childBBox)) { this._all(child, result); }
                  else { nodesToSearch.push(child); }
              }
          }
          node = nodesToSearch.pop();
      }

      return result;
  };

  RBush.prototype.collides = function collides (bbox) {
      var node = this.data;

      if (!intersects(bbox, node)) { return false; }

      var nodesToSearch = [];
      while (node) {
          for (var i = 0; i < node.children.length; i++) {
              var child = node.children[i];
              var childBBox = node.leaf ? this.toBBox(child) : child;

              if (intersects(bbox, childBBox)) {
                  if (node.leaf || contains(bbox, childBBox)) { return true; }
                  nodesToSearch.push(child);
              }
          }
          node = nodesToSearch.pop();
      }

      return false;
  };

  RBush.prototype.load = function load (data) {
      if (!(data && data.length)) { return this; }

      if (data.length < this._minEntries) {
          for (var i = 0; i < data.length; i++) {
              this.insert(data[i]);
          }
          return this;
      }

      // recursively build the tree with the given data from scratch using OMT algorithm
      var node = this._build(data.slice(), 0, data.length - 1, 0);

      if (!this.data.children.length) {
          // save as is if tree is empty
          this.data = node;

      } else if (this.data.height === node.height) {
          // split root if trees have the same height
          this._splitRoot(this.data, node);

      } else {
          if (this.data.height < node.height) {
              // swap trees if inserted one is bigger
              var tmpNode = this.data;
              this.data = node;
              node = tmpNode;
          }

          // insert the small tree into the large tree at appropriate level
          this._insert(node, this.data.height - node.height - 1, true);
      }

      return this;
  };

  RBush.prototype.insert = function insert (item) {
      if (item) { this._insert(item, this.data.height - 1); }
      return this;
  };

  RBush.prototype.clear = function clear () {
      this.data = createNode([]);
      return this;
  };

  RBush.prototype.remove = function remove (item, equalsFn) {
      if (!item) { return this; }

      var node = this.data;
      var bbox = this.toBBox(item);
      var path = [];
      var indexes = [];
      var i, parent, goingUp;

      // depth-first iterative tree traversal
      while (node || path.length) {

          if (!node) { // go up
              node = path.pop();
              parent = path[path.length - 1];
              i = indexes.pop();
              goingUp = true;
          }

          if (node.leaf) { // check current node
              var index = findItem(item, node.children, equalsFn);

              if (index !== -1) {
                  // item found, remove the item and condense tree upwards
                  node.children.splice(index, 1);
                  path.push(node);
                  this._condense(path);
                  return this;
              }
          }

          if (!goingUp && !node.leaf && contains(node, bbox)) { // go down
              path.push(node);
              indexes.push(i);
              i = 0;
              parent = node;
              node = node.children[0];

          } else if (parent) { // go right
              i++;
              node = parent.children[i];
              goingUp = false;

          } else { node = null; } // nothing found
      }

      return this;
  };

  RBush.prototype.toBBox = function toBBox (item) { return item; };

  RBush.prototype.compareMinX = function compareMinX (a, b) { return a.minX - b.minX; };
  RBush.prototype.compareMinY = function compareMinY (a, b) { return a.minY - b.minY; };

  RBush.prototype.toJSON = function toJSON () { return this.data; };

  RBush.prototype.fromJSON = function fromJSON (data) {
      this.data = data;
      return this;
  };

  RBush.prototype._all = function _all (node, result) {
      var nodesToSearch = [];
      while (node) {
          if (node.leaf) { result.push.apply(result, node.children); }
          else { nodesToSearch.push.apply(nodesToSearch, node.children); }

          node = nodesToSearch.pop();
      }
      return result;
  };

  RBush.prototype._build = function _build (items, left, right, height) {

      var N = right - left + 1;
      var M = this._maxEntries;
      var node;

      if (N <= M) {
          // reached leaf level; return leaf
          node = createNode(items.slice(left, right + 1));
          calcBBox(node, this.toBBox);
          return node;
      }

      if (!height) {
          // target height of the bulk-loaded tree
          height = Math.ceil(Math.log(N) / Math.log(M));

          // target number of root entries to maximize storage utilization
          M = Math.ceil(N / Math.pow(M, height - 1));
      }

      node = createNode([]);
      node.leaf = false;
      node.height = height;

      // split the items into M mostly square tiles

      var N2 = Math.ceil(N / M);
      var N1 = N2 * Math.ceil(Math.sqrt(M));

      multiSelect(items, left, right, N1, this.compareMinX);

      for (var i = left; i <= right; i += N1) {

          var right2 = Math.min(i + N1 - 1, right);

          multiSelect(items, i, right2, N2, this.compareMinY);

          for (var j = i; j <= right2; j += N2) {

              var right3 = Math.min(j + N2 - 1, right2);

              // pack each entry recursively
              node.children.push(this._build(items, j, right3, height - 1));
          }
      }

      calcBBox(node, this.toBBox);

      return node;
  };

  RBush.prototype._chooseSubtree = function _chooseSubtree (bbox, node, level, path) {
      while (true) {
          path.push(node);

          if (node.leaf || path.length - 1 === level) { break; }

          var minArea = Infinity;
          var minEnlargement = Infinity;
          var targetNode = (void 0);

          for (var i = 0; i < node.children.length; i++) {
              var child = node.children[i];
              var area = bboxArea(child);
              var enlargement = enlargedArea(bbox, child) - area;

              // choose entry with the least area enlargement
              if (enlargement < minEnlargement) {
                  minEnlargement = enlargement;
                  minArea = area < minArea ? area : minArea;
                  targetNode = child;

              } else if (enlargement === minEnlargement) {
                  // otherwise choose one with the smallest area
                  if (area < minArea) {
                      minArea = area;
                      targetNode = child;
                  }
              }
          }

          node = targetNode || node.children[0];
      }

      return node;
  };

  RBush.prototype._insert = function _insert (item, level, isNode) {
      var bbox = isNode ? item : this.toBBox(item);
      var insertPath = [];

      // find the best node for accommodating the item, saving all nodes along the path too
      var node = this._chooseSubtree(bbox, this.data, level, insertPath);

      // put the item into the node
      node.children.push(item);
      extend(node, bbox);

      // split on node overflow; propagate upwards if necessary
      while (level >= 0) {
          if (insertPath[level].children.length > this._maxEntries) {
              this._split(insertPath, level);
              level--;
          } else { break; }
      }

      // adjust bboxes along the insertion path
      this._adjustParentBBoxes(bbox, insertPath, level);
  };

  // split overflowed node into two
  RBush.prototype._split = function _split (insertPath, level) {
      var node = insertPath[level];
      var M = node.children.length;
      var m = this._minEntries;

      this._chooseSplitAxis(node, m, M);

      var splitIndex = this._chooseSplitIndex(node, m, M);

      var newNode = createNode(node.children.splice(splitIndex, node.children.length - splitIndex));
      newNode.height = node.height;
      newNode.leaf = node.leaf;

      calcBBox(node, this.toBBox);
      calcBBox(newNode, this.toBBox);

      if (level) { insertPath[level - 1].children.push(newNode); }
      else { this._splitRoot(node, newNode); }
  };

  RBush.prototype._splitRoot = function _splitRoot (node, newNode) {
      // split root node
      this.data = createNode([node, newNode]);
      this.data.height = node.height + 1;
      this.data.leaf = false;
      calcBBox(this.data, this.toBBox);
  };

  RBush.prototype._chooseSplitIndex = function _chooseSplitIndex (node, m, M) {
      var index;
      var minOverlap = Infinity;
      var minArea = Infinity;

      for (var i = m; i <= M - m; i++) {
          var bbox1 = distBBox(node, 0, i, this.toBBox);
          var bbox2 = distBBox(node, i, M, this.toBBox);

          var overlap = intersectionArea(bbox1, bbox2);
          var area = bboxArea(bbox1) + bboxArea(bbox2);

          // choose distribution with minimum overlap
          if (overlap < minOverlap) {
              minOverlap = overlap;
              index = i;

              minArea = area < minArea ? area : minArea;

          } else if (overlap === minOverlap) {
              // otherwise choose distribution with minimum area
              if (area < minArea) {
                  minArea = area;
                  index = i;
              }
          }
      }

      return index || M - m;
  };

  // sorts node children by the best axis for split
  RBush.prototype._chooseSplitAxis = function _chooseSplitAxis (node, m, M) {
      var compareMinX = node.leaf ? this.compareMinX : compareNodeMinX;
      var compareMinY = node.leaf ? this.compareMinY : compareNodeMinY;
      var xMargin = this._allDistMargin(node, m, M, compareMinX);
      var yMargin = this._allDistMargin(node, m, M, compareMinY);

      // if total distributions margin value is minimal for x, sort by minX,
      // otherwise it's already sorted by minY
      if (xMargin < yMargin) { node.children.sort(compareMinX); }
  };

  // total margin of all possible split distributions where each node is at least m full
  RBush.prototype._allDistMargin = function _allDistMargin (node, m, M, compare) {
      node.children.sort(compare);

      var toBBox = this.toBBox;
      var leftBBox = distBBox(node, 0, m, toBBox);
      var rightBBox = distBBox(node, M - m, M, toBBox);
      var margin = bboxMargin(leftBBox) + bboxMargin(rightBBox);

      for (var i = m; i < M - m; i++) {
          var child = node.children[i];
          extend(leftBBox, node.leaf ? toBBox(child) : child);
          margin += bboxMargin(leftBBox);
      }

      for (var i$1 = M - m - 1; i$1 >= m; i$1--) {
          var child$1 = node.children[i$1];
          extend(rightBBox, node.leaf ? toBBox(child$1) : child$1);
          margin += bboxMargin(rightBBox);
      }

      return margin;
  };

  RBush.prototype._adjustParentBBoxes = function _adjustParentBBoxes (bbox, path, level) {
      // adjust bboxes along the given tree path
      for (var i = level; i >= 0; i--) {
          extend(path[i], bbox);
      }
  };

  RBush.prototype._condense = function _condense (path) {
      // go through the path, removing empty nodes and updating bboxes
      for (var i = path.length - 1, siblings = (void 0); i >= 0; i--) {
          if (path[i].children.length === 0) {
              if (i > 0) {
                  siblings = path[i - 1].children;
                  siblings.splice(siblings.indexOf(path[i]), 1);

              } else { this.clear(); }

          } else { calcBBox(path[i], this.toBBox); }
      }
  };

  function findItem(item, items, equalsFn) {
      if (!equalsFn) { return items.indexOf(item); }

      for (var i = 0; i < items.length; i++) {
          if (equalsFn(item, items[i])) { return i; }
      }
      return -1;
  }

  // calculate node's bbox from bboxes of its children
  function calcBBox(node, toBBox) {
      distBBox(node, 0, node.children.length, toBBox, node);
  }

  // min bounding rectangle of node children from k to p-1
  function distBBox(node, k, p, toBBox, destNode) {
      if (!destNode) { destNode = createNode(null); }
      destNode.minX = Infinity;
      destNode.minY = Infinity;
      destNode.maxX = -Infinity;
      destNode.maxY = -Infinity;

      for (var i = k; i < p; i++) {
          var child = node.children[i];
          extend(destNode, node.leaf ? toBBox(child) : child);
      }

      return destNode;
  }

  function extend(a, b) {
      a.minX = Math.min(a.minX, b.minX);
      a.minY = Math.min(a.minY, b.minY);
      a.maxX = Math.max(a.maxX, b.maxX);
      a.maxY = Math.max(a.maxY, b.maxY);
      return a;
  }

  function compareNodeMinX(a, b) { return a.minX - b.minX; }
  function compareNodeMinY(a, b) { return a.minY - b.minY; }

  function bboxArea(a)   { return (a.maxX - a.minX) * (a.maxY - a.minY); }
  function bboxMargin(a) { return (a.maxX - a.minX) + (a.maxY - a.minY); }

  function enlargedArea(a, b) {
      return (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) *
             (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY));
  }

  function intersectionArea(a, b) {
      var minX = Math.max(a.minX, b.minX);
      var minY = Math.max(a.minY, b.minY);
      var maxX = Math.min(a.maxX, b.maxX);
      var maxY = Math.min(a.maxY, b.maxY);

      return Math.max(0, maxX - minX) *
             Math.max(0, maxY - minY);
  }

  function contains(a, b) {
      return a.minX <= b.minX &&
             a.minY <= b.minY &&
             b.maxX <= a.maxX &&
             b.maxY <= a.maxY;
  }

  function intersects(a, b) {
      return b.minX <= a.maxX &&
             b.minY <= a.maxY &&
             b.maxX >= a.minX &&
             b.maxY >= a.minY;
  }

  function createNode(children) {
      return {
          children: children,
          height: 1,
          leaf: true,
          minX: Infinity,
          minY: Infinity,
          maxX: -Infinity,
          maxY: -Infinity
      };
  }

  // sort an array so that items come in groups of n unsorted items, with groups sorted between each other;
  // combines selection algorithm with binary divide & conquer approach

  function multiSelect(arr, left, right, n, compare) {
      var stack = [left, right];

      while (stack.length) {
          right = stack.pop();
          left = stack.pop();

          if (right - left <= n) { continue; }

          var mid = left + Math.ceil((right - left) / n / 2) * n;
          quickselect(arr, mid, left, right, compare);

          stack.push(left, mid, mid, right);
      }
  }

  return RBush;

  }));
  });

  /**
   * @module ol/render/canvas/Executor
   */
  /**
   * @typedef {Object} SerializableInstructions
   * @property {Array<*>} instructions The rendering instructions.
   * @property {Array<*>} hitDetectionInstructions The rendering hit detection instructions.
   * @property {Array<number>} coordinates The array of all coordinates.
   * @property {!Object<string, import("../canvas.js").TextState>} textStates The text states (decluttering).
   * @property {!Object<string, import("../canvas.js").FillState>} fillStates The fill states (decluttering).
   * @property {!Object<string, import("../canvas.js").StrokeState>} strokeStates The stroke states (decluttering).
   */
  /**
   * @type {import("../../extent.js").Extent}
   */
  var tmpExtent = createEmpty();
  /**
   * @type {!import("../../transform.js").Transform}
   */
  var tmpTransform$2 = create();
  /** @type {import("../../coordinate.js").Coordinate} */
  var p1 = [];
  /** @type {import("../../coordinate.js").Coordinate} */
  var p2 = [];
  /** @type {import("../../coordinate.js").Coordinate} */
  var p3 = [];
  /** @type {import("../../coordinate.js").Coordinate} */
  var p4 = [];
  var Executor = /** @class */ (function () {
      /**
       * @param {number} resolution Resolution.
       * @param {number} pixelRatio Pixel ratio.
       * @param {boolean} overlaps The replay can have overlapping geometries.
       * @param {SerializableInstructions} instructions The serializable instructions
       */
      function Executor(resolution, pixelRatio, overlaps, instructions) {
          /**
           * @protected
           * @type {boolean}
           */
          this.overlaps = overlaps;
          /**
           * @protected
           * @type {number}
           */
          this.pixelRatio = pixelRatio;
          /**
           * @protected
           * @const
           * @type {number}
           */
          this.resolution = resolution;
          /**
           * @private
           * @type {boolean}
           */
          this.alignFill_;
          /**
           * @type {Array<*>}
           */
          this.declutterItems = [];
          /**
           * @protected
           * @type {Array<*>}
           */
          this.instructions = instructions.instructions;
          /**
           * @protected
           * @type {Array<number>}
           */
          this.coordinates = instructions.coordinates;
          /**
           * @private
           * @type {!Object<number,import("../../coordinate.js").Coordinate|Array<import("../../coordinate.js").Coordinate>|Array<Array<import("../../coordinate.js").Coordinate>>>}
           */
          this.coordinateCache_ = {};
          /**
           * @private
           * @type {!import("../../transform.js").Transform}
           */
          this.renderedTransform_ = create();
          /**
           * @protected
           * @type {Array<*>}
           */
          this.hitDetectionInstructions = instructions.hitDetectionInstructions;
          /**
           * @private
           * @type {Array<number>}
           */
          this.pixelCoordinates_ = null;
          /**
           * @private
           * @type {number}
           */
          this.viewRotation_ = 0;
          /**
           * @type {!Object<string, import("../canvas.js").FillState>}
           */
          this.fillStates = instructions.fillStates || {};
          /**
           * @type {!Object<string, import("../canvas.js").StrokeState>}
           */
          this.strokeStates = instructions.strokeStates || {};
          /**
           * @type {!Object<string, import("../canvas.js").TextState>}
           */
          this.textStates = instructions.textStates || {};
          /**
           * @private
           * @type {Object<string, Object<string, number>>}
           */
          this.widths_ = {};
          /**
           * @private
           * @type {Object<string, import("../canvas.js").Label>}
           */
          this.labels_ = {};
      }
      /**
       * @param {string} text Text.
       * @param {string} textKey Text style key.
       * @param {string} fillKey Fill style key.
       * @param {string} strokeKey Stroke style key.
       * @return {import("../canvas.js").Label} Label.
       */
      Executor.prototype.createLabel = function (text, textKey, fillKey, strokeKey) {
          var key = text + textKey + fillKey + strokeKey;
          if (this.labels_[key]) {
              return this.labels_[key];
          }
          var strokeState = strokeKey ? this.strokeStates[strokeKey] : null;
          var fillState = fillKey ? this.fillStates[fillKey] : null;
          var textState = this.textStates[textKey];
          var pixelRatio = this.pixelRatio;
          var scale = textState.scale * pixelRatio;
          var align = TEXT_ALIGN[textState.textAlign || defaultTextAlign];
          var strokeWidth = strokeKey && strokeState.lineWidth ? strokeState.lineWidth : 0;
          var lines = text.split('\n');
          var numLines = lines.length;
          var widths = [];
          var width = measureTextWidths(textState.font, lines, widths);
          var lineHeight = measureTextHeight(textState.font);
          var height = lineHeight * numLines;
          var renderWidth = width + strokeWidth;
          var contextInstructions = [];
          /** @type {import("../canvas.js").Label} */
          var label = {
              // make canvas 2 pixels wider to account for italic text width measurement errors
              width: Math.ceil((renderWidth + 2) * scale),
              height: Math.ceil((height + strokeWidth) * scale),
              contextInstructions: contextInstructions
          };
          if (scale != 1) {
              contextInstructions.push('scale', [scale, scale]);
          }
          contextInstructions.push('font', textState.font);
          if (strokeKey) {
              contextInstructions.push('strokeStyle', strokeState.strokeStyle);
              contextInstructions.push('lineWidth', strokeWidth);
              contextInstructions.push('lineCap', strokeState.lineCap);
              contextInstructions.push('lineJoin', strokeState.lineJoin);
              contextInstructions.push('miterLimit', strokeState.miterLimit);
              // eslint-disable-next-line
              var Context = WORKER_OFFSCREEN_CANVAS ? OffscreenCanvasRenderingContext2D : CanvasRenderingContext2D;
              if (Context.prototype.setLineDash) {
                  contextInstructions.push('setLineDash', [strokeState.lineDash]);
                  contextInstructions.push('lineDashOffset', strokeState.lineDashOffset);
              }
          }
          if (fillKey) {
              contextInstructions.push('fillStyle', fillState.fillStyle);
          }
          contextInstructions.push('textBaseline', 'middle');
          contextInstructions.push('textAlign', 'center');
          var leftRight = (0.5 - align);
          var x = align * renderWidth + leftRight * strokeWidth;
          var i;
          if (strokeKey) {
              for (i = 0; i < numLines; ++i) {
                  contextInstructions.push('strokeText', [lines[i], x + leftRight * widths[i], 0.5 * (strokeWidth + lineHeight) + i * lineHeight]);
              }
          }
          if (fillKey) {
              for (i = 0; i < numLines; ++i) {
                  contextInstructions.push('fillText', [lines[i], x + leftRight * widths[i], 0.5 * (strokeWidth + lineHeight) + i * lineHeight]);
              }
          }
          this.labels_[key] = label;
          return label;
      };
      /**
       * @param {CanvasRenderingContext2D} context Context.
       * @param {import("../../coordinate.js").Coordinate} p1 1st point of the background box.
       * @param {import("../../coordinate.js").Coordinate} p2 2nd point of the background box.
       * @param {import("../../coordinate.js").Coordinate} p3 3rd point of the background box.
       * @param {import("../../coordinate.js").Coordinate} p4 4th point of the background box.
       * @param {Array<*>} fillInstruction Fill instruction.
       * @param {Array<*>} strokeInstruction Stroke instruction.
       */
      Executor.prototype.replayTextBackground_ = function (context, p1, p2, p3, p4, fillInstruction, strokeInstruction) {
          context.beginPath();
          context.moveTo.apply(context, p1);
          context.lineTo.apply(context, p2);
          context.lineTo.apply(context, p3);
          context.lineTo.apply(context, p4);
          context.lineTo.apply(context, p1);
          if (fillInstruction) {
              this.alignFill_ = /** @type {boolean} */ (fillInstruction[2]);
              this.fill_(context);
          }
          if (strokeInstruction) {
              this.setStrokeStyle_(context, /** @type {Array<*>} */ (strokeInstruction));
              context.stroke();
          }
      };
      /**
       * @param {CanvasRenderingContext2D} context Context.
       * @param {number} x X.
       * @param {number} y Y.
       * @param {import("../canvas.js").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} imageOrLabel Image.
       * @param {number} anchorX Anchor X.
       * @param {number} anchorY Anchor Y.
       * @param {import("../canvas.js").DeclutterGroup} declutterGroup Declutter group.
       * @param {number} height Height.
       * @param {number} opacity Opacity.
       * @param {number} originX Origin X.
       * @param {number} originY Origin Y.
       * @param {number} rotation Rotation.
       * @param {number} scale Scale.
       * @param {boolean} snapToPixel Snap to pixel.
       * @param {number} width Width.
       * @param {Array<number>} padding Padding.
       * @param {Array<*>} fillInstruction Fill instruction.
       * @param {Array<*>} strokeInstruction Stroke instruction.
       */
      Executor.prototype.replayImageOrLabel_ = function (context, x, y, imageOrLabel, anchorX, anchorY, declutterGroup, height, opacity, originX, originY, rotation, scale, snapToPixel, width, padding, fillInstruction, strokeInstruction) {
          var fillStroke = fillInstruction || strokeInstruction;
          anchorX *= scale;
          anchorY *= scale;
          x -= anchorX;
          y -= anchorY;
          var w = (width + originX > imageOrLabel.width) ? imageOrLabel.width - originX : width;
          var h = (height + originY > imageOrLabel.height) ? imageOrLabel.height - originY : height;
          var boxW = padding[3] + w * scale + padding[1];
          var boxH = padding[0] + h * scale + padding[2];
          var boxX = x - padding[3];
          var boxY = y - padding[0];
          if (fillStroke || rotation !== 0) {
              p1[0] = boxX;
              p4[0] = boxX;
              p1[1] = boxY;
              p2[1] = boxY;
              p2[0] = boxX + boxW;
              p3[0] = p2[0];
              p3[1] = boxY + boxH;
              p4[1] = p3[1];
          }
          var transform = null;
          if (rotation !== 0) {
              var centerX = x + anchorX;
              var centerY = y + anchorY;
              transform = compose(tmpTransform$2, centerX, centerY, 1, 1, rotation, -centerX, -centerY);
              apply(tmpTransform$2, p1);
              apply(tmpTransform$2, p2);
              apply(tmpTransform$2, p3);
              apply(tmpTransform$2, p4);
              createOrUpdate(Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1]), tmpExtent);
          }
          else {
              createOrUpdate(boxX, boxY, boxX + boxW, boxY + boxH, tmpExtent);
          }
          var canvas = context.canvas;
          var strokePadding = strokeInstruction ? (strokeInstruction[2] * scale / 2) : 0;
          var intersects = tmpExtent[0] - strokePadding <= canvas.width && tmpExtent[2] + strokePadding >= 0 &&
              tmpExtent[1] - strokePadding <= canvas.height && tmpExtent[3] + strokePadding >= 0;
          if (snapToPixel) {
              x = Math.round(x);
              y = Math.round(y);
          }
          if (declutterGroup) {
              if (!intersects && declutterGroup[4] == 1) {
                  return;
              }
              extend(declutterGroup, tmpExtent);
              var declutterArgs = intersects ?
                  [context, transform ? transform.slice(0) : null, opacity, imageOrLabel, originX, originY, w, h, x, y, scale] :
                  null;
              if (declutterArgs) {
                  if (fillStroke) {
                      declutterArgs.push(fillInstruction, strokeInstruction, p1.slice(0), p2.slice(0), p3.slice(0), p4.slice(0));
                  }
                  declutterGroup.push(declutterArgs);
              }
          }
          else if (intersects) {
              if (fillStroke) {
                  this.replayTextBackground_(context, p1, p2, p3, p4, 
                  /** @type {Array<*>} */ (fillInstruction), 
                  /** @type {Array<*>} */ (strokeInstruction));
              }
              drawImageOrLabel(context, transform, opacity, imageOrLabel, originX, originY, w, h, x, y, scale);
          }
      };
      /**
       * @private
       * @param {CanvasRenderingContext2D} context Context.
       */
      Executor.prototype.fill_ = function (context) {
          if (this.alignFill_) {
              var origin_1 = apply(this.renderedTransform_, [0, 0]);
              var repeatSize = 512 * this.pixelRatio;
              context.save();
              context.translate(origin_1[0] % repeatSize, origin_1[1] % repeatSize);
              context.rotate(this.viewRotation_);
          }
          context.fill();
          if (this.alignFill_) {
              context.restore();
          }
      };
      /**
       * @private
       * @param {CanvasRenderingContext2D} context Context.
       * @param {Array<*>} instruction Instruction.
       */
      Executor.prototype.setStrokeStyle_ = function (context, instruction) {
          context.strokeStyle = /** @type {import("../../colorlike.js").ColorLike} */ (instruction[1]);
          context.lineWidth = /** @type {number} */ (instruction[2]);
          context.lineCap = /** @type {CanvasLineCap} */ (instruction[3]);
          context.lineJoin = /** @type {CanvasLineJoin} */ (instruction[4]);
          context.miterLimit = /** @type {number} */ (instruction[5]);
          if (context.setLineDash) {
              context.lineDashOffset = /** @type {number} */ (instruction[7]);
              context.setLineDash(/** @type {Array<number>} */ (instruction[6]));
          }
      };
      /**
       * @param {import("../canvas.js").DeclutterGroup} declutterGroup Declutter group.
       * @param {import("../../Feature.js").FeatureLike} feature Feature.
       * @param {number} opacity Layer opacity.
       * @param {?} declutterTree Declutter tree.
       * @return {?} Declutter tree.
       */
      Executor.prototype.renderDeclutter = function (declutterGroup, feature, opacity, declutterTree) {
          if (declutterGroup && declutterGroup.length > 5) {
              var groupCount = declutterGroup[4];
              if (groupCount == 1 || groupCount == declutterGroup.length - 5) {
                  /** @type {import("../../structs/RBush.js").Entry} */
                  var box = {
                      minX: /** @type {number} */ (declutterGroup[0]),
                      minY: /** @type {number} */ (declutterGroup[1]),
                      maxX: /** @type {number} */ (declutterGroup[2]),
                      maxY: /** @type {number} */ (declutterGroup[3]),
                      value: feature
                  };
                  if (!declutterTree) {
                      declutterTree = new rbush(9);
                  }
                  if (!declutterTree.collides(box)) {
                      declutterTree.insert(box);
                      for (var j = 5, jj = declutterGroup.length; j < jj; ++j) {
                          var declutterData = /** @type {Array} */ (declutterGroup[j]);
                          var context = declutterData[0];
                          var currentAlpha = context.globalAlpha;
                          if (currentAlpha !== opacity) {
                              context.globalAlpha = opacity;
                          }
                          if (declutterData.length > 11) {
                              this.replayTextBackground_(declutterData[0], declutterData[13], declutterData[14], declutterData[15], declutterData[16], declutterData[11], declutterData[12]);
                          }
                          drawImageOrLabel.apply(undefined, declutterData);
                          if (currentAlpha !== opacity) {
                              context.globalAlpha = currentAlpha;
                          }
                      }
                  }
                  declutterGroup.length = 5;
                  createOrUpdateEmpty(declutterGroup);
              }
          }
          return declutterTree;
      };
      /**
       * @private
       * @param {string} text The text to draw.
       * @param {string} textKey The key of the text state.
       * @param {string} strokeKey The key for the stroke state.
       * @param {string} fillKey The key for the fill state.
       * @return {{label: import("../canvas.js").Label, anchorX: number, anchorY: number}} The text image and its anchor.
       */
      Executor.prototype.drawLabelWithPointPlacement_ = function (text, textKey, strokeKey, fillKey) {
          var textState = this.textStates[textKey];
          var label = this.createLabel(text, textKey, fillKey, strokeKey);
          var strokeState = this.strokeStates[strokeKey];
          var pixelRatio = this.pixelRatio;
          var align = TEXT_ALIGN[textState.textAlign || defaultTextAlign];
          var baseline = TEXT_ALIGN[textState.textBaseline || defaultTextBaseline];
          var strokeWidth = strokeState && strokeState.lineWidth ? strokeState.lineWidth : 0;
          // Remove the 2 pixels we added in createLabel() for the anchor
          var width = label.width / pixelRatio - 2 * textState.scale;
          var anchorX = align * width + 2 * (0.5 - align) * strokeWidth;
          var anchorY = baseline * label.height / pixelRatio + 2 * (0.5 - baseline) * strokeWidth;
          return {
              label: label,
              anchorX: anchorX,
              anchorY: anchorY
          };
      };
      /**
       * @private
       * @param {CanvasRenderingContext2D} context Context.
       * @param {import("../../transform.js").Transform} transform Transform.
       * @param {Array<*>} instructions Instructions array.
       * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.
       * @param {function(import("../../Feature.js").FeatureLike): T|undefined} featureCallback Feature callback.
       * @param {import("../../extent.js").Extent=} opt_hitExtent Only check features that intersect this
       *     extent.
       * @return {T|undefined} Callback result.
       * @template T
       */
      Executor.prototype.execute_ = function (context, transform, instructions, snapToPixel, featureCallback, opt_hitExtent) {
          this.declutterItems.length = 0;
          /** @type {Array<number>} */
          var pixelCoordinates;
          if (this.pixelCoordinates_ && equals$1(transform, this.renderedTransform_)) {
              pixelCoordinates = this.pixelCoordinates_;
          }
          else {
              if (!this.pixelCoordinates_) {
                  this.pixelCoordinates_ = [];
              }
              pixelCoordinates = transform2D(this.coordinates, 0, this.coordinates.length, 2, transform, this.pixelCoordinates_);
              setFromArray(this.renderedTransform_, transform);
          }
          var i = 0; // instruction index
          var ii = instructions.length; // end of instructions
          var d = 0; // data index
          var dd; // end of per-instruction data
          var anchorX, anchorY, prevX, prevY, roundX, roundY, declutterGroup, declutterGroups, image, text, textKey;
          var strokeKey, fillKey;
          var pendingFill = 0;
          var pendingStroke = 0;
          var lastFillInstruction = null;
          var lastStrokeInstruction = null;
          var coordinateCache = this.coordinateCache_;
          var viewRotation = this.viewRotation_;
          var viewRotationFromTransform = Math.round(Math.atan2(-transform[1], transform[0]) * 1e12) / 1e12;
          var state = /** @type {import("../../render.js").State} */ ({
              context: context,
              pixelRatio: this.pixelRatio,
              resolution: this.resolution,
              rotation: viewRotation
          });
          // When the batch size gets too big, performance decreases. 200 is a good
          // balance between batch size and number of fill/stroke instructions.
          var batchSize = this.instructions != instructions || this.overlaps ? 0 : 200;
          var /** @type {import("../../Feature.js").FeatureLike} */ feature;
          var x, y;
          while (i < ii) {
              var instruction = instructions[i];
              var type = /** @type {CanvasInstruction} */ (instruction[0]);
              switch (type) {
                  case Instruction.BEGIN_GEOMETRY:
                      feature = /** @type {import("../../Feature.js").FeatureLike} */ (instruction[1]);
                      if (!feature.getGeometry()) {
                          i = /** @type {number} */ (instruction[2]);
                      }
                      else if (opt_hitExtent !== undefined && !intersects(opt_hitExtent, instruction[3])) {
                          i = /** @type {number} */ (instruction[2]) + 1;
                      }
                      else {
                          ++i;
                      }
                      break;
                  case Instruction.BEGIN_PATH:
                      if (pendingFill > batchSize) {
                          this.fill_(context);
                          pendingFill = 0;
                      }
                      if (pendingStroke > batchSize) {
                          context.stroke();
                          pendingStroke = 0;
                      }
                      if (!pendingFill && !pendingStroke) {
                          context.beginPath();
                          prevX = NaN;
                          prevY = NaN;
                      }
                      ++i;
                      break;
                  case Instruction.CIRCLE:
                      d = /** @type {number} */ (instruction[1]);
                      var x1 = pixelCoordinates[d];
                      var y1 = pixelCoordinates[d + 1];
                      var x2 = pixelCoordinates[d + 2];
                      var y2 = pixelCoordinates[d + 3];
                      var dx = x2 - x1;
                      var dy = y2 - y1;
                      var r = Math.sqrt(dx * dx + dy * dy);
                      context.moveTo(x1 + r, y1);
                      context.arc(x1, y1, r, 0, 2 * Math.PI, true);
                      ++i;
                      break;
                  case Instruction.CLOSE_PATH:
                      context.closePath();
                      ++i;
                      break;
                  case Instruction.CUSTOM:
                      d = /** @type {number} */ (instruction[1]);
                      dd = instruction[2];
                      var geometry = /** @type {import("../../geom/SimpleGeometry.js").default} */ (instruction[3]);
                      var renderer = instruction[4];
                      var fn = instruction.length == 6 ? instruction[5] : undefined;
                      state.geometry = geometry;
                      state.feature = feature;
                      if (!(i in coordinateCache)) {
                          coordinateCache[i] = [];
                      }
                      var coords = coordinateCache[i];
                      if (fn) {
                          fn(pixelCoordinates, d, dd, 2, coords);
                      }
                      else {
                          coords[0] = pixelCoordinates[d];
                          coords[1] = pixelCoordinates[d + 1];
                          coords.length = 2;
                      }
                      renderer(coords, state);
                      ++i;
                      break;
                  case Instruction.DRAW_IMAGE:
                      d = /** @type {number} */ (instruction[1]);
                      dd = /** @type {number} */ (instruction[2]);
                      image = /** @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} */ (instruction[3]);
                      // Remaining arguments in DRAW_IMAGE are in alphabetical order
                      anchorX = /** @type {number} */ (instruction[4]);
                      anchorY = /** @type {number} */ (instruction[5]);
                      declutterGroups = featureCallback ? null : instruction[6];
                      var height = /** @type {number} */ (instruction[7]);
                      var opacity = /** @type {number} */ (instruction[8]);
                      var originX = /** @type {number} */ (instruction[9]);
                      var originY = /** @type {number} */ (instruction[10]);
                      var rotateWithView = /** @type {boolean} */ (instruction[11]);
                      var rotation = /** @type {number} */ (instruction[12]);
                      var scale = /** @type {number} */ (instruction[13]);
                      var width = /** @type {number} */ (instruction[14]);
                      if (!image && instruction.length >= 19) {
                          // create label images
                          text = /** @type {string} */ (instruction[18]);
                          textKey = /** @type {string} */ (instruction[19]);
                          strokeKey = /** @type {string} */ (instruction[20]);
                          fillKey = /** @type {string} */ (instruction[21]);
                          var labelWithAnchor = this.drawLabelWithPointPlacement_(text, textKey, strokeKey, fillKey);
                          image = labelWithAnchor.label;
                          instruction[3] = image;
                          var textOffsetX = /** @type {number} */ (instruction[22]);
                          anchorX = (labelWithAnchor.anchorX - textOffsetX) * this.pixelRatio;
                          instruction[4] = anchorX;
                          var textOffsetY = /** @type {number} */ (instruction[23]);
                          anchorY = (labelWithAnchor.anchorY - textOffsetY) * this.pixelRatio;
                          instruction[5] = anchorY;
                          height = image.height;
                          instruction[7] = height;
                          width = image.width;
                          instruction[14] = width;
                      }
                      var geometryWidths = void 0;
                      if (instruction.length > 24) {
                          geometryWidths = /** @type {number} */ (instruction[24]);
                      }
                      var padding = void 0, backgroundFill = void 0, backgroundStroke = void 0;
                      if (instruction.length > 16) {
                          padding = /** @type {Array<number>} */ (instruction[15]);
                          backgroundFill = /** @type {boolean} */ (instruction[16]);
                          backgroundStroke = /** @type {boolean} */ (instruction[17]);
                      }
                      else {
                          padding = defaultPadding;
                          backgroundFill = false;
                          backgroundStroke = false;
                      }
                      if (rotateWithView && viewRotationFromTransform) {
                          // Canvas is expected to be rotated to reverse view rotation.
                          rotation += viewRotation;
                      }
                      else if (!rotateWithView && !viewRotationFromTransform) {
                          // Canvas is not rotated, images need to be rotated back to be north-up.
                          rotation -= viewRotation;
                      }
                      var widthIndex = 0;
                      var declutterGroupIndex = 0;
                      for (; d < dd; d += 2) {
                          if (geometryWidths && geometryWidths[widthIndex++] < width / this.pixelRatio) {
                              continue;
                          }
                          if (declutterGroups) {
                              var index = Math.floor(declutterGroupIndex);
                              if (declutterGroups.length < index + 1) {
                                  declutterGroup = createEmpty();
                                  declutterGroup.push(declutterGroups[0][4]);
                                  declutterGroups.push(declutterGroup);
                              }
                              declutterGroup = declutterGroups[index];
                          }
                          this.replayImageOrLabel_(context, pixelCoordinates[d], pixelCoordinates[d + 1], image, anchorX, anchorY, declutterGroup, height, opacity, originX, originY, rotation, scale, snapToPixel, width, padding, backgroundFill ? /** @type {Array<*>} */ (lastFillInstruction) : null, backgroundStroke ? /** @type {Array<*>} */ (lastStrokeInstruction) : null);
                          if (declutterGroup) {
                              if (declutterGroupIndex === Math.floor(declutterGroupIndex)) {
                                  this.declutterItems.push(this, declutterGroup, feature);
                              }
                              declutterGroupIndex += 1 / declutterGroup[4];
                          }
                      }
                      ++i;
                      break;
                  case Instruction.DRAW_CHARS:
                      var begin = /** @type {number} */ (instruction[1]);
                      var end = /** @type {number} */ (instruction[2]);
                      var baseline = /** @type {number} */ (instruction[3]);
                      declutterGroup = featureCallback ? null : instruction[4];
                      var overflow = /** @type {number} */ (instruction[5]);
                      fillKey = /** @type {string} */ (instruction[6]);
                      var maxAngle = /** @type {number} */ (instruction[7]);
                      var measurePixelRatio = /** @type {number} */ (instruction[8]);
                      var offsetY = /** @type {number} */ (instruction[9]);
                      strokeKey = /** @type {string} */ (instruction[10]);
                      var strokeWidth = /** @type {number} */ (instruction[11]);
                      text = /** @type {string} */ (instruction[12]);
                      textKey = /** @type {string} */ (instruction[13]);
                      var pixelRatioScale = /** @type {number} */ (instruction[14]);
                      var textState = this.textStates[textKey];
                      var font = textState.font;
                      var textScale = textState.scale * measurePixelRatio;
                      var cachedWidths = void 0;
                      if (font in this.widths_) {
                          cachedWidths = this.widths_[font];
                      }
                      else {
                          cachedWidths = {};
                          this.widths_[font] = cachedWidths;
                      }
                      var pathLength = lineStringLength(pixelCoordinates, begin, end, 2);
                      var textLength = textScale * measureAndCacheTextWidth(font, text, cachedWidths);
                      if (overflow || textLength <= pathLength) {
                          var textAlign = this.textStates[textKey].textAlign;
                          var startM = (pathLength - textLength) * TEXT_ALIGN[textAlign];
                          var parts = drawTextOnPath(pixelCoordinates, begin, end, 2, text, startM, maxAngle, textScale, measureAndCacheTextWidth, font, cachedWidths);
                          if (parts) {
                              var c = void 0, cc = void 0, chars = void 0, label = void 0, part = void 0;
                              if (strokeKey) {
                                  for (c = 0, cc = parts.length; c < cc; ++c) {
                                      part = parts[c]; // x, y, anchorX, rotation, chunk
                                      chars = /** @type {string} */ (part[4]);
                                      label = this.createLabel(chars, textKey, '', strokeKey);
                                      anchorX = /** @type {number} */ (part[2]) + strokeWidth;
                                      anchorY = baseline * label.height + (0.5 - baseline) * 2 * strokeWidth - offsetY;
                                      this.replayImageOrLabel_(context, 
                                      /** @type {number} */ (part[0]), /** @type {number} */ (part[1]), label, anchorX, anchorY, declutterGroup, label.height, 1, 0, 0, 
                                      /** @type {number} */ (part[3]), pixelRatioScale, false, label.width, defaultPadding, null, null);
                                  }
                              }
                              if (fillKey) {
                                  for (c = 0, cc = parts.length; c < cc; ++c) {
                                      part = parts[c]; // x, y, anchorX, rotation, chunk
                                      chars = /** @type {string} */ (part[4]);
                                      label = this.createLabel(chars, textKey, fillKey, '');
                                      anchorX = /** @type {number} */ (part[2]);
                                      anchorY = baseline * label.height - offsetY;
                                      this.replayImageOrLabel_(context, 
                                      /** @type {number} */ (part[0]), /** @type {number} */ (part[1]), label, anchorX, anchorY, declutterGroup, label.height, 1, 0, 0, 
                                      /** @type {number} */ (part[3]), pixelRatioScale, false, label.width, defaultPadding, null, null);
                                  }
                              }
                          }
                      }
                      this.declutterItems.push(this, declutterGroup, feature);
                      ++i;
                      break;
                  case Instruction.END_GEOMETRY:
                      if (featureCallback !== undefined) {
                          feature = /** @type {import("../../Feature.js").FeatureLike} */ (instruction[1]);
                          var result = featureCallback(feature);
                          if (result) {
                              return result;
                          }
                      }
                      ++i;
                      break;
                  case Instruction.FILL:
                      if (batchSize) {
                          pendingFill++;
                      }
                      else {
                          this.fill_(context);
                      }
                      ++i;
                      break;
                  case Instruction.MOVE_TO_LINE_TO:
                      d = /** @type {number} */ (instruction[1]);
                      dd = /** @type {number} */ (instruction[2]);
                      x = pixelCoordinates[d];
                      y = pixelCoordinates[d + 1];
                      roundX = (x + 0.5) | 0;
                      roundY = (y + 0.5) | 0;
                      if (roundX !== prevX || roundY !== prevY) {
                          context.moveTo(x, y);
                          prevX = roundX;
                          prevY = roundY;
                      }
                      for (d += 2; d < dd; d += 2) {
                          x = pixelCoordinates[d];
                          y = pixelCoordinates[d + 1];
                          roundX = (x + 0.5) | 0;
                          roundY = (y + 0.5) | 0;
                          if (d == dd - 2 || roundX !== prevX || roundY !== prevY) {
                              context.lineTo(x, y);
                              prevX = roundX;
                              prevY = roundY;
                          }
                      }
                      ++i;
                      break;
                  case Instruction.SET_FILL_STYLE:
                      lastFillInstruction = instruction;
                      this.alignFill_ = instruction[2];
                      if (pendingFill) {
                          this.fill_(context);
                          pendingFill = 0;
                          if (pendingStroke) {
                              context.stroke();
                              pendingStroke = 0;
                          }
                      }
                      context.fillStyle = /** @type {import("../../colorlike.js").ColorLike} */ (instruction[1]);
                      ++i;
                      break;
                  case Instruction.SET_STROKE_STYLE:
                      lastStrokeInstruction = instruction;
                      if (pendingStroke) {
                          context.stroke();
                          pendingStroke = 0;
                      }
                      this.setStrokeStyle_(context, /** @type {Array<*>} */ (instruction));
                      ++i;
                      break;
                  case Instruction.STROKE:
                      if (batchSize) {
                          pendingStroke++;
                      }
                      else {
                          context.stroke();
                      }
                      ++i;
                      break;
                  default:
                      ++i; // consume the instruction anyway, to avoid an infinite loop
                      break;
              }
          }
          if (pendingFill) {
              this.fill_(context);
          }
          if (pendingStroke) {
              context.stroke();
          }
          return undefined;
      };
      /**
       * @param {CanvasRenderingContext2D} context Context.
       * @param {import("../../transform.js").Transform} transform Transform.
       * @param {number} viewRotation View rotation.
       * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.
       */
      Executor.prototype.execute = function (context, transform, viewRotation, snapToPixel) {
          this.viewRotation_ = viewRotation;
          this.execute_(context, transform, this.instructions, snapToPixel, undefined, undefined);
      };
      /**
       * @param {CanvasRenderingContext2D} context Context.
       * @param {import("../../transform.js").Transform} transform Transform.
       * @param {number} viewRotation View rotation.
       * @param {function(import("../../Feature.js").FeatureLike): T=} opt_featureCallback
       *     Feature callback.
       * @param {import("../../extent.js").Extent=} opt_hitExtent Only check features that intersect this
       *     extent.
       * @return {T|undefined} Callback result.
       * @template T
       */
      Executor.prototype.executeHitDetection = function (context, transform, viewRotation, opt_featureCallback, opt_hitExtent) {
          this.viewRotation_ = viewRotation;
          return this.execute_(context, transform, this.hitDetectionInstructions, true, opt_featureCallback, opt_hitExtent);
      };
      return Executor;
  }());

  /**
   * @module ol/render/canvas/ExecutorGroup
   */
  /**
   * @const
   * @type {Array<BuilderType>}
   */
  var ORDER = [
      ReplayType.POLYGON,
      ReplayType.CIRCLE,
      ReplayType.LINE_STRING,
      ReplayType.IMAGE,
      ReplayType.TEXT,
      ReplayType.DEFAULT
  ];
  var ExecutorGroup = /** @class */ (function () {
      /**
       * @param {import("../../extent.js").Extent} maxExtent Max extent for clipping. When a
       * `maxExtent` was set on the Buillder for this executor group, the same `maxExtent`
       * should be set here, unless the target context does not exceet that extent (which
       * can be the case when rendering to tiles).
       * @param {number} resolution Resolution.
       * @param {number} pixelRatio Pixel ratio.
       * @param {boolean} overlaps The executor group can have overlapping geometries.
       * @param {!Object<string, !Object<BuilderType, import("./Builder.js").SerializableInstructions>>} allInstructions
       * The serializable instructions.
       * @param {number=} opt_renderBuffer Optional rendering buffer.
       */
      function ExecutorGroup(maxExtent, resolution, pixelRatio, overlaps, allInstructions, opt_renderBuffer) {
          /**
           * @private
           * @type {import("../../extent.js").Extent}
           */
          this.maxExtent_ = maxExtent;
          /**
           * @private
           * @type {boolean}
           */
          this.overlaps_ = overlaps;
          /**
           * @private
           * @type {number}
           */
          this.pixelRatio_ = pixelRatio;
          /**
           * @private
           * @type {number}
           */
          this.resolution_ = resolution;
          /**
           * @private
           * @type {number|undefined}
           */
          this.renderBuffer_ = opt_renderBuffer;
          /**
           * @private
           * @type {!Object<string, !Object<BuilderType, import("./Executor").default>>}
           */
          this.executorsByZIndex_ = {};
          /**
           * @private
           * @type {CanvasRenderingContext2D}
           */
          this.hitDetectionContext_ = null;
          /**
           * @private
           * @type {import("../../transform.js").Transform}
           */
          this.hitDetectionTransform_ = create();
          this.createExecutors_(allInstructions);
      }
      /**
       * @param {CanvasRenderingContext2D} context Context.
       * @param {import("../../transform.js").Transform} transform Transform.
       */
      ExecutorGroup.prototype.clip = function (context, transform) {
          var flatClipCoords = this.getClipCoords(transform);
          context.beginPath();
          context.moveTo(flatClipCoords[0], flatClipCoords[1]);
          context.lineTo(flatClipCoords[2], flatClipCoords[3]);
          context.lineTo(flatClipCoords[4], flatClipCoords[5]);
          context.lineTo(flatClipCoords[6], flatClipCoords[7]);
          context.clip();
      };
      /**
       * Create executors and populate them using the provided instructions.
       * @private
       * @param {!Object<string, !Object<BuilderType, import("./Builder.js").SerializableInstructions>>} allInstructions The serializable instructions
       */
      ExecutorGroup.prototype.createExecutors_ = function (allInstructions) {
          for (var zIndex in allInstructions) {
              var executors = this.executorsByZIndex_[zIndex];
              if (executors === undefined) {
                  executors = {};
                  this.executorsByZIndex_[zIndex] = executors;
              }
              var instructionByZindex = allInstructions[zIndex];
              for (var builderType in instructionByZindex) {
                  var instructions = instructionByZindex[builderType];
                  executors[builderType] = new Executor(this.resolution_, this.pixelRatio_, this.overlaps_, instructions);
              }
          }
      };
      /**
       * @param {Array<BuilderType>} executors Executors.
       * @return {boolean} Has executors of the provided types.
       */
      ExecutorGroup.prototype.hasExecutors = function (executors) {
          for (var zIndex in this.executorsByZIndex_) {
              var candidates = this.executorsByZIndex_[zIndex];
              for (var i = 0, ii = executors.length; i < ii; ++i) {
                  if (executors[i] in candidates) {
                      return true;
                  }
              }
          }
          return false;
      };
      /**
       * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
       * @param {number} resolution Resolution.
       * @param {number} rotation Rotation.
       * @param {number} hitTolerance Hit tolerance in pixels.
       * @param {function(import("../../Feature.js").FeatureLike): T} callback Feature callback.
       * @param {Array<import("../../Feature.js").FeatureLike>} declutteredFeatures Decluttered features.
       * @return {T|undefined} Callback result.
       * @template T
       */
      ExecutorGroup.prototype.forEachFeatureAtCoordinate = function (coordinate, resolution, rotation, hitTolerance, callback, declutteredFeatures) {
          hitTolerance = Math.round(hitTolerance);
          var contextSize = hitTolerance * 2 + 1;
          var transform = compose(this.hitDetectionTransform_, hitTolerance + 0.5, hitTolerance + 0.5, 1 / resolution, -1 / resolution, -rotation, -coordinate[0], -coordinate[1]);
          if (!this.hitDetectionContext_) {
              this.hitDetectionContext_ = createCanvasContext2D(contextSize, contextSize);
          }
          var context = this.hitDetectionContext_;
          if (context.canvas.width !== contextSize || context.canvas.height !== contextSize) {
              context.canvas.width = contextSize;
              context.canvas.height = contextSize;
          }
          else {
              context.clearRect(0, 0, contextSize, contextSize);
          }
          /**
           * @type {import("../../extent.js").Extent}
           */
          var hitExtent;
          if (this.renderBuffer_ !== undefined) {
              hitExtent = createEmpty();
              extendCoordinate(hitExtent, coordinate);
              buffer(hitExtent, resolution * (this.renderBuffer_ + hitTolerance), hitExtent);
          }
          var mask = getCircleArray(hitTolerance);
          var builderType;
          /**
           * @param {import("../../Feature.js").FeatureLike} feature Feature.
           * @return {?} Callback result.
           */
          function featureCallback(feature) {
              var imageData = context.getImageData(0, 0, contextSize, contextSize).data;
              for (var i_1 = 0; i_1 < contextSize; i_1++) {
                  for (var j_1 = 0; j_1 < contextSize; j_1++) {
                      if (mask[i_1][j_1]) {
                          if (imageData[(j_1 * contextSize + i_1) * 4 + 3] > 0) {
                              var result_1 = void 0;
                              if (!(declutteredFeatures && (builderType == ReplayType.IMAGE || builderType == ReplayType.TEXT)) ||
                                  declutteredFeatures.indexOf(feature) !== -1) {
                                  result_1 = callback(feature);
                              }
                              if (result_1) {
                                  return result_1;
                              }
                              else {
                                  context.clearRect(0, 0, contextSize, contextSize);
                                  return undefined;
                              }
                          }
                      }
                  }
              }
          }
          /** @type {Array<number>} */
          var zs = Object.keys(this.executorsByZIndex_).map(Number);
          zs.sort(numberSafeCompareFunction);
          var i, j, executors, executor, result;
          for (i = zs.length - 1; i >= 0; --i) {
              var zIndexKey = zs[i].toString();
              executors = this.executorsByZIndex_[zIndexKey];
              for (j = ORDER.length - 1; j >= 0; --j) {
                  builderType = ORDER[j];
                  executor = executors[builderType];
                  if (executor !== undefined) {
                      result = executor.executeHitDetection(context, transform, rotation, featureCallback, hitExtent);
                      if (result) {
                          return result;
                      }
                  }
              }
          }
          return undefined;
      };
      /**
       * @param {import("../../transform.js").Transform} transform Transform.
       * @return {Array<number>} Clip coordinates.
       */
      ExecutorGroup.prototype.getClipCoords = function (transform) {
          var maxExtent = this.maxExtent_;
          if (!maxExtent) {
              return null;
          }
          var minX = maxExtent[0];
          var minY = maxExtent[1];
          var maxX = maxExtent[2];
          var maxY = maxExtent[3];
          var flatClipCoords = [minX, minY, minX, maxY, maxX, maxY, maxX, minY];
          transform2D(flatClipCoords, 0, 8, 2, transform, flatClipCoords);
          return flatClipCoords;
      };
      /**
       * @return {boolean} Is empty.
       */
      ExecutorGroup.prototype.isEmpty = function () {
          return isEmpty(this.executorsByZIndex_);
      };
      /**
       * @param {CanvasRenderingContext2D} context Context.
       * @param {import("../../transform.js").Transform} transform Transform.
       * @param {number} viewRotation View rotation.
       * @param {boolean} snapToPixel Snap point symbols and test to integer pixel.
       * @param {Array<BuilderType>=} opt_builderTypes Ordered replay types to replay.
       *     Default is {@link module:ol/render/replay~ORDER}
       * @param {Object<string, import("../canvas.js").DeclutterGroup>=} opt_declutterReplays Declutter replays.
       */
      ExecutorGroup.prototype.execute = function (context, transform, viewRotation, snapToPixel, opt_builderTypes, opt_declutterReplays) {
          /** @type {Array<number>} */
          var zs = Object.keys(this.executorsByZIndex_).map(Number);
          zs.sort(numberSafeCompareFunction);
          // setup clipping so that the parts of over-simplified geometries are not
          // visible outside the current extent when panning
          if (this.maxExtent_) {
              context.save();
              this.clip(context, transform);
          }
          var builderTypes = opt_builderTypes ? opt_builderTypes : ORDER;
          var i, ii, j, jj, replays, replay;
          for (i = 0, ii = zs.length; i < ii; ++i) {
              var zIndexKey = zs[i].toString();
              replays = this.executorsByZIndex_[zIndexKey];
              for (j = 0, jj = builderTypes.length; j < jj; ++j) {
                  var builderType = builderTypes[j];
                  replay = replays[builderType];
                  if (replay !== undefined) {
                      if (opt_declutterReplays &&
                          (builderType == ReplayType.IMAGE || builderType == ReplayType.TEXT)) {
                          var declutter = opt_declutterReplays[zIndexKey];
                          if (!declutter) {
                              opt_declutterReplays[zIndexKey] = [replay, transform.slice(0)];
                          }
                          else {
                              declutter.push(replay, transform.slice(0));
                          }
                      }
                      else {
                          replay.execute(context, transform, viewRotation, snapToPixel);
                      }
                  }
              }
          }
          if (this.maxExtent_) {
              context.restore();
          }
      };
      return ExecutorGroup;
  }());
  /**
   * This cache is used for storing calculated pixel circles for increasing performance.
   * It is a static property to allow each Replaygroup to access it.
   * @type {Object<number, Array<Array<(boolean|undefined)>>>}
   */
  var circleArrayCache = {
      0: [[true]]
  };
  /**
   * This method fills a row in the array from the given coordinate to the
   * middle with `true`.
   * @param {Array<Array<(boolean|undefined)>>} array The array that will be altered.
   * @param {number} x X coordinate.
   * @param {number} y Y coordinate.
   */
  function fillCircleArrayRowToMiddle(array, x, y) {
      var i;
      var radius = Math.floor(array.length / 2);
      if (x >= radius) {
          for (i = radius; i < x; i++) {
              array[i][y] = true;
          }
      }
      else if (x < radius) {
          for (i = x + 1; i < radius; i++) {
              array[i][y] = true;
          }
      }
  }
  /**
   * This methods creates a circle inside a fitting array. Points inside the
   * circle are marked by true, points on the outside are undefined.
   * It uses the midpoint circle algorithm.
   * A cache is used to increase performance.
   * @param {number} radius Radius.
   * @returns {Array<Array<(boolean|undefined)>>} An array with marked circle points.
   */
  function getCircleArray(radius) {
      if (circleArrayCache[radius] !== undefined) {
          return circleArrayCache[radius];
      }
      var arraySize = radius * 2 + 1;
      var arr = new Array(arraySize);
      for (var i = 0; i < arraySize; i++) {
          arr[i] = new Array(arraySize);
      }
      var x = radius;
      var y = 0;
      var error = 0;
      while (x >= y) {
          fillCircleArrayRowToMiddle(arr, radius + x, radius + y);
          fillCircleArrayRowToMiddle(arr, radius + y, radius + x);
          fillCircleArrayRowToMiddle(arr, radius - y, radius + x);
          fillCircleArrayRowToMiddle(arr, radius - x, radius + y);
          fillCircleArrayRowToMiddle(arr, radius - x, radius - y);
          fillCircleArrayRowToMiddle(arr, radius - y, radius - x);
          fillCircleArrayRowToMiddle(arr, radius + y, radius - x);
          fillCircleArrayRowToMiddle(arr, radius + x, radius - y);
          y++;
          error += 1 + 2 * y;
          if (2 * (error - x) + 1 > 0) {
              x -= 1;
              error += 1 - 2 * x;
          }
      }
      circleArrayCache[radius] = arr;
      return arr;
  }
  /**
   * @param {!Object<string, Array<*>>} declutterReplays Declutter replays.
   * @param {CanvasRenderingContext2D} context Context.
   * @param {number} rotation Rotation.
   * @param {number} opacity Opacity.
   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.
   * @param {Array<import("../../PluggableMap.js").DeclutterItems>} declutterItems Declutter items.
   */
  function replayDeclutter(declutterReplays, context, rotation, opacity, snapToPixel, declutterItems) {
      var zs = Object.keys(declutterReplays).map(Number).sort(numberSafeCompareFunction);
      for (var z = 0, zz = zs.length; z < zz; ++z) {
          var executorData = declutterReplays[zs[z].toString()];
          var currentExecutor = void 0;
          for (var i = 0, ii = executorData.length; i < ii;) {
              var executor = executorData[i++];
              if (executor !== currentExecutor) {
                  currentExecutor = executor;
                  declutterItems.push({
                      items: executor.declutterItems,
                      opacity: opacity
                  });
              }
              var transform = executorData[i++];
              executor.execute(context, transform, rotation, snapToPixel);
          }
      }
  }

  var __extends$Z =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @template {import("../layer/Layer.js").default} LayerType
   */
  var LayerRenderer = /** @class */ (function (_super) {
      __extends$Z(LayerRenderer, _super);
      /**
       * @param {LayerType} layer Layer.
       */
      function LayerRenderer(layer) {
          var _this = _super.call(this) || this;
          /** @private */
          _this.boundHandleImageChange_ = _this.handleImageChange_.bind(_this);
          /**
           * @private
           * @type {LayerType}
           */
          _this.layer_ = layer;
          return _this;
      }
      /**
       * Asynchronous layer level hit detection.
       * @param {import("../pixel.js").Pixel} pixel Pixel.
       * @return {Promise<Array<import("../Feature").default>>} Promise that resolves with
       * an array of features.
       */
      LayerRenderer.prototype.getFeatures = function (pixel) {
          return abstract();
      };
      /**
       * Determine whether render should be called.
       * @abstract
       * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
       * @return {boolean} Layer is ready to be rendered.
       */
      LayerRenderer.prototype.prepareFrame = function (frameState) {
          return abstract();
      };
      /**
       * Render the layer.
       * @abstract
       * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
       * @param {HTMLElement} target Target that may be used to render content to.
       * @return {HTMLElement} The rendered element.
       */
      LayerRenderer.prototype.renderFrame = function (frameState, target) {
          return abstract();
      };
      /**
       * @param {Object<number, Object<string, import("../Tile.js").default>>} tiles Lookup of loaded tiles by zoom level.
       * @param {number} zoom Zoom level.
       * @param {import("../Tile.js").default} tile Tile.
       */
      LayerRenderer.prototype.loadedTileCallback = function (tiles, zoom, tile) {
          if (!tiles[zoom]) {
              tiles[zoom] = {};
          }
          tiles[zoom][tile.tileCoord.toString()] = tile;
      };
      /**
       * Create a function that adds loaded tiles to the tile lookup.
       * @param {import("../source/Tile.js").default} source Tile source.
       * @param {import("../proj/Projection.js").default} projection Projection of the tiles.
       * @param {Object<number, Object<string, import("../Tile.js").default>>} tiles Lookup of loaded tiles by zoom level.
       * @return {function(number, import("../TileRange.js").default):boolean} A function that can be
       *     called with a zoom level and a tile range to add loaded tiles to the lookup.
       * @protected
       */
      LayerRenderer.prototype.createLoadedTileFinder = function (source, projection, tiles) {
          return (
          /**
           * @param {number} zoom Zoom level.
           * @param {import("../TileRange.js").default} tileRange Tile range.
           * @return {boolean} The tile range is fully loaded.
           * @this {LayerRenderer}
           */
          function (zoom, tileRange) {
              var callback = this.loadedTileCallback.bind(this, tiles, zoom);
              return source.forEachLoadedTile(projection, zoom, tileRange, callback);
          }).bind(this);
      };
      /**
       * @abstract
       * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
       * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
       * @param {number} hitTolerance Hit tolerance in pixels.
       * @param {function(import("../Feature.js").FeatureLike, import("../layer/Layer.js").default): T} callback Feature callback.
       * @param {Array<import("../Feature.js").FeatureLike>} declutteredFeatures Decluttered features.
       * @return {T|void} Callback result.
       * @template T
       */
      LayerRenderer.prototype.forEachFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, callback, declutteredFeatures) { };
      /**
       * @abstract
       * @param {import("../pixel.js").Pixel} pixel Pixel.
       * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
       * @param {number} hitTolerance Hit tolerance in pixels.
       * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel
       *    location, null will be returned.  If there is data, but pixel values cannot be
       *    returned, and empty array will be returned.
       */
      LayerRenderer.prototype.getDataAtPixel = function (pixel, frameState, hitTolerance) {
          return abstract();
      };
      /**
       * @return {LayerType} Layer.
       */
      LayerRenderer.prototype.getLayer = function () {
          return this.layer_;
      };
      /**
       * Perform action necessary to get the layer rendered after new fonts have loaded
       * @abstract
       */
      LayerRenderer.prototype.handleFontsChanged = function () { };
      /**
       * Handle changes in image state.
       * @param {import("../events/Event.js").default} event Image change event.
       * @private
       */
      LayerRenderer.prototype.handleImageChange_ = function (event) {
          var image = /** @type {import("../Image.js").default} */ (event.target);
          if (image.getState() === ImageState.LOADED) {
              this.renderIfReadyAndVisible();
          }
      };
      /**
       * Load the image if not already loaded, and register the image change
       * listener if needed.
       * @param {import("../ImageBase.js").default} image Image.
       * @return {boolean} `true` if the image is already loaded, `false` otherwise.
       * @protected
       */
      LayerRenderer.prototype.loadImage = function (image) {
          var imageState = image.getState();
          if (imageState != ImageState.LOADED && imageState != ImageState.ERROR) {
              image.addEventListener(EventType.CHANGE, this.boundHandleImageChange_);
          }
          if (imageState == ImageState.IDLE) {
              image.load();
              imageState = image.getState();
          }
          return imageState == ImageState.LOADED;
      };
      /**
       * @protected
       */
      LayerRenderer.prototype.renderIfReadyAndVisible = function () {
          var layer = this.getLayer();
          if (layer.getVisible() && layer.getSourceState() == SourceState.READY) {
              layer.changed();
          }
      };
      return LayerRenderer;
  }(Observable));

  var __extends$_ =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @abstract
   * @template {import("../../layer/Layer.js").default} LayerType
   */
  var CanvasLayerRenderer = /** @class */ (function (_super) {
      __extends$_(CanvasLayerRenderer, _super);
      /**
       * @param {LayerType} layer Layer.
       */
      function CanvasLayerRenderer(layer) {
          var _this = _super.call(this, layer) || this;
          /**
           * @protected
           * @type {HTMLElement}
           */
          _this.container = null;
          /**
           * @protected
           * @type {number}
           */
          _this.renderedResolution;
          /**
           * A temporary transform.  The values in this transform should only be used in a
           * function that sets the values.
           * @private
           * @type {import("../../transform.js").Transform}
           */
          _this.tempTransform_ = create();
          /**
           * The transform for rendered pixels to viewport CSS pixels.  This transform must
           * be set when rendering a frame and may be used by other functions after rendering.
           * @protected
           * @type {import("../../transform.js").Transform}
           */
          _this.pixelTransform = create();
          /**
           * The transform for viewport CSS pixels to rendered pixels.  This transform must
           * be set when rendering a frame and may be used by other functions after rendering.
           * @protected
           * @type {import("../../transform.js").Transform}
           */
          _this.inversePixelTransform = create();
          /**
           * @protected
           * @type {CanvasRenderingContext2D}
           */
          _this.context = null;
          /**
           * @type {boolean}
           */
          _this.containerReused = false;
          return _this;
      }
      /**
       * Get a rendering container from an existing target, if compatible.
       * @param {HTMLElement} target Potential render target.
       * @param {string} transform CSS Transform.
       * @param {number} opacity Opacity.
       */
      CanvasLayerRenderer.prototype.useContainer = function (target, transform, opacity) {
          var layerClassName = this.getLayer().getClassName();
          var container, context;
          if (target && target.style.opacity === '' && target.className === layerClassName) {
              var canvas = target.firstElementChild;
              if (canvas instanceof HTMLCanvasElement) {
                  context = canvas.getContext('2d');
              }
          }
          if (context && context.canvas.style.transform === transform) {
              // Container of the previous layer renderer can be used.
              this.container = target;
              this.context = context;
              this.containerReused = true;
          }
          else if (this.containerReused) {
              // Previously reused container cannot be used any more.
              this.container = null;
              this.context = null;
              this.containerReused = false;
          }
          if (!this.container) {
              container = document.createElement('div');
              container.className = layerClassName;
              var style = container.style;
              style.position = 'absolute';
              style.width = '100%';
              style.height = '100%';
              context = createCanvasContext2D();
              var canvas = context.canvas;
              container.appendChild(canvas);
              style = canvas.style;
              style.position = 'absolute';
              style.left = '0';
              style.transformOrigin = 'top left';
              this.container = container;
              this.context = context;
          }
      };
      /**
       * @param {CanvasRenderingContext2D} context Context.
       * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
       * @param {import("../../extent.js").Extent} extent Clip extent.
       * @protected
       */
      CanvasLayerRenderer.prototype.clip = function (context, frameState, extent) {
          var pixelRatio = frameState.pixelRatio;
          var halfWidth = (frameState.size[0] * pixelRatio) / 2;
          var halfHeight = (frameState.size[1] * pixelRatio) / 2;
          var rotation = frameState.viewState.rotation;
          var topLeft = getTopLeft(extent);
          var topRight = getTopRight(extent);
          var bottomRight = getBottomRight(extent);
          var bottomLeft = getBottomLeft(extent);
          apply(frameState.coordinateToPixelTransform, topLeft);
          apply(frameState.coordinateToPixelTransform, topRight);
          apply(frameState.coordinateToPixelTransform, bottomRight);
          apply(frameState.coordinateToPixelTransform, bottomLeft);
          context.save();
          rotateAtOffset(context, -rotation, halfWidth, halfHeight);
          context.beginPath();
          context.moveTo(topLeft[0] * pixelRatio, topLeft[1] * pixelRatio);
          context.lineTo(topRight[0] * pixelRatio, topRight[1] * pixelRatio);
          context.lineTo(bottomRight[0] * pixelRatio, bottomRight[1] * pixelRatio);
          context.lineTo(bottomLeft[0] * pixelRatio, bottomLeft[1] * pixelRatio);
          context.clip();
          rotateAtOffset(context, rotation, halfWidth, halfHeight);
      };
      /**
       * @param {CanvasRenderingContext2D} context Context.
       * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
       * @param {import("../../extent.js").Extent} extent Clip extent.
       * @protected
       */
      CanvasLayerRenderer.prototype.clipUnrotated = function (context, frameState, extent) {
          var topLeft = getTopLeft(extent);
          var topRight = getTopRight(extent);
          var bottomRight = getBottomRight(extent);
          var bottomLeft = getBottomLeft(extent);
          apply(frameState.coordinateToPixelTransform, topLeft);
          apply(frameState.coordinateToPixelTransform, topRight);
          apply(frameState.coordinateToPixelTransform, bottomRight);
          apply(frameState.coordinateToPixelTransform, bottomLeft);
          var inverted = this.inversePixelTransform;
          apply(inverted, topLeft);
          apply(inverted, topRight);
          apply(inverted, bottomRight);
          apply(inverted, bottomLeft);
          context.save();
          context.beginPath();
          context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));
          context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));
          context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));
          context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));
          context.clip();
      };
      /**
       * @param {import("../../render/EventType.js").default} type Event type.
       * @param {CanvasRenderingContext2D} context Context.
       * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
       * @private
       */
      CanvasLayerRenderer.prototype.dispatchRenderEvent_ = function (type, context, frameState) {
          var layer = this.getLayer();
          if (layer.hasListener(type)) {
              var event_1 = new RenderEvent(type, this.inversePixelTransform, frameState, context);
              layer.dispatchEvent(event_1);
          }
      };
      /**
       * @param {CanvasRenderingContext2D} context Context.
       * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
       * @protected
       */
      CanvasLayerRenderer.prototype.preRender = function (context, frameState) {
          this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);
      };
      /**
       * @param {CanvasRenderingContext2D} context Context.
       * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
       * @protected
       */
      CanvasLayerRenderer.prototype.postRender = function (context, frameState) {
          this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);
      };
      /**
       * Creates a transform for rendering to an element that will be rotated after rendering.
       * @param {import("../../coordinate.js").Coordinate} center Center.
       * @param {number} resolution Resolution.
       * @param {number} rotation Rotation.
       * @param {number} pixelRatio Pixel ratio.
       * @param {number} width Width of the rendered element (in pixels).
       * @param {number} height Height of the rendered element (in pixels).
       * @param {number} offsetX Offset on the x-axis in view coordinates.
       * @protected
       * @return {!import("../../transform.js").Transform} Transform.
       */
      CanvasLayerRenderer.prototype.getRenderTransform = function (center, resolution, rotation, pixelRatio, width, height, offsetX) {
          var dx1 = width / 2;
          var dy1 = height / 2;
          var sx = pixelRatio / resolution;
          var sy = -sx;
          var dx2 = -center[0] + offsetX;
          var dy2 = -center[1];
          return compose(this.tempTransform_, dx1, dy1, sx, sy, -rotation, dx2, dy2);
      };
      /**
       * @param {import("../../pixel.js").Pixel} pixel Pixel.
       * @param {import("../../PluggableMap.js").FrameState} frameState FrameState.
       * @param {number} hitTolerance Hit tolerance in pixels.
       * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel
       *    location, null will be returned.  If there is data, but pixel values cannot be
       *    returned, and empty array will be returned.
       */
      CanvasLayerRenderer.prototype.getDataAtPixel = function (pixel, frameState, hitTolerance) {
          var renderPixel = apply(this.inversePixelTransform, pixel.slice());
          var context = this.context;
          var data;
          try {
              data = context.getImageData(Math.round(renderPixel[0]), Math.round(renderPixel[1]), 1, 1).data;
          }
          catch (err) {
              if (err.name === 'SecurityError') {
                  // tainted canvas, we assume there is data at the given pixel (although there might not be)
                  return new Uint8Array();
              }
              return data;
          }
          if (data[3] === 0) {
              return null;
          }
          return data;
      };
      return CanvasLayerRenderer;
  }(LayerRenderer));

  /**
   * @module ol/render/canvas/hitdetet
   */
  /**
   * @param {import("../../size.js").Size} size Canvas size in css pixels.
   * @param {Array<import("../../transform.js").Transform>} transforms Transforms
   * for rendering features to all worlds of the viewport, from coordinates to css
   * pixels.
   * @param {Array<import("../../Feature.js").FeatureLike>} features
   * Features to consider for hit detection.
   * @param {import("../../style/Style.js").StyleFunction|undefined} styleFunction
   * Layer style function.
   * @param {import("../../extent.js").Extent} extent Extent.
   * @param {number} resolution Resolution.
   * @param {number} rotation Rotation.
   * @return {ImageData} Hit detection image data.
   */
  function createHitDetectionImageData(size, transforms, features, styleFunction, extent, resolution, rotation) {
      var width = size[0] / 2;
      var height = size[1] / 2;
      var context = createCanvasContext2D(width, height);
      context.imageSmoothingEnabled = false;
      var canvas = context.canvas;
      var renderer = new CanvasImmediateRenderer(context, 0.5, extent, null, rotation);
      var featureCount = features.length;
      // Stretch hit detection index to use the whole available color range
      var indexFactor = Math.floor((256 * 256 * 256 - 1) / featureCount);
      var featuresByZIndex = {};
      for (var i = 1; i <= featureCount; ++i) {
          var feature = features[i - 1];
          var featureStyleFunction = feature.getStyleFunction() || styleFunction;
          if (!styleFunction) {
              continue;
          }
          var styles = featureStyleFunction(feature, resolution);
          if (!styles) {
              continue;
          }
          if (!Array.isArray(styles)) {
              styles = [styles];
          }
          var index = i * indexFactor;
          var color = '#' + ('000000' + index.toString(16)).slice(-6);
          for (var j = 0, jj = styles.length; j < jj; ++j) {
              var originalStyle = styles[j];
              var style = originalStyle.clone();
              var fill = style.getFill();
              if (fill) {
                  fill.setColor(color);
              }
              var stroke = style.getStroke();
              if (stroke) {
                  stroke.setColor(color);
              }
              style.setText(undefined);
              var image = originalStyle.getImage();
              if (image) {
                  var imgSize = image.getImageSize();
                  if (!imgSize) {
                      continue;
                  }
                  var canvas_1 = document.createElement('canvas');
                  canvas_1.width = imgSize[0];
                  canvas_1.height = imgSize[1];
                  var imgContext = canvas_1.getContext('2d', { alpha: false });
                  imgContext.fillStyle = color;
                  var img = imgContext.canvas;
                  imgContext.fillRect(0, 0, img.width, img.height);
                  var width_1 = imgSize ? imgSize[0] : img.width;
                  var height_1 = imgSize ? imgSize[1] : img.height;
                  var iconContext = createCanvasContext2D(width_1, height_1);
                  iconContext.drawImage(img, 0, 0);
                  style.setImage(new Icon({
                      img: img,
                      imgSize: imgSize,
                      anchor: image.getAnchor(),
                      anchorXUnits: IconAnchorUnits.PIXELS,
                      anchorYUnits: IconAnchorUnits.PIXELS,
                      offset: image.getOrigin(),
                      size: image.getSize(),
                      opacity: image.getOpacity(),
                      scale: image.getScale(),
                      rotation: image.getRotation(),
                      rotateWithView: image.getRotateWithView()
                  }));
              }
              var zIndex = Number(style.getZIndex());
              var byGeometryType = featuresByZIndex[zIndex];
              if (!byGeometryType) {
                  byGeometryType = {};
                  featuresByZIndex[zIndex] = byGeometryType;
                  byGeometryType[GeometryType.POLYGON] = [];
                  byGeometryType[GeometryType.CIRCLE] = [];
                  byGeometryType[GeometryType.LINE_STRING] = [];
                  byGeometryType[GeometryType.POINT] = [];
              }
              var geometry = style.getGeometryFunction()(feature);
              if (geometry && intersects(extent, geometry.getExtent())) {
                  byGeometryType[geometry.getType().replace('Multi', '')].push(geometry, style);
              }
          }
      }
      var zIndexKeys = Object.keys(featuresByZIndex).map(Number).sort(numberSafeCompareFunction);
      for (var i = 0, ii = zIndexKeys.length; i < ii; ++i) {
          var byGeometryType = featuresByZIndex[zIndexKeys[i]];
          for (var type in byGeometryType) {
              var geomAndStyle = byGeometryType[type];
              for (var j = 0, jj = geomAndStyle.length; j < jj; j += 2) {
                  renderer.setStyle(geomAndStyle[j + 1]);
                  for (var k = 0, kk = transforms.length; k < kk; ++k) {
                      renderer.setTransform(transforms[k]);
                      renderer.drawGeometry(geomAndStyle[j]);
                  }
              }
          }
      }
      document.body.appendChild(context.canvas);
      return context.getImageData(0, 0, canvas.width, canvas.height);
  }
  /**
   * @param {import("../../pixel").Pixel} pixel Pixel coordinate on the hit
   * detection canvas in css pixels.
   * @param {Array<import("../../Feature").FeatureLike>} features Features. Has to
   * match the `features` array that was passed to `createHitDetectionImageData()`.
   * @param {ImageData} imageData Hit detection image data generated by
   * `createHitDetectionImageData()`.
   * @return {Array<import("../../Feature").FeatureLike>} features Features.
   */
  function hitDetect(pixel, features, imageData) {
      var resultFeatures = [];
      if (imageData) {
          var index = (Math.round(pixel[0] / 2) + Math.round(pixel[1] / 2) * imageData.width) * 4;
          var r = imageData.data[index];
          var g = imageData.data[index + 1];
          var b = imageData.data[index + 2];
          var i = b + (256 * (g + (256 * r)));
          var indexFactor = Math.floor((256 * 256 * 256 - 1) / features.length);
          if (i && i % indexFactor === 0) {
              resultFeatures.push(features[i / indexFactor - 1]);
          }
      }
      return resultFeatures;
  }

  var __extends$$ =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @classdesc
   * Canvas renderer for vector layers.
   * @api
   */
  var CanvasVectorLayerRenderer = /** @class */ (function (_super) {
      __extends$$(CanvasVectorLayerRenderer, _super);
      /**
       * @param {import("../../layer/Vector.js").default} vectorLayer Vector layer.
       */
      function CanvasVectorLayerRenderer(vectorLayer) {
          var _this = _super.call(this, vectorLayer) || this;
          /** @private */
          _this.boundHandleStyleImageChange_ = _this.handleStyleImageChange_.bind(_this);
          /**
           * @type {boolean}
           */
          _this.animatingOrInteracting_;
          /**
           * @private
           * @type {boolean}
           */
          _this.dirty_ = false;
          /**
           * @type {ImageData}
           */
          _this.hitDetectionImageData_ = null;
          /**
           * @type {Array<import("../../Feature.js").default>}
           */
          _this.renderedFeatures_ = null;
          /**
           * @private
           * @type {number}
           */
          _this.renderedRevision_ = -1;
          /**
           * @private
           * @type {number}
           */
          _this.renderedResolution_ = NaN;
          /**
           * @private
           * @type {import("../../extent.js").Extent}
           */
          _this.renderedExtent_ = createEmpty();
          /**
           * @private
           * @type {number}
           */
          _this.renderedRotation_;
          /**
           * @private
           * @type {import("../../coordinate").Coordinate}
           */
          _this.renderedCenter_ = null;
          /**
           * @private
           * @type {import("../../proj/Projection").default}
           */
          _this.renderedProjection_ = null;
          /**
           * @private
           * @type {function(import("../../Feature.js").default, import("../../Feature.js").default): number|null}
           */
          _this.renderedRenderOrder_ = null;
          /**
           * @private
           * @type {import("../../render/canvas/ExecutorGroup").default}
           */
          _this.replayGroup_ = null;
          /**
           * A new replay group had to be created by `prepareFrame()`
           * @type {boolean}
           */
          _this.replayGroupChanged = true;
          return _this;
      }
      /**
       * @inheritDoc
       */
      CanvasVectorLayerRenderer.prototype.useContainer = function (target, transform, opacity) {
          if (opacity < 1) {
              target = null;
          }
          _super.prototype.useContainer.call(this, target, transform, opacity);
      };
      /**
       * @inheritDoc
       */
      CanvasVectorLayerRenderer.prototype.renderFrame = function (frameState, target) {
          var pixelRatio = frameState.pixelRatio;
          var layerState = frameState.layerStatesArray[frameState.layerIndex];
          // set forward and inverse pixel transforms
          makeScale(this.pixelTransform, 1 / pixelRatio, 1 / pixelRatio);
          makeInverse(this.inversePixelTransform, this.pixelTransform);
          var canvasTransform = toString$2(this.pixelTransform);
          this.useContainer(target, canvasTransform, layerState.opacity);
          var context = this.context;
          var canvas = context.canvas;
          var replayGroup = this.replayGroup_;
          if (!replayGroup || replayGroup.isEmpty()) {
              if (!this.containerReused && canvas.width > 0) {
                  canvas.width = 0;
              }
              return this.container;
          }
          // resize and clear
          var width = Math.round(frameState.size[0] * pixelRatio);
          var height = Math.round(frameState.size[1] * pixelRatio);
          if (canvas.width != width || canvas.height != height) {
              canvas.width = width;
              canvas.height = height;
              if (canvas.style.transform !== canvasTransform) {
                  canvas.style.transform = canvasTransform;
              }
          }
          else if (!this.containerReused) {
              context.clearRect(0, 0, width, height);
          }
          this.preRender(context, frameState);
          var extent = frameState.extent;
          var viewState = frameState.viewState;
          var center = viewState.center;
          var resolution = viewState.resolution;
          var projection = viewState.projection;
          var rotation = viewState.rotation;
          var projectionExtent = projection.getExtent();
          var vectorSource = this.getLayer().getSource();
          // clipped rendering if layer extent is set
          var clipped = false;
          if (layerState.extent) {
              var layerExtent = fromUserExtent(layerState.extent);
              clipped = !containsExtent(layerExtent, frameState.extent) && intersects(layerExtent, frameState.extent);
              if (clipped) {
                  this.clip(context, frameState, layerExtent);
              }
          }
          var viewHints = frameState.viewHints;
          var snapToPixel = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);
          var transform = this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, 0);
          var declutterReplays = this.getLayer().getDeclutter() ? {} : null;
          replayGroup.execute(context, transform, rotation, snapToPixel, undefined, declutterReplays);
          if (vectorSource.getWrapX() && projection.canWrapX() && !containsExtent(projectionExtent, extent)) {
              var startX = extent[0];
              var worldWidth = getWidth(projectionExtent);
              var world = 0;
              var offsetX = void 0;
              while (startX < projectionExtent[0]) {
                  --world;
                  offsetX = worldWidth * world;
                  var transform_1 = this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, offsetX);
                  replayGroup.execute(context, transform_1, rotation, snapToPixel, undefined, declutterReplays);
                  startX += worldWidth;
              }
              world = 0;
              startX = extent[2];
              while (startX > projectionExtent[2]) {
                  ++world;
                  offsetX = worldWidth * world;
                  var transform_2 = this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, offsetX);
                  replayGroup.execute(context, transform_2, rotation, snapToPixel, undefined, declutterReplays);
                  startX -= worldWidth;
              }
          }
          if (declutterReplays) {
              var viewHints_1 = frameState.viewHints;
              var hifi = !(viewHints_1[ViewHint.ANIMATING] || viewHints_1[ViewHint.INTERACTING]);
              replayDeclutter(declutterReplays, context, rotation, 1, hifi, frameState.declutterItems);
          }
          if (clipped) {
              context.restore();
          }
          this.postRender(context, frameState);
          var opacity = layerState.opacity;
          var container = this.container;
          if (opacity !== parseFloat(container.style.opacity)) {
              container.style.opacity = opacity === 1 ? '' : opacity;
          }
          return this.container;
      };
      /**
       * @inheritDoc
       */
      CanvasVectorLayerRenderer.prototype.getFeatures = function (pixel) {
          return new Promise(function (resolve, reject) {
              if (!this.hitDetectionImageData_ && !this.animatingOrInteracting_) {
                  var size = [this.context.canvas.width, this.context.canvas.height];
                  apply(this.pixelTransform, size);
                  var center = this.renderedCenter_;
                  var resolution = this.renderedResolution_;
                  var rotation = this.renderedRotation_;
                  var projection = this.renderedProjection_;
                  var extent = this.renderedExtent_;
                  var layer = this.getLayer();
                  var transforms = [];
                  var width = size[0] / 2;
                  var height = size[1] / 2;
                  transforms.push(this.getRenderTransform(center, resolution, rotation, 0.5, width, height, 0).slice());
                  var source = layer.getSource();
                  var projectionExtent = projection.getExtent();
                  if (source.getWrapX() && projection.canWrapX() && !containsExtent(projectionExtent, extent)) {
                      var startX = extent[0];
                      var worldWidth = getWidth(projectionExtent);
                      var world = 0;
                      var offsetX = void 0;
                      while (startX < projectionExtent[0]) {
                          --world;
                          offsetX = worldWidth * world;
                          transforms.push(this.getRenderTransform(center, resolution, rotation, 0.5, width, height, offsetX).slice());
                          startX += worldWidth;
                      }
                      world = 0;
                      startX = extent[2];
                      while (startX > projectionExtent[2]) {
                          ++world;
                          offsetX = worldWidth * world;
                          transforms.push(this.getRenderTransform(center, resolution, rotation, 0.5, width, height, offsetX).slice());
                          startX -= worldWidth;
                      }
                  }
                  this.hitDetectionImageData_ = createHitDetectionImageData(size, transforms, this.renderedFeatures_, layer.getStyleFunction(), extent, resolution, rotation);
              }
              resolve(hitDetect(pixel, this.renderedFeatures_, this.hitDetectionImageData_));
          }.bind(this));
      };
      /**
       * @inheritDoc
       */
      CanvasVectorLayerRenderer.prototype.forEachFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, callback, declutteredFeatures) {
          if (!this.replayGroup_) {
              return undefined;
          }
          else {
              var resolution = frameState.viewState.resolution;
              var rotation = frameState.viewState.rotation;
              var layer_1 = this.getLayer();
              /** @type {!Object<string, boolean>} */
              var features_1 = {};
              var result = this.replayGroup_.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, 
              /**
               * @param {import("../../Feature.js").FeatureLike} feature Feature.
               * @return {?} Callback result.
               */
              function (feature) {
                  var key = getUid(feature);
                  if (!(key in features_1)) {
                      features_1[key] = true;
                      return callback(feature, layer_1);
                  }
              }, layer_1.getDeclutter() ? declutteredFeatures : null);
              return result;
          }
      };
      /**
       * @inheritDoc
       */
      CanvasVectorLayerRenderer.prototype.handleFontsChanged = function () {
          var layer = this.getLayer();
          if (layer.getVisible() && this.replayGroup_) {
              layer.changed();
          }
      };
      /**
       * Handle changes in image style state.
       * @param {import("../../events/Event.js").default} event Image style change event.
       * @private
       */
      CanvasVectorLayerRenderer.prototype.handleStyleImageChange_ = function (event) {
          this.renderIfReadyAndVisible();
      };
      /**
       * @inheritDoc
       */
      CanvasVectorLayerRenderer.prototype.prepareFrame = function (frameState) {
          var vectorLayer = this.getLayer();
          var vectorSource = vectorLayer.getSource();
          if (!vectorSource) {
              return false;
          }
          var animating = frameState.viewHints[ViewHint.ANIMATING];
          var interacting = frameState.viewHints[ViewHint.INTERACTING];
          var updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();
          var updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();
          if (!this.dirty_ && (!updateWhileAnimating && animating) ||
              (!updateWhileInteracting && interacting)) {
              this.animatingOrInteracting_ = true;
              return true;
          }
          this.animatingOrInteracting_ = false;
          var frameStateExtent = frameState.extent;
          var viewState = frameState.viewState;
          var projection = viewState.projection;
          var resolution = viewState.resolution;
          var pixelRatio = frameState.pixelRatio;
          var vectorLayerRevision = vectorLayer.getRevision();
          var vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();
          var vectorLayerRenderOrder = vectorLayer.getRenderOrder();
          if (vectorLayerRenderOrder === undefined) {
              vectorLayerRenderOrder = defaultOrder;
          }
          var center = viewState.center.slice();
          var extent = buffer(frameStateExtent, vectorLayerRenderBuffer * resolution);
          var loadExtents = [extent.slice()];
          var projectionExtent = projection.getExtent();
          if (vectorSource.getWrapX() && projection.canWrapX() &&
              !containsExtent(projectionExtent, frameState.extent)) {
              // For the replay group, we need an extent that intersects the real world
              // (-180Â° to +180Â°). To support geometries in a coordinate range from -540Â°
              // to +540Â°, we add at least 1 world width on each side of the projection
              // extent. If the viewport is wider than the world, we need to add half of
              // the viewport width to make sure we cover the whole viewport.
              var worldWidth = getWidth(projectionExtent);
              var gutter = Math.max(getWidth(extent) / 2, worldWidth);
              extent[0] = projectionExtent[0] - gutter;
              extent[2] = projectionExtent[2] + gutter;
              wrapX$2(center, projection);
              var loadExtent = wrapX(loadExtents[0], projection);
              // If the extent crosses the date line, we load data for both edges of the worlds
              if (loadExtent[0] < projectionExtent[0] && loadExtent[2] < projectionExtent[2]) {
                  loadExtents.push([loadExtent[0] + worldWidth, loadExtent[1], loadExtent[2] + worldWidth, loadExtent[3]]);
              }
              else if (loadExtent[0] > projectionExtent[0] && loadExtent[2] > projectionExtent[2]) {
                  loadExtents.push([loadExtent[0] - worldWidth, loadExtent[1], loadExtent[2] - worldWidth, loadExtent[3]]);
              }
          }
          if (!this.dirty_ &&
              this.renderedResolution_ == resolution &&
              this.renderedRevision_ == vectorLayerRevision &&
              this.renderedRenderOrder_ == vectorLayerRenderOrder &&
              containsExtent(this.renderedExtent_, extent)) {
              this.replayGroupChanged = false;
              return true;
          }
          this.replayGroup_ = null;
          this.dirty_ = false;
          var replayGroup = new BuilderGroup(getTolerance(resolution, pixelRatio), extent, resolution, pixelRatio, vectorLayer.getDeclutter());
          var userTransform;
          if (false) {
              for (var i, ii; i < ii; ++i) {
              }
          }
          else {
              for (var i = 0, ii = loadExtents.length; i < ii; ++i) {
                  vectorSource.loadFeatures(loadExtents[i], resolution, projection);
              }
          }
          var squaredTolerance = getSquaredTolerance(resolution, pixelRatio);
          /**
           * @param {import("../../Feature.js").default} feature Feature.
           * @this {CanvasVectorLayerRenderer}
           */
          var render = function (feature) {
              var styles;
              var styleFunction = feature.getStyleFunction() || vectorLayer.getStyleFunction();
              if (styleFunction) {
                  styles = styleFunction(feature, resolution);
              }
              if (styles) {
                  var dirty = this.renderFeature(feature, squaredTolerance, styles, replayGroup, userTransform);
                  this.dirty_ = this.dirty_ || dirty;
              }
          }.bind(this);
          var userExtent = toUserExtent(extent);
          /** @type {Array<import("../../Feature.js").default>} */
          var features = vectorSource.getFeaturesInExtent(userExtent);
          if (vectorLayerRenderOrder) {
              features.sort(vectorLayerRenderOrder);
          }
          for (var i = 0, ii = features.length; i < ii; ++i) {
              render(features[i]);
          }
          this.renderedFeatures_ = features;
          var replayGroupInstructions = replayGroup.finish();
          var executorGroup = new ExecutorGroup(extent, resolution, pixelRatio, vectorSource.getOverlaps(), replayGroupInstructions, vectorLayer.getRenderBuffer());
          this.renderedResolution_ = resolution;
          this.renderedRevision_ = vectorLayerRevision;
          this.renderedRenderOrder_ = vectorLayerRenderOrder;
          this.renderedExtent_ = extent;
          this.renderedRotation_ = viewState.rotation;
          this.renderedCenter_ = center;
          this.renderedProjection_ = projection;
          this.replayGroup_ = executorGroup;
          this.hitDetectionImageData_ = null;
          this.replayGroupChanged = true;
          return true;
      };
      /**
       * @param {import("../../Feature.js").default} feature Feature.
       * @param {number} squaredTolerance Squared render tolerance.
       * @param {import("../../style/Style.js").default|Array<import("../../style/Style.js").default>} styles The style or array of styles.
       * @param {import("../../render/canvas/BuilderGroup.js").default} builderGroup Builder group.
       * @param {import("../../proj.js").TransformFunction=} opt_transform Transform from user to view projection.
       * @return {boolean} `true` if an image is loading.
       */
      CanvasVectorLayerRenderer.prototype.renderFeature = function (feature, squaredTolerance, styles, builderGroup, opt_transform) {
          if (!styles) {
              return false;
          }
          var loading = false;
          if (Array.isArray(styles)) {
              for (var i = 0, ii = styles.length; i < ii; ++i) {
                  loading = renderFeature$1(builderGroup, feature, styles[i], squaredTolerance, this.boundHandleStyleImageChange_, opt_transform) || loading;
              }
          }
          else {
              loading = renderFeature$1(builderGroup, feature, styles, squaredTolerance, this.boundHandleStyleImageChange_, opt_transform);
          }
          return loading;
      };
      return CanvasVectorLayerRenderer;
  }(CanvasLayerRenderer));

  var __extends$10 =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @classdesc
   * Vector data that is rendered client-side.
   * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
   * property on the layer object; for example, setting `title: 'My Title'` in the
   * options means that `title` is observable, and has get/set accessors.
   *
   * @extends {BaseVectorLayer<import("../source/Vector.js").default>}
   * @api
   */
  var VectorLayer = /** @class */ (function (_super) {
      __extends$10(VectorLayer, _super);
      /**
       * @param {import("./BaseVector.js").Options=} opt_options Options.
       */
      function VectorLayer(opt_options) {
          return _super.call(this, opt_options) || this;
      }
      /**
       * Create a renderer for this layer.
       * @return {import("../renderer/Layer.js").default} A layer renderer.
       * @protected
       */
      VectorLayer.prototype.createRenderer = function () {
          return new CanvasVectorLayerRenderer(this);
      };
      return VectorLayer;
  }(BaseVectorLayer));

  /**
   * @module ol/format/FormatType
   */
  /**
   * @enum {string}
   */
  var FormatType = {
      ARRAY_BUFFER: 'arraybuffer',
      JSON: 'json',
      TEXT: 'text',
      XML: 'xml'
  };

  /**
   * @module ol/featureloader
   */
  /**
   *
   * @type {boolean}
   * @private
   */
  var withCredentials = false;
  /**
   * {@link module:ol/source/Vector} sources use a function of this type to
   * load features.
   *
   * This function takes an {@link module:ol/extent~Extent} representing the area to be loaded,
   * a `{number}` representing the resolution (map units per pixel) and an
   * {@link module:ol/proj/Projection} for the projection  as
   * arguments. `this` within the function is bound to the
   * {@link module:ol/source/Vector} it's called from.
   *
   * The function is responsible for loading the features and adding them to the
   * source.
   * @typedef {function(this:(import("./source/Vector").default|import("./VectorTile.js").default), import("./extent.js").Extent, number,
   *                    import("./proj/Projection.js").default): void} FeatureLoader
   * @api
   */
  /**
   * {@link module:ol/source/Vector} sources use a function of this type to
   * get the url to load features from.
   *
   * This function takes an {@link module:ol/extent~Extent} representing the area
   * to be loaded, a `{number}` representing the resolution (map units per pixel)
   * and an {@link module:ol/proj/Projection} for the projection  as
   * arguments and returns a `{string}` representing the URL.
   * @typedef {function(import("./extent.js").Extent, number, import("./proj/Projection.js").default): string} FeatureUrlFunction
   * @api
   */
  /**
   * @param {string|FeatureUrlFunction} url Feature URL service.
   * @param {import("./format/Feature.js").default} format Feature format.
   * @param {function(this:import("./VectorTile.js").default, Array<import("./Feature.js").default>, import("./proj/Projection.js").default, import("./extent.js").Extent): void|function(this:import("./source/Vector").default, Array<import("./Feature.js").default>): void} success
   *     Function called with the loaded features and optionally with the data
   *     projection. Called with the vector tile or source as `this`.
   * @param {function(this:import("./VectorTile.js").default): void|function(this:import("./source/Vector").default): void} failure
   *     Function called when loading failed. Called with the vector tile or
   *     source as `this`.
   * @return {FeatureLoader} The feature loader.
   */
  function loadFeaturesXhr(url, format, success, failure) {
      return (
      /**
       * @param {import("./extent.js").Extent} extent Extent.
       * @param {number} resolution Resolution.
       * @param {import("./proj/Projection.js").default} projection Projection.
       * @this {import("./source/Vector").default|import("./VectorTile.js").default}
       */
      function (extent, resolution, projection) {
          var xhr = new XMLHttpRequest();
          xhr.open('GET', typeof url === 'function' ? url(extent, resolution, projection) : url, true);
          if (format.getType() == FormatType.ARRAY_BUFFER) {
              xhr.responseType = 'arraybuffer';
          }
          xhr.withCredentials = withCredentials;
          /**
           * @param {Event} event Event.
           * @private
           */
          xhr.onload = function (event) {
              // status will be 0 for file:// urls
              if (!xhr.status || xhr.status >= 200 && xhr.status < 300) {
                  var type = format.getType();
                  /** @type {Document|Node|Object|string|undefined} */
                  var source = void 0;
                  if (type == FormatType.JSON || type == FormatType.TEXT) {
                      source = xhr.responseText;
                  }
                  else if (type == FormatType.XML) {
                      source = xhr.responseXML;
                      if (!source) {
                          source = new DOMParser().parseFromString(xhr.responseText, 'application/xml');
                      }
                  }
                  else if (type == FormatType.ARRAY_BUFFER) {
                      source = /** @type {ArrayBuffer} */ (xhr.response);
                  }
                  if (source) {
                      success.call(this, format.readFeatures(source, {
                          extent: extent,
                          featureProjection: projection
                      }), format.readProjection(source));
                  }
                  else {
                      failure.call(this);
                  }
              }
              else {
                  failure.call(this);
              }
          }.bind(this);
          /**
           * @private
           */
          xhr.onerror = function () {
              failure.call(this);
          }.bind(this);
          xhr.send();
      });
  }
  /**
   * Create an XHR feature loader for a `url` and `format`. The feature loader
   * loads features (with XHR), parses the features, and adds them to the
   * vector source.
   * @param {string|FeatureUrlFunction} url Feature URL service.
   * @param {import("./format/Feature.js").default} format Feature format.
   * @return {FeatureLoader} The feature loader.
   * @api
   */
  function xhr(url, format) {
      return loadFeaturesXhr(url, format, 
      /**
       * @param {Array<import("./Feature.js").default>} features The loaded features.
       * @param {import("./proj/Projection.js").default} dataProjection Data
       * projection.
       * @this {import("./source/Vector").default|import("./VectorTile.js").default}
       */
      function (features, dataProjection) {
          var sourceOrTile = /** @type {?} */ (this);
          if (typeof sourceOrTile.addFeatures === 'function') {
              /** @type {import("./source/Vector").default} */ (sourceOrTile).addFeatures(features);
          }
      }, /* FIXME handle error */ VOID);
  }

  /**
   * @module ol/loadingstrategy
   */
  /**
   * Strategy function for loading all features with a single request.
   * @param {import("./extent.js").Extent} extent Extent.
   * @param {number} resolution Resolution.
   * @return {Array<import("./extent.js").Extent>} Extents.
   * @api
   */
  function all(extent, resolution) {
      return [[-Infinity, -Infinity, Infinity, Infinity]];
  }

  var __extends$11 =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * A function that returns a string or an array of strings representing source
   * attributions.
   *
   * @typedef {function(import("../PluggableMap.js").FrameState): (string|Array<string>)} Attribution
   */
  /**
   * A type that can be used to provide attribution information for data sources.
   *
   * It represents either
   * * a simple string (e.g. `'Â© Acme Inc.'`)
   * * an array of simple strings (e.g. `['Â© Acme Inc.', 'Â© Bacme Inc.']`)
   * * a function that returns a string or array of strings ({@link module:ol/source/Source~Attribution})
   *
   * @typedef {string|Array<string>|Attribution} AttributionLike
   */
  /**
   * @typedef {Object} Options
   * @property {AttributionLike} [attributions]
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
   * @property {SourceState} [state='ready']
   * @property {boolean} [wrapX=false]
   */
  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Base class for {@link module:ol/layer/Layer~Layer} sources.
   *
   * A generic `change` event is triggered when the state of the source changes.
   * @abstract
   * @api
   */
  var Source = /** @class */ (function (_super) {
      __extends$11(Source, _super);
      /**
       * @param {Options} options Source options.
       */
      function Source(options) {
          var _this = _super.call(this) || this;
          /**
           * @private
           * @type {import("../proj/Projection.js").default}
           */
          _this.projection_ = get$4(options.projection);
          /**
           * @private
           * @type {?Attribution}
           */
          _this.attributions_ = adaptAttributions(options.attributions);
          /**
           * @private
           * @type {boolean}
           */
          _this.attributionsCollapsible_ = options.attributionsCollapsible !== undefined ?
              options.attributionsCollapsible : true;
          /**
           * This source is currently loading data. Sources that defer loading to the
           * map's tile queue never set this to `true`.
           * @type {boolean}
           */
          _this.loading = false;
          /**
           * @private
           * @type {SourceState}
           */
          _this.state_ = options.state !== undefined ?
              options.state : SourceState.READY;
          /**
           * @private
           * @type {boolean}
           */
          _this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;
          return _this;
      }
      /**
       * Get the attribution function for the source.
       * @return {?Attribution} Attribution function.
       */
      Source.prototype.getAttributions = function () {
          return this.attributions_;
      };
      /**
       * @return {boolean} Attributions are collapsible.
       */
      Source.prototype.getAttributionsCollapsible = function () {
          return this.attributionsCollapsible_;
      };
      /**
       * Get the projection of the source.
       * @return {import("../proj/Projection.js").default} Projection.
       * @api
       */
      Source.prototype.getProjection = function () {
          return this.projection_;
      };
      /**
       * @abstract
       * @return {Array<number>|undefined} Resolutions.
       */
      Source.prototype.getResolutions = function () {
          return abstract();
      };
      /**
       * Get the state of the source, see {@link module:ol/source/State~State} for possible states.
       * @return {SourceState} State.
       * @api
       */
      Source.prototype.getState = function () {
          return this.state_;
      };
      /**
       * @return {boolean|undefined} Wrap X.
       */
      Source.prototype.getWrapX = function () {
          return this.wrapX_;
      };
      /**
       * Refreshes the source. The source will be cleared, and data from the server will be reloaded.
       * @api
       */
      Source.prototype.refresh = function () {
          this.changed();
      };
      /**
       * Set the attributions of the source.
       * @param {AttributionLike|undefined} attributions Attributions.
       *     Can be passed as `string`, `Array<string>`, {@link module:ol/source/Source~Attribution},
       *     or `undefined`.
       * @api
       */
      Source.prototype.setAttributions = function (attributions) {
          this.attributions_ = adaptAttributions(attributions);
          this.changed();
      };
      /**
       * Set the state of the source.
       * @param {SourceState} state State.
       * @protected
       */
      Source.prototype.setState = function (state) {
          this.state_ = state;
          this.changed();
      };
      return Source;
  }(BaseObject));
  /**
   * Turns the attributions option into an attributions function.
   * @param {AttributionLike|undefined} attributionLike The attribution option.
   * @return {?Attribution} An attribution function (or null).
   */
  function adaptAttributions(attributionLike) {
      if (!attributionLike) {
          return null;
      }
      if (Array.isArray(attributionLike)) {
          return function (frameState) {
              return attributionLike;
          };
      }
      if (typeof attributionLike === 'function') {
          return attributionLike;
      }
      return function (frameState) {
          return [attributionLike];
      };
  }

  /**
   * @module ol/source/VectorEventType
   */
  /**
   * @enum {string}
   */
  var VectorEventType = {
      /**
       * Triggered when a feature is added to the source.
       * @event module:ol/source/Vector.VectorSourceEvent#addfeature
       * @api
       */
      ADDFEATURE: 'addfeature',
      /**
       * Triggered when a feature is updated.
       * @event module:ol/source/Vector.VectorSourceEvent#changefeature
       * @api
       */
      CHANGEFEATURE: 'changefeature',
      /**
       * Triggered when the clear method is called on the source.
       * @event module:ol/source/Vector.VectorSourceEvent#clear
       * @api
       */
      CLEAR: 'clear',
      /**
       * Triggered when a feature is removed from the source.
       * See {@link module:ol/source/Vector#clear source.clear()} for exceptions.
       * @event module:ol/source/Vector.VectorSourceEvent#removefeature
       * @api
       */
      REMOVEFEATURE: 'removefeature'
  };

  /**
   * @module ol/structs/RBush
   */
  /**
   * @typedef {Object} Entry
   * @property {number} minX
   * @property {number} minY
   * @property {number} maxX
   * @property {number} maxY
   * @property {Object} [value]
   */
  /**
   * @classdesc
   * Wrapper around the RBush by Vladimir Agafonkin.
   * See https://github.com/mourner/rbush.
   *
   * @template T
   */
  var RBush = /** @class */ (function () {
      /**
       * @param {number=} opt_maxEntries Max entries.
       */
      function RBush(opt_maxEntries) {
          /**
           * @private
           */
          this.rbush_ = new rbush(opt_maxEntries);
          /**
           * A mapping between the objects added to this rbush wrapper
           * and the objects that are actually added to the internal rbush.
           * @private
           * @type {Object<string, Entry>}
           */
          this.items_ = {};
      }
      /**
       * Insert a value into the RBush.
       * @param {import("../extent.js").Extent} extent Extent.
       * @param {T} value Value.
       */
      RBush.prototype.insert = function (extent, value) {
          /** @type {Entry} */
          var item = {
              minX: extent[0],
              minY: extent[1],
              maxX: extent[2],
              maxY: extent[3],
              value: value
          };
          this.rbush_.insert(item);
          this.items_[getUid(value)] = item;
      };
      /**
       * Bulk-insert values into the RBush.
       * @param {Array<import("../extent.js").Extent>} extents Extents.
       * @param {Array<T>} values Values.
       */
      RBush.prototype.load = function (extents, values) {
          var items = new Array(values.length);
          for (var i = 0, l = values.length; i < l; i++) {
              var extent = extents[i];
              var value = values[i];
              /** @type {Entry} */
              var item = {
                  minX: extent[0],
                  minY: extent[1],
                  maxX: extent[2],
                  maxY: extent[3],
                  value: value
              };
              items[i] = item;
              this.items_[getUid(value)] = item;
          }
          this.rbush_.load(items);
      };
      /**
       * Remove a value from the RBush.
       * @param {T} value Value.
       * @return {boolean} Removed.
       */
      RBush.prototype.remove = function (value) {
          var uid = getUid(value);
          // get the object in which the value was wrapped when adding to the
          // internal rbush. then use that object to do the removal.
          var item = this.items_[uid];
          delete this.items_[uid];
          return this.rbush_.remove(item) !== null;
      };
      /**
       * Update the extent of a value in the RBush.
       * @param {import("../extent.js").Extent} extent Extent.
       * @param {T} value Value.
       */
      RBush.prototype.update = function (extent, value) {
          var item = this.items_[getUid(value)];
          var bbox = [item.minX, item.minY, item.maxX, item.maxY];
          if (!equals(bbox, extent)) {
              this.remove(value);
              this.insert(extent, value);
          }
      };
      /**
       * Return all values in the RBush.
       * @return {Array<T>} All.
       */
      RBush.prototype.getAll = function () {
          var items = this.rbush_.all();
          return items.map(function (item) {
              return item.value;
          });
      };
      /**
       * Return all values in the given extent.
       * @param {import("../extent.js").Extent} extent Extent.
       * @return {Array<T>} All in extent.
       */
      RBush.prototype.getInExtent = function (extent) {
          /** @type {Entry} */
          var bbox = {
              minX: extent[0],
              minY: extent[1],
              maxX: extent[2],
              maxY: extent[3]
          };
          var items = this.rbush_.search(bbox);
          return items.map(function (item) {
              return item.value;
          });
      };
      /**
       * Calls a callback function with each value in the tree.
       * If the callback returns a truthy value, this value is returned without
       * checking the rest of the tree.
       * @param {function(T): *} callback Callback.
       * @return {*} Callback return value.
       */
      RBush.prototype.forEach = function (callback) {
          return this.forEach_(this.getAll(), callback);
      };
      /**
       * Calls a callback function with each value in the provided extent.
       * @param {import("../extent.js").Extent} extent Extent.
       * @param {function(T): *} callback Callback.
       * @return {*} Callback return value.
       */
      RBush.prototype.forEachInExtent = function (extent, callback) {
          return this.forEach_(this.getInExtent(extent), callback);
      };
      /**
       * @param {Array<T>} values Values.
       * @param {function(T): *} callback Callback.
       * @private
       * @return {*} Callback return value.
       */
      RBush.prototype.forEach_ = function (values, callback) {
          var result;
          for (var i = 0, l = values.length; i < l; i++) {
              result = callback(values[i]);
              if (result) {
                  return result;
              }
          }
          return result;
      };
      /**
       * @return {boolean} Is empty.
       */
      RBush.prototype.isEmpty = function () {
          return isEmpty(this.items_);
      };
      /**
       * Remove all values from the RBush.
       */
      RBush.prototype.clear = function () {
          this.rbush_.clear();
          this.items_ = {};
      };
      /**
       * @param {import("../extent.js").Extent=} opt_extent Extent.
       * @return {import("../extent.js").Extent} Extent.
       */
      RBush.prototype.getExtent = function (opt_extent) {
          var data = this.rbush_.toJSON();
          return createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, opt_extent);
      };
      /**
       * @param {RBush} rbush R-Tree.
       */
      RBush.prototype.concat = function (rbush) {
          this.rbush_.load(rbush.rbush_.all());
          for (var i in rbush.items_) {
              this.items_[i] = rbush.items_[i];
          }
      };
      return RBush;
  }());

  /**
   * @module ol/source/Vector
   */
  var __extends$12 =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * A function that takes an {@link module:ol/extent~Extent} and a resolution as arguments, and
   * returns an array of {@link module:ol/extent~Extent} with the extents to load. Usually this
   * is one of the standard {@link module:ol/loadingstrategy} strategies.
   *
   * @typedef {function(import("../extent.js").Extent, number): Array<import("../extent.js").Extent>} LoadingStrategy
   * @api
   */
  /**
   * @classdesc
   * Events emitted by {@link module:ol/source/Vector} instances are instances of this
   * type.
   * @template {import("../geom/Geometry.js").default} Geometry
   */
  var VectorSourceEvent = /** @class */ (function (_super) {
      __extends$12(VectorSourceEvent, _super);
      /**
       * @param {string} type Type.
       * @param {import("../Feature.js").default<Geometry>=} opt_feature Feature.
       */
      function VectorSourceEvent(type, opt_feature) {
          var _this = _super.call(this, type) || this;
          /**
           * The feature being added or removed.
           * @type {import("../Feature.js").default<Geometry>|undefined}
           * @api
           */
          _this.feature = opt_feature;
          return _this;
      }
      return VectorSourceEvent;
  }(BaseEvent));
  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {Array<import("../Feature.js").default>|Collection<import("../Feature.js").default>} [features]
   * Features. If provided as {@link module:ol/Collection}, the features in the source
   * and the collection will stay in sync.
   * @property {import("../format/Feature.js").default} [format] The feature format used by the XHR
   * feature loader when `url` is set. Required if `url` is set, otherwise ignored.
   * @property {import("../featureloader.js").FeatureLoader} [loader]
   * The loader function used to load features, from a remote source for example.
   * If this is not set and `url` is set, the source will create and use an XHR
   * feature loader.
   *
   * Example:
   *
   * ```js
   * import {Vector} from 'ol/source';
   * import {GeoJSON} from 'ol/format';
   * import {bbox} from 'ol/loadingstrategy';
   *
   * var vectorSource = new Vector({
   *   format: new GeoJSON(),
   *   loader: function(extent, resolution, projection) {
   *      var proj = projection.getCode();
   *      var url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +
   *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +
   *          'outputFormat=application/json&srsname=' + proj + '&' +
   *          'bbox=' + extent.join(',') + ',' + proj;
   *      var xhr = new XMLHttpRequest();
   *      xhr.open('GET', url);
   *      var onError = function() {
   *        vectorSource.removeLoadedExtent(extent);
   *      }
   *      xhr.onerror = onError;
   *      xhr.onload = function() {
   *        if (xhr.status == 200) {
   *          vectorSource.addFeatures(
   *              vectorSource.getFormat().readFeatures(xhr.responseText));
   *        } else {
   *          onError();
   *        }
   *      }
   *      xhr.send();
   *    },
   *    strategy: bbox
   *  });
   * ```
   * @property {boolean} [overlaps=true] This source may have overlapping geometries.
   * Setting this to `false` (e.g. for sources with polygons that represent administrative
   * boundaries or TopoJSON sources) allows the renderer to optimise fill and
   * stroke operations.
   * @property {LoadingStrategy} [strategy] The loading strategy to use.
   * By default an {@link module:ol/loadingstrategy~all}
   * strategy is used, a one-off strategy which loads all features at once.
   * @property {string|import("../featureloader.js").FeatureUrlFunction} [url]
   * Setting this option instructs the source to load features using an XHR loader
   * (see {@link module:ol/featureloader~xhr}). Use a `string` and an
   * {@link module:ol/loadingstrategy~all} for a one-off download of all features from
   * the given URL. Use a {@link module:ol/featureloader~FeatureUrlFunction} to generate the url with
   * other loading strategies.
   * Requires `format` to be set as well.
   * When default XHR feature loader is provided, the features will
   * be transformed from the data projection to the view projection
   * during parsing. If your remote data source does not advertise its projection
   * properly, this transformation will be incorrect. For some formats, the
   * default projection (usually EPSG:4326) can be overridden by setting the
   * dataProjection constructor option on the format.
   * Note that if a source contains non-feature data, such as a GeoJSON geometry
   * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.
   * @property {boolean} [useSpatialIndex=true]
   * By default, an RTree is used as spatial index. When features are removed and
   * added frequently, and the total number of features is low, setting this to
   * `false` may improve performance.
   *
   * Note that
   * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},
   * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and
   * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is
   * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop
   * through all features.
   *
   * When set to `false`, the features will be maintained in an
   * {@link module:ol/Collection}, which can be retrieved through
   * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.
   * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the
   * -180Â° and 180Â° meridians to work properly, this should be set to `false`. The
   * resulting geometry coordinates will then exceed the world bounds.
   */
  /**
   * @classdesc
   * Provides a source of features for vector layers. Vector features provided
   * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for
   * vector data that is optimized for rendering.
   *
   * @fires VectorSourceEvent
   * @api
   * @template {import("../geom/Geometry.js").default} Geometry
   */
  var VectorSource = /** @class */ (function (_super) {
      __extends$12(VectorSource, _super);
      /**
       * @param {Options=} opt_options Vector source options.
       */
      function VectorSource(opt_options) {
          var _this = this;
          var options = opt_options || {};
          _this = _super.call(this, {
              attributions: options.attributions,
              projection: undefined,
              state: SourceState.READY,
              wrapX: options.wrapX !== undefined ? options.wrapX : true
          }) || this;
          /**
           * @private
           * @type {import("../featureloader.js").FeatureLoader}
           */
          _this.loader_ = VOID;
          /**
           * @private
           * @type {import("../format/Feature.js").default|undefined}
           */
          _this.format_ = options.format;
          /**
           * @private
           * @type {boolean}
           */
          _this.overlaps_ = options.overlaps === undefined ? true : options.overlaps;
          /**
           * @private
           * @type {string|import("../featureloader.js").FeatureUrlFunction|undefined}
           */
          _this.url_ = options.url;
          if (options.loader !== undefined) {
              _this.loader_ = options.loader;
          }
          else if (_this.url_ !== undefined) {
              assert(_this.format_, 7); // `format` must be set when `url` is set
              // create a XHR feature loader for "url" and "format"
              _this.loader_ = xhr(_this.url_, /** @type {import("../format/Feature.js").default} */ (_this.format_));
          }
          /**
           * @private
           * @type {LoadingStrategy}
           */
          _this.strategy_ = options.strategy !== undefined ? options.strategy : all;
          var useSpatialIndex = options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;
          /**
           * @private
           * @type {RBush<import("../Feature.js").default<Geometry>>}
           */
          _this.featuresRtree_ = useSpatialIndex ? new RBush() : null;
          /**
           * @private
           * @type {RBush<{extent: import("../extent.js").Extent}>}
           */
          _this.loadedExtentsRtree_ = new RBush();
          /**
           * @private
           * @type {!Object<string, import("../Feature.js").default<Geometry>>}
           */
          _this.nullGeometryFeatures_ = {};
          /**
           * A lookup of features by id (the return from feature.getId()).
           * @private
           * @type {!Object<string, import("../Feature.js").default<Geometry>>}
           */
          _this.idIndex_ = {};
          /**
           * A lookup of features by uid (using getUid(feature)).
           * @private
           * @type {!Object<string, import("../Feature.js").default<Geometry>>}
           */
          _this.uidIndex_ = {};
          /**
           * @private
           * @type {Object<string, Array<import("../events.js").EventsKey>>}
           */
          _this.featureChangeKeys_ = {};
          /**
           * @private
           * @type {Collection<import("../Feature.js").default<Geometry>>}
           */
          _this.featuresCollection_ = null;
          var collection, features;
          if (Array.isArray(options.features)) {
              features = options.features;
          }
          else if (options.features) {
              collection = options.features;
              features = collection.getArray();
          }
          if (!useSpatialIndex && collection === undefined) {
              collection = new Collection$2(features);
          }
          if (features !== undefined) {
              _this.addFeaturesInternal(features);
          }
          if (collection !== undefined) {
              _this.bindFeaturesCollection_(collection);
          }
          return _this;
      }
      /**
       * Add a single feature to the source.  If you want to add a batch of features
       * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}
       * instead. A feature will not be added to the source if feature with
       * the same id is already there. The reason for this behavior is to avoid
       * feature duplication when using bbox or tile loading strategies.
       * Note: this also applies if an {@link module:ol/Collection} is used for features,
       * meaning that if a feature with a duplicate id is added in the collection, it will
       * be removed from it right away.
       * @param {import("../Feature.js").default<Geometry>} feature Feature to add.
       * @api
       */
      VectorSource.prototype.addFeature = function (feature) {
          this.addFeatureInternal(feature);
          this.changed();
      };
      /**
       * Add a feature without firing a `change` event.
       * @param {import("../Feature.js").default<Geometry>} feature Feature.
       * @protected
       */
      VectorSource.prototype.addFeatureInternal = function (feature) {
          var featureKey = getUid(feature);
          if (!this.addToIndex_(featureKey, feature)) {
              if (this.featuresCollection_) {
                  this.featuresCollection_.remove(feature);
              }
              return;
          }
          this.setupChangeEvents_(featureKey, feature);
          var geometry = feature.getGeometry();
          if (geometry) {
              var extent = geometry.getExtent();
              if (this.featuresRtree_) {
                  this.featuresRtree_.insert(extent, feature);
              }
          }
          else {
              this.nullGeometryFeatures_[featureKey] = feature;
          }
          this.dispatchEvent(new VectorSourceEvent(VectorEventType.ADDFEATURE, feature));
      };
      /**
       * @param {string} featureKey Unique identifier for the feature.
       * @param {import("../Feature.js").default<Geometry>} feature The feature.
       * @private
       */
      VectorSource.prototype.setupChangeEvents_ = function (featureKey, feature) {
          this.featureChangeKeys_[featureKey] = [
              listen(feature, EventType.CHANGE, this.handleFeatureChange_, this),
              listen(feature, ObjectEventType.PROPERTYCHANGE, this.handleFeatureChange_, this)
          ];
      };
      /**
       * @param {string} featureKey Unique identifier for the feature.
       * @param {import("../Feature.js").default<Geometry>} feature The feature.
       * @return {boolean} The feature is "valid", in the sense that it is also a
       *     candidate for insertion into the Rtree.
       * @private
       */
      VectorSource.prototype.addToIndex_ = function (featureKey, feature) {
          var valid = true;
          var id = feature.getId();
          if (id !== undefined) {
              if (!(id.toString() in this.idIndex_)) {
                  this.idIndex_[id.toString()] = feature;
              }
              else {
                  valid = false;
              }
          }
          if (valid) {
              assert(!(featureKey in this.uidIndex_), 30); // The passed `feature` was already added to the source
              this.uidIndex_[featureKey] = feature;
          }
          return valid;
      };
      /**
       * Add a batch of features to the source.
       * @param {Array<import("../Feature.js").default<Geometry>>} features Features to add.
       * @api
       */
      VectorSource.prototype.addFeatures = function (features) {
          this.addFeaturesInternal(features);
          this.changed();
      };
      /**
       * Add features without firing a `change` event.
       * @param {Array<import("../Feature.js").default<Geometry>>} features Features.
       * @protected
       */
      VectorSource.prototype.addFeaturesInternal = function (features) {
          var extents = [];
          var newFeatures = [];
          var geometryFeatures = [];
          for (var i = 0, length_1 = features.length; i < length_1; i++) {
              var feature = features[i];
              var featureKey = getUid(feature);
              if (this.addToIndex_(featureKey, feature)) {
                  newFeatures.push(feature);
              }
          }
          for (var i = 0, length_2 = newFeatures.length; i < length_2; i++) {
              var feature = newFeatures[i];
              var featureKey = getUid(feature);
              this.setupChangeEvents_(featureKey, feature);
              var geometry = feature.getGeometry();
              if (geometry) {
                  var extent = geometry.getExtent();
                  extents.push(extent);
                  geometryFeatures.push(feature);
              }
              else {
                  this.nullGeometryFeatures_[featureKey] = feature;
              }
          }
          if (this.featuresRtree_) {
              this.featuresRtree_.load(extents, geometryFeatures);
          }
          for (var i = 0, length_3 = newFeatures.length; i < length_3; i++) {
              this.dispatchEvent(new VectorSourceEvent(VectorEventType.ADDFEATURE, newFeatures[i]));
          }
      };
      /**
       * @param {!Collection<import("../Feature.js").default<Geometry>>} collection Collection.
       * @private
       */
      VectorSource.prototype.bindFeaturesCollection_ = function (collection) {
          var modifyingCollection = false;
          this.addEventListener(VectorEventType.ADDFEATURE, 
          /**
           * @param {VectorSourceEvent<Geometry>} evt The vector source event
           */
          function (evt) {
              if (!modifyingCollection) {
                  modifyingCollection = true;
                  collection.push(evt.feature);
                  modifyingCollection = false;
              }
          });
          this.addEventListener(VectorEventType.REMOVEFEATURE, 
          /**
           * @param {VectorSourceEvent<Geometry>} evt The vector source event
           */
          function (evt) {
              if (!modifyingCollection) {
                  modifyingCollection = true;
                  collection.remove(evt.feature);
                  modifyingCollection = false;
              }
          });
          collection.addEventListener(CollectionEventType.ADD, 
          /**
           * @param {import("../Collection.js").CollectionEvent} evt The collection event
           */
          function (evt) {
              if (!modifyingCollection) {
                  modifyingCollection = true;
                  this.addFeature(/** @type {import("../Feature.js").default<Geometry>} */ (evt.element));
                  modifyingCollection = false;
              }
          }.bind(this));
          collection.addEventListener(CollectionEventType.REMOVE, 
          /**
           * @param {import("../Collection.js").CollectionEvent} evt The collection event
           */
          function (evt) {
              if (!modifyingCollection) {
                  modifyingCollection = true;
                  this.removeFeature(/** @type {import("../Feature.js").default<Geometry>} */ (evt.element));
                  modifyingCollection = false;
              }
          }.bind(this));
          this.featuresCollection_ = collection;
      };
      /**
       * Remove all features from the source.
       * @param {boolean=} opt_fast Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#removefeature} events.
       * @api
       */
      VectorSource.prototype.clear = function (opt_fast) {
          if (opt_fast) {
              for (var featureId in this.featureChangeKeys_) {
                  var keys = this.featureChangeKeys_[featureId];
                  keys.forEach(unlistenByKey);
              }
              if (!this.featuresCollection_) {
                  this.featureChangeKeys_ = {};
                  this.idIndex_ = {};
                  this.uidIndex_ = {};
              }
          }
          else {
              if (this.featuresRtree_) {
                  this.featuresRtree_.forEach(this.removeFeatureInternal.bind(this));
                  for (var id in this.nullGeometryFeatures_) {
                      this.removeFeatureInternal(this.nullGeometryFeatures_[id]);
                  }
              }
          }
          if (this.featuresCollection_) {
              this.featuresCollection_.clear();
          }
          if (this.featuresRtree_) {
              this.featuresRtree_.clear();
          }
          this.nullGeometryFeatures_ = {};
          var clearEvent = new VectorSourceEvent(VectorEventType.CLEAR);
          this.dispatchEvent(clearEvent);
          this.changed();
      };
      /**
       * Iterate through all features on the source, calling the provided callback
       * with each one.  If the callback returns any "truthy" value, iteration will
       * stop and the function will return the same value.
       * Note: this function only iterate through the feature that have a defined geometry.
       *
       * @param {function(import("../Feature.js").default<Geometry>): T} callback Called with each feature
       *     on the source.  Return a truthy value to stop iteration.
       * @return {T|undefined} The return value from the last call to the callback.
       * @template T
       * @api
       */
      VectorSource.prototype.forEachFeature = function (callback) {
          if (this.featuresRtree_) {
              return this.featuresRtree_.forEach(callback);
          }
          else if (this.featuresCollection_) {
              this.featuresCollection_.forEach(callback);
          }
      };
      /**
       * Iterate through all features whose geometries contain the provided
       * coordinate, calling the callback with each feature.  If the callback returns
       * a "truthy" value, iteration will stop and the function will return the same
       * value.
       *
       * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
       * @param {function(import("../Feature.js").default<Geometry>): T} callback Called with each feature
       *     whose goemetry contains the provided coordinate.
       * @return {T|undefined} The return value from the last call to the callback.
       * @template T
       */
      VectorSource.prototype.forEachFeatureAtCoordinateDirect = function (coordinate, callback) {
          var extent = [coordinate[0], coordinate[1], coordinate[0], coordinate[1]];
          return this.forEachFeatureInExtent(extent, function (feature) {
              var geometry = feature.getGeometry();
              if (geometry.intersectsCoordinate(coordinate)) {
                  return callback(feature);
              }
              else {
                  return undefined;
              }
          });
      };
      /**
       * Iterate through all features whose bounding box intersects the provided
       * extent (note that the feature's geometry may not intersect the extent),
       * calling the callback with each feature.  If the callback returns a "truthy"
       * value, iteration will stop and the function will return the same value.
       *
       * If you are interested in features whose geometry intersects an extent, call
       * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.
       *
       * When `useSpatialIndex` is set to false, this method will loop through all
       * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.
       *
       * @param {import("../extent.js").Extent} extent Extent.
       * @param {function(import("../Feature.js").default<Geometry>): T} callback Called with each feature
       *     whose bounding box intersects the provided extent.
       * @return {T|undefined} The return value from the last call to the callback.
       * @template T
       * @api
       */
      VectorSource.prototype.forEachFeatureInExtent = function (extent, callback) {
          if (this.featuresRtree_) {
              return this.featuresRtree_.forEachInExtent(extent, callback);
          }
          else if (this.featuresCollection_) {
              this.featuresCollection_.forEach(callback);
          }
      };
      /**
       * Iterate through all features whose geometry intersects the provided extent,
       * calling the callback with each feature.  If the callback returns a "truthy"
       * value, iteration will stop and the function will return the same value.
       *
       * If you only want to test for bounding box intersection, call the
       * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.
       *
       * @param {import("../extent.js").Extent} extent Extent.
       * @param {function(import("../Feature.js").default<Geometry>): T} callback Called with each feature
       *     whose geometry intersects the provided extent.
       * @return {T|undefined} The return value from the last call to the callback.
       * @template T
       * @api
       */
      VectorSource.prototype.forEachFeatureIntersectingExtent = function (extent, callback) {
          return this.forEachFeatureInExtent(extent, 
          /**
           * @param {import("../Feature.js").default<Geometry>} feature Feature.
           * @return {T|undefined} The return value from the last call to the callback.
           */
          function (feature) {
              var geometry = feature.getGeometry();
              if (geometry.intersectsExtent(extent)) {
                  var result = callback(feature);
                  if (result) {
                      return result;
                  }
              }
          });
      };
      /**
       * Get the features collection associated with this source. Will be `null`
       * unless the source was configured with `useSpatialIndex` set to `false`, or
       * with an {@link module:ol/Collection} as `features`.
       * @return {Collection<import("../Feature.js").default<Geometry>>} The collection of features.
       * @api
       */
      VectorSource.prototype.getFeaturesCollection = function () {
          return this.featuresCollection_;
      };
      /**
       * Get all features on the source in random order.
       * @return {Array<import("../Feature.js").default<Geometry>>} Features.
       * @api
       */
      VectorSource.prototype.getFeatures = function () {
          var features;
          if (this.featuresCollection_) {
              features = this.featuresCollection_.getArray();
          }
          else if (this.featuresRtree_) {
              features = this.featuresRtree_.getAll();
              if (!isEmpty(this.nullGeometryFeatures_)) {
                  extend$1(features, getValues(this.nullGeometryFeatures_));
              }
          }
          return (
          /** @type {Array<import("../Feature.js").default<Geometry>>} */ (features));
      };
      /**
       * Get all features whose geometry intersects the provided coordinate.
       * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
       * @return {Array<import("../Feature.js").default<Geometry>>} Features.
       * @api
       */
      VectorSource.prototype.getFeaturesAtCoordinate = function (coordinate) {
          var features = [];
          this.forEachFeatureAtCoordinateDirect(coordinate, function (feature) {
              features.push(feature);
          });
          return features;
      };
      /**
       * Get all features whose bounding box intersects the provided extent.  Note that this returns an array of
       * all features intersecting the given extent in random order (so it may include
       * features whose geometries do not intersect the extent).
       *
       * When `useSpatialIndex` is set to false, this method will return all
       * features.
       *
       * @param {import("../extent.js").Extent} extent Extent.
       * @return {Array<import("../Feature.js").default<Geometry>>} Features.
       * @api
       */
      VectorSource.prototype.getFeaturesInExtent = function (extent) {
          if (this.featuresRtree_) {
              return this.featuresRtree_.getInExtent(extent);
          }
          else if (this.featuresCollection_) {
              return this.featuresCollection_.getArray();
          }
          else {
              return [];
          }
      };
      /**
       * Get the closest feature to the provided coordinate.
       *
       * This method is not available when the source is configured with
       * `useSpatialIndex` set to `false`.
       * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
       * @param {function(import("../Feature.js").default<Geometry>):boolean=} opt_filter Feature filter function.
       *     The filter function will receive one argument, the {@link module:ol/Feature feature}
       *     and it should return a boolean value. By default, no filtering is made.
       * @return {import("../Feature.js").default<Geometry>} Closest feature.
       * @api
       */
      VectorSource.prototype.getClosestFeatureToCoordinate = function (coordinate, opt_filter) {
          // Find the closest feature using branch and bound.  We start searching an
          // infinite extent, and find the distance from the first feature found.  This
          // becomes the closest feature.  We then compute a smaller extent which any
          // closer feature must intersect.  We continue searching with this smaller
          // extent, trying to find a closer feature.  Every time we find a closer
          // feature, we update the extent being searched so that any even closer
          // feature must intersect it.  We continue until we run out of features.
          var x = coordinate[0];
          var y = coordinate[1];
          var closestFeature = null;
          var closestPoint = [NaN, NaN];
          var minSquaredDistance = Infinity;
          var extent = [-Infinity, -Infinity, Infinity, Infinity];
          var filter = opt_filter ? opt_filter : TRUE;
          this.featuresRtree_.forEachInExtent(extent, 
          /**
           * @param {import("../Feature.js").default<Geometry>} feature Feature.
           */
          function (feature) {
              if (filter(feature)) {
                  var geometry = feature.getGeometry();
                  var previousMinSquaredDistance = minSquaredDistance;
                  minSquaredDistance = geometry.closestPointXY(x, y, closestPoint, minSquaredDistance);
                  if (minSquaredDistance < previousMinSquaredDistance) {
                      closestFeature = feature;
                      // This is sneaky.  Reduce the extent that it is currently being
                      // searched while the R-Tree traversal using this same extent object
                      // is still in progress.  This is safe because the new extent is
                      // strictly contained by the old extent.
                      var minDistance = Math.sqrt(minSquaredDistance);
                      extent[0] = x - minDistance;
                      extent[1] = y - minDistance;
                      extent[2] = x + minDistance;
                      extent[3] = y + minDistance;
                  }
              }
          });
          return closestFeature;
      };
      /**
       * Get the extent of the features currently in the source.
       *
       * This method is not available when the source is configured with
       * `useSpatialIndex` set to `false`.
       * @param {import("../extent.js").Extent=} opt_extent Destination extent. If provided, no new extent
       *     will be created. Instead, that extent's coordinates will be overwritten.
       * @return {import("../extent.js").Extent} Extent.
       * @api
       */
      VectorSource.prototype.getExtent = function (opt_extent) {
          return this.featuresRtree_.getExtent(opt_extent);
      };
      /**
       * Get a feature by its identifier (the value returned by feature.getId()).
       * Note that the index treats string and numeric identifiers as the same.  So
       * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.
       *
       * @param {string|number} id Feature identifier.
       * @return {import("../Feature.js").default<Geometry>} The feature (or `null` if not found).
       * @api
       */
      VectorSource.prototype.getFeatureById = function (id) {
          var feature = this.idIndex_[id.toString()];
          return feature !== undefined ? feature : null;
      };
      /**
       * Get a feature by its internal unique identifier (using `getUid`).
       *
       * @param {string} uid Feature identifier.
       * @return {import("../Feature.js").default<Geometry>} The feature (or `null` if not found).
       */
      VectorSource.prototype.getFeatureByUid = function (uid) {
          var feature = this.uidIndex_[uid];
          return feature !== undefined ? feature : null;
      };
      /**
       * Get the format associated with this source.
       *
       * @return {import("../format/Feature.js").default|undefined} The feature format.
       * @api
       */
      VectorSource.prototype.getFormat = function () {
          return this.format_;
      };
      /**
       * @return {boolean} The source can have overlapping geometries.
       */
      VectorSource.prototype.getOverlaps = function () {
          return this.overlaps_;
      };
      /**
       * Get the url associated with this source.
       *
       * @return {string|import("../featureloader.js").FeatureUrlFunction|undefined} The url.
       * @api
       */
      VectorSource.prototype.getUrl = function () {
          return this.url_;
      };
      /**
       * @param {Event} event Event.
       * @private
       */
      VectorSource.prototype.handleFeatureChange_ = function (event) {
          var feature = /** @type {import("../Feature.js").default<Geometry>} */ (event.target);
          var featureKey = getUid(feature);
          var geometry = feature.getGeometry();
          if (!geometry) {
              if (!(featureKey in this.nullGeometryFeatures_)) {
                  if (this.featuresRtree_) {
                      this.featuresRtree_.remove(feature);
                  }
                  this.nullGeometryFeatures_[featureKey] = feature;
              }
          }
          else {
              var extent = geometry.getExtent();
              if (featureKey in this.nullGeometryFeatures_) {
                  delete this.nullGeometryFeatures_[featureKey];
                  if (this.featuresRtree_) {
                      this.featuresRtree_.insert(extent, feature);
                  }
              }
              else {
                  if (this.featuresRtree_) {
                      this.featuresRtree_.update(extent, feature);
                  }
              }
          }
          var id = feature.getId();
          if (id !== undefined) {
              var sid = id.toString();
              if (this.idIndex_[sid] !== feature) {
                  this.removeFromIdIndex_(feature);
                  this.idIndex_[sid] = feature;
              }
          }
          else {
              this.removeFromIdIndex_(feature);
              this.uidIndex_[featureKey] = feature;
          }
          this.changed();
          this.dispatchEvent(new VectorSourceEvent(VectorEventType.CHANGEFEATURE, feature));
      };
      /**
       * Returns true if the feature is contained within the source.
       * @param {import("../Feature.js").default<Geometry>} feature Feature.
       * @return {boolean} Has feature.
       * @api
       */
      VectorSource.prototype.hasFeature = function (feature) {
          var id = feature.getId();
          if (id !== undefined) {
              return id in this.idIndex_;
          }
          else {
              return getUid(feature) in this.uidIndex_;
          }
      };
      /**
       * @return {boolean} Is empty.
       */
      VectorSource.prototype.isEmpty = function () {
          return this.featuresRtree_.isEmpty() && isEmpty(this.nullGeometryFeatures_);
      };
      /**
       * @param {import("../extent.js").Extent} extent Extent.
       * @param {number} resolution Resolution.
       * @param {import("../proj/Projection.js").default} projection Projection.
       */
      VectorSource.prototype.loadFeatures = function (extent, resolution, projection) {
          var loadedExtentsRtree = this.loadedExtentsRtree_;
          var extentsToLoad = this.strategy_(extent, resolution);
          this.loading = false;
          var _loop_1 = function (i, ii) {
              var extentToLoad = extentsToLoad[i];
              var alreadyLoaded = loadedExtentsRtree.forEachInExtent(extentToLoad, 
              /**
               * @param {{extent: import("../extent.js").Extent}} object Object.
               * @return {boolean} Contains.
               */
              function (object) {
                  return containsExtent(object.extent, extentToLoad);
              });
              if (!alreadyLoaded) {
                  this_1.loader_.call(this_1, extentToLoad, resolution, projection);
                  loadedExtentsRtree.insert(extentToLoad, { extent: extentToLoad.slice() });
                  this_1.loading = this_1.loader_ !== VOID;
              }
          };
          var this_1 = this;
          for (var i = 0, ii = extentsToLoad.length; i < ii; ++i) {
              _loop_1(i);
          }
      };
      VectorSource.prototype.refresh = function () {
          this.clear(true);
          this.loadedExtentsRtree_.clear();
          _super.prototype.refresh.call(this);
      };
      /**
       * Remove an extent from the list of loaded extents.
       * @param {import("../extent.js").Extent} extent Extent.
       * @api
       */
      VectorSource.prototype.removeLoadedExtent = function (extent) {
          var loadedExtentsRtree = this.loadedExtentsRtree_;
          var obj;
          loadedExtentsRtree.forEachInExtent(extent, function (object) {
              if (equals(object.extent, extent)) {
                  obj = object;
                  return true;
              }
          });
          if (obj) {
              loadedExtentsRtree.remove(obj);
          }
      };
      /**
       * Remove a single feature from the source.  If you want to remove all features
       * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method
       * instead.
       * @param {import("../Feature.js").default<Geometry>} feature Feature to remove.
       * @api
       */
      VectorSource.prototype.removeFeature = function (feature) {
          var featureKey = getUid(feature);
          if (featureKey in this.nullGeometryFeatures_) {
              delete this.nullGeometryFeatures_[featureKey];
          }
          else {
              if (this.featuresRtree_) {
                  this.featuresRtree_.remove(feature);
              }
          }
          this.removeFeatureInternal(feature);
          this.changed();
      };
      /**
       * Remove feature without firing a `change` event.
       * @param {import("../Feature.js").default<Geometry>} feature Feature.
       * @protected
       */
      VectorSource.prototype.removeFeatureInternal = function (feature) {
          var featureKey = getUid(feature);
          this.featureChangeKeys_[featureKey].forEach(unlistenByKey);
          delete this.featureChangeKeys_[featureKey];
          var id = feature.getId();
          if (id !== undefined) {
              delete this.idIndex_[id.toString()];
          }
          delete this.uidIndex_[featureKey];
          this.dispatchEvent(new VectorSourceEvent(VectorEventType.REMOVEFEATURE, feature));
      };
      /**
       * Remove a feature from the id index.  Called internally when the feature id
       * may have changed.
       * @param {import("../Feature.js").default<Geometry>} feature The feature.
       * @return {boolean} Removed the feature from the index.
       * @private
       */
      VectorSource.prototype.removeFromIdIndex_ = function (feature) {
          var removed = false;
          for (var id in this.idIndex_) {
              if (this.idIndex_[id] === feature) {
                  delete this.idIndex_[id];
                  removed = true;
                  break;
              }
          }
          return removed;
      };
      /**
       * Set the new loader of the source. The next render cycle will use the
       * new loader.
       * @param {import("../featureloader.js").FeatureLoader} loader The loader to set.
       * @api
       */
      VectorSource.prototype.setLoader = function (loader) {
          this.loader_ = loader;
      };
      /**
       * Points the source to a new url. The next render cycle will use the new url.
       * @param {string|import("../featureloader.js").FeatureUrlFunction} url Url.
       * @api
       */
      VectorSource.prototype.setUrl = function (url) {
          assert(this.format_, 7); // `format` must be set when `url` is set
          this.setLoader(xhr(url, this.format_));
      };
      return VectorSource;
  }(Source));

  /**
   * @module ol/interaction
   */
  /**
   * @typedef {Object} DefaultsOptions
   * @property {boolean} [altShiftDragRotate=true] Whether Alt-Shift-drag rotate is
   * desired.
   * @property {boolean} [onFocusOnly=false] Interact only when the map has the
   * focus. This affects the `MouseWheelZoom` and `DragPan` interactions and is
   * useful when page scroll is desired for maps that do not have the browser's
   * focus.
   * @property {boolean} [doubleClickZoom=true] Whether double click zoom is
   * desired.
   * @property {boolean} [keyboard=true] Whether keyboard interaction is desired.
   * @property {boolean} [mouseWheelZoom=true] Whether mousewheel zoom is desired.
   * @property {boolean} [shiftDragZoom=true] Whether Shift-drag zoom is desired.
   * @property {boolean} [dragPan=true] Whether drag pan is desired.
   * @property {boolean} [pinchRotate=true] Whether pinch rotate is desired.
   * @property {boolean} [pinchZoom=true] Whether pinch zoom is desired.
   * @property {number} [zoomDelta] Zoom level delta when using keyboard or double click zoom.
   * @property {number} [zoomDuration] Duration of the zoom animation in
   * milliseconds.
   */
  /**
   * Set of interactions included in maps by default. Specific interactions can be
   * excluded by setting the appropriate option to false in the constructor
   * options, but the order of the interactions is fixed.  If you want to specify
   * a different order for interactions, you will need to create your own
   * {@link module:ol/interaction/Interaction} instances and insert
   * them into a {@link module:ol/Collection} in the order you want
   * before creating your {@link module:ol/Map~Map} instance. Changing the order can
   * be of interest if the event propagation needs to be stopped at a point.
   * The default set of interactions, in sequence, is:
   * * {@link module:ol/interaction/DragRotate~DragRotate}
   * * {@link module:ol/interaction/DoubleClickZoom~DoubleClickZoom}
   * * {@link module:ol/interaction/DragPan~DragPan}
   * * {@link module:ol/interaction/PinchRotate~PinchRotate}
   * * {@link module:ol/interaction/PinchZoom~PinchZoom}
   * * {@link module:ol/interaction/KeyboardPan~KeyboardPan}
   * * {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}
   * * {@link module:ol/interaction/MouseWheelZoom~MouseWheelZoom}
   * * {@link module:ol/interaction/DragZoom~DragZoom}
   *
   * @param {DefaultsOptions=} opt_options Defaults options.
   * @return {import("./Collection.js").default<import("./interaction/Interaction.js").default>}
   * A collection of interactions to be used with the {@link module:ol/Map~Map}
   * constructor's `interactions` option.
   * @api
   */
  function defaults$1(opt_options) {
      var options = opt_options ? opt_options : {};
      var interactions = new Collection$2();
      var kinetic = new Kinetic(-0.005, 0.05, 100);
      var altShiftDragRotate = options.altShiftDragRotate !== undefined ?
          options.altShiftDragRotate : true;
      if (altShiftDragRotate) {
          interactions.push(new DragRotate());
      }
      var doubleClickZoom = options.doubleClickZoom !== undefined ?
          options.doubleClickZoom : true;
      if (doubleClickZoom) {
          interactions.push(new DoubleClickZoom({
              delta: options.zoomDelta,
              duration: options.zoomDuration
          }));
      }
      var dragPan = options.dragPan !== undefined ? options.dragPan : true;
      if (dragPan) {
          interactions.push(new DragPan({
              condition: options.onFocusOnly ? focus : undefined,
              kinetic: kinetic
          }));
      }
      var pinchRotate = options.pinchRotate !== undefined ? options.pinchRotate :
          true;
      if (pinchRotate) {
          interactions.push(new PinchRotate());
      }
      var pinchZoom = options.pinchZoom !== undefined ? options.pinchZoom : true;
      if (pinchZoom) {
          interactions.push(new PinchZoom({
              duration: options.zoomDuration
          }));
      }
      var keyboard = options.keyboard !== undefined ? options.keyboard : true;
      if (keyboard) {
          interactions.push(new KeyboardPan());
          interactions.push(new KeyboardZoom({
              delta: options.zoomDelta,
              duration: options.zoomDuration
          }));
      }
      var mouseWheelZoom = options.mouseWheelZoom !== undefined ?
          options.mouseWheelZoom : true;
      if (mouseWheelZoom) {
          interactions.push(new MouseWheelZoom({
              condition: options.onFocusOnly ? focus : undefined,
              duration: options.zoomDuration
          }));
      }
      var shiftDragZoom = options.shiftDragZoom !== undefined ?
          options.shiftDragZoom : true;
      if (shiftDragZoom) {
          interactions.push(new DragZoom({
              duration: options.zoomDuration
          }));
      }
      return interactions;
  }

  var __extends$13 =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @classdesc
   * The map is the core component of OpenLayers. For a map to render, a view,
   * one or more layers, and a target container are needed:
   *
   *     import Map from 'ol/Map';
   *     import View from 'ol/View';
   *     import TileLayer from 'ol/layer/Tile';
   *     import OSM from 'ol/source/OSM';
   *
   *     var map = new Map({
   *       view: new View({
   *         center: [0, 0],
   *         zoom: 1
   *       }),
   *       layers: [
   *         new TileLayer({
   *           source: new OSM()
   *         })
   *       ],
   *       target: 'map'
   *     });
   *
   * The above snippet creates a map using a {@link module:ol/layer/Tile} to
   * display {@link module:ol/source/OSM~OSM} OSM data and render it to a DOM
   * element with the id `map`.
   *
   * The constructor places a viewport container (with CSS class name
   * `ol-viewport`) in the target element (see `getViewport()`), and then two
   * further elements within the viewport: one with CSS class name
   * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with
   * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`
   * option of {@link module:ol/Overlay~Overlay} for the difference). The map
   * itself is placed in a further element within the viewport.
   *
   * Layers are stored as a {@link module:ol/Collection~Collection} in
   * layerGroups. A top-level group is provided by the library. This is what is
   * accessed by `getLayerGroup` and `setLayerGroup`. Layers entered in the
   * options are added to this group, and `addLayer` and `removeLayer` change the
   * layer collection in the group. `getLayers` is a convenience function for
   * `getLayerGroup().getLayers()`. Note that {@link module:ol/layer/Group~Group}
   * is a subclass of {@link module:ol/layer/Base}, so layers entered in the
   * options or added with `addLayer` can be groups, which can contain further
   * groups, and so on.
   *
   * @api
   */
  var Map$1 = /** @class */ (function (_super) {
      __extends$13(Map, _super);
      /**
       * @param {import("./PluggableMap.js").MapOptions} options Map options.
       */
      function Map(options) {
          var _this = this;
          options = assign({}, options);
          if (!options.controls) {
              options.controls = defaults();
          }
          if (!options.interactions) {
              options.interactions = defaults$1();
          }
          _this = _super.call(this, options) || this;
          return _this;
      }
      Map.prototype.createRenderer = function () {
          return new CompositeMapRenderer(this);
      };
      return Map;
  }(PluggableMap));

  /**
   * @module ol/format/Feature
   */
  /**
   * @typedef {Object} ReadOptions
   * @property {import("../proj.js").ProjectionLike} [dataProjection] Projection of the data we are reading.
   * If not provided, the projection will be derived from the data (where possible) or
   * the `dataProjection` of the format is assigned (where set). If the projection
   * can not be derived from the data and if no `dataProjection` is set for a format,
   * the features will not be reprojected.
   * @property {import("../extent.js").Extent} [extent] Tile extent in map units of the tile being read.
   * This is only required when reading data with tile pixels as geometry units. When configured,
   * a `dataProjection` with `TILE_PIXELS` as `units` and the tile's pixel extent as `extent` needs to be
   * provided.
   * @property {import("../proj.js").ProjectionLike} [featureProjection] Projection of the feature geometries
   * created by the format reader. If not provided, features will be returned in the
   * `dataProjection`.
   */
  /**
   * @typedef {Object} WriteOptions
   * @property {import("../proj.js").ProjectionLike} [dataProjection] Projection of the data we are writing.
   * If not provided, the `dataProjection` of the format is assigned (where set).
   * If no `dataProjection` is set for a format, the features will be returned
   * in the `featureProjection`.
   * @property {import("../proj.js").ProjectionLike} [featureProjection] Projection of the feature geometries
   * that will be serialized by the format writer. If not provided, geometries are assumed
   * to be in the `dataProjection` if that is set; in other words, they are not transformed.
   * @property {boolean} [rightHanded] When writing geometries, follow the right-hand
   * rule for linear ring orientation.  This means that polygons will have counter-clockwise
   * exterior rings and clockwise interior rings.  By default, coordinates are serialized
   * as they are provided at construction.  If `true`, the right-hand rule will
   * be applied.  If `false`, the left-hand rule will be applied (clockwise for
   * exterior and counter-clockwise for interior rings).  Note that not all
   * formats support this.  The GeoJSON format does use this property when writing
   * geometries.
   * @property {number} [decimals] Maximum number of decimal places for coordinates.
   * Coordinates are stored internally as floats, but floating-point arithmetic can create
   * coordinates with a large number of decimal places, not generally wanted on output.
   * Set a number here to round coordinates. Can also be used to ensure that
   * coordinates read in can be written back out with the same number of decimals.
   * Default is no rounding.
   */
  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Base class for feature formats.
   * {@link module:ol/format/Feature~FeatureFormat} subclasses provide the ability to decode and encode
   * {@link module:ol/Feature~Feature} objects from a variety of commonly used geospatial
   * file formats.  See the documentation for each format for more details.
   *
   * @abstract
   * @api
   */
  var FeatureFormat = /** @class */ (function () {
      function FeatureFormat() {
          /**
           * @protected
           * @type {import("../proj/Projection.js").default}
           */
          this.dataProjection = null;
          /**
           * @protected
           * @type {import("../proj/Projection.js").default}
           */
          this.defaultFeatureProjection = null;
      }
      /**
       * Adds the data projection to the read options.
       * @param {Document|Node|Object|string} source Source.
       * @param {ReadOptions=} opt_options Options.
       * @return {ReadOptions|undefined} Options.
       * @protected
       */
      FeatureFormat.prototype.getReadOptions = function (source, opt_options) {
          var options;
          if (opt_options) {
              var dataProjection = opt_options.dataProjection ?
                  get$4(opt_options.dataProjection) : this.readProjection(source);
              if (opt_options.extent &&
                  dataProjection && dataProjection.getUnits() === Units.TILE_PIXELS) {
                  dataProjection = get$4(dataProjection);
                  dataProjection.setWorldExtent(opt_options.extent);
              }
              options = {
                  dataProjection: dataProjection,
                  featureProjection: opt_options.featureProjection
              };
          }
          return this.adaptOptions(options);
      };
      /**
       * Sets the `dataProjection` on the options, if no `dataProjection`
       * is set.
       * @param {WriteOptions|ReadOptions|undefined} options
       *     Options.
       * @protected
       * @return {WriteOptions|ReadOptions|undefined}
       *     Updated options.
       */
      FeatureFormat.prototype.adaptOptions = function (options) {
          return assign({
              dataProjection: this.dataProjection,
              featureProjection: this.defaultFeatureProjection
          }, options);
      };
      /**
       * @abstract
       * @return {import("./FormatType.js").default} Format.
       */
      FeatureFormat.prototype.getType = function () {
          return abstract();
      };
      /**
       * Read a single feature from a source.
       *
       * @abstract
       * @param {Document|Node|Object|string} source Source.
       * @param {ReadOptions=} opt_options Read options.
       * @return {import("../Feature.js").FeatureLike} Feature.
       */
      FeatureFormat.prototype.readFeature = function (source, opt_options) {
          return abstract();
      };
      /**
       * Read all features from a source.
       *
       * @abstract
       * @param {Document|Node|ArrayBuffer|Object|string} source Source.
       * @param {ReadOptions=} opt_options Read options.
       * @return {Array<import("../Feature.js").FeatureLike>} Features.
       */
      FeatureFormat.prototype.readFeatures = function (source, opt_options) {
          return abstract();
      };
      /**
       * Read a single geometry from a source.
       *
       * @abstract
       * @param {Document|Node|Object|string} source Source.
       * @param {ReadOptions=} opt_options Read options.
       * @return {import("../geom/Geometry.js").default} Geometry.
       */
      FeatureFormat.prototype.readGeometry = function (source, opt_options) {
          return abstract();
      };
      /**
       * Read the projection from a source.
       *
       * @abstract
       * @param {Document|Node|Object|string} source Source.
       * @return {import("../proj/Projection.js").default} Projection.
       */
      FeatureFormat.prototype.readProjection = function (source) {
          return abstract();
      };
      /**
       * Encode a feature in this format.
       *
       * @abstract
       * @param {import("../Feature.js").default} feature Feature.
       * @param {WriteOptions=} opt_options Write options.
       * @return {string} Result.
       */
      FeatureFormat.prototype.writeFeature = function (feature, opt_options) {
          return abstract();
      };
      /**
       * Encode an array of features in this format.
       *
       * @abstract
       * @param {Array<import("../Feature.js").default>} features Features.
       * @param {WriteOptions=} opt_options Write options.
       * @return {string} Result.
       */
      FeatureFormat.prototype.writeFeatures = function (features, opt_options) {
          return abstract();
      };
      /**
       * Write a single geometry in this format.
       *
       * @abstract
       * @param {import("../geom/Geometry.js").default} geometry Geometry.
       * @param {WriteOptions=} opt_options Write options.
       * @return {string} Result.
       */
      FeatureFormat.prototype.writeGeometry = function (geometry, opt_options) {
          return abstract();
      };
      return FeatureFormat;
  }());
  /**
   * @param {import("../geom/Geometry.js").default} geometry Geometry.
   * @param {boolean} write Set to true for writing, false for reading.
   * @param {(WriteOptions|ReadOptions)=} opt_options Options.
   * @return {import("../geom/Geometry.js").default} Transformed geometry.
   */
  function transformGeometryWithOptions(geometry, write, opt_options) {
      var featureProjection = opt_options ? get$4(opt_options.featureProjection) : null;
      var dataProjection = opt_options ? get$4(opt_options.dataProjection) : null;
      var transformed;
      if (featureProjection && dataProjection && !equivalent(featureProjection, dataProjection)) {
          transformed = (write ? geometry.clone() : geometry).transform(write ? featureProjection : dataProjection, write ? dataProjection : featureProjection);
      }
      else {
          transformed = geometry;
      }
      if (write && opt_options && /** @type {WriteOptions} */ (opt_options).decimals !== undefined) {
          var power_1 = Math.pow(10, /** @type {WriteOptions} */ (opt_options).decimals);
          // if decimals option on write, round each coordinate appropriately
          /**
           * @param {Array<number>} coordinates Coordinates.
           * @return {Array<number>} Transformed coordinates.
           */
          var transform = function (coordinates) {
              for (var i = 0, ii = coordinates.length; i < ii; ++i) {
                  coordinates[i] = Math.round(coordinates[i] * power_1) / power_1;
              }
              return coordinates;
          };
          if (transformed === geometry) {
              transformed = geometry.clone();
          }
          transformed.applyTransform(transform);
      }
      return transformed;
  }

  var __extends$14 =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Base class for JSON feature formats.
   *
   * @abstract
   */
  var JSONFeature = /** @class */ (function (_super) {
      __extends$14(JSONFeature, _super);
      function JSONFeature() {
          return _super.call(this) || this;
      }
      /**
       * @inheritDoc
       */
      JSONFeature.prototype.getType = function () {
          return FormatType.JSON;
      };
      /**
       * Read a feature.  Only works for a single feature. Use `readFeatures` to
       * read a feature collection.
       *
       * @param {ArrayBuffer|Document|Node|Object|string} source Source.
       * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
       * @return {import("../Feature.js").default} Feature.
       * @api
       */
      JSONFeature.prototype.readFeature = function (source, opt_options) {
          return this.readFeatureFromObject(getObject(source), this.getReadOptions(source, opt_options));
      };
      /**
       * Read all features.  Works with both a single feature and a feature
       * collection.
       *
       * @param {ArrayBuffer|Document|Node|Object|string} source Source.
       * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
       * @return {Array<import("../Feature.js").default>} Features.
       * @api
       */
      JSONFeature.prototype.readFeatures = function (source, opt_options) {
          return this.readFeaturesFromObject(getObject(source), this.getReadOptions(source, opt_options));
      };
      /**
       * @abstract
       * @param {Object} object Object.
       * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
       * @protected
       * @return {import("../Feature.js").default} Feature.
       */
      JSONFeature.prototype.readFeatureFromObject = function (object, opt_options) {
          return abstract();
      };
      /**
       * @abstract
       * @param {Object} object Object.
       * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
       * @protected
       * @return {Array<import("../Feature.js").default>} Features.
       */
      JSONFeature.prototype.readFeaturesFromObject = function (object, opt_options) {
          return abstract();
      };
      /**
       * Read a geometry.
       *
       * @param {ArrayBuffer|Document|Node|Object|string} source Source.
       * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
       * @return {import("../geom/Geometry.js").default} Geometry.
       * @api
       */
      JSONFeature.prototype.readGeometry = function (source, opt_options) {
          return this.readGeometryFromObject(getObject(source), this.getReadOptions(source, opt_options));
      };
      /**
       * @abstract
       * @param {Object} object Object.
       * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
       * @protected
       * @return {import("../geom/Geometry.js").default} Geometry.
       */
      JSONFeature.prototype.readGeometryFromObject = function (object, opt_options) {
          return abstract();
      };
      /**
       * Read the projection.
       *
       * @param {ArrayBuffer|Document|Node|Object|string} source Source.
       * @return {import("../proj/Projection.js").default} Projection.
       * @api
       */
      JSONFeature.prototype.readProjection = function (source) {
          return this.readProjectionFromObject(getObject(source));
      };
      /**
       * @abstract
       * @param {Object} object Object.
       * @protected
       * @return {import("../proj/Projection.js").default} Projection.
       */
      JSONFeature.prototype.readProjectionFromObject = function (object) {
          return abstract();
      };
      /**
       * Encode a feature as string.
       *
       * @param {import("../Feature.js").default} feature Feature.
       * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
       * @return {string} Encoded feature.
       * @api
       */
      JSONFeature.prototype.writeFeature = function (feature, opt_options) {
          return JSON.stringify(this.writeFeatureObject(feature, opt_options));
      };
      /**
       * @abstract
       * @param {import("../Feature.js").default} feature Feature.
       * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
       * @return {Object} Object.
       */
      JSONFeature.prototype.writeFeatureObject = function (feature, opt_options) {
          return abstract();
      };
      /**
       * Encode an array of features as string.
       *
       * @param {Array<import("../Feature.js").default>} features Features.
       * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
       * @return {string} Encoded features.
       * @api
       */
      JSONFeature.prototype.writeFeatures = function (features, opt_options) {
          return JSON.stringify(this.writeFeaturesObject(features, opt_options));
      };
      /**
       * @abstract
       * @param {Array<import("../Feature.js").default>} features Features.
       * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
       * @return {Object} Object.
       */
      JSONFeature.prototype.writeFeaturesObject = function (features, opt_options) {
          return abstract();
      };
      /**
       * Encode a geometry as string.
       *
       * @param {import("../geom/Geometry.js").default} geometry Geometry.
       * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
       * @return {string} Encoded geometry.
       * @api
       */
      JSONFeature.prototype.writeGeometry = function (geometry, opt_options) {
          return JSON.stringify(this.writeGeometryObject(geometry, opt_options));
      };
      /**
       * @abstract
       * @param {import("../geom/Geometry.js").default} geometry Geometry.
       * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
       * @return {Object} Object.
       */
      JSONFeature.prototype.writeGeometryObject = function (geometry, opt_options) {
          return abstract();
      };
      return JSONFeature;
  }(FeatureFormat));
  /**
   * @param {Document|Node|Object|string} source Source.
   * @return {Object} Object.
   */
  function getObject(source) {
      if (typeof source === 'string') {
          var object = JSON.parse(source);
          return object ? /** @type {Object} */ (object) : null;
      }
      else if (source !== null) {
          return source;
      }
      else {
          return null;
      }
  }

  var __extends$15 =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @classdesc
   * An array of {@link module:ol/geom/Geometry} objects.
   *
   * @api
   */
  var GeometryCollection = /** @class */ (function (_super) {
      __extends$15(GeometryCollection, _super);
      /**
       * @param {Array<Geometry>=} opt_geometries Geometries.
       */
      function GeometryCollection(opt_geometries) {
          var _this = _super.call(this) || this;
          /**
           * @private
           * @type {Array<Geometry>}
           */
          _this.geometries_ = opt_geometries ? opt_geometries : null;
          /**
           * @type {Array<import("../events.js").EventsKey>}
           */
          _this.changeEventsKeys_ = [];
          _this.listenGeometriesChange_();
          return _this;
      }
      /**
       * @private
       */
      GeometryCollection.prototype.unlistenGeometriesChange_ = function () {
          this.changeEventsKeys_.forEach(unlistenByKey);
          this.changeEventsKeys_.length = 0;
      };
      /**
       * @private
       */
      GeometryCollection.prototype.listenGeometriesChange_ = function () {
          if (!this.geometries_) {
              return;
          }
          for (var i = 0, ii = this.geometries_.length; i < ii; ++i) {
              this.changeEventsKeys_.push(listen(this.geometries_[i], EventType.CHANGE, this.changed, this));
          }
      };
      /**
       * Make a complete copy of the geometry.
       * @return {!GeometryCollection} Clone.
       * @override
       * @api
       */
      GeometryCollection.prototype.clone = function () {
          var geometryCollection = new GeometryCollection(null);
          geometryCollection.setGeometries(this.geometries_);
          return geometryCollection;
      };
      /**
       * @inheritDoc
       */
      GeometryCollection.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {
          if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
              return minSquaredDistance;
          }
          var geometries = this.geometries_;
          for (var i = 0, ii = geometries.length; i < ii; ++i) {
              minSquaredDistance = geometries[i].closestPointXY(x, y, closestPoint, minSquaredDistance);
          }
          return minSquaredDistance;
      };
      /**
       * @inheritDoc
       */
      GeometryCollection.prototype.containsXY = function (x, y) {
          var geometries = this.geometries_;
          for (var i = 0, ii = geometries.length; i < ii; ++i) {
              if (geometries[i].containsXY(x, y)) {
                  return true;
              }
          }
          return false;
      };
      /**
       * @inheritDoc
       */
      GeometryCollection.prototype.computeExtent = function (extent) {
          createOrUpdateEmpty(extent);
          var geometries = this.geometries_;
          for (var i = 0, ii = geometries.length; i < ii; ++i) {
              extend(extent, geometries[i].getExtent());
          }
          return extent;
      };
      /**
       * Return the geometries that make up this geometry collection.
       * @return {Array<Geometry>} Geometries.
       * @api
       */
      GeometryCollection.prototype.getGeometries = function () {
          return cloneGeometries(this.geometries_);
      };
      /**
       * @return {Array<Geometry>} Geometries.
       */
      GeometryCollection.prototype.getGeometriesArray = function () {
          return this.geometries_;
      };
      /**
       * @return {Array<Geometry>} Geometries.
       */
      GeometryCollection.prototype.getGeometriesArrayRecursive = function () {
          /** @type {Array<Geometry>} */
          var geometriesArray = [];
          var geometries = this.geometries_;
          for (var i = 0, ii = geometries.length; i < ii; ++i) {
              if (geometries[i].getType() === this.getType()) {
                  geometriesArray = geometriesArray.concat(/** @type {GeometryCollection} */ (geometries[i]).getGeometriesArrayRecursive());
              }
              else {
                  geometriesArray.push(geometries[i]);
              }
          }
          return geometriesArray;
      };
      /**
       * @inheritDoc
       */
      GeometryCollection.prototype.getSimplifiedGeometry = function (squaredTolerance) {
          if (this.simplifiedGeometryRevision !== this.getRevision()) {
              this.simplifiedGeometryMaxMinSquaredTolerance = 0;
              this.simplifiedGeometryRevision = this.getRevision();
          }
          if (squaredTolerance < 0 ||
              (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&
                  squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance)) {
              return this;
          }
          var simplifiedGeometries = [];
          var geometries = this.geometries_;
          var simplified = false;
          for (var i = 0, ii = geometries.length; i < ii; ++i) {
              var geometry = geometries[i];
              var simplifiedGeometry = geometry.getSimplifiedGeometry(squaredTolerance);
              simplifiedGeometries.push(simplifiedGeometry);
              if (simplifiedGeometry !== geometry) {
                  simplified = true;
              }
          }
          if (simplified) {
              var simplifiedGeometryCollection = new GeometryCollection(null);
              simplifiedGeometryCollection.setGeometriesArray(simplifiedGeometries);
              return simplifiedGeometryCollection;
          }
          else {
              this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;
              return this;
          }
      };
      /**
       * @inheritDoc
       * @api
       */
      GeometryCollection.prototype.getType = function () {
          return GeometryType.GEOMETRY_COLLECTION;
      };
      /**
       * @inheritDoc
       * @api
       */
      GeometryCollection.prototype.intersectsExtent = function (extent) {
          var geometries = this.geometries_;
          for (var i = 0, ii = geometries.length; i < ii; ++i) {
              if (geometries[i].intersectsExtent(extent)) {
                  return true;
              }
          }
          return false;
      };
      /**
       * @return {boolean} Is empty.
       */
      GeometryCollection.prototype.isEmpty = function () {
          return this.geometries_.length === 0;
      };
      /**
       * @inheritDoc
       * @api
       */
      GeometryCollection.prototype.rotate = function (angle, anchor) {
          var geometries = this.geometries_;
          for (var i = 0, ii = geometries.length; i < ii; ++i) {
              geometries[i].rotate(angle, anchor);
          }
          this.changed();
      };
      /**
       * @inheritDoc
       * @api
       */
      GeometryCollection.prototype.scale = function (sx, opt_sy, opt_anchor) {
          var anchor = opt_anchor;
          if (!anchor) {
              anchor = getCenter(this.getExtent());
          }
          var geometries = this.geometries_;
          for (var i = 0, ii = geometries.length; i < ii; ++i) {
              geometries[i].scale(sx, opt_sy, anchor);
          }
          this.changed();
      };
      /**
       * Set the geometries that make up this geometry collection.
       * @param {Array<Geometry>} geometries Geometries.
       * @api
       */
      GeometryCollection.prototype.setGeometries = function (geometries) {
          this.setGeometriesArray(cloneGeometries(geometries));
      };
      /**
       * @param {Array<Geometry>} geometries Geometries.
       */
      GeometryCollection.prototype.setGeometriesArray = function (geometries) {
          this.unlistenGeometriesChange_();
          this.geometries_ = geometries;
          this.listenGeometriesChange_();
          this.changed();
      };
      /**
       * @inheritDoc
       * @api
       */
      GeometryCollection.prototype.applyTransform = function (transformFn) {
          var geometries = this.geometries_;
          for (var i = 0, ii = geometries.length; i < ii; ++i) {
              geometries[i].applyTransform(transformFn);
          }
          this.changed();
      };
      /**
       * @inheritDoc
       * @api
       */
      GeometryCollection.prototype.translate = function (deltaX, deltaY) {
          var geometries = this.geometries_;
          for (var i = 0, ii = geometries.length; i < ii; ++i) {
              geometries[i].translate(deltaX, deltaY);
          }
          this.changed();
      };
      /**
       * @inheritDoc
       */
      GeometryCollection.prototype.disposeInternal = function () {
          this.unlistenGeometriesChange_();
          _super.prototype.disposeInternal.call(this);
      };
      return GeometryCollection;
  }(Geometry));
  /**
   * @param {Array<Geometry>} geometries Geometries.
   * @return {Array<Geometry>} Cloned geometries.
   */
  function cloneGeometries(geometries) {
      var clonedGeometries = [];
      for (var i = 0, ii = geometries.length; i < ii; ++i) {
          clonedGeometries.push(geometries[i].clone());
      }
      return clonedGeometries;
  }

  /**
   * @module ol/format/GeoJSON
   */
  var __extends$16 =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {import("geojson").GeoJSON} GeoJSONObject
   * @typedef {import("geojson").Feature} GeoJSONFeature
   * @typedef {import("geojson").FeatureCollection} GeoJSONFeatureCollection
   * @typedef {import("geojson").Geometry} GeoJSONGeometry
   * @typedef {import("geojson").Point} GeoJSONPoint
   * @typedef {import("geojson").LineString} GeoJSONLineString
   * @typedef {import("geojson").Polygon} GeoJSONPolygon
   * @typedef {import("geojson").MultiPoint} GeoJSONMultiPoint
   * @typedef {import("geojson").MultiLineString} GeoJSONMultiLineString
   * @typedef {import("geojson").MultiPolygon} GeoJSONMultiPolygon
   * @typedef {import("geojson").GeometryCollection} GeoJSONGeometryCollection
   */
  /**
   * @typedef {Object} Options
   * @property {import("../proj.js").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.
   * @property {import("../proj.js").ProjectionLike} [featureProjection] Projection for features read or
   * written by the format.  Options passed to read or write methods will take precedence.
   * @property {string} [geometryName] Geometry name to use when creating features.
   * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include
   * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader
   * will look for that field to set the geometry name. If both this field is set to `true`
   * and a `geometryName` is provided, the `geometryName` will take precedence.
   */
  /**
   * @classdesc
   * Feature format for reading and writing data in the GeoJSON format.
   *
    * @api
   */
  var GeoJSON = /** @class */ (function (_super) {
      __extends$16(GeoJSON, _super);
      /**
       * @param {Options=} opt_options Options.
       */
      function GeoJSON(opt_options) {
          var _this = this;
          var options = opt_options ? opt_options : {};
          _this = _super.call(this) || this;
          /**
           * @inheritDoc
           */
          _this.dataProjection = get$4(options.dataProjection ?
              options.dataProjection : 'EPSG:4326');
          if (options.featureProjection) {
              _this.defaultFeatureProjection = get$4(options.featureProjection);
          }
          /**
           * Name of the geometry attribute for features.
           * @type {string|undefined}
           * @private
           */
          _this.geometryName_ = options.geometryName;
          /**
           * Look for the geometry name in the feature GeoJSON
           * @type {boolean|undefined}
           * @private
           */
          _this.extractGeometryName_ = options.extractGeometryName;
          return _this;
      }
      /**
       * @inheritDoc
       */
      GeoJSON.prototype.readFeatureFromObject = function (object, opt_options) {
          /**
           * @type {GeoJSONFeature}
           */
          var geoJSONFeature = null;
          if (object['type'] === 'Feature') {
              geoJSONFeature = /** @type {GeoJSONFeature} */ (object);
          }
          else {
              geoJSONFeature = {
                  'type': 'Feature',
                  'geometry': /** @type {GeoJSONGeometry} */ (object),
                  'properties': null
              };
          }
          var geometry = readGeometry(geoJSONFeature['geometry'], opt_options);
          var feature = new Feature();
          if (this.geometryName_) {
              feature.setGeometryName(this.geometryName_);
          }
          else if (this.extractGeometryName_ && 'geometry_name' in geoJSONFeature !== undefined) {
              feature.setGeometryName(geoJSONFeature['geometry_name']);
          }
          feature.setGeometry(geometry);
          if ('id' in geoJSONFeature) {
              feature.setId(geoJSONFeature['id']);
          }
          if (geoJSONFeature['properties']) {
              feature.setProperties(geoJSONFeature['properties'], true);
          }
          return feature;
      };
      /**
       * @inheritDoc
       */
      GeoJSON.prototype.readFeaturesFromObject = function (object, opt_options) {
          var geoJSONObject = /** @type {GeoJSONObject} */ (object);
          /** @type {Array<import("../Feature.js").default>} */
          var features = null;
          if (geoJSONObject['type'] === 'FeatureCollection') {
              var geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */ (object);
              features = [];
              var geoJSONFeatures = geoJSONFeatureCollection['features'];
              for (var i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {
                  features.push(this.readFeatureFromObject(geoJSONFeatures[i], opt_options));
              }
          }
          else {
              features = [this.readFeatureFromObject(object, opt_options)];
          }
          return features;
      };
      /**
       * @inheritDoc
       */
      GeoJSON.prototype.readGeometryFromObject = function (object, opt_options) {
          return readGeometry(/** @type {GeoJSONGeometry} */ (object), opt_options);
      };
      /**
       * @inheritDoc
       */
      GeoJSON.prototype.readProjectionFromObject = function (object) {
          var crs = object['crs'];
          var projection;
          if (crs) {
              if (crs['type'] == 'name') {
                  projection = get$4(crs['properties']['name']);
              }
              else if (crs['type'] === 'EPSG') {
                  projection = get$4('EPSG:' + crs['properties']['code']);
              }
              else {
                  assert(false, 36); // Unknown SRS type
              }
          }
          else {
              projection = this.dataProjection;
          }
          return (
          /** @type {import("../proj/Projection.js").default} */ (projection));
      };
      /**
       * Encode a feature as a GeoJSON Feature object.
       *
       * @param {import("../Feature.js").default} feature Feature.
       * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
       * @return {GeoJSONFeature} Object.
       * @override
       * @api
       */
      GeoJSON.prototype.writeFeatureObject = function (feature, opt_options) {
          opt_options = this.adaptOptions(opt_options);
          /** @type {GeoJSONFeature} */
          var object = {
              'type': 'Feature',
              geometry: null,
              properties: null
          };
          var id = feature.getId();
          if (id !== undefined) {
              object.id = id;
          }
          var geometry = feature.getGeometry();
          if (geometry) {
              object.geometry = writeGeometry(geometry, opt_options);
          }
          var properties = feature.getProperties();
          delete properties[feature.getGeometryName()];
          if (!isEmpty(properties)) {
              object.properties = properties;
          }
          return object;
      };
      /**
       * Encode an array of features as a GeoJSON object.
       *
       * @param {Array<import("../Feature.js").default>} features Features.
       * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
       * @return {GeoJSONFeatureCollection} GeoJSON Object.
       * @override
       * @api
       */
      GeoJSON.prototype.writeFeaturesObject = function (features, opt_options) {
          opt_options = this.adaptOptions(opt_options);
          var objects = [];
          for (var i = 0, ii = features.length; i < ii; ++i) {
              objects.push(this.writeFeatureObject(features[i], opt_options));
          }
          return {
              type: 'FeatureCollection',
              features: objects
          };
      };
      /**
       * Encode a geometry as a GeoJSON object.
       *
       * @param {import("../geom/Geometry.js").default} geometry Geometry.
       * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
       * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.
       * @override
       * @api
       */
      GeoJSON.prototype.writeGeometryObject = function (geometry, opt_options) {
          return writeGeometry(geometry, this.adaptOptions(opt_options));
      };
      return GeoJSON;
  }(JSONFeature));
  /**
   * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.
   * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
   * @return {import("../geom/Geometry.js").default} Geometry.
   */
  function readGeometry(object, opt_options) {
      if (!object) {
          return null;
      }
      /**
       * @type {import("../geom/Geometry.js").default}
       */
      var geometry;
      switch (object['type']) {
          case GeometryType.POINT: {
              geometry = readPointGeometry(/** @type {GeoJSONPoint} */ (object));
              break;
          }
          case GeometryType.LINE_STRING: {
              geometry = readLineStringGeometry(/** @type {GeoJSONLineString} */ (object));
              break;
          }
          case GeometryType.POLYGON: {
              geometry = readPolygonGeometry(/** @type {GeoJSONPolygon} */ (object));
              break;
          }
          case GeometryType.MULTI_POINT: {
              geometry = readMultiPointGeometry(/** @type {GeoJSONMultiPoint} */ (object));
              break;
          }
          case GeometryType.MULTI_LINE_STRING: {
              geometry = readMultiLineStringGeometry(/** @type {GeoJSONMultiLineString} */ (object));
              break;
          }
          case GeometryType.MULTI_POLYGON: {
              geometry = readMultiPolygonGeometry(/** @type {GeoJSONMultiPolygon} */ (object));
              break;
          }
          case GeometryType.GEOMETRY_COLLECTION: {
              geometry = readGeometryCollectionGeometry(/** @type {GeoJSONGeometryCollection} */ (object));
              break;
          }
          default: {
              throw new Error('Unsupported GeoJSON type: ' + object.type);
          }
      }
      return transformGeometryWithOptions(geometry, false, opt_options);
  }
  /**
   * @param {GeoJSONGeometryCollection} object Object.
   * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
   * @return {GeometryCollection} Geometry collection.
   */
  function readGeometryCollectionGeometry(object, opt_options) {
      var geometries = object['geometries'].map(
      /**
       * @param {GeoJSONGeometry} geometry Geometry.
       * @return {import("../geom/Geometry.js").default} geometry Geometry.
       */
      function (geometry) {
          return readGeometry(geometry, opt_options);
      });
      return new GeometryCollection(geometries);
  }
  /**
   * @param {GeoJSONPoint} object Object.
   * @return {Point} Point.
   */
  function readPointGeometry(object) {
      return new Point(object['coordinates']);
  }
  /**
   * @param {GeoJSONLineString} object Object.
   * @return {LineString} LineString.
   */
  function readLineStringGeometry(object) {
      return new LineString(object['coordinates']);
  }
  /**
   * @param {GeoJSONMultiLineString} object Object.
   * @return {MultiLineString} MultiLineString.
   */
  function readMultiLineStringGeometry(object) {
      return new MultiLineString(object['coordinates']);
  }
  /**
   * @param {GeoJSONMultiPoint} object Object.
   * @return {MultiPoint} MultiPoint.
   */
  function readMultiPointGeometry(object) {
      return new MultiPoint(object['coordinates']);
  }
  /**
   * @param {GeoJSONMultiPolygon} object Object.
   * @return {MultiPolygon} MultiPolygon.
   */
  function readMultiPolygonGeometry(object) {
      return new MultiPolygon(object['coordinates']);
  }
  /**
   * @param {GeoJSONPolygon} object Object.
   * @return {Polygon} Polygon.
   */
  function readPolygonGeometry(object) {
      return new Polygon(object['coordinates']);
  }
  /**
   * @param {import("../geom/Geometry.js").default} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
   * @return {GeoJSONGeometry} GeoJSON geometry.
   */
  function writeGeometry(geometry, opt_options) {
      geometry = transformGeometryWithOptions(geometry, true, opt_options);
      var type = geometry.getType();
      /** @type {GeoJSONGeometry} */
      var geoJSON;
      switch (type) {
          case GeometryType.POINT: {
              geoJSON = writePointGeometry(/** @type {Point} */ (geometry));
              break;
          }
          case GeometryType.LINE_STRING: {
              geoJSON = writeLineStringGeometry(/** @type {LineString} */ (geometry));
              break;
          }
          case GeometryType.POLYGON: {
              geoJSON = writePolygonGeometry(/** @type {Polygon} */ (geometry), opt_options);
              break;
          }
          case GeometryType.MULTI_POINT: {
              geoJSON = writeMultiPointGeometry(/** @type {MultiPoint} */ (geometry));
              break;
          }
          case GeometryType.MULTI_LINE_STRING: {
              geoJSON = writeMultiLineStringGeometry(/** @type {MultiLineString} */ (geometry));
              break;
          }
          case GeometryType.MULTI_POLYGON: {
              geoJSON = writeMultiPolygonGeometry(/** @type {MultiPolygon} */ (geometry), opt_options);
              break;
          }
          case GeometryType.GEOMETRY_COLLECTION: {
              geoJSON = writeGeometryCollectionGeometry(/** @type {GeometryCollection} */ (geometry), opt_options);
              break;
          }
          case GeometryType.CIRCLE: {
              geoJSON = {
                  type: 'GeometryCollection',
                  geometries: []
              };
              break;
          }
          default: {
              throw new Error('Unsupported geometry type: ' + type);
          }
      }
      return geoJSON;
  }
  /**
   * @param {GeometryCollection} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
   * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.
   */
  function writeGeometryCollectionGeometry(geometry, opt_options) {
      var geometries = geometry.getGeometriesArray().map(function (geometry) {
          var options = assign({}, opt_options);
          delete options.featureProjection;
          return writeGeometry(geometry, options);
      });
      return {
          type: 'GeometryCollection',
          geometries: geometries
      };
  }
  /**
   * @param {LineString} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
   * @return {GeoJSONGeometry} GeoJSON geometry.
   */
  function writeLineStringGeometry(geometry, opt_options) {
      return {
          type: 'LineString',
          coordinates: geometry.getCoordinates()
      };
  }
  /**
   * @param {MultiLineString} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
   * @return {GeoJSONGeometry} GeoJSON geometry.
   */
  function writeMultiLineStringGeometry(geometry, opt_options) {
      return {
          type: 'MultiLineString',
          coordinates: geometry.getCoordinates()
      };
  }
  /**
   * @param {MultiPoint} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
   * @return {GeoJSONGeometry} GeoJSON geometry.
   */
  function writeMultiPointGeometry(geometry, opt_options) {
      return {
          type: 'MultiPoint',
          coordinates: geometry.getCoordinates()
      };
  }
  /**
   * @param {MultiPolygon} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
   * @return {GeoJSONGeometry} GeoJSON geometry.
   */
  function writeMultiPolygonGeometry(geometry, opt_options) {
      var right;
      if (opt_options) {
          right = opt_options.rightHanded;
      }
      return {
          type: 'MultiPolygon',
          coordinates: geometry.getCoordinates(right)
      };
  }
  /**
   * @param {Point} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
   * @return {GeoJSONGeometry} GeoJSON geometry.
   */
  function writePointGeometry(geometry, opt_options) {
      return {
          type: 'Point',
          coordinates: geometry.getCoordinates()
      };
  }
  /**
   * @param {Polygon} geometry Geometry.
   * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
   * @return {GeoJSONGeometry} GeoJSON geometry.
   */
  function writePolygonGeometry(geometry, opt_options) {
      var right;
      if (opt_options) {
          right = opt_options.rightHanded;
      }
      return {
          type: 'Polygon',
          coordinates: geometry.getCoordinates(right)
      };
  }

  var read = function (buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = (nBytes * 8) - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? (nBytes - 1) : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];

    i += d;

    e = s & ((1 << (-nBits)) - 1);
    s >>= (-nBits);
    nBits += eLen;
    for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

    m = e & ((1 << (-nBits)) - 1);
    e >>= (-nBits);
    nBits += mLen;
    for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : ((s ? -1 : 1) * Infinity)
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
  };

  var write = function (buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = (nBytes * 8) - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
    var i = isLE ? 0 : (nBytes - 1);
    var d = isLE ? 1 : -1;
    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

    value = Math.abs(value);

    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }

      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = ((value * c) - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }

    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

    e = (e << mLen) | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

    buffer[offset + i - d] |= s * 128;
  };

  var ieee754 = {
  	read: read,
  	write: write
  };

  var pbf = Pbf;



  function Pbf(buf) {
      this.buf = ArrayBuffer.isView && ArrayBuffer.isView(buf) ? buf : new Uint8Array(buf || 0);
      this.pos = 0;
      this.type = 0;
      this.length = this.buf.length;
  }

  Pbf.Varint  = 0; // varint: int32, int64, uint32, uint64, sint32, sint64, bool, enum
  Pbf.Fixed64 = 1; // 64-bit: double, fixed64, sfixed64
  Pbf.Bytes   = 2; // length-delimited: string, bytes, embedded messages, packed repeated fields
  Pbf.Fixed32 = 5; // 32-bit: float, fixed32, sfixed32

  var SHIFT_LEFT_32 = (1 << 16) * (1 << 16),
      SHIFT_RIGHT_32 = 1 / SHIFT_LEFT_32;

  // Threshold chosen based on both benchmarking and knowledge about browser string
  // data structures (which currently switch structure types at 12 bytes or more)
  var TEXT_DECODER_MIN_LENGTH = 12;
  var utf8TextDecoder = typeof TextDecoder === 'undefined' ? null : new TextDecoder('utf8');

  Pbf.prototype = {

      destroy: function() {
          this.buf = null;
      },

      // === READING =================================================================

      readFields: function(readField, result, end) {
          end = end || this.length;

          while (this.pos < end) {
              var val = this.readVarint(),
                  tag = val >> 3,
                  startPos = this.pos;

              this.type = val & 0x7;
              readField(tag, result, this);

              if (this.pos === startPos) this.skip(val);
          }
          return result;
      },

      readMessage: function(readField, result) {
          return this.readFields(readField, result, this.readVarint() + this.pos);
      },

      readFixed32: function() {
          var val = readUInt32(this.buf, this.pos);
          this.pos += 4;
          return val;
      },

      readSFixed32: function() {
          var val = readInt32(this.buf, this.pos);
          this.pos += 4;
          return val;
      },

      // 64-bit int handling is based on github.com/dpw/node-buffer-more-ints (MIT-licensed)

      readFixed64: function() {
          var val = readUInt32(this.buf, this.pos) + readUInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;
          this.pos += 8;
          return val;
      },

      readSFixed64: function() {
          var val = readUInt32(this.buf, this.pos) + readInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;
          this.pos += 8;
          return val;
      },

      readFloat: function() {
          var val = ieee754.read(this.buf, this.pos, true, 23, 4);
          this.pos += 4;
          return val;
      },

      readDouble: function() {
          var val = ieee754.read(this.buf, this.pos, true, 52, 8);
          this.pos += 8;
          return val;
      },

      readVarint: function(isSigned) {
          var buf = this.buf,
              val, b;

          b = buf[this.pos++]; val  =  b & 0x7f;        if (b < 0x80) return val;
          b = buf[this.pos++]; val |= (b & 0x7f) << 7;  if (b < 0x80) return val;
          b = buf[this.pos++]; val |= (b & 0x7f) << 14; if (b < 0x80) return val;
          b = buf[this.pos++]; val |= (b & 0x7f) << 21; if (b < 0x80) return val;
          b = buf[this.pos];   val |= (b & 0x0f) << 28;

          return readVarintRemainder(val, isSigned, this);
      },

      readVarint64: function() { // for compatibility with v2.0.1
          return this.readVarint(true);
      },

      readSVarint: function() {
          var num = this.readVarint();
          return num % 2 === 1 ? (num + 1) / -2 : num / 2; // zigzag encoding
      },

      readBoolean: function() {
          return Boolean(this.readVarint());
      },

      readString: function() {
          var end = this.readVarint() + this.pos;
          var pos = this.pos;
          this.pos = end;

          if (end - pos >= TEXT_DECODER_MIN_LENGTH && utf8TextDecoder) {
              // longer strings are fast with the built-in browser TextDecoder API
              return readUtf8TextDecoder(this.buf, pos, end);
          }
          // short strings are fast with our custom implementation
          return readUtf8(this.buf, pos, end);
      },

      readBytes: function() {
          var end = this.readVarint() + this.pos,
              buffer = this.buf.subarray(this.pos, end);
          this.pos = end;
          return buffer;
      },

      // verbose for performance reasons; doesn't affect gzipped size

      readPackedVarint: function(arr, isSigned) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readVarint(isSigned));
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readVarint(isSigned));
          return arr;
      },
      readPackedSVarint: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readSVarint());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readSVarint());
          return arr;
      },
      readPackedBoolean: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readBoolean());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readBoolean());
          return arr;
      },
      readPackedFloat: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readFloat());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readFloat());
          return arr;
      },
      readPackedDouble: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readDouble());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readDouble());
          return arr;
      },
      readPackedFixed32: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readFixed32());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readFixed32());
          return arr;
      },
      readPackedSFixed32: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readSFixed32());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readSFixed32());
          return arr;
      },
      readPackedFixed64: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readFixed64());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readFixed64());
          return arr;
      },
      readPackedSFixed64: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readSFixed64());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readSFixed64());
          return arr;
      },

      skip: function(val) {
          var type = val & 0x7;
          if (type === Pbf.Varint) while (this.buf[this.pos++] > 0x7f) {}
          else if (type === Pbf.Bytes) this.pos = this.readVarint() + this.pos;
          else if (type === Pbf.Fixed32) this.pos += 4;
          else if (type === Pbf.Fixed64) this.pos += 8;
          else throw new Error('Unimplemented type: ' + type);
      },

      // === WRITING =================================================================

      writeTag: function(tag, type) {
          this.writeVarint((tag << 3) | type);
      },

      realloc: function(min) {
          var length = this.length || 16;

          while (length < this.pos + min) length *= 2;

          if (length !== this.length) {
              var buf = new Uint8Array(length);
              buf.set(this.buf);
              this.buf = buf;
              this.length = length;
          }
      },

      finish: function() {
          this.length = this.pos;
          this.pos = 0;
          return this.buf.subarray(0, this.length);
      },

      writeFixed32: function(val) {
          this.realloc(4);
          writeInt32(this.buf, val, this.pos);
          this.pos += 4;
      },

      writeSFixed32: function(val) {
          this.realloc(4);
          writeInt32(this.buf, val, this.pos);
          this.pos += 4;
      },

      writeFixed64: function(val) {
          this.realloc(8);
          writeInt32(this.buf, val & -1, this.pos);
          writeInt32(this.buf, Math.floor(val * SHIFT_RIGHT_32), this.pos + 4);
          this.pos += 8;
      },

      writeSFixed64: function(val) {
          this.realloc(8);
          writeInt32(this.buf, val & -1, this.pos);
          writeInt32(this.buf, Math.floor(val * SHIFT_RIGHT_32), this.pos + 4);
          this.pos += 8;
      },

      writeVarint: function(val) {
          val = +val || 0;

          if (val > 0xfffffff || val < 0) {
              writeBigVarint(val, this);
              return;
          }

          this.realloc(4);

          this.buf[this.pos++] =           val & 0x7f  | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;
          this.buf[this.pos++] = ((val >>>= 7) & 0x7f) | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;
          this.buf[this.pos++] = ((val >>>= 7) & 0x7f) | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;
          this.buf[this.pos++] =   (val >>> 7) & 0x7f;
      },

      writeSVarint: function(val) {
          this.writeVarint(val < 0 ? -val * 2 - 1 : val * 2);
      },

      writeBoolean: function(val) {
          this.writeVarint(Boolean(val));
      },

      writeString: function(str) {
          str = String(str);
          this.realloc(str.length * 4);

          this.pos++; // reserve 1 byte for short string length

          var startPos = this.pos;
          // write the string directly to the buffer and see how much was written
          this.pos = writeUtf8(this.buf, str, this.pos);
          var len = this.pos - startPos;

          if (len >= 0x80) makeRoomForExtraLength(startPos, len, this);

          // finally, write the message length in the reserved place and restore the position
          this.pos = startPos - 1;
          this.writeVarint(len);
          this.pos += len;
      },

      writeFloat: function(val) {
          this.realloc(4);
          ieee754.write(this.buf, val, this.pos, true, 23, 4);
          this.pos += 4;
      },

      writeDouble: function(val) {
          this.realloc(8);
          ieee754.write(this.buf, val, this.pos, true, 52, 8);
          this.pos += 8;
      },

      writeBytes: function(buffer) {
          var len = buffer.length;
          this.writeVarint(len);
          this.realloc(len);
          for (var i = 0; i < len; i++) this.buf[this.pos++] = buffer[i];
      },

      writeRawMessage: function(fn, obj) {
          this.pos++; // reserve 1 byte for short message length

          // write the message directly to the buffer and see how much was written
          var startPos = this.pos;
          fn(obj, this);
          var len = this.pos - startPos;

          if (len >= 0x80) makeRoomForExtraLength(startPos, len, this);

          // finally, write the message length in the reserved place and restore the position
          this.pos = startPos - 1;
          this.writeVarint(len);
          this.pos += len;
      },

      writeMessage: function(tag, fn, obj) {
          this.writeTag(tag, Pbf.Bytes);
          this.writeRawMessage(fn, obj);
      },

      writePackedVarint:   function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedVarint, arr);   },
      writePackedSVarint:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedSVarint, arr);  },
      writePackedBoolean:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedBoolean, arr);  },
      writePackedFloat:    function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedFloat, arr);    },
      writePackedDouble:   function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedDouble, arr);   },
      writePackedFixed32:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedFixed32, arr);  },
      writePackedSFixed32: function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedSFixed32, arr); },
      writePackedFixed64:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedFixed64, arr);  },
      writePackedSFixed64: function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedSFixed64, arr); },

      writeBytesField: function(tag, buffer) {
          this.writeTag(tag, Pbf.Bytes);
          this.writeBytes(buffer);
      },
      writeFixed32Field: function(tag, val) {
          this.writeTag(tag, Pbf.Fixed32);
          this.writeFixed32(val);
      },
      writeSFixed32Field: function(tag, val) {
          this.writeTag(tag, Pbf.Fixed32);
          this.writeSFixed32(val);
      },
      writeFixed64Field: function(tag, val) {
          this.writeTag(tag, Pbf.Fixed64);
          this.writeFixed64(val);
      },
      writeSFixed64Field: function(tag, val) {
          this.writeTag(tag, Pbf.Fixed64);
          this.writeSFixed64(val);
      },
      writeVarintField: function(tag, val) {
          this.writeTag(tag, Pbf.Varint);
          this.writeVarint(val);
      },
      writeSVarintField: function(tag, val) {
          this.writeTag(tag, Pbf.Varint);
          this.writeSVarint(val);
      },
      writeStringField: function(tag, str) {
          this.writeTag(tag, Pbf.Bytes);
          this.writeString(str);
      },
      writeFloatField: function(tag, val) {
          this.writeTag(tag, Pbf.Fixed32);
          this.writeFloat(val);
      },
      writeDoubleField: function(tag, val) {
          this.writeTag(tag, Pbf.Fixed64);
          this.writeDouble(val);
      },
      writeBooleanField: function(tag, val) {
          this.writeVarintField(tag, Boolean(val));
      }
  };

  function readVarintRemainder(l, s, p) {
      var buf = p.buf,
          h, b;

      b = buf[p.pos++]; h  = (b & 0x70) >> 4;  if (b < 0x80) return toNum(l, h, s);
      b = buf[p.pos++]; h |= (b & 0x7f) << 3;  if (b < 0x80) return toNum(l, h, s);
      b = buf[p.pos++]; h |= (b & 0x7f) << 10; if (b < 0x80) return toNum(l, h, s);
      b = buf[p.pos++]; h |= (b & 0x7f) << 17; if (b < 0x80) return toNum(l, h, s);
      b = buf[p.pos++]; h |= (b & 0x7f) << 24; if (b < 0x80) return toNum(l, h, s);
      b = buf[p.pos++]; h |= (b & 0x01) << 31; if (b < 0x80) return toNum(l, h, s);

      throw new Error('Expected varint not more than 10 bytes');
  }

  function readPackedEnd(pbf) {
      return pbf.type === Pbf.Bytes ?
          pbf.readVarint() + pbf.pos : pbf.pos + 1;
  }

  function toNum(low, high, isSigned) {
      if (isSigned) {
          return high * 0x100000000 + (low >>> 0);
      }

      return ((high >>> 0) * 0x100000000) + (low >>> 0);
  }

  function writeBigVarint(val, pbf) {
      var low, high;

      if (val >= 0) {
          low  = (val % 0x100000000) | 0;
          high = (val / 0x100000000) | 0;
      } else {
          low  = ~(-val % 0x100000000);
          high = ~(-val / 0x100000000);

          if (low ^ 0xffffffff) {
              low = (low + 1) | 0;
          } else {
              low = 0;
              high = (high + 1) | 0;
          }
      }

      if (val >= 0x10000000000000000 || val < -0x10000000000000000) {
          throw new Error('Given varint doesn\'t fit into 10 bytes');
      }

      pbf.realloc(10);

      writeBigVarintLow(low, high, pbf);
      writeBigVarintHigh(high, pbf);
  }

  function writeBigVarintLow(low, high, pbf) {
      pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
      pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
      pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
      pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
      pbf.buf[pbf.pos]   = low & 0x7f;
  }

  function writeBigVarintHigh(high, pbf) {
      var lsb = (high & 0x07) << 4;

      pbf.buf[pbf.pos++] |= lsb         | ((high >>>= 3) ? 0x80 : 0); if (!high) return;
      pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
      pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
      pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
      pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
      pbf.buf[pbf.pos++]  = high & 0x7f;
  }

  function makeRoomForExtraLength(startPos, len, pbf) {
      var extraLen =
          len <= 0x3fff ? 1 :
          len <= 0x1fffff ? 2 :
          len <= 0xfffffff ? 3 : Math.floor(Math.log(len) / (Math.LN2 * 7));

      // if 1 byte isn't enough for encoding message length, shift the data to the right
      pbf.realloc(extraLen);
      for (var i = pbf.pos - 1; i >= startPos; i--) pbf.buf[i + extraLen] = pbf.buf[i];
  }

  function writePackedVarint(arr, pbf)   { for (var i = 0; i < arr.length; i++) pbf.writeVarint(arr[i]);   }
  function writePackedSVarint(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeSVarint(arr[i]);  }
  function writePackedFloat(arr, pbf)    { for (var i = 0; i < arr.length; i++) pbf.writeFloat(arr[i]);    }
  function writePackedDouble(arr, pbf)   { for (var i = 0; i < arr.length; i++) pbf.writeDouble(arr[i]);   }
  function writePackedBoolean(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeBoolean(arr[i]);  }
  function writePackedFixed32(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeFixed32(arr[i]);  }
  function writePackedSFixed32(arr, pbf) { for (var i = 0; i < arr.length; i++) pbf.writeSFixed32(arr[i]); }
  function writePackedFixed64(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeFixed64(arr[i]);  }
  function writePackedSFixed64(arr, pbf) { for (var i = 0; i < arr.length; i++) pbf.writeSFixed64(arr[i]); }

  // Buffer code below from https://github.com/feross/buffer, MIT-licensed

  function readUInt32(buf, pos) {
      return ((buf[pos]) |
          (buf[pos + 1] << 8) |
          (buf[pos + 2] << 16)) +
          (buf[pos + 3] * 0x1000000);
  }

  function writeInt32(buf, val, pos) {
      buf[pos] = val;
      buf[pos + 1] = (val >>> 8);
      buf[pos + 2] = (val >>> 16);
      buf[pos + 3] = (val >>> 24);
  }

  function readInt32(buf, pos) {
      return ((buf[pos]) |
          (buf[pos + 1] << 8) |
          (buf[pos + 2] << 16)) +
          (buf[pos + 3] << 24);
  }

  function readUtf8(buf, pos, end) {
      var str = '';
      var i = pos;

      while (i < end) {
          var b0 = buf[i];
          var c = null; // codepoint
          var bytesPerSequence =
              b0 > 0xEF ? 4 :
              b0 > 0xDF ? 3 :
              b0 > 0xBF ? 2 : 1;

          if (i + bytesPerSequence > end) break;

          var b1, b2, b3;

          if (bytesPerSequence === 1) {
              if (b0 < 0x80) {
                  c = b0;
              }
          } else if (bytesPerSequence === 2) {
              b1 = buf[i + 1];
              if ((b1 & 0xC0) === 0x80) {
                  c = (b0 & 0x1F) << 0x6 | (b1 & 0x3F);
                  if (c <= 0x7F) {
                      c = null;
                  }
              }
          } else if (bytesPerSequence === 3) {
              b1 = buf[i + 1];
              b2 = buf[i + 2];
              if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80) {
                  c = (b0 & 0xF) << 0xC | (b1 & 0x3F) << 0x6 | (b2 & 0x3F);
                  if (c <= 0x7FF || (c >= 0xD800 && c <= 0xDFFF)) {
                      c = null;
                  }
              }
          } else if (bytesPerSequence === 4) {
              b1 = buf[i + 1];
              b2 = buf[i + 2];
              b3 = buf[i + 3];
              if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {
                  c = (b0 & 0xF) << 0x12 | (b1 & 0x3F) << 0xC | (b2 & 0x3F) << 0x6 | (b3 & 0x3F);
                  if (c <= 0xFFFF || c >= 0x110000) {
                      c = null;
                  }
              }
          }

          if (c === null) {
              c = 0xFFFD;
              bytesPerSequence = 1;

          } else if (c > 0xFFFF) {
              c -= 0x10000;
              str += String.fromCharCode(c >>> 10 & 0x3FF | 0xD800);
              c = 0xDC00 | c & 0x3FF;
          }

          str += String.fromCharCode(c);
          i += bytesPerSequence;
      }

      return str;
  }

  function readUtf8TextDecoder(buf, pos, end) {
      return utf8TextDecoder.decode(buf.subarray(pos, end));
  }

  function writeUtf8(buf, str, pos) {
      for (var i = 0, c, lead; i < str.length; i++) {
          c = str.charCodeAt(i); // code point

          if (c > 0xD7FF && c < 0xE000) {
              if (lead) {
                  if (c < 0xDC00) {
                      buf[pos++] = 0xEF;
                      buf[pos++] = 0xBF;
                      buf[pos++] = 0xBD;
                      lead = c;
                      continue;
                  } else {
                      c = lead - 0xD800 << 10 | c - 0xDC00 | 0x10000;
                      lead = null;
                  }
              } else {
                  if (c > 0xDBFF || (i + 1 === str.length)) {
                      buf[pos++] = 0xEF;
                      buf[pos++] = 0xBF;
                      buf[pos++] = 0xBD;
                  } else {
                      lead = c;
                  }
                  continue;
              }
          } else if (lead) {
              buf[pos++] = 0xEF;
              buf[pos++] = 0xBF;
              buf[pos++] = 0xBD;
              lead = null;
          }

          if (c < 0x80) {
              buf[pos++] = c;
          } else {
              if (c < 0x800) {
                  buf[pos++] = c >> 0x6 | 0xC0;
              } else {
                  if (c < 0x10000) {
                      buf[pos++] = c >> 0xC | 0xE0;
                  } else {
                      buf[pos++] = c >> 0x12 | 0xF0;
                      buf[pos++] = c >> 0xC & 0x3F | 0x80;
                  }
                  buf[pos++] = c >> 0x6 & 0x3F | 0x80;
              }
              buf[pos++] = c & 0x3F | 0x80;
          }
      }
      return pos;
  }

  /**
   * @module ol/format/MVT
   */
  //FIXME Implement projection handling
  var __extends$17 =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {Object} Options
   * @property {import("../Feature.js").FeatureClass} [featureClass] Class for features returned by
   * {@link module:ol/format/MVT#readFeatures}. Set to {@link module:ol/Feature~Feature} to get full editing and geometry
   * support at the cost of decreased rendering performance. The default is
   * {@link module:ol/render/Feature~RenderFeature}, which is optimized for rendering and hit detection.
   * @property {string} [geometryName='geometry'] Geometry name to use when creating features.
   * @property {string} [layerName='layer'] Name of the feature attribute that holds the layer name.
   * @property {Array<string>} [layers] Layers to read features from. If not provided, features will be read from all
   * @property {string} [idProperty] Optional property that will be assigned as the feature id and removed from the properties.
   * layers.
   */
  /**
   * @classdesc
   * Feature format for reading data in the Mapbox MVT format.
   *
   * @param {Options=} opt_options Options.
   * @api
   */
  var MVT = /** @class */ (function (_super) {
      __extends$17(MVT, _super);
      /**
       * @param {Options=} opt_options Options.
       */
      function MVT(opt_options) {
          var _this = _super.call(this) || this;
          var options = opt_options ? opt_options : {};
          /**
           * @type {Projection}
           */
          _this.dataProjection = new Projection({
              code: '',
              units: Units.TILE_PIXELS
          });
          /**
           * @private
           * @type {import("../Feature.js").FeatureClass}
           */
          _this.featureClass_ = options.featureClass ? options.featureClass : RenderFeature;
          /**
           * @private
           * @type {string|undefined}
           */
          _this.geometryName_ = options.geometryName;
          /**
           * @private
           * @type {string}
           */
          _this.layerName_ = options.layerName ? options.layerName : 'layer';
          /**
           * @private
           * @type {Array<string>}
           */
          _this.layers_ = options.layers ? options.layers : null;
          /**
           * @private
           * @type {string}
           */
          _this.idProperty_ = options.idProperty;
          return _this;
      }
      /**
       * Read the raw geometry from the pbf offset stored in a raw feature's geometry
       * property.
       * @param {PBF} pbf PBF.
       * @param {Object} feature Raw feature.
       * @param {Array<number>} flatCoordinates Array to store flat coordinates in.
       * @param {Array<number>} ends Array to store ends in.
       * @private
       */
      MVT.prototype.readRawGeometry_ = function (pbf, feature, flatCoordinates, ends) {
          pbf.pos = feature.geometry;
          var end = pbf.readVarint() + pbf.pos;
          var cmd = 1;
          var length = 0;
          var x = 0;
          var y = 0;
          var coordsLen = 0;
          var currentEnd = 0;
          while (pbf.pos < end) {
              if (!length) {
                  var cmdLen = pbf.readVarint();
                  cmd = cmdLen & 0x7;
                  length = cmdLen >> 3;
              }
              length--;
              if (cmd === 1 || cmd === 2) {
                  x += pbf.readSVarint();
                  y += pbf.readSVarint();
                  if (cmd === 1) { // moveTo
                      if (coordsLen > currentEnd) {
                          ends.push(coordsLen);
                          currentEnd = coordsLen;
                      }
                  }
                  flatCoordinates.push(x, y);
                  coordsLen += 2;
              }
              else if (cmd === 7) {
                  if (coordsLen > currentEnd) {
                      // close polygon
                      flatCoordinates.push(flatCoordinates[currentEnd], flatCoordinates[currentEnd + 1]);
                      coordsLen += 2;
                  }
              }
              else {
                  assert(false, 59); // Invalid command found in the PBF
              }
          }
          if (coordsLen > currentEnd) {
              ends.push(coordsLen);
              currentEnd = coordsLen;
          }
      };
      /**
       * @private
       * @param {PBF} pbf PBF
       * @param {Object} rawFeature Raw Mapbox feature.
       * @param {import("./Feature.js").ReadOptions} options Read options.
       * @return {import("../Feature.js").FeatureLike} Feature.
       */
      MVT.prototype.createFeature_ = function (pbf, rawFeature, options) {
          var type = rawFeature.type;
          if (type === 0) {
              return null;
          }
          var feature;
          var values = rawFeature.properties;
          var id;
          if (!this.idProperty_) {
              id = rawFeature.id;
          }
          else {
              id = values[this.idProperty_];
              delete values[this.idProperty_];
          }
          values[this.layerName_] = rawFeature.layer.name;
          var flatCoordinates = [];
          var ends = [];
          this.readRawGeometry_(pbf, rawFeature, flatCoordinates, ends);
          var geometryType = getGeometryType(type, ends.length);
          if (this.featureClass_ === RenderFeature) {
              feature = new this.featureClass_(geometryType, flatCoordinates, ends, values, id);
              feature.transform(options.dataProjection, options.featureProjection);
          }
          else {
              var geom = void 0;
              if (geometryType == GeometryType.POLYGON) {
                  var endss = [];
                  var offset = 0;
                  var prevEndIndex = 0;
                  for (var i = 0, ii = ends.length; i < ii; ++i) {
                      var end = ends[i];
                      if (!linearRingIsClockwise(flatCoordinates, offset, end, 2)) {
                          endss.push(ends.slice(prevEndIndex, i));
                          prevEndIndex = i;
                      }
                      offset = end;
                  }
                  if (endss.length > 1) {
                      geom = new MultiPolygon(flatCoordinates, GeometryLayout.XY, endss);
                  }
                  else {
                      geom = new Polygon(flatCoordinates, GeometryLayout.XY, ends);
                  }
              }
              else {
                  geom = geometryType === GeometryType.POINT ? new Point(flatCoordinates, GeometryLayout.XY) :
                      geometryType === GeometryType.LINE_STRING ? new LineString(flatCoordinates, GeometryLayout.XY) :
                          geometryType === GeometryType.POLYGON ? new Polygon(flatCoordinates, GeometryLayout.XY, ends) :
                              geometryType === GeometryType.MULTI_POINT ? new MultiPoint(flatCoordinates, GeometryLayout.XY) :
                                  geometryType === GeometryType.MULTI_LINE_STRING ? new MultiLineString(flatCoordinates, GeometryLayout.XY, ends) :
                                      null;
              }
              var ctor = /** @type {typeof import("../Feature.js").default} */ (this.featureClass_);
              feature = new ctor();
              if (this.geometryName_) {
                  feature.setGeometryName(this.geometryName_);
              }
              var geometry = transformGeometryWithOptions(geom, false, options);
              feature.setGeometry(geometry);
              feature.setId(id);
              feature.setProperties(values, true);
          }
          return feature;
      };
      /**
       * @inheritDoc
       */
      MVT.prototype.getType = function () {
          return FormatType.ARRAY_BUFFER;
      };
      /**
       * Read all features.
       *
       * @param {ArrayBuffer} source Source.
       * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
       * @return {Array<import("../Feature.js").FeatureLike>} Features.
       * @api
       */
      MVT.prototype.readFeatures = function (source, opt_options) {
          var layers = this.layers_;
          var options = /** @type {import("./Feature.js").ReadOptions} */ (this.adaptOptions(opt_options));
          var dataProjection = get$4(options.dataProjection);
          dataProjection.setWorldExtent(options.extent);
          options.dataProjection = dataProjection;
          var pbf$1 = new pbf(/** @type {ArrayBuffer} */ (source));
          var pbfLayers = pbf$1.readFields(layersPBFReader, {});
          var features = [];
          for (var name_1 in pbfLayers) {
              if (layers && layers.indexOf(name_1) == -1) {
                  continue;
              }
              var pbfLayer = pbfLayers[name_1];
              var extent = pbfLayer ? [0, 0, pbfLayer.extent, pbfLayer.extent] : null;
              dataProjection.setExtent(extent);
              for (var i = 0, ii = pbfLayer.length; i < ii; ++i) {
                  var rawFeature = readRawFeature(pbf$1, pbfLayer, i);
                  features.push(this.createFeature_(pbf$1, rawFeature, options));
              }
          }
          return features;
      };
      /**
       * @inheritDoc
       * @api
       */
      MVT.prototype.readProjection = function (source) {
          return this.dataProjection;
      };
      /**
       * Sets the layers that features will be read from.
       * @param {Array<string>} layers Layers.
       * @api
       */
      MVT.prototype.setLayers = function (layers) {
          this.layers_ = layers;
      };
      return MVT;
  }(FeatureFormat));
  /**
   * Reader callback for parsing layers.
   * @param {number} tag The tag.
   * @param {Object} layers The layers object.
   * @param {PBF} pbf The PBF.
   */
  function layersPBFReader(tag, layers, pbf) {
      if (tag === 3) {
          var layer = {
              keys: [],
              values: [],
              features: []
          };
          var end = pbf.readVarint() + pbf.pos;
          pbf.readFields(layerPBFReader, layer, end);
          layer.length = layer.features.length;
          if (layer.length) {
              layers[layer.name] = layer;
          }
      }
  }
  /**
   * Reader callback for parsing layer.
   * @param {number} tag The tag.
   * @param {Object} layer The layer object.
   * @param {PBF} pbf The PBF.
   */
  function layerPBFReader(tag, layer, pbf) {
      if (tag === 15) {
          layer.version = pbf.readVarint();
      }
      else if (tag === 1) {
          layer.name = pbf.readString();
      }
      else if (tag === 5) {
          layer.extent = pbf.readVarint();
      }
      else if (tag === 2) {
          layer.features.push(pbf.pos);
      }
      else if (tag === 3) {
          layer.keys.push(pbf.readString());
      }
      else if (tag === 4) {
          var value = null;
          var end = pbf.readVarint() + pbf.pos;
          while (pbf.pos < end) {
              tag = pbf.readVarint() >> 3;
              value = tag === 1 ? pbf.readString() :
                  tag === 2 ? pbf.readFloat() :
                      tag === 3 ? pbf.readDouble() :
                          tag === 4 ? pbf.readVarint64() :
                              tag === 5 ? pbf.readVarint() :
                                  tag === 6 ? pbf.readSVarint() :
                                      tag === 7 ? pbf.readBoolean() : null;
          }
          layer.values.push(value);
      }
  }
  /**
   * Reader callback for parsing feature.
   * @param {number} tag The tag.
   * @param {Object} feature The feature object.
   * @param {PBF} pbf The PBF.
   */
  function featurePBFReader(tag, feature, pbf) {
      if (tag == 1) {
          feature.id = pbf.readVarint();
      }
      else if (tag == 2) {
          var end = pbf.readVarint() + pbf.pos;
          while (pbf.pos < end) {
              var key = feature.layer.keys[pbf.readVarint()];
              var value = feature.layer.values[pbf.readVarint()];
              feature.properties[key] = value;
          }
      }
      else if (tag == 3) {
          feature.type = pbf.readVarint();
      }
      else if (tag == 4) {
          feature.geometry = pbf.pos;
      }
  }
  /**
   * Read a raw feature from the pbf offset stored at index `i` in the raw layer.
   * @param {PBF} pbf PBF.
   * @param {Object} layer Raw layer.
   * @param {number} i Index of the feature in the raw layer's `features` array.
   * @return {Object} Raw feature.
   */
  function readRawFeature(pbf, layer, i) {
      pbf.pos = layer.features[i];
      var end = pbf.readVarint() + pbf.pos;
      var feature = {
          layer: layer,
          type: 0,
          properties: {}
      };
      pbf.readFields(featurePBFReader, feature, end);
      return feature;
  }
  /**
   * @param {number} type The raw feature's geometry type
   * @param {number} numEnds Number of ends of the flat coordinates of the
   * geometry.
   * @return {GeometryType} The geometry type.
   */
  function getGeometryType(type, numEnds) {
      /** @type {GeometryType} */
      var geometryType;
      if (type === 1) {
          geometryType = numEnds === 1 ?
              GeometryType.POINT : GeometryType.MULTI_POINT;
      }
      else if (type === 2) {
          geometryType = numEnds === 1 ?
              GeometryType.LINE_STRING :
              GeometryType.MULTI_LINE_STRING;
      }
      else if (type === 3) {
          geometryType = GeometryType.POLYGON;
          // MultiPolygon not relevant for rendering - winding order determines
          // outer rings of polygons.
      }
      return geometryType;
  }

  /**
   * @module ol/layer/TileProperty
   */
  /**
   * @enum {string}
   */
  var TileProperty = {
      PRELOAD: 'preload',
      USE_INTERIM_TILES_ON_ERROR: 'useInterimTilesOnError'
  };

  var __extends$18 =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
   * visible.
   * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
   * be visible.
   * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`
   * means no preloading.
   * @property {import("../source/Tile.js").default} [source] Source for this layer.
   * @property {import("../PluggableMap.js").default} [map] Sets the layer as overlay on a map. The map will not manage
   * this layer in its layers collection, and the layer will be rendered on top. This is useful for
   * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
   * use {@link module:ol/Map#addLayer}.
   * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.
   */
  /**
   * @classdesc
   * For layer sources that provide pre-rendered, tiled images in grids that are
   * organized by zoom levels for specific resolutions.
   * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
   * property on the layer object; for example, setting `title: 'My Title'` in the
   * options means that `title` is observable, and has get/set accessors.
   *
   * @extends {Layer<import("../source/Tile.js").default>}
   * @api
   */
  var BaseTileLayer = /** @class */ (function (_super) {
      __extends$18(BaseTileLayer, _super);
      /**
       * @param {Options=} opt_options Tile layer options.
       */
      function BaseTileLayer(opt_options) {
          var _this = this;
          var options = opt_options ? opt_options : {};
          var baseOptions = assign({}, options);
          delete baseOptions.preload;
          delete baseOptions.useInterimTilesOnError;
          _this = _super.call(this, baseOptions) || this;
          _this.setPreload(options.preload !== undefined ? options.preload : 0);
          _this.setUseInterimTilesOnError(options.useInterimTilesOnError !== undefined ?
              options.useInterimTilesOnError : true);
          return _this;
      }
      /**
      * Return the level as number to which we will preload tiles up to.
      * @return {number} The level to preload tiles up to.
      * @observable
      * @api
      */
      BaseTileLayer.prototype.getPreload = function () {
          return /** @type {number} */ (this.get(TileProperty.PRELOAD));
      };
      /**
      * Set the level as number to which we will preload tiles up to.
      * @param {number} preload The level to preload tiles up to.
      * @observable
      * @api
      */
      BaseTileLayer.prototype.setPreload = function (preload) {
          this.set(TileProperty.PRELOAD, preload);
      };
      /**
      * Whether we use interim tiles on error.
      * @return {boolean} Use interim tiles on error.
      * @observable
      * @api
      */
      BaseTileLayer.prototype.getUseInterimTilesOnError = function () {
          return /** @type {boolean} */ (this.get(TileProperty.USE_INTERIM_TILES_ON_ERROR));
      };
      /**
      * Set whether we use interim tiles on error.
      * @param {boolean} useInterimTilesOnError Use interim tiles on error.
      * @observable
      * @api
      */
      BaseTileLayer.prototype.setUseInterimTilesOnError = function (useInterimTilesOnError) {
          this.set(TileProperty.USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);
      };
      return BaseTileLayer;
  }(Layer));

  var __extends$19 =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @classdesc
   * Canvas renderer for tile layers.
   * @api
   */
  var CanvasTileLayerRenderer = /** @class */ (function (_super) {
      __extends$19(CanvasTileLayerRenderer, _super);
      /**
       * @param {import("../../layer/Tile.js").default|import("../../layer/VectorTile.js").default} tileLayer Tile layer.
       */
      function CanvasTileLayerRenderer(tileLayer) {
          var _this = _super.call(this, tileLayer) || this;
          /**
           * Rendered extent has changed since the previous `renderFrame()` call
           * @type {boolean}
           */
          _this.extentChanged = true;
          /**
           * @private
           * @type {?import("../../extent.js").Extent}
           */
          _this.renderedExtent_ = null;
          /**
           * @protected
           * @type {number}
           */
          _this.renderedPixelRatio;
          /**
           * @protected
           * @type {import("../../proj/Projection.js").default}
           */
          _this.renderedProjection = null;
          /**
           * @protected
           * @type {number}
           */
          _this.renderedRevision;
          /**
           * @protected
           * @type {!Array<import("../../Tile.js").default>}
           */
          _this.renderedTiles = [];
          /**
           * @private
           * @type {boolean}
           */
          _this.newTiles_ = false;
          /**
           * @protected
           * @type {import("../../extent.js").Extent}
           */
          _this.tmpExtent = createEmpty();
          /**
           * @private
           * @type {import("../../TileRange.js").default}
           */
          _this.tmpTileRange_ = new TileRange(0, 0, 0, 0);
          return _this;
      }
      /**
       * @protected
       * @param {import("../../Tile.js").default} tile Tile.
       * @return {boolean} Tile is drawable.
       */
      CanvasTileLayerRenderer.prototype.isDrawableTile = function (tile) {
          var tileLayer = this.getLayer();
          var tileState = tile.getState();
          var useInterimTilesOnError = tileLayer.getUseInterimTilesOnError();
          return tileState == TileState.LOADED ||
              tileState == TileState.EMPTY ||
              tileState == TileState.ERROR && !useInterimTilesOnError;
      };
      /**
       * @param {number} z Tile coordinate z.
       * @param {number} x Tile coordinate x.
       * @param {number} y Tile coordinate y.
       * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
       * @return {!import("../../Tile.js").default} Tile.
       */
      CanvasTileLayerRenderer.prototype.getTile = function (z, x, y, frameState) {
          var pixelRatio = frameState.pixelRatio;
          var projection = frameState.viewState.projection;
          var tileLayer = this.getLayer();
          var tileSource = tileLayer.getSource();
          var tile = tileSource.getTile(z, x, y, pixelRatio, projection);
          if (tile.getState() == TileState.ERROR) {
              if (!tileLayer.getUseInterimTilesOnError()) {
                  // When useInterimTilesOnError is false, we consider the error tile as loaded.
                  tile.setState(TileState.LOADED);
              }
              else if (tileLayer.getPreload() > 0) {
                  // Preloaded tiles for lower resolutions might have finished loading.
                  this.newTiles_ = true;
              }
          }
          if (!this.isDrawableTile(tile)) {
              tile = tile.getInterimTile();
          }
          return tile;
      };
      /**
       * @inheritDoc
       */
      CanvasTileLayerRenderer.prototype.loadedTileCallback = function (tiles, zoom, tile) {
          if (this.isDrawableTile(tile)) {
              return _super.prototype.loadedTileCallback.call(this, tiles, zoom, tile);
          }
          return false;
      };
      /**
       * @inheritDoc
       */
      CanvasTileLayerRenderer.prototype.prepareFrame = function (frameState) {
          return !!this.getLayer().getSource();
      };
      /**
       * TODO: File a TypeScript issue about inheritDoc not being followed
       * all the way.  Without this explicit return type, the VectorTileLayer
       * renderFrame function does not pass.
       *
       * @inheritDoc
       * @returns {HTMLElement} The rendered element.
       */
      CanvasTileLayerRenderer.prototype.renderFrame = function (frameState, target) {
          var layerState = frameState.layerStatesArray[frameState.layerIndex];
          var viewState = frameState.viewState;
          var projection = viewState.projection;
          var viewResolution = viewState.resolution;
          var viewCenter = viewState.center;
          var rotation = viewState.rotation;
          var pixelRatio = frameState.pixelRatio;
          var tileLayer = this.getLayer();
          var tileSource = tileLayer.getSource();
          var sourceRevision = tileSource.getRevision();
          var tileGrid = tileSource.getTileGridForProjection(projection);
          var z = tileGrid.getZForResolution(viewResolution, tileSource.zDirection);
          var tileResolution = tileGrid.getResolution(z);
          var extent = frameState.extent;
          var layerExtent = layerState.extent && fromUserExtent(layerState.extent);
          if (layerExtent) {
              extent = getIntersection(extent, fromUserExtent(layerState.extent));
          }
          var tilePixelRatio = tileSource.getTilePixelRatio(pixelRatio);
          // desired dimensions of the canvas in pixels
          var width = Math.round(frameState.size[0] * tilePixelRatio);
          var height = Math.round(frameState.size[1] * tilePixelRatio);
          if (rotation) {
              var size = Math.round(Math.sqrt(width * width + height * height));
              width = size;
              height = size;
          }
          var dx = tileResolution * width / 2 / tilePixelRatio;
          var dy = tileResolution * height / 2 / tilePixelRatio;
          var canvasExtent = [
              viewCenter[0] - dx,
              viewCenter[1] - dy,
              viewCenter[0] + dx,
              viewCenter[1] + dy
          ];
          var tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);
          /**
           * @type {Object<number, Object<string, import("../../Tile.js").default>>}
           */
          var tilesToDrawByZ = {};
          tilesToDrawByZ[z] = {};
          var findLoadedTiles = this.createLoadedTileFinder(tileSource, projection, tilesToDrawByZ);
          var tmpExtent = this.tmpExtent;
          var tmpTileRange = this.tmpTileRange_;
          this.newTiles_ = false;
          for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {
              for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {
                  var tile = this.getTile(z, x, y, frameState);
                  if (this.isDrawableTile(tile)) {
                      var uid = getUid(this);
                      if (tile.getState() == TileState.LOADED) {
                          tilesToDrawByZ[z][tile.tileCoord.toString()] = tile;
                          var inTransition = tile.inTransition(uid);
                          if (!this.newTiles_ && (inTransition || this.renderedTiles.indexOf(tile) === -1)) {
                              this.newTiles_ = true;
                          }
                      }
                      if (tile.getAlpha(uid, frameState.time) === 1) {
                          // don't look for alt tiles if alpha is 1
                          continue;
                      }
                  }
                  var childTileRange = tileGrid.getTileCoordChildTileRange(tile.tileCoord, tmpTileRange, tmpExtent);
                  var covered = false;
                  if (childTileRange) {
                      covered = findLoadedTiles(z + 1, childTileRange);
                  }
                  if (!covered) {
                      tileGrid.forEachTileCoordParentTileRange(tile.tileCoord, findLoadedTiles, tmpTileRange, tmpExtent);
                  }
              }
          }
          var canvasScale = tileResolution / viewResolution;
          // set forward and inverse pixel transforms
          compose(this.pixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / tilePixelRatio, 1 / tilePixelRatio, rotation, -width / 2, -height / 2);
          var canvasTransform = createTransformString(this.pixelTransform);
          this.useContainer(target, canvasTransform, layerState.opacity);
          var context = this.context;
          var canvas = context.canvas;
          makeInverse(this.inversePixelTransform, this.pixelTransform);
          // set scale transform for calculating tile positions on the canvas
          compose(this.tempTransform_, width / 2, height / 2, canvasScale, canvasScale, 0, -width / 2, -height / 2);
          if (canvas.width != width || canvas.height != height) {
              canvas.width = width;
              canvas.height = height;
          }
          else if (!this.containerReused) {
              context.clearRect(0, 0, width, height);
          }
          if (layerExtent) {
              this.clipUnrotated(context, frameState, layerExtent);
          }
          this.preRender(context, frameState);
          this.renderedTiles.length = 0;
          /** @type {Array<number>} */
          var zs = Object.keys(tilesToDrawByZ).map(Number);
          zs.sort(numberSafeCompareFunction);
          var clips, clipZs, currentClip;
          if (layerState.opacity === 1 && (!this.containerReused || tileSource.getOpaque(frameState.viewState.projection))) {
              zs = zs.reverse();
          }
          else {
              clips = [];
              clipZs = [];
          }
          for (var i = zs.length - 1; i >= 0; --i) {
              var currentZ = zs[i];
              var currentTilePixelSize = tileSource.getTilePixelSize(currentZ, pixelRatio, projection);
              var currentResolution = tileGrid.getResolution(currentZ);
              var currentScale = currentResolution / tileResolution;
              var dx_1 = currentTilePixelSize[0] * currentScale * canvasScale;
              var dy_1 = currentTilePixelSize[1] * currentScale * canvasScale;
              var originTileCoord = tileGrid.getTileCoordForCoordAndZ(getTopLeft(canvasExtent), currentZ);
              var originTileExtent = tileGrid.getTileCoordExtent(originTileCoord);
              var origin_1 = apply(this.tempTransform_, [
                  tilePixelRatio * (originTileExtent[0] - canvasExtent[0]) / tileResolution,
                  tilePixelRatio * (canvasExtent[3] - originTileExtent[3]) / tileResolution
              ]);
              var tileGutter = tilePixelRatio * tileSource.getGutterForProjection(projection);
              var tilesToDraw = tilesToDrawByZ[currentZ];
              for (var tileCoordKey in tilesToDraw) {
                  var tile = /** @type {import("../../ImageTile.js").default} */ (tilesToDraw[tileCoordKey]);
                  var tileCoord = tile.tileCoord;
                  // Calculate integer positions and sizes so that tiles align
                  var floatX = (origin_1[0] - (originTileCoord[1] - tileCoord[1]) * dx_1);
                  var nextX = Math.round(floatX + dx_1);
                  var floatY = (origin_1[1] - (originTileCoord[2] - tileCoord[2]) * dy_1);
                  var nextY = Math.round(floatY + dy_1);
                  var x = Math.round(floatX);
                  var y = Math.round(floatY);
                  var w = nextX - x;
                  var h = nextY - y;
                  var transition = z === currentZ;
                  var inTransition = transition && tile.getAlpha(getUid(this), frameState.time) !== 1;
                  if (!inTransition) {
                      if (clips) {
                          // Clip mask for regions in this tile that already filled by a higher z tile
                          context.save();
                          currentClip = [x, y, x + w, y, x + w, y + h, x, y + h];
                          for (var i_1 = 0, ii = clips.length; i_1 < ii; ++i_1) {
                              if (z !== currentZ && currentZ < clipZs[i_1]) {
                                  var clip = clips[i_1];
                                  context.beginPath();
                                  // counter-clockwise (outer ring) for current tile
                                  context.moveTo(currentClip[0], currentClip[1]);
                                  context.lineTo(currentClip[2], currentClip[3]);
                                  context.lineTo(currentClip[4], currentClip[5]);
                                  context.lineTo(currentClip[6], currentClip[7]);
                                  // clockwise (inner ring) for higher z tile
                                  context.moveTo(clip[6], clip[7]);
                                  context.lineTo(clip[4], clip[5]);
                                  context.lineTo(clip[2], clip[3]);
                                  context.lineTo(clip[0], clip[1]);
                                  context.clip();
                              }
                          }
                          clips.push(currentClip);
                          clipZs.push(currentZ);
                      }
                      else {
                          context.clearRect(x, y, w, h);
                      }
                  }
                  this.drawTileImage(tile, frameState, x, y, w, h, tileGutter, transition, layerState.opacity);
                  if (clips && !inTransition) {
                      context.restore();
                  }
                  this.renderedTiles.push(tile);
                  this.updateUsedTiles(frameState.usedTiles, tileSource, tile);
              }
          }
          this.renderedRevision = sourceRevision;
          this.renderedResolution = tileResolution;
          this.extentChanged = !this.renderedExtent_ || !equals(this.renderedExtent_, canvasExtent);
          this.renderedExtent_ = canvasExtent;
          this.renderedPixelRatio = pixelRatio;
          this.renderedProjection = projection;
          this.manageTilePyramid(frameState, tileSource, tileGrid, pixelRatio, projection, extent, z, tileLayer.getPreload());
          this.scheduleExpireCache(frameState, tileSource);
          this.postRender(context, frameState);
          if (layerState.extent) {
              context.restore();
          }
          if (canvasTransform !== canvas.style.transform) {
              canvas.style.transform = canvasTransform;
          }
          return this.container;
      };
      /**
       * @param {import("../../ImageTile.js").default} tile Tile.
       * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
       * @param {number} x Left of the tile.
       * @param {number} y Top of the tile.
       * @param {number} w Width of the tile.
       * @param {number} h Height of the tile.
       * @param {number} gutter Tile gutter.
       * @param {boolean} transition Apply an alpha transition.
       * @param {number} opacity Opacity.
       */
      CanvasTileLayerRenderer.prototype.drawTileImage = function (tile, frameState, x, y, w, h, gutter, transition, opacity) {
          var image = this.getTileImage(tile);
          if (!image) {
              return;
          }
          var uid = getUid(this);
          var tileAlpha = transition ? tile.getAlpha(uid, frameState.time) : 1;
          var alpha = opacity * tileAlpha;
          var alphaChanged = alpha !== this.context.globalAlpha;
          if (alphaChanged) {
              this.context.save();
              this.context.globalAlpha = alpha;
          }
          this.context.drawImage(image, gutter, gutter, image.width - 2 * gutter, image.height - 2 * gutter, x, y, w, h);
          if (alphaChanged) {
              this.context.restore();
          }
          if (tileAlpha !== 1) {
              frameState.animate = true;
          }
          else if (transition) {
              tile.endTransition(uid);
          }
      };
      /**
       * @inheritDoc
       */
      CanvasTileLayerRenderer.prototype.getImage = function () {
          var context = this.context;
          return context ? context.canvas : null;
      };
      /**
       * Get the image from a tile.
       * @param {import("../../ImageTile.js").default} tile Tile.
       * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
       * @protected
       */
      CanvasTileLayerRenderer.prototype.getTileImage = function (tile) {
          return tile.getImage();
      };
      /**
       * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
       * @param {import("../../source/Tile.js").default} tileSource Tile source.
       * @protected
       */
      CanvasTileLayerRenderer.prototype.scheduleExpireCache = function (frameState, tileSource) {
          if (tileSource.canExpireCache()) {
              /**
               * @param {import("../../source/Tile.js").default} tileSource Tile source.
               * @param {import("../../PluggableMap.js").default} map Map.
               * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
               */
              var postRenderFunction = function (tileSource, map, frameState) {
                  var tileSourceKey = getUid(tileSource);
                  if (tileSourceKey in frameState.usedTiles) {
                      tileSource.expireCache(frameState.viewState.projection, frameState.usedTiles[tileSourceKey]);
                  }
              }.bind(null, tileSource);
              frameState.postRenderFunctions.push(
              /** @type {import("../../PluggableMap.js").PostRenderFunction} */ (postRenderFunction));
          }
      };
      /**
       * @param {!Object<string, !Object<string, boolean>>} usedTiles Used tiles.
       * @param {import("../../source/Tile.js").default} tileSource Tile source.
       * @param {import('../../Tile.js').default} tile Tile.
       * @protected
       */
      CanvasTileLayerRenderer.prototype.updateUsedTiles = function (usedTiles, tileSource, tile) {
          // FIXME should we use tilesToDrawByZ instead?
          var tileSourceKey = getUid(tileSource);
          if (!(tileSourceKey in usedTiles)) {
              usedTiles[tileSourceKey] = {};
          }
          usedTiles[tileSourceKey][tile.getKey()] = true;
      };
      /**
       * Manage tile pyramid.
       * This function performs a number of functions related to the tiles at the
       * current zoom and lower zoom levels:
       * - registers idle tiles in frameState.wantedTiles so that they are not
       *   discarded by the tile queue
       * - enqueues missing tiles
       * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
       * @param {import("../../source/Tile.js").default} tileSource Tile source.
       * @param {import("../../tilegrid/TileGrid.js").default} tileGrid Tile grid.
       * @param {number} pixelRatio Pixel ratio.
       * @param {import("../../proj/Projection.js").default} projection Projection.
       * @param {import("../../extent.js").Extent} extent Extent.
       * @param {number} currentZ Current Z.
       * @param {number} preload Load low resolution tiles up to 'preload' levels.
       * @param {function(import("../../Tile.js").default)=} opt_tileCallback Tile callback.
       * @protected
       */
      CanvasTileLayerRenderer.prototype.manageTilePyramid = function (frameState, tileSource, tileGrid, pixelRatio, projection, extent, currentZ, preload, opt_tileCallback) {
          var tileSourceKey = getUid(tileSource);
          if (!(tileSourceKey in frameState.wantedTiles)) {
              frameState.wantedTiles[tileSourceKey] = {};
          }
          var wantedTiles = frameState.wantedTiles[tileSourceKey];
          var tileQueue = frameState.tileQueue;
          var minZoom = tileGrid.getMinZoom();
          var tile, tileRange, tileResolution, x, y, z;
          for (z = minZoom; z <= currentZ; ++z) {
              tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z, tileRange);
              tileResolution = tileGrid.getResolution(z);
              for (x = tileRange.minX; x <= tileRange.maxX; ++x) {
                  for (y = tileRange.minY; y <= tileRange.maxY; ++y) {
                      if (currentZ - z <= preload) {
                          tile = tileSource.getTile(z, x, y, pixelRatio, projection);
                          if (tile.getState() == TileState.IDLE) {
                              wantedTiles[tile.getKey()] = true;
                              if (!tileQueue.isKeyQueued(tile.getKey())) {
                                  tileQueue.enqueue([tile, tileSourceKey,
                                      tileGrid.getTileCoordCenter(tile.tileCoord), tileResolution]);
                              }
                          }
                          if (opt_tileCallback !== undefined) {
                              opt_tileCallback(tile);
                          }
                      }
                      else {
                          tileSource.useTile(z, x, y, projection);
                      }
                  }
              }
          }
      };
      return CanvasTileLayerRenderer;
  }(CanvasLayerRenderer));
  /**
   * @function
   * @return {import("../../layer/Tile.js").default|import("../../layer/VectorTile.js").default}
   */
  CanvasTileLayerRenderer.prototype.getLayer;

  var __extends$1a =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @classdesc
   * For layer sources that provide pre-rendered, tiled images in grids that are
   * organized by zoom levels for specific resolutions.
   * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
   * property on the layer object; for example, setting `title: 'My Title'` in the
   * options means that `title` is observable, and has get/set accessors.
   *
   * @api
   */
  var TileLayer = /** @class */ (function (_super) {
      __extends$1a(TileLayer, _super);
      /**
       * @param {import("./BaseTile.js").Options=} opt_options Tile layer options.
       */
      function TileLayer(opt_options) {
          return _super.call(this, opt_options) || this;
      }
      /**
       * Create a renderer for this layer.
       * @return {import("../renderer/Layer.js").default} A layer renderer.
       * @protected
       */
      TileLayer.prototype.createRenderer = function () {
          return new CanvasTileLayerRenderer(this);
      };
      return TileLayer;
  }(BaseTileLayer));

  /**
   * @module ol/layer/VectorTileRenderType
   */
  /**
   * @enum {string}
   * Render mode for vector tiles:
   *  * `'image'`: Vector tiles are rendered as images. Great performance, but
   *    point symbols and texts are always rotated with the view and pixels are
   *    scaled during zoom animations.
   *  * `'hybrid'`: Polygon and line elements are rendered as images, so pixels
   *    are scaled during zoom animations. Point symbols and texts are accurately
   *    rendered as vectors and can stay upright on rotated views.
   *  * `'vector'`: Everything is rendered as vectors. Use this mode for improved
   *    performance on vector tile layers with only a few rendered features (e.g.
   *    for highlighting a subset of features of another layer with the same
   *    source).
   * @api
   */
  var VectorTileRenderType = {
      IMAGE: 'image',
      HYBRID: 'hybrid',
      VECTOR: 'vector'
  };

  var __extends$1b =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @type {!Object<string, Array<import("../../render/canvas/BuilderType.js").default>>}
   */
  var IMAGE_REPLAYS = {
      'image': [ReplayType.POLYGON, ReplayType.CIRCLE,
          ReplayType.LINE_STRING, ReplayType.IMAGE, ReplayType.TEXT],
      'hybrid': [ReplayType.POLYGON, ReplayType.LINE_STRING],
      'vector': []
  };
  /**
   * @type {!Object<string, Array<import("../../render/canvas/BuilderType.js").default>>}
   */
  var VECTOR_REPLAYS = {
      'image': [ReplayType.DEFAULT],
      'hybrid': [ReplayType.IMAGE, ReplayType.TEXT, ReplayType.DEFAULT],
      'vector': [ReplayType.POLYGON, ReplayType.CIRCLE, ReplayType.LINE_STRING, ReplayType.IMAGE, ReplayType.TEXT, ReplayType.DEFAULT]
  };
  /**
   * @classdesc
   * Canvas renderer for vector tile layers.
   * @api
   */
  var CanvasVectorTileLayerRenderer = /** @class */ (function (_super) {
      __extends$1b(CanvasVectorTileLayerRenderer, _super);
      /**
       * @param {import("../../layer/VectorTile.js").default} layer VectorTile layer.
       */
      function CanvasVectorTileLayerRenderer(layer) {
          var _this = _super.call(this, layer) || this;
          /** @private */
          _this.boundHandleStyleImageChange_ = _this.handleStyleImageChange_.bind(_this);
          /**
           * @private
           * @type {boolean}
           */
          _this.dirty_ = false;
          /**
           * @private
           * @type {number}
           */
          _this.renderedLayerRevision_;
          /**
           * @private
           * @type {import("../../transform").Transform}
           */
          _this.renderedPixelToCoordinateTransform_ = null;
          /**
           * @private
           * @type {number}
           */
          _this.renderedRotation_;
          /**
           * @private
           * @type {!Object<string, import("../../VectorRenderTile.js").default>}
           */
          _this.renderTileImageQueue_ = {};
          /**
           * @type {Object<string, import("../../events.js").EventsKey>}
           */
          _this.tileListenerKeys_ = {};
          /**
           * @private
           * @type {import("../../transform.js").Transform}
           */
          _this.tmpTransform_ = create();
          return _this;
      }
      /**
       * @param {import("../../VectorRenderTile.js").default} tile Tile.
       * @param {number} pixelRatio Pixel ratio.
       * @param {import("../../proj/Projection").default} projection Projection.
       * @param {boolean} queue Queue tile for rendering.
       * @return {boolean|undefined} Tile needs to be rendered.
       */
      CanvasVectorTileLayerRenderer.prototype.prepareTile = function (tile, pixelRatio, projection, queue) {
          var render;
          var tileUid = getUid(tile);
          var state = tile.getState();
          if (((state === TileState.LOADED && tile.hifi) || state === TileState.ERROR) &&
              tileUid in this.tileListenerKeys_) {
              unlistenByKey(this.tileListenerKeys_[tileUid]);
              delete this.tileListenerKeys_[tileUid];
          }
          if (state === TileState.LOADED || state === TileState.ERROR) {
              this.updateExecutorGroup_(tile, pixelRatio, projection);
              if (this.tileImageNeedsRender_(tile, pixelRatio, projection)) {
                  render = true;
                  if (queue) {
                      this.renderTileImageQueue_[tileUid] = tile;
                  }
              }
          }
          return render;
      };
      /**
       * @inheritDoc
       */
      CanvasVectorTileLayerRenderer.prototype.getTile = function (z, x, y, frameState) {
          var pixelRatio = frameState.pixelRatio;
          var viewState = frameState.viewState;
          var resolution = viewState.resolution;
          var projection = viewState.projection;
          var layer = this.getLayer();
          var tile = layer.getSource().getTile(z, x, y, pixelRatio, projection);
          if (tile.getState() < TileState.LOADED) {
              tile.wantedResolution = resolution;
              var tileUid = getUid(tile);
              if (!(tileUid in this.tileListenerKeys_)) {
                  var listenerKey = listen(tile, EventType.CHANGE, this.prepareTile.bind(this, tile, pixelRatio, projection, true));
                  this.tileListenerKeys_[tileUid] = listenerKey;
              }
          }
          else {
              var viewHints = frameState.viewHints;
              var hifi = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);
              if (hifi || !tile.wantedResolution) {
                  tile.wantedResolution = resolution;
              }
              var render = this.prepareTile(tile, pixelRatio, projection, false);
              if (render && layer.getRenderMode() !== VectorTileRenderType.VECTOR) {
                  this.renderTileImage_(tile, frameState);
              }
          }
          return _super.prototype.getTile.call(this, z, x, y, frameState);
      };
      /**
       * @inheritdoc
       */
      CanvasVectorTileLayerRenderer.prototype.isDrawableTile = function (tile) {
          var layer = this.getLayer();
          return _super.prototype.isDrawableTile.call(this, tile) && layer.getRenderMode() === VectorTileRenderType.VECTOR || tile.hasContext(layer);
      };
      /**
       * @inheritDoc
       */
      CanvasVectorTileLayerRenderer.prototype.getTileImage = function (tile) {
          return tile.getImage(this.getLayer());
      };
      /**
       * @inheritDoc
       */
      CanvasVectorTileLayerRenderer.prototype.prepareFrame = function (frameState) {
          var layerRevision = this.getLayer().getRevision();
          if (this.renderedLayerRevision_ != layerRevision) {
              this.renderedTiles.length = 0;
          }
          this.renderedLayerRevision_ = layerRevision;
          return _super.prototype.prepareFrame.call(this, frameState);
      };
      /**
       * @param {import("../../VectorRenderTile.js").default} tile Tile.
       * @param {number} pixelRatio Pixel ratio.
       * @param {import("../../proj/Projection.js").default} projection Projection.
       * @private
       */
      CanvasVectorTileLayerRenderer.prototype.updateExecutorGroup_ = function (tile, pixelRatio, projection) {
          var layer = /** @type {import("../../layer/VectorTile.js").default} */ (this.getLayer());
          var revision = layer.getRevision();
          var renderOrder = layer.getRenderOrder() || null;
          var resolution = tile.wantedResolution;
          var builderState = tile.getReplayState(layer);
          if (!builderState.dirty && builderState.renderedResolution === resolution &&
              builderState.renderedRevision == revision &&
              builderState.renderedRenderOrder == renderOrder && builderState.renderedZ === tile.sourceZ) {
              return;
          }
          var source = layer.getSource();
          var sourceTileGrid = source.getTileGrid();
          var tileGrid = source.getTileGridForProjection(projection);
          var tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);
          var sourceTiles = source.getSourceTiles(pixelRatio, projection, tile);
          var layerUid = getUid(layer);
          delete tile.hitDetectionImageData[layerUid];
          tile.executorGroups[layerUid] = [];
          var _loop_1 = function (t, tt) {
              var sourceTile = sourceTiles[t];
              if (sourceTile.getState() != TileState.LOADED) {
                  return "continue";
              }
              var sourceTileCoord = sourceTile.tileCoord;
              var sourceTileExtent = sourceTileGrid.getTileCoordExtent(sourceTileCoord);
              var sharedExtent = getIntersection(tileExtent, sourceTileExtent);
              var bufferedExtent = equals(sourceTileExtent, sharedExtent) ? null :
                  buffer(sharedExtent, layer.getRenderBuffer() * resolution, this_1.tmpExtent);
              builderState.dirty = false;
              var builderGroup = new BuilderGroup(0, sharedExtent, resolution, pixelRatio, layer.getDeclutter());
              var squaredTolerance = getSquaredTolerance(resolution, pixelRatio);
              /**
               * @param {import("../../Feature.js").FeatureLike} feature Feature.
               * @this {CanvasVectorTileLayerRenderer}
               */
              var render = function (feature) {
                  var styles;
                  var styleFunction = feature.getStyleFunction() || layer.getStyleFunction();
                  if (styleFunction) {
                      styles = styleFunction(feature, resolution);
                  }
                  if (styles) {
                      var dirty = this.renderFeature(feature, squaredTolerance, styles, builderGroup);
                      this.dirty_ = this.dirty_ || dirty;
                      builderState.dirty = builderState.dirty || dirty;
                  }
              };
              var features = sourceTile.getFeatures();
              if (renderOrder && renderOrder !== builderState.renderedRenderOrder) {
                  features.sort(renderOrder);
              }
              for (var i = 0, ii = features.length; i < ii; ++i) {
                  var feature = features[i];
                  if (!bufferedExtent || intersects(bufferedExtent, feature.getGeometry().getExtent())) {
                      render.call(this_1, feature);
                  }
              }
              var executorGroupInstructions = builderGroup.finish();
              // no need to clip when the render tile is covered by a single source tile
              var replayExtent = layer.getRenderMode() !== VectorTileRenderType.VECTOR && layer.getDeclutter() && sourceTiles.length === 1 ?
                  null :
                  sharedExtent;
              var renderingReplayGroup = new ExecutorGroup(replayExtent, resolution, pixelRatio, source.getOverlaps(), executorGroupInstructions, layer.getRenderBuffer());
              tile.executorGroups[layerUid].push(renderingReplayGroup);
          };
          var this_1 = this;
          for (var t = 0, tt = sourceTiles.length; t < tt; ++t) {
              _loop_1(t);
          }
          builderState.renderedRevision = revision;
          builderState.renderedZ = tile.sourceZ;
          builderState.renderedRenderOrder = renderOrder;
          builderState.renderedResolution = resolution;
      };
      /**
       * @inheritDoc
       */
      CanvasVectorTileLayerRenderer.prototype.forEachFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, callback, declutteredFeatures) {
          var resolution = frameState.viewState.resolution;
          var rotation = frameState.viewState.rotation;
          hitTolerance = hitTolerance == undefined ? 0 : hitTolerance;
          var layer = /** @type {import("../../layer/VectorTile.js").default} */ (this.getLayer());
          var declutter = layer.getDeclutter();
          var source = layer.getSource();
          var tileGrid = source.getTileGridForProjection(frameState.viewState.projection);
          /** @type {!Object<string, boolean>} */
          var features = {};
          var renderedTiles = /** @type {Array<import("../../VectorRenderTile.js").default>} */ (this.renderedTiles);
          var found;
          var i, ii;
          var _loop_2 = function () {
              var tile = renderedTiles[i];
              var tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);
              var tileContainsCoordinate = containsCoordinate(tileExtent, coordinate);
              if (!declutter) {
                  // When not decluttering, we only need to consider the tile that contains the given
                  // coordinate, because each feature will be rendered for each tile that contains it.
                  if (!tileContainsCoordinate) {
                      return "continue";
                  }
              }
              var executorGroups = tile.executorGroups[getUid(layer)];
              for (var t = 0, tt = executorGroups.length; t < tt; ++t) {
                  var executorGroup = executorGroups[t];
                  found = found || executorGroup.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, 
                  /**
                   * @param {import("../../Feature.js").FeatureLike} feature Feature.
                   * @return {?} Callback result.
                   */
                  function (feature) {
                      if (tileContainsCoordinate || (declutteredFeatures && declutteredFeatures.indexOf(feature) !== -1)) {
                          var key = feature.getId();
                          if (key === undefined) {
                              key = getUid(feature);
                          }
                          if (!(key in features)) {
                              features[key] = true;
                              return callback(feature, layer);
                          }
                      }
                  }, layer.getDeclutter() ? declutteredFeatures : null);
              }
          };
          for (i = 0, ii = renderedTiles.length; i < ii; ++i) {
              _loop_2();
          }
          return found;
      };
      /**
       * @inheritDoc
       */
      CanvasVectorTileLayerRenderer.prototype.getFeatures = function (pixel) {
          return new Promise(function (resolve, reject) {
              var layer = /** @type {import("../../layer/VectorTile.js").default} */ (this.getLayer());
              var layerUid = getUid(layer);
              var source = layer.getSource();
              var projection = this.renderedProjection;
              var projectionExtent = projection.getExtent();
              var resolution = this.renderedResolution;
              var tileGrid = source.getTileGridForProjection(projection);
              var coordinate = apply(this.renderedPixelToCoordinateTransform_, pixel.slice());
              var tileCoord = tileGrid.getTileCoordForCoordAndResolution(coordinate, resolution);
              var tile;
              for (var i = 0, ii = this.renderedTiles.length; i < ii; ++i) {
                  if (tileCoord.toString() === this.renderedTiles[i].tileCoord.toString()) {
                      tile = this.renderedTiles[i];
                      if (tile.getState() === TileState.LOADED && tile.hifi) {
                          var extent_1 = tileGrid.getTileCoordExtent(tile.tileCoord);
                          if (source.getWrapX() && projection.canWrapX() && !containsExtent(projectionExtent, extent_1)) {
                              wrapX$2(coordinate, projection);
                          }
                          break;
                      }
                      tile = undefined;
                  }
              }
              if (!tile || tile.loadingSourceTiles > 0) {
                  resolve([]);
                  return;
              }
              var extent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);
              var corner = getTopLeft(extent);
              var tilePixel = [
                  (coordinate[0] - corner[0]) / resolution,
                  (corner[1] - coordinate[1]) / resolution
              ];
              var features = tile.getSourceTiles().reduce(function (accumulator, sourceTile) {
                  return accumulator.concat(sourceTile.getFeatures());
              }, []);
              var hitDetectionImageData = tile.hitDetectionImageData[layerUid];
              if (!hitDetectionImageData && !this.animatingOrInteracting_) {
                  var tileSize = toSize(tileGrid.getTileSize(tileGrid.getZForResolution(resolution)));
                  var size = [tileSize[0] / 2, tileSize[1] / 2];
                  var rotation = this.renderedRotation_;
                  var transforms = [
                      this.getRenderTransform(tileGrid.getTileCoordCenter(tile.wrappedTileCoord), resolution, 0, 0.5, size[0], size[1], 0)
                  ];
                  hitDetectionImageData = createHitDetectionImageData(tileSize, transforms, features, layer.getStyleFunction(), tileGrid.getTileCoordExtent(tile.wrappedTileCoord), tile.getReplayState(layer).renderedResolution, rotation);
                  tile.hitDetectionImageData[layerUid] = hitDetectionImageData;
              }
              resolve(hitDetect(tilePixel, features, hitDetectionImageData));
          }.bind(this));
      };
      /**
       * @inheritDoc
       */
      CanvasVectorTileLayerRenderer.prototype.handleFontsChanged = function () {
          clear$1(this.renderTileImageQueue_);
          var layer = this.getLayer();
          if (layer.getVisible() && this.renderedLayerRevision_ !== undefined) {
              layer.changed();
          }
      };
      /**
       * Handle changes in image style state.
       * @param {import("../../events/Event.js").default} event Image style change event.
       * @private
       */
      CanvasVectorTileLayerRenderer.prototype.handleStyleImageChange_ = function (event) {
          this.renderIfReadyAndVisible();
      };
      /**
       * @inheritDoc
       */
      CanvasVectorTileLayerRenderer.prototype.renderFrame = function (frameState, target) {
          var viewHints = frameState.viewHints;
          var hifi = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);
          this.renderQueuedTileImages_(hifi, frameState);
          _super.prototype.renderFrame.call(this, frameState, target);
          this.renderedPixelToCoordinateTransform_ = frameState.pixelToCoordinateTransform.slice();
          this.renderedRotation_ = frameState.viewState.rotation;
          var layer = /** @type {import("../../layer/VectorTile.js").default} */ (this.getLayer());
          var renderMode = layer.getRenderMode();
          if (renderMode === VectorTileRenderType.IMAGE) {
              return this.container;
          }
          var source = layer.getSource();
          // Unqueue tiles from the image queue when we don't need any more
          var usedTiles = frameState.usedTiles[getUid(source)];
          for (var tileUid in this.renderTileImageQueue_) {
              if (!usedTiles || !(tileUid in usedTiles)) {
                  delete this.renderTileImageQueue_[tileUid];
              }
          }
          var context = this.context;
          var declutterReplays = layer.getDeclutter() ? {} : null;
          var replayTypes = VECTOR_REPLAYS[renderMode];
          var pixelRatio = frameState.pixelRatio;
          var viewState = frameState.viewState;
          var center = viewState.center;
          var resolution = viewState.resolution;
          var rotation = viewState.rotation;
          var size = frameState.size;
          var width = Math.round(size[0] * pixelRatio);
          var height = Math.round(size[1] * pixelRatio);
          var tiles = this.renderedTiles;
          var tileGrid = source.getTileGridForProjection(frameState.viewState.projection);
          var clips = [];
          var clipZs = [];
          for (var i = tiles.length - 1; i >= 0; --i) {
              var tile = /** @type {import("../../VectorRenderTile.js").default} */ (tiles[i]);
              var tileCoord = tile.tileCoord;
              var tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);
              var worldOffset = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent)[0] - tileExtent[0];
              var transform = multiply(scale(this.inversePixelTransform.slice(), 1 / pixelRatio, 1 / pixelRatio), this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, worldOffset));
              var executorGroups = tile.executorGroups[getUid(layer)];
              var clipped = false;
              for (var t = 0, tt = executorGroups.length; t < tt; ++t) {
                  var executorGroup = executorGroups[t];
                  if (!executorGroup.hasExecutors(replayTypes)) {
                      // sourceTile has no instructions of the types we want to render
                      continue;
                  }
                  var currentZ = tile.tileCoord[0];
                  var currentClip = void 0;
                  if (!declutterReplays && !clipped) {
                      currentClip = executorGroup.getClipCoords(transform);
                      context.save();
                      // Create a clip mask for regions in this low resolution tile that are
                      // already filled by a higher resolution tile
                      for (var j = 0, jj = clips.length; j < jj; ++j) {
                          var clip = clips[j];
                          if (currentZ < clipZs[j]) {
                              context.beginPath();
                              // counter-clockwise (outer ring) for current tile
                              context.moveTo(currentClip[0], currentClip[1]);
                              context.lineTo(currentClip[2], currentClip[3]);
                              context.lineTo(currentClip[4], currentClip[5]);
                              context.lineTo(currentClip[6], currentClip[7]);
                              // clockwise (inner ring) for higher resolution tile
                              context.moveTo(clip[6], clip[7]);
                              context.lineTo(clip[4], clip[5]);
                              context.lineTo(clip[2], clip[3]);
                              context.lineTo(clip[0], clip[1]);
                              context.clip();
                          }
                      }
                  }
                  executorGroup.execute(context, transform, rotation, hifi, replayTypes, declutterReplays);
                  if (!declutterReplays && !clipped) {
                      context.restore();
                      clips.push(currentClip);
                      clipZs.push(currentZ);
                      clipped = true;
                  }
              }
          }
          if (declutterReplays) {
              var layerState = frameState.layerStatesArray[frameState.layerIndex];
              replayDeclutter(declutterReplays, context, rotation, layerState.opacity, hifi, frameState.declutterItems);
          }
          return this.container;
      };
      /**
       * @param {boolean} hifi We have time to render a high fidelity map image.
       * @param {import('../../PluggableMap.js').FrameState} frameState Frame state.
       */
      CanvasVectorTileLayerRenderer.prototype.renderQueuedTileImages_ = function (hifi, frameState) {
          // When we don't have time to render hifi, only render tiles until we have used up
          // half of the frame budget of 16 ms
          for (var uid in this.renderTileImageQueue_) {
              if (!hifi && Date.now() - frameState.time > 8) {
                  frameState.animate = true;
                  break;
              }
              var tile = this.renderTileImageQueue_[uid];
              delete this.renderTileImageQueue_[uid];
              this.renderTileImage_(tile, frameState);
          }
      };
      /**
       * @param {import("../../Feature.js").FeatureLike} feature Feature.
       * @param {number} squaredTolerance Squared tolerance.
       * @param {import("../../style/Style.js").default|Array<import("../../style/Style.js").default>} styles The style or array of styles.
       * @param {import("../../render/canvas/BuilderGroup.js").default} executorGroup Replay group.
       * @return {boolean} `true` if an image is loading.
       */
      CanvasVectorTileLayerRenderer.prototype.renderFeature = function (feature, squaredTolerance, styles, executorGroup) {
          if (!styles) {
              return false;
          }
          var loading = false;
          if (Array.isArray(styles)) {
              for (var i = 0, ii = styles.length; i < ii; ++i) {
                  loading = renderFeature$1(executorGroup, feature, styles[i], squaredTolerance, this.boundHandleStyleImageChange_) || loading;
              }
          }
          else {
              loading = renderFeature$1(executorGroup, feature, styles, squaredTolerance, this.boundHandleStyleImageChange_);
          }
          return loading;
      };
      /**
       * @param {import("../../VectorRenderTile.js").default} tile Tile.
       * @param {number} pixelRatio Pixel ratio.
       * @param {import("../../proj/Projection.js").default} projection Projection.
       * @return {boolean} A new tile image was rendered.
       * @private
       */
      CanvasVectorTileLayerRenderer.prototype.tileImageNeedsRender_ = function (tile, pixelRatio, projection) {
          var layer = /** @type {import("../../layer/VectorTile.js").default} */ (this.getLayer());
          var replayState = tile.getReplayState(layer);
          var revision = layer.getRevision();
          var sourceZ = tile.sourceZ;
          var resolution = tile.wantedResolution;
          return replayState.renderedTileResolution !== resolution || replayState.renderedTileRevision !== revision || replayState.renderedTileZ !== sourceZ;
      };
      /**
       * @param {import("../../VectorRenderTile.js").default} tile Tile.
       * @param {import("../../PluggableMap").FrameState} frameState Frame state.
       * @private
       */
      CanvasVectorTileLayerRenderer.prototype.renderTileImage_ = function (tile, frameState) {
          var layer = /** @type {import("../../layer/VectorTile.js").default} */ (this.getLayer());
          var replayState = tile.getReplayState(layer);
          var revision = layer.getRevision();
          var executorGroups = tile.executorGroups[getUid(layer)];
          replayState.renderedTileRevision = revision;
          replayState.renderedTileZ = tile.sourceZ;
          var tileCoord = tile.wrappedTileCoord;
          var z = tileCoord[0];
          var source = layer.getSource();
          var pixelRatio = frameState.pixelRatio;
          var viewState = frameState.viewState;
          var projection = viewState.projection;
          var tileGrid = source.getTileGridForProjection(projection);
          var tileResolution = tileGrid.getResolution(tile.tileCoord[0]);
          var renderPixelRatio = frameState.pixelRatio / tile.wantedResolution * tileResolution;
          var resolution = tileGrid.getResolution(z);
          var context = tile.getContext(layer);
          // Increase tile size when overzooming for low pixel ratio, to avoid blurry tiles
          pixelRatio = Math.max(pixelRatio, renderPixelRatio / pixelRatio);
          var size = source.getTilePixelSize(z, pixelRatio, projection);
          context.canvas.width = size[0];
          context.canvas.height = size[1];
          var renderScale = pixelRatio / renderPixelRatio;
          if (renderScale !== 1) {
              var canvasTransform = reset(this.tmpTransform_);
              scale(canvasTransform, renderScale, renderScale);
              context.setTransform.apply(context, canvasTransform);
          }
          var tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent);
          var pixelScale = renderPixelRatio / resolution;
          var transform = reset(this.tmpTransform_);
          scale(transform, pixelScale, -pixelScale);
          translate(transform, -tileExtent[0], -tileExtent[3]);
          for (var i = 0, ii = executorGroups.length; i < ii; ++i) {
              var executorGroup = executorGroups[i];
              executorGroup.execute(context, transform, 0, true, IMAGE_REPLAYS[layer.getRenderMode()]);
          }
          replayState.renderedTileResolution = tile.wantedResolution;
      };
      return CanvasVectorTileLayerRenderer;
  }(CanvasTileLayerRenderer));

  var __extends$1c =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
   * visible.
   * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
   * be visible.
   * @property {import("../render.js").OrderFunction} [renderOrder] Render order. Function to be used when sorting
   * features before rendering. By default features are drawn in the order that they are created. Use
   * `null` to avoid the sort, but get an undefined draw order.
   * @property {number} [renderBuffer=100] The buffer in pixels around the tile extent used by the
   * renderer when getting features from the vector tile for the rendering or hit-detection.
   * Recommended value: Vector tiles are usually generated with a buffer, so this value should match
   * the largest possible buffer of the used tiles. It should be at least the size of the largest
   * point symbol or line width.
   * @property {import("./VectorTileRenderType.js").default|string} [renderMode='hybrid'] Render mode for vector tiles:
   *  * `'image'`: Vector tiles are rendered as images. Great performance, but point symbols and texts
   *    are always rotated with the view and pixels are scaled during zoom animations. When `declutter`
   *    is set to `true`, the decluttering is done per tile resulting in labels and point symbols getting
   *    cut off at tile boundaries.
   *  * `'hybrid'`: Polygon and line elements are rendered as images, so pixels are scaled during zoom
   *    animations. Point symbols and texts are accurately rendered as vectors and can stay upright on
   *    rotated views.
   *  * `'vector'`: Everything is rendered as vectors. Use this mode for improved performance on vector
   *    tile layers with only a few rendered features (e.g. for highlighting a subset of features of
   *    another layer with the same source).
   * @property {import("../source/VectorTile.js").default} [source] Source.
   * @property {import("../PluggableMap.js").default} [map] Sets the layer as overlay on a map. The map will not manage
   * this layer in its layers collection, and the layer will be rendered on top. This is useful for
   * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
   * use {@link module:ol/Map#addLayer}.
   * @property {boolean} [declutter=false] Declutter images and text. Decluttering is applied to all
   * image and text styles of all Vector and VectorTile layers that have set this to `true`. The priority
   * is defined by the z-index of the layer, the `zIndex` of the style and the render order of features.
   * Higher z-index means higher priority. Within the same z-index, a feature rendered before another has
   * higher priority.
   * @property {import("../style/Style.js").StyleLike} [style] Layer style. See
   * {@link module:ol/style} for default style which will be used if this is not defined.
   * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will be
   * recreated during animations. This means that no vectors will be shown clipped, but the setting
   * will have a performance impact for large amounts of vector data. When set to `false`, batches
   * will be recreated when no animation is active.
   * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will be
   * recreated during interactions. See also `updateWhileAnimating`.
   * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`
   * means no preloading.
   * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.
   */
  /**
   * @classdesc
   * Layer for vector tile data that is rendered client-side.
   * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
   * property on the layer object; for example, setting `title: 'My Title'` in the
   * options means that `title` is observable, and has get/set accessors.
   *
   * @param {Options=} opt_options Options.
   * @extends {BaseVectorLayer<import("../source/VectorTile.js").default>}
   * @api
   */
  var VectorTileLayer = /** @class */ (function (_super) {
      __extends$1c(VectorTileLayer, _super);
      /**
       * @param {Options=} opt_options Options.
       */
      function VectorTileLayer(opt_options) {
          var _this = this;
          var options = opt_options ? opt_options : {};
          var baseOptions = /** @type {Object} */ (assign({}, options));
          delete baseOptions.preload;
          delete baseOptions.useInterimTilesOnError;
          _this = _super.call(this, /** @type {import("./BaseVector.js").Options} */ (baseOptions)) || this;
          var renderMode = options.renderMode || VectorTileRenderType.HYBRID;
          assert(renderMode == undefined ||
              renderMode == VectorTileRenderType.IMAGE ||
              renderMode == VectorTileRenderType.HYBRID ||
              renderMode == VectorTileRenderType.VECTOR, 28); // `renderMode` must be `'image'`, `'hybrid'` or `'vector'`.
          /**
           * @private
           * @type {VectorTileRenderType}
           */
          _this.renderMode_ = renderMode;
          _this.setPreload(options.preload ? options.preload : 0);
          _this.setUseInterimTilesOnError(options.useInterimTilesOnError !== undefined ?
              options.useInterimTilesOnError : true);
          return _this;
      }
      /**
       * Create a renderer for this layer.
       * @return {import("../renderer/Layer.js").default} A layer renderer.
       * @protected
       */
      VectorTileLayer.prototype.createRenderer = function () {
          return new CanvasVectorTileLayerRenderer(this);
      };
      /**
       * Get the topmost feature that intersects the given pixel on the viewport. Returns a promise
       * that resolves with an array of features. The array will either contain the topmost feature
       * when a hit was detected, or it will be empty.
       *
       * The hit detection algorithm used for this method is optimized for performance, but is less
       * accurate than the one used in {@link import("../PluggableMap.js").default#getFeaturesAtPixel}: Text
       * is not considered, and icons are only represented by their bounding box instead of the exact
       * image.
       *
       * @param {import("../pixel.js").Pixel} pixel Pixel.
       * @return {Promise<Array<import("../Feature").default>>} Promise that resolves with an array of features.
       * @api
       */
      VectorTileLayer.prototype.getFeatures = function (pixel) {
          return _super.prototype.getFeatures.call(this, pixel);
      };
      /**
       * @return {VectorTileRenderType} The render mode.
       */
      VectorTileLayer.prototype.getRenderMode = function () {
          return this.renderMode_;
      };
      /**
       * Return the level as number to which we will preload tiles up to.
       * @return {number} The level to preload tiles up to.
       * @observable
       * @api
       */
      VectorTileLayer.prototype.getPreload = function () {
          return /** @type {number} */ (this.get(TileProperty.PRELOAD));
      };
      /**
       * Whether we use interim tiles on error.
       * @return {boolean} Use interim tiles on error.
       * @observable
       * @api
       */
      VectorTileLayer.prototype.getUseInterimTilesOnError = function () {
          return /** @type {boolean} */ (this.get(TileProperty.USE_INTERIM_TILES_ON_ERROR));
      };
      /**
       * Set the level as number to which we will preload tiles up to.
       * @param {number} preload The level to preload tiles up to.
       * @observable
       * @api
       */
      VectorTileLayer.prototype.setPreload = function (preload) {
          this.set(TileProperty.PRELOAD, preload);
      };
      /**
       * Set whether we use interim tiles on error.
       * @param {boolean} useInterimTilesOnError Use interim tiles on error.
       * @observable
       * @api
       */
      VectorTileLayer.prototype.setUseInterimTilesOnError = function (useInterimTilesOnError) {
          this.set(TileProperty.USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);
      };
      return VectorTileLayer;
  }(BaseVectorLayer));

  /**
   * @module ol/tileurlfunction
   */
  /**
   * @param {string} template Template.
   * @param {import("./tilegrid/TileGrid.js").default} tileGrid Tile grid.
   * @return {import("./Tile.js").UrlFunction} Tile URL function.
   */
  function createFromTemplate(template, tileGrid) {
      var zRegEx = /\{z\}/g;
      var xRegEx = /\{x\}/g;
      var yRegEx = /\{y\}/g;
      var dashYRegEx = /\{-y\}/g;
      return (
      /**
       * @param {import("./tilecoord.js").TileCoord} tileCoord Tile Coordinate.
       * @param {number} pixelRatio Pixel ratio.
       * @param {import("./proj/Projection.js").default} projection Projection.
       * @return {string|undefined} Tile URL.
       */
      function (tileCoord, pixelRatio, projection) {
          if (!tileCoord) {
              return undefined;
          }
          else {
              return template.replace(zRegEx, tileCoord[0].toString())
                  .replace(xRegEx, tileCoord[1].toString())
                  .replace(yRegEx, tileCoord[2].toString())
                  .replace(dashYRegEx, function () {
                  var z = tileCoord[0];
                  var range = tileGrid.getFullTileRange(z);
                  assert(range, 55); // The {-y} placeholder requires a tile grid with extent
                  var y = range.getHeight() - tileCoord[2] - 1;
                  return y.toString();
              });
          }
      });
  }
  /**
   * @param {Array<string>} templates Templates.
   * @param {import("./tilegrid/TileGrid.js").default} tileGrid Tile grid.
   * @return {import("./Tile.js").UrlFunction} Tile URL function.
   */
  function createFromTemplates(templates, tileGrid) {
      var len = templates.length;
      var tileUrlFunctions = new Array(len);
      for (var i = 0; i < len; ++i) {
          tileUrlFunctions[i] = createFromTemplate(templates[i], tileGrid);
      }
      return createFromTileUrlFunctions(tileUrlFunctions);
  }
  /**
   * @param {Array<import("./Tile.js").UrlFunction>} tileUrlFunctions Tile URL Functions.
   * @return {import("./Tile.js").UrlFunction} Tile URL function.
   */
  function createFromTileUrlFunctions(tileUrlFunctions) {
      if (tileUrlFunctions.length === 1) {
          return tileUrlFunctions[0];
      }
      return (
      /**
       * @param {import("./tilecoord.js").TileCoord} tileCoord Tile Coordinate.
       * @param {number} pixelRatio Pixel ratio.
       * @param {import("./proj/Projection.js").default} projection Projection.
       * @return {string|undefined} Tile URL.
       */
      function (tileCoord, pixelRatio, projection) {
          if (!tileCoord) {
              return undefined;
          }
          else {
              var h = hash(tileCoord);
              var index = modulo(h, tileUrlFunctions.length);
              return tileUrlFunctions[index](tileCoord, pixelRatio, projection);
          }
      });
  }
  /**
   * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
   * @param {number} pixelRatio Pixel ratio.
   * @param {import("./proj/Projection.js").default} projection Projection.
   * @return {string|undefined} Tile URL.
   */
  function nullTileUrlFunction(tileCoord, pixelRatio, projection) {
      return undefined;
  }
  /**
   * @param {string} url URL.
   * @return {Array<string>} Array of urls.
   */
  function expandUrl(url) {
      var urls = [];
      var match = /\{([a-z])-([a-z])\}/.exec(url);
      if (match) {
          // char range
          var startCharCode = match[1].charCodeAt(0);
          var stopCharCode = match[2].charCodeAt(0);
          var charCode = void 0;
          for (charCode = startCharCode; charCode <= stopCharCode; ++charCode) {
              urls.push(url.replace(match[0], String.fromCharCode(charCode)));
          }
          return urls;
      }
      match = /\{(\d+)-(\d+)\}/.exec(url);
      if (match) {
          // number range
          var stop_1 = parseInt(match[2], 10);
          for (var i = parseInt(match[1], 10); i <= stop_1; i++) {
              urls.push(url.replace(match[0], i.toString()));
          }
          return urls;
      }
      urls.push(url);
      return urls;
  }

  /**
   * @module ol/net
   */
  /**
   * Simple JSONP helper. Supports error callbacks and a custom callback param.
   * The error callback will be called when no JSONP is executed after 10 seconds.
   *
   * @param {string} url Request url. A 'callback' query parameter will be
   *     appended.
   * @param {Function} callback Callback on success.
   * @param {function()=} opt_errback Callback on error.
   * @param {string=} opt_callbackParam Custom query parameter for the JSONP
   *     callback. Default is 'callback'.
   */
  function jsonp(url, callback, opt_errback, opt_callbackParam) {
      var script = document.createElement('script');
      var key = 'olc_' + getUid(callback);
      function cleanup() {
          delete window[key];
          script.parentNode.removeChild(script);
      }
      script.async = true;
      script.src = url + (url.indexOf('?') == -1 ? '?' : '&') +
          (opt_callbackParam || 'callback') + '=' + key;
      var timer = setTimeout(function () {
          cleanup();
          if (opt_errback) {
              opt_errback();
          }
      }, 10000);
      window[key] = function (data) {
          clearTimeout(timer);
          cleanup();
          callback(data);
      };
      document.getElementsByTagName('head')[0].appendChild(script);
  }

  /**
   * @module ol/reproj/common
   */
  /**
   * Default maximum allowed threshold  (in pixels) for reprojection
   * triangulation.
   * @type {number}
   */
  var ERROR_THRESHOLD = 0.5;

  var __extends$1d =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * A function that takes an {@link module:ol/Tile} for the tile and a
   * `{string}` for the url as arguments. The default is
   * ```js
   * source.setTileLoadFunction(function(tile, src) {
   *   tile.getImage().src = src;
   * });
   * ```
   * For more fine grained control, the load function can use fetch or XMLHttpRequest and involve
   * error handling:
   *
   * ```js
   * import TileState from 'ol/TileState';
   *
   * source.setTileLoadFunction(function(tile, src) {
   *   var xhr = new XMLHttpRequest();
   *   xhr.responseType = 'blob';
   *   xhr.addEventListener('loadend', function (evt) {
   *     var data = this.response;
   *     if (data !== undefined) {
   *       tile.getImage().src = URL.createObjectURL(data);
   *     } else {
   *       tile.setState(TileState.ERROR);
   *     }
   *   });
   *   xhr.addEventListener('error', function () {
   *     tile.setState(TileState.ERROR);
   *   });
   *   xhr.open('GET', src);
   *   xhr.send();
   * });
   * ```
   *
   * @typedef {function(Tile, string): void} LoadFunction
   * @api
   */
  /**
   * {@link module:ol/source/Tile~Tile} sources use a function of this type to get
   * the url that provides a tile for a given tile coordinate.
   *
   * This function takes an {@link module:ol/tilecoord~TileCoord} for the tile
   * coordinate, a `{number}` representing the pixel ratio and a
   * {@link module:ol/proj/Projection} for the projection  as arguments
   * and returns a `{string}` representing the tile URL, or undefined if no tile
   * should be requested for the passed tile coordinate.
   *
   * @typedef {function(import("./tilecoord.js").TileCoord, number,
   *           import("./proj/Projection.js").default): (string|undefined)} UrlFunction
   * @api
   */
  /**
   * @typedef {Object} Options
   * @property {number} [transition=250] A duration for tile opacity
   * transitions in milliseconds. A duration of 0 disables the opacity transition.
   * @api
   */
  /**
   * @classdesc
   * Base class for tiles.
   *
   * @abstract
   */
  var Tile = /** @class */ (function (_super) {
      __extends$1d(Tile, _super);
      /**
       * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
       * @param {TileState} state State.
       * @param {Options=} opt_options Tile options.
       */
      function Tile(tileCoord, state, opt_options) {
          var _this = _super.call(this) || this;
          var options = opt_options ? opt_options : {};
          /**
           * @type {import("./tilecoord.js").TileCoord}
           */
          _this.tileCoord = tileCoord;
          /**
           * @protected
           * @type {TileState}
           */
          _this.state = state;
          /**
           * An "interim" tile for this tile. The interim tile may be used while this
           * one is loading, for "smooth" transitions when changing params/dimensions
           * on the source.
           * @type {Tile}
           */
          _this.interimTile = null;
          /**
           * The tile is available at the highest possible resolution. Subclasses can
           * set this to `false` initially. Tile load listeners will not be
           * unregistered before this is set to `true` and a `#changed()` is called.
           * @type {boolean}
           */
          _this.hifi = true;
          /**
           * A key assigned to the tile. This is used by the tile source to determine
           * if this tile can effectively be used, or if a new tile should be created
           * and this one be used as an interim tile for this new tile.
           * @type {string}
           */
          _this.key = '';
          /**
           * The duration for the opacity transition.
           * @type {number}
           */
          _this.transition_ = options.transition === undefined ? 250 : options.transition;
          /**
           * Lookup of start times for rendering transitions.  If the start time is
           * equal to -1, the transition is complete.
           * @type {Object<string, number>}
           */
          _this.transitionStarts_ = {};
          return _this;
      }
      /**
       * @protected
       */
      Tile.prototype.changed = function () {
          this.dispatchEvent(EventType.CHANGE);
      };
      /**
       * Called by the tile cache when the tile is removed from the cache due to expiry
       */
      Tile.prototype.release = function () {
      };
      /**
       * @return {string} Key.
       */
      Tile.prototype.getKey = function () {
          return this.key + '/' + this.tileCoord;
      };
      /**
       * Get the interim tile most suitable for rendering using the chain of interim
       * tiles. This corresponds to the  most recent tile that has been loaded, if no
       * such tile exists, the original tile is returned.
       * @return {!Tile} Best tile for rendering.
       */
      Tile.prototype.getInterimTile = function () {
          if (!this.interimTile) {
              //empty chain
              return this;
          }
          var tile = this.interimTile;
          // find the first loaded tile and return it. Since the chain is sorted in
          // decreasing order of creation time, there is no need to search the remainder
          // of the list (all those tiles correspond to older requests and will be
          // cleaned up by refreshInterimChain)
          do {
              if (tile.getState() == TileState.LOADED) {
                  // Show tile immediately instead of fading it in after loading, because
                  // the interim tile is in place already
                  this.transition_ = 0;
                  return tile;
              }
              tile = tile.interimTile;
          } while (tile);
          // we can not find a better tile
          return this;
      };
      /**
       * Goes through the chain of interim tiles and discards sections of the chain
       * that are no longer relevant.
       */
      Tile.prototype.refreshInterimChain = function () {
          if (!this.interimTile) {
              return;
          }
          var tile = this.interimTile;
          var prev = /** @type {Tile} */ (this);
          do {
              if (tile.getState() == TileState.LOADED) {
                  //we have a loaded tile, we can discard the rest of the list
                  //we would could abort any LOADING tile request
                  //older than this tile (i.e. any LOADING tile following this entry in the chain)
                  tile.interimTile = null;
                  break;
              }
              else if (tile.getState() == TileState.LOADING) {
                  //keep this LOADING tile any loaded tiles later in the chain are
                  //older than this tile, so we're still interested in the request
                  prev = tile;
              }
              else if (tile.getState() == TileState.IDLE) {
                  //the head of the list is the most current tile, we don't need
                  //to start any other requests for this chain
                  prev.interimTile = tile.interimTile;
              }
              else {
                  prev = tile;
              }
              tile = prev.interimTile;
          } while (tile);
      };
      /**
       * Get the tile coordinate for this tile.
       * @return {import("./tilecoord.js").TileCoord} The tile coordinate.
       * @api
       */
      Tile.prototype.getTileCoord = function () {
          return this.tileCoord;
      };
      /**
       * @return {TileState} State.
       */
      Tile.prototype.getState = function () {
          return this.state;
      };
      /**
       * Sets the state of this tile. If you write your own {@link module:ol/Tile~LoadFunction tileLoadFunction} ,
       * it is important to set the state correctly to {@link module:ol/TileState~ERROR}
       * when the tile cannot be loaded. Otherwise the tile cannot be removed from
       * the tile queue and will block other requests.
       * @param {TileState} state State.
       * @api
       */
      Tile.prototype.setState = function (state) {
          if (this.state !== TileState.ERROR && this.state > state) {
              throw new Error('Tile load sequence violation');
          }
          this.state = state;
          this.changed();
      };
      /**
       * Load the image or retry if loading previously failed.
       * Loading is taken care of by the tile queue, and calling this method is
       * only needed for preloading or for reloading in case of an error.
       * @abstract
       * @api
       */
      Tile.prototype.load = function () {
          abstract();
      };
      /**
       * Get the alpha value for rendering.
       * @param {string} id An id for the renderer.
       * @param {number} time The render frame time.
       * @return {number} A number between 0 and 1.
       */
      Tile.prototype.getAlpha = function (id, time) {
          if (!this.transition_) {
              return 1;
          }
          var start = this.transitionStarts_[id];
          if (!start) {
              start = time;
              this.transitionStarts_[id] = start;
          }
          else if (start === -1) {
              return 1;
          }
          var delta = time - start + (1000 / 60); // avoid rendering at 0
          if (delta >= this.transition_) {
              return 1;
          }
          return easeIn(delta / this.transition_);
      };
      /**
       * Determine if a tile is in an alpha transition.  A tile is considered in
       * transition if tile.getAlpha() has not yet been called or has been called
       * and returned 1.
       * @param {string} id An id for the renderer.
       * @return {boolean} The tile is in transition.
       */
      Tile.prototype.inTransition = function (id) {
          if (!this.transition_) {
              return false;
          }
          return this.transitionStarts_[id] !== -1;
      };
      /**
       * Mark a transition as complete.
       * @param {string} id An id for the renderer.
       */
      Tile.prototype.endTransition = function (id) {
          if (this.transition_) {
              this.transitionStarts_[id] = -1;
          }
      };
      return Tile;
  }(Target));

  var __extends$1e =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  var ImageTile = /** @class */ (function (_super) {
      __extends$1e(ImageTile, _super);
      /**
       * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
       * @param {TileState} state State.
       * @param {string} src Image source URI.
       * @param {?string} crossOrigin Cross origin.
       * @param {import("./Tile.js").LoadFunction} tileLoadFunction Tile load function.
       * @param {import("./Tile.js").Options=} opt_options Tile options.
       */
      function ImageTile(tileCoord, state, src, crossOrigin, tileLoadFunction, opt_options) {
          var _this = _super.call(this, tileCoord, state, opt_options) || this;
          /**
           * @private
           * @type {?string}
           */
          _this.crossOrigin_ = crossOrigin;
          /**
           * Image URI
           *
           * @private
           * @type {string}
           */
          _this.src_ = src;
          /**
           * @private
           * @type {HTMLImageElement|HTMLCanvasElement}
           */
          _this.image_ = new Image();
          if (crossOrigin !== null) {
              _this.image_.crossOrigin = crossOrigin;
          }
          /**
           * @private
           * @type {?function():void}
           */
          _this.unlisten_ = null;
          /**
           * @private
           * @type {import("./Tile.js").LoadFunction}
           */
          _this.tileLoadFunction_ = tileLoadFunction;
          return _this;
      }
      /**
       * Get the HTML image element for this tile (may be a Canvas, Image, or Video).
       * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
       * @api
       */
      ImageTile.prototype.getImage = function () {
          return this.image_;
      };
      /**
       * @inheritDoc
       */
      ImageTile.prototype.getKey = function () {
          return this.src_;
      };
      /**
       * Tracks loading or read errors.
       *
       * @private
       */
      ImageTile.prototype.handleImageError_ = function () {
          this.state = TileState.ERROR;
          this.unlistenImage_();
          this.image_ = getBlankImage();
          this.changed();
      };
      /**
       * Tracks successful image load.
       *
       * @private
       */
      ImageTile.prototype.handleImageLoad_ = function () {
          var image = /** @type {HTMLImageElement} */ (this.image_);
          if (image.naturalWidth && image.naturalHeight) {
              this.state = TileState.LOADED;
          }
          else {
              this.state = TileState.EMPTY;
          }
          this.unlistenImage_();
          this.changed();
      };
      /**
       * @inheritDoc
       * @api
       */
      ImageTile.prototype.load = function () {
          if (this.state == TileState.ERROR) {
              this.state = TileState.IDLE;
              this.image_ = new Image();
              if (this.crossOrigin_ !== null) {
                  this.image_.crossOrigin = this.crossOrigin_;
              }
          }
          if (this.state == TileState.IDLE) {
              this.state = TileState.LOADING;
              this.changed();
              this.tileLoadFunction_(this, this.src_);
              this.unlisten_ = listenImage(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this));
          }
      };
      /**
       * Discards event handlers which listen for load completion or errors.
       *
       * @private
       */
      ImageTile.prototype.unlistenImage_ = function () {
          if (this.unlisten_) {
              this.unlisten_();
              this.unlisten_ = null;
          }
      };
      return ImageTile;
  }(Tile));
  /**
   * Get a 1-pixel blank image.
   * @return {HTMLCanvasElement} Blank image.
   */
  function getBlankImage() {
      var ctx = createCanvasContext2D(1, 1);
      ctx.fillStyle = 'rgba(0,0,0,0)';
      ctx.fillRect(0, 0, 1, 1);
      return ctx.canvas;
  }

  /**
   * @module ol/structs/LRUCache
   */
  /**
   * @typedef {Object} Entry
   * @property {string} key_
   * @property {Object} newer
   * @property {Object} older
   * @property {*} value_
   */
  /**
   * @classdesc
   * Implements a Least-Recently-Used cache where the keys do not conflict with
   * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring
   * items from the cache is the responsibility of the user.
   *
   * @fires import("../events/Event.js").default
   * @template T
   */
  var LRUCache = /** @class */ (function () {
      /**
       * @param {number=} opt_highWaterMark High water mark.
       */
      function LRUCache(opt_highWaterMark) {
          /**
           * @type {number}
           */
          this.highWaterMark = opt_highWaterMark !== undefined ? opt_highWaterMark : 2048;
          /**
           * @private
           * @type {number}
           */
          this.count_ = 0;
          /**
           * @private
           * @type {!Object<string, Entry>}
           */
          this.entries_ = {};
          /**
           * @private
           * @type {?Entry}
           */
          this.oldest_ = null;
          /**
           * @private
           * @type {?Entry}
           */
          this.newest_ = null;
      }
      /**
       * @return {boolean} Can expire cache.
       */
      LRUCache.prototype.canExpireCache = function () {
          return this.getCount() > this.highWaterMark;
      };
      /**
       * FIXME empty description for jsdoc
       */
      LRUCache.prototype.clear = function () {
          this.count_ = 0;
          this.entries_ = {};
          this.oldest_ = null;
          this.newest_ = null;
      };
      /**
       * @param {string} key Key.
       * @return {boolean} Contains key.
       */
      LRUCache.prototype.containsKey = function (key) {
          return this.entries_.hasOwnProperty(key);
      };
      /**
       * @param {function(T, string, LRUCache<T>): ?} f The function
       *     to call for every entry from the oldest to the newer. This function takes
       *     3 arguments (the entry value, the entry key and the LRUCache object).
       *     The return value is ignored.
       */
      LRUCache.prototype.forEach = function (f) {
          var entry = this.oldest_;
          while (entry) {
              f(entry.value_, entry.key_, this);
              entry = entry.newer;
          }
      };
      /**
       * @param {string} key Key.
       * @param {*=} opt_options Options (reserverd for subclasses).
       * @return {T} Value.
       */
      LRUCache.prototype.get = function (key, opt_options) {
          var entry = this.entries_[key];
          assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache
          if (entry === this.newest_) {
              return entry.value_;
          }
          else if (entry === this.oldest_) {
              this.oldest_ = /** @type {Entry} */ (this.oldest_.newer);
              this.oldest_.older = null;
          }
          else {
              entry.newer.older = entry.older;
              entry.older.newer = entry.newer;
          }
          entry.newer = null;
          entry.older = this.newest_;
          this.newest_.newer = entry;
          this.newest_ = entry;
          return entry.value_;
      };
      /**
       * Remove an entry from the cache.
       * @param {string} key The entry key.
       * @return {T} The removed entry.
       */
      LRUCache.prototype.remove = function (key) {
          var entry = this.entries_[key];
          assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache
          if (entry === this.newest_) {
              this.newest_ = /** @type {Entry} */ (entry.older);
              if (this.newest_) {
                  this.newest_.newer = null;
              }
          }
          else if (entry === this.oldest_) {
              this.oldest_ = /** @type {Entry} */ (entry.newer);
              if (this.oldest_) {
                  this.oldest_.older = null;
              }
          }
          else {
              entry.newer.older = entry.older;
              entry.older.newer = entry.newer;
          }
          delete this.entries_[key];
          --this.count_;
          return entry.value_;
      };
      /**
       * @return {number} Count.
       */
      LRUCache.prototype.getCount = function () {
          return this.count_;
      };
      /**
       * @return {Array<string>} Keys.
       */
      LRUCache.prototype.getKeys = function () {
          var keys = new Array(this.count_);
          var i = 0;
          var entry;
          for (entry = this.newest_; entry; entry = entry.older) {
              keys[i++] = entry.key_;
          }
          return keys;
      };
      /**
       * @return {Array<T>} Values.
       */
      LRUCache.prototype.getValues = function () {
          var values = new Array(this.count_);
          var i = 0;
          var entry;
          for (entry = this.newest_; entry; entry = entry.older) {
              values[i++] = entry.value_;
          }
          return values;
      };
      /**
       * @return {T} Last value.
       */
      LRUCache.prototype.peekLast = function () {
          return this.oldest_.value_;
      };
      /**
       * @return {string} Last key.
       */
      LRUCache.prototype.peekLastKey = function () {
          return this.oldest_.key_;
      };
      /**
       * Get the key of the newest item in the cache.  Throws if the cache is empty.
       * @return {string} The newest key.
       */
      LRUCache.prototype.peekFirstKey = function () {
          return this.newest_.key_;
      };
      /**
       * @return {T} value Value.
       */
      LRUCache.prototype.pop = function () {
          var entry = this.oldest_;
          delete this.entries_[entry.key_];
          if (entry.newer) {
              entry.newer.older = null;
          }
          this.oldest_ = /** @type {Entry} */ (entry.newer);
          if (!this.oldest_) {
              this.newest_ = null;
          }
          --this.count_;
          return entry.value_;
      };
      /**
       * @param {string} key Key.
       * @param {T} value Value.
       */
      LRUCache.prototype.replace = function (key, value) {
          this.get(key); // update `newest_`
          this.entries_[key].value_ = value;
      };
      /**
       * @param {string} key Key.
       * @param {T} value Value.
       */
      LRUCache.prototype.set = function (key, value) {
          assert(!(key in this.entries_), 16); // Tried to set a value for a key that is used already
          var entry = {
              key_: key,
              newer: null,
              older: this.newest_,
              value_: value
          };
          if (!this.newest_) {
              this.oldest_ = entry;
          }
          else {
              this.newest_.newer = entry;
          }
          this.newest_ = entry;
          this.entries_[key] = entry;
          ++this.count_;
      };
      /**
       * Set a maximum number of entries for the cache.
       * @param {number} size Cache size.
       * @api
       */
      LRUCache.prototype.setSize = function (size) {
          this.highWaterMark = size;
      };
      return LRUCache;
  }());

  var __extends$1f =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  var TileCache = /** @class */ (function (_super) {
      __extends$1f(TileCache, _super);
      function TileCache() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      /**
       * @param {!Object<string, boolean>} usedTiles Used tiles.
       */
      TileCache.prototype.expireCache = function (usedTiles) {
          while (this.canExpireCache()) {
              var tile = this.peekLast();
              if (tile.getKey() in usedTiles) {
                  break;
              }
              else {
                  this.pop().release();
              }
          }
      };
      /**
       * Prune all tiles from the cache that don't have the same z as the newest tile.
       */
      TileCache.prototype.pruneExceptNewestZ = function () {
          if (this.getCount() === 0) {
              return;
          }
          var key = this.peekFirstKey();
          var tileCoord = fromKey(key);
          var z = tileCoord[0];
          this.forEach(function (tile) {
              if (tile.tileCoord[0] !== z) {
                  this.remove(getKey$1(tile.tileCoord));
                  tile.release();
              }
          }.bind(this));
      };
      return TileCache;
  }(LRUCache));

  /**
   * @module ol/reproj
   */
  /**
   * Calculates ideal resolution to use from the source in order to achieve
   * pixel mapping as close as possible to 1:1 during reprojection.
   * The resolution is calculated regardless of what resolutions
   * are actually available in the dataset (TileGrid, Image, ...).
   *
   * @param {import("./proj/Projection.js").default} sourceProj Source projection.
   * @param {import("./proj/Projection.js").default} targetProj Target projection.
   * @param {import("./coordinate.js").Coordinate} targetCenter Target center.
   * @param {number} targetResolution Target resolution.
   * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.
   */
  function calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution) {
      var sourceCenter = transform(targetCenter, targetProj, sourceProj);
      // calculate the ideal resolution of the source data
      var sourceResolution = getPointResolution(targetProj, targetResolution, targetCenter);
      var targetMetersPerUnit = targetProj.getMetersPerUnit();
      if (targetMetersPerUnit !== undefined) {
          sourceResolution *= targetMetersPerUnit;
      }
      var sourceMetersPerUnit = sourceProj.getMetersPerUnit();
      if (sourceMetersPerUnit !== undefined) {
          sourceResolution /= sourceMetersPerUnit;
      }
      // Based on the projection properties, the point resolution at the specified
      // coordinates may be slightly different. We need to reverse-compensate this
      // in order to achieve optimal results.
      var sourceExtent = sourceProj.getExtent();
      if (!sourceExtent || containsCoordinate(sourceExtent, sourceCenter)) {
          var compensationFactor = getPointResolution(sourceProj, sourceResolution, sourceCenter) /
              sourceResolution;
          if (isFinite(compensationFactor) && compensationFactor > 0) {
              sourceResolution /= compensationFactor;
          }
      }
      return sourceResolution;
  }
  /**
   * Enlarge the clipping triangle point by 1 pixel to ensure the edges overlap
   * in order to mask gaps caused by antialiasing.
   *
   * @param {number} centroidX Centroid of the triangle (x coordinate in pixels).
   * @param {number} centroidY Centroid of the triangle (y coordinate in pixels).
   * @param {number} x X coordinate of the point (in pixels).
   * @param {number} y Y coordinate of the point (in pixels).
   * @return {import("./coordinate.js").Coordinate} New point 1 px farther from the centroid.
   */
  function enlargeClipPoint(centroidX, centroidY, x, y) {
      var dX = x - centroidX;
      var dY = y - centroidY;
      var distance = Math.sqrt(dX * dX + dY * dY);
      return [Math.round(x + dX / distance), Math.round(y + dY / distance)];
  }
  /**
   * Renders the source data into new canvas based on the triangulation.
   *
   * @param {number} width Width of the canvas.
   * @param {number} height Height of the canvas.
   * @param {number} pixelRatio Pixel ratio.
   * @param {number} sourceResolution Source resolution.
   * @param {import("./extent.js").Extent} sourceExtent Extent of the data source.
   * @param {number} targetResolution Target resolution.
   * @param {import("./extent.js").Extent} targetExtent Target extent.
   * @param {import("./reproj/Triangulation.js").default} triangulation
   * Calculated triangulation.
   * @param {Array<{extent: import("./extent.js").Extent,
   *                 image: (HTMLCanvasElement|HTMLImageElement|HTMLVideoElement)}>} sources
   * Array of sources.
   * @param {number} gutter Gutter of the sources.
   * @param {boolean=} opt_renderEdges Render reprojection edges.
   * @return {HTMLCanvasElement} Canvas with reprojected data.
   */
  function render$2(width, height, pixelRatio, sourceResolution, sourceExtent, targetResolution, targetExtent, triangulation, sources, gutter, opt_renderEdges) {
      var context = createCanvasContext2D(Math.round(pixelRatio * width), Math.round(pixelRatio * height));
      if (sources.length === 0) {
          return context.canvas;
      }
      context.scale(pixelRatio, pixelRatio);
      var sourceDataExtent = createEmpty();
      sources.forEach(function (src, i, arr) {
          extend(sourceDataExtent, src.extent);
      });
      var canvasWidthInUnits = getWidth(sourceDataExtent);
      var canvasHeightInUnits = getHeight(sourceDataExtent);
      var stitchContext = createCanvasContext2D(Math.round(pixelRatio * canvasWidthInUnits / sourceResolution), Math.round(pixelRatio * canvasHeightInUnits / sourceResolution));
      var stitchScale = pixelRatio / sourceResolution;
      sources.forEach(function (src, i, arr) {
          var xPos = src.extent[0] - sourceDataExtent[0];
          var yPos = -(src.extent[3] - sourceDataExtent[3]);
          var srcWidth = getWidth(src.extent);
          var srcHeight = getHeight(src.extent);
          stitchContext.drawImage(src.image, gutter, gutter, src.image.width - 2 * gutter, src.image.height - 2 * gutter, xPos * stitchScale, yPos * stitchScale, srcWidth * stitchScale, srcHeight * stitchScale);
      });
      var targetTopLeft = getTopLeft(targetExtent);
      triangulation.getTriangles().forEach(function (triangle, i, arr) {
          /* Calculate affine transform (src -> dst)
           * Resulting matrix can be used to transform coordinate
           * from `sourceProjection` to destination pixels.
           *
           * To optimize number of context calls and increase numerical stability,
           * we also do the following operations:
           * trans(-topLeftExtentCorner), scale(1 / targetResolution), scale(1, -1)
           * here before solving the linear system so [ui, vi] are pixel coordinates.
           *
           * Src points: xi, yi
           * Dst points: ui, vi
           * Affine coefficients: aij
           *
           * | x0 y0 1  0  0 0 |   |a00|   |u0|
           * | x1 y1 1  0  0 0 |   |a01|   |u1|
           * | x2 y2 1  0  0 0 | x |a02| = |u2|
           * |  0  0 0 x0 y0 1 |   |a10|   |v0|
           * |  0  0 0 x1 y1 1 |   |a11|   |v1|
           * |  0  0 0 x2 y2 1 |   |a12|   |v2|
           */
          var source = triangle.source;
          var target = triangle.target;
          var x0 = source[0][0], y0 = source[0][1];
          var x1 = source[1][0], y1 = source[1][1];
          var x2 = source[2][0], y2 = source[2][1];
          var u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;
          var v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;
          var u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;
          var v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;
          var u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;
          var v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;
          // Shift all the source points to improve numerical stability
          // of all the subsequent calculations. The [x0, y0] is used here.
          // This is also used to simplify the linear system.
          var sourceNumericalShiftX = x0;
          var sourceNumericalShiftY = y0;
          x0 = 0;
          y0 = 0;
          x1 -= sourceNumericalShiftX;
          y1 -= sourceNumericalShiftY;
          x2 -= sourceNumericalShiftX;
          y2 -= sourceNumericalShiftY;
          var augmentedMatrix = [
              [x1, y1, 0, 0, u1 - u0],
              [x2, y2, 0, 0, u2 - u0],
              [0, 0, x1, y1, v1 - v0],
              [0, 0, x2, y2, v2 - v0]
          ];
          var affineCoefs = solveLinearSystem(augmentedMatrix);
          if (!affineCoefs) {
              return;
          }
          context.save();
          context.beginPath();
          var centroidX = (u0 + u1 + u2) / 3;
          var centroidY = (v0 + v1 + v2) / 3;
          var p0 = enlargeClipPoint(centroidX, centroidY, u0, v0);
          var p1 = enlargeClipPoint(centroidX, centroidY, u1, v1);
          var p2 = enlargeClipPoint(centroidX, centroidY, u2, v2);
          context.moveTo(p1[0], p1[1]);
          context.lineTo(p0[0], p0[1]);
          context.lineTo(p2[0], p2[1]);
          context.clip();
          context.transform(affineCoefs[0], affineCoefs[2], affineCoefs[1], affineCoefs[3], u0, v0);
          context.translate(sourceDataExtent[0] - sourceNumericalShiftX, sourceDataExtent[3] - sourceNumericalShiftY);
          context.scale(sourceResolution / pixelRatio, -sourceResolution / pixelRatio);
          context.drawImage(stitchContext.canvas, 0, 0);
          context.restore();
      });
      if (opt_renderEdges) {
          context.save();
          context.strokeStyle = 'black';
          context.lineWidth = 1;
          triangulation.getTriangles().forEach(function (triangle, i, arr) {
              var target = triangle.target;
              var u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;
              var v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;
              var u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;
              var v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;
              var u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;
              var v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;
              context.beginPath();
              context.moveTo(u1, v1);
              context.lineTo(u0, v0);
              context.lineTo(u2, v2);
              context.closePath();
              context.stroke();
          });
          context.restore();
      }
      return context.canvas;
  }

  /**
   * @module ol/reproj/Triangulation
   */
  /**
   * Single triangle; consists of 3 source points and 3 target points.
   * @typedef {Object} Triangle
   * @property {Array<import("../coordinate.js").Coordinate>} source
   * @property {Array<import("../coordinate.js").Coordinate>} target
   */
  /**
   * Maximum number of subdivision steps during raster reprojection triangulation.
   * Prevents high memory usage and large number of proj4 calls (for certain
   * transformations and areas). At most `2*(2^this)` triangles are created for
   * each triangulated extent (tile/image).
   * @type {number}
   */
  var MAX_SUBDIVISION = 10;
  /**
   * Maximum allowed size of triangle relative to world width. When transforming
   * corners of world extent between certain projections, the resulting
   * triangulation seems to have zero error and no subdivision is performed. If
   * the triangle width is more than this (relative to world width; 0-1),
   * subdivison is forced (up to `MAX_SUBDIVISION`). Default is `0.25`.
   * @type {number}
   */
  var MAX_TRIANGLE_WIDTH = 0.25;
  /**
   * @classdesc
   * Class containing triangulation of the given target extent.
   * Used for determining source data and the reprojection itself.
   */
  var Triangulation = /** @class */ (function () {
      /**
       * @param {import("../proj/Projection.js").default} sourceProj Source projection.
       * @param {import("../proj/Projection.js").default} targetProj Target projection.
       * @param {import("../extent.js").Extent} targetExtent Target extent to triangulate.
       * @param {import("../extent.js").Extent} maxSourceExtent Maximal source extent that can be used.
       * @param {number} errorThreshold Acceptable error (in source units).
       * @param {?number} opt_destinationResolution The (optional) resolution of the destination.
       */
      function Triangulation(sourceProj, targetProj, targetExtent, maxSourceExtent, errorThreshold, opt_destinationResolution) {
          /**
           * @type {import("../proj/Projection.js").default}
           * @private
           */
          this.sourceProj_ = sourceProj;
          /**
           * @type {import("../proj/Projection.js").default}
           * @private
           */
          this.targetProj_ = targetProj;
          /** @type {!Object<string, import("../coordinate.js").Coordinate>} */
          var transformInvCache = {};
          var transformInv = getTransform(this.targetProj_, this.sourceProj_);
          /**
           * @param {import("../coordinate.js").Coordinate} c A coordinate.
           * @return {import("../coordinate.js").Coordinate} Transformed coordinate.
           * @private
           */
          this.transformInv_ = function (c) {
              var key = c[0] + '/' + c[1];
              if (!transformInvCache[key]) {
                  transformInvCache[key] = transformInv(c);
              }
              return transformInvCache[key];
          };
          /**
           * @type {import("../extent.js").Extent}
           * @private
           */
          this.maxSourceExtent_ = maxSourceExtent;
          /**
           * @type {number}
           * @private
           */
          this.errorThresholdSquared_ = errorThreshold * errorThreshold;
          /**
           * @type {Array<Triangle>}
           * @private
           */
          this.triangles_ = [];
          /**
           * Indicates that the triangulation crosses edge of the source projection.
           * @type {boolean}
           * @private
           */
          this.wrapsXInSource_ = false;
          /**
           * @type {boolean}
           * @private
           */
          this.canWrapXInSource_ = this.sourceProj_.canWrapX() &&
              !!maxSourceExtent &&
              !!this.sourceProj_.getExtent() &&
              (getWidth(maxSourceExtent) == getWidth(this.sourceProj_.getExtent()));
          /**
           * @type {?number}
           * @private
           */
          this.sourceWorldWidth_ = this.sourceProj_.getExtent() ?
              getWidth(this.sourceProj_.getExtent()) : null;
          /**
           * @type {?number}
           * @private
           */
          this.targetWorldWidth_ = this.targetProj_.getExtent() ?
              getWidth(this.targetProj_.getExtent()) : null;
          var destinationTopLeft = getTopLeft(targetExtent);
          var destinationTopRight = getTopRight(targetExtent);
          var destinationBottomRight = getBottomRight(targetExtent);
          var destinationBottomLeft = getBottomLeft(targetExtent);
          var sourceTopLeft = this.transformInv_(destinationTopLeft);
          var sourceTopRight = this.transformInv_(destinationTopRight);
          var sourceBottomRight = this.transformInv_(destinationBottomRight);
          var sourceBottomLeft = this.transformInv_(destinationBottomLeft);
          /*
           * The maxSubdivision controls how many splittings of the target area can
           * be done. The idea here is to do a linear mapping of the target areas
           * but the actual overal reprojection (can be) extremely non-linear. The
           * default value of MAX_SUBDIVISION was chosen based on mapping a 256x256
           * tile size. However this function is also called to remap canvas rendered
           * layers which can be much larger. This calculation increases the maxSubdivision
           * value by the right factor so that each 256x256 pixel area has
           * MAX_SUBDIVISION divisions.
           */
          var maxSubdivision = MAX_SUBDIVISION + (opt_destinationResolution ?
              Math.max(0, Math.ceil(Math.log2(getArea(targetExtent) /
                  (opt_destinationResolution * opt_destinationResolution * 256 * 256))))
              : 0);
          this.addQuad_(destinationTopLeft, destinationTopRight, destinationBottomRight, destinationBottomLeft, sourceTopLeft, sourceTopRight, sourceBottomRight, sourceBottomLeft, maxSubdivision);
          if (this.wrapsXInSource_) {
              var leftBound_1 = Infinity;
              this.triangles_.forEach(function (triangle, i, arr) {
                  leftBound_1 = Math.min(leftBound_1, triangle.source[0][0], triangle.source[1][0], triangle.source[2][0]);
              });
              // Shift triangles to be as close to `leftBound` as possible
              // (if the distance is more than `worldWidth / 2` it can be closer.
              this.triangles_.forEach(function (triangle) {
                  if (Math.max(triangle.source[0][0], triangle.source[1][0], triangle.source[2][0]) - leftBound_1 > this.sourceWorldWidth_ / 2) {
                      var newTriangle = [[triangle.source[0][0], triangle.source[0][1]],
                          [triangle.source[1][0], triangle.source[1][1]],
                          [triangle.source[2][0], triangle.source[2][1]]];
                      if ((newTriangle[0][0] - leftBound_1) > this.sourceWorldWidth_ / 2) {
                          newTriangle[0][0] -= this.sourceWorldWidth_;
                      }
                      if ((newTriangle[1][0] - leftBound_1) > this.sourceWorldWidth_ / 2) {
                          newTriangle[1][0] -= this.sourceWorldWidth_;
                      }
                      if ((newTriangle[2][0] - leftBound_1) > this.sourceWorldWidth_ / 2) {
                          newTriangle[2][0] -= this.sourceWorldWidth_;
                      }
                      // Rarely (if the extent contains both the dateline and prime meridian)
                      // the shift can in turn break some triangles.
                      // Detect this here and don't shift in such cases.
                      var minX = Math.min(newTriangle[0][0], newTriangle[1][0], newTriangle[2][0]);
                      var maxX = Math.max(newTriangle[0][0], newTriangle[1][0], newTriangle[2][0]);
                      if ((maxX - minX) < this.sourceWorldWidth_ / 2) {
                          triangle.source = newTriangle;
                      }
                  }
              }.bind(this));
          }
          transformInvCache = {};
      }
      /**
       * Adds triangle to the triangulation.
       * @param {import("../coordinate.js").Coordinate} a The target a coordinate.
       * @param {import("../coordinate.js").Coordinate} b The target b coordinate.
       * @param {import("../coordinate.js").Coordinate} c The target c coordinate.
       * @param {import("../coordinate.js").Coordinate} aSrc The source a coordinate.
       * @param {import("../coordinate.js").Coordinate} bSrc The source b coordinate.
       * @param {import("../coordinate.js").Coordinate} cSrc The source c coordinate.
       * @private
       */
      Triangulation.prototype.addTriangle_ = function (a, b, c, aSrc, bSrc, cSrc) {
          this.triangles_.push({
              source: [aSrc, bSrc, cSrc],
              target: [a, b, c]
          });
      };
      /**
       * Adds quad (points in clock-wise order) to the triangulation
       * (and reprojects the vertices) if valid.
       * Performs quad subdivision if needed to increase precision.
       *
       * @param {import("../coordinate.js").Coordinate} a The target a coordinate.
       * @param {import("../coordinate.js").Coordinate} b The target b coordinate.
       * @param {import("../coordinate.js").Coordinate} c The target c coordinate.
       * @param {import("../coordinate.js").Coordinate} d The target d coordinate.
       * @param {import("../coordinate.js").Coordinate} aSrc The source a coordinate.
       * @param {import("../coordinate.js").Coordinate} bSrc The source b coordinate.
       * @param {import("../coordinate.js").Coordinate} cSrc The source c coordinate.
       * @param {import("../coordinate.js").Coordinate} dSrc The source d coordinate.
       * @param {number} maxSubdivision Maximal allowed subdivision of the quad.
       * @private
       */
      Triangulation.prototype.addQuad_ = function (a, b, c, d, aSrc, bSrc, cSrc, dSrc, maxSubdivision) {
          var sourceQuadExtent = boundingExtent([aSrc, bSrc, cSrc, dSrc]);
          var sourceCoverageX = this.sourceWorldWidth_ ?
              getWidth(sourceQuadExtent) / this.sourceWorldWidth_ : null;
          var sourceWorldWidth = /** @type {number} */ (this.sourceWorldWidth_);
          // when the quad is wrapped in the source projection
          // it covers most of the projection extent, but not fully
          var wrapsX = this.sourceProj_.canWrapX() &&
              sourceCoverageX > 0.5 && sourceCoverageX < 1;
          var needsSubdivision = false;
          if (maxSubdivision > 0) {
              if (this.targetProj_.isGlobal() && this.targetWorldWidth_) {
                  var targetQuadExtent = boundingExtent([a, b, c, d]);
                  var targetCoverageX = getWidth(targetQuadExtent) / this.targetWorldWidth_;
                  needsSubdivision = targetCoverageX > MAX_TRIANGLE_WIDTH ||
                      needsSubdivision;
              }
              if (!wrapsX && this.sourceProj_.isGlobal() && sourceCoverageX) {
                  needsSubdivision = sourceCoverageX > MAX_TRIANGLE_WIDTH ||
                      needsSubdivision;
              }
          }
          if (!needsSubdivision && this.maxSourceExtent_) {
              if (!intersects(sourceQuadExtent, this.maxSourceExtent_)) {
                  // whole quad outside source projection extent -> ignore
                  return;
              }
          }
          if (!needsSubdivision) {
              if (!isFinite(aSrc[0]) || !isFinite(aSrc[1]) ||
                  !isFinite(bSrc[0]) || !isFinite(bSrc[1]) ||
                  !isFinite(cSrc[0]) || !isFinite(cSrc[1]) ||
                  !isFinite(dSrc[0]) || !isFinite(dSrc[1])) {
                  if (maxSubdivision > 0) {
                      needsSubdivision = true;
                  }
                  else {
                      return;
                  }
              }
          }
          if (maxSubdivision > 0) {
              if (!needsSubdivision) {
                  var center = [(a[0] + c[0]) / 2, (a[1] + c[1]) / 2];
                  var centerSrc = this.transformInv_(center);
                  var dx = void 0;
                  if (wrapsX) {
                      var centerSrcEstimX = (modulo(aSrc[0], sourceWorldWidth) +
                          modulo(cSrc[0], sourceWorldWidth)) / 2;
                      dx = centerSrcEstimX -
                          modulo(centerSrc[0], sourceWorldWidth);
                  }
                  else {
                      dx = (aSrc[0] + cSrc[0]) / 2 - centerSrc[0];
                  }
                  var dy = (aSrc[1] + cSrc[1]) / 2 - centerSrc[1];
                  var centerSrcErrorSquared = dx * dx + dy * dy;
                  needsSubdivision = centerSrcErrorSquared > this.errorThresholdSquared_;
              }
              if (needsSubdivision) {
                  if (Math.abs(a[0] - c[0]) <= Math.abs(a[1] - c[1])) {
                      // split horizontally (top & bottom)
                      var bc = [(b[0] + c[0]) / 2, (b[1] + c[1]) / 2];
                      var bcSrc = this.transformInv_(bc);
                      var da = [(d[0] + a[0]) / 2, (d[1] + a[1]) / 2];
                      var daSrc = this.transformInv_(da);
                      this.addQuad_(a, b, bc, da, aSrc, bSrc, bcSrc, daSrc, maxSubdivision - 1);
                      this.addQuad_(da, bc, c, d, daSrc, bcSrc, cSrc, dSrc, maxSubdivision - 1);
                  }
                  else {
                      // split vertically (left & right)
                      var ab = [(a[0] + b[0]) / 2, (a[1] + b[1]) / 2];
                      var abSrc = this.transformInv_(ab);
                      var cd = [(c[0] + d[0]) / 2, (c[1] + d[1]) / 2];
                      var cdSrc = this.transformInv_(cd);
                      this.addQuad_(a, ab, cd, d, aSrc, abSrc, cdSrc, dSrc, maxSubdivision - 1);
                      this.addQuad_(ab, b, c, cd, abSrc, bSrc, cSrc, cdSrc, maxSubdivision - 1);
                  }
                  return;
              }
          }
          if (wrapsX) {
              if (!this.canWrapXInSource_) {
                  return;
              }
              this.wrapsXInSource_ = true;
          }
          this.addTriangle_(a, c, d, aSrc, cSrc, dSrc);
          this.addTriangle_(a, b, c, aSrc, bSrc, cSrc);
      };
      /**
       * Calculates extent of the 'source' coordinates from all the triangles.
       *
       * @return {import("../extent.js").Extent} Calculated extent.
       */
      Triangulation.prototype.calculateSourceExtent = function () {
          var extent = createEmpty();
          this.triangles_.forEach(function (triangle, i, arr) {
              var src = triangle.source;
              extendCoordinate(extent, src[0]);
              extendCoordinate(extent, src[1]);
              extendCoordinate(extent, src[2]);
          });
          return extent;
      };
      /**
       * @return {Array<Triangle>} Array of the calculated triangles.
       */
      Triangulation.prototype.getTriangles = function () {
          return this.triangles_;
      };
      return Triangulation;
  }());

  var __extends$1g =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {function(number, number, number, number) : import("../Tile.js").default} FunctionType
   */
  /**
   * @classdesc
   * Class encapsulating single reprojected tile.
   * See {@link module:ol/source/TileImage~TileImage}.
   *
   */
  var ReprojTile = /** @class */ (function (_super) {
      __extends$1g(ReprojTile, _super);
      /**
       * @param {import("../proj/Projection.js").default} sourceProj Source projection.
       * @param {import("../tilegrid/TileGrid.js").default} sourceTileGrid Source tile grid.
       * @param {import("../proj/Projection.js").default} targetProj Target projection.
       * @param {import("../tilegrid/TileGrid.js").default} targetTileGrid Target tile grid.
       * @param {import("../tilecoord.js").TileCoord} tileCoord Coordinate of the tile.
       * @param {import("../tilecoord.js").TileCoord} wrappedTileCoord Coordinate of the tile wrapped in X.
       * @param {number} pixelRatio Pixel ratio.
       * @param {number} gutter Gutter of the source tiles.
       * @param {FunctionType} getTileFunction
       *     Function returning source tiles (z, x, y, pixelRatio).
       * @param {number=} opt_errorThreshold Acceptable reprojection error (in px).
       * @param {boolean=} opt_renderEdges Render reprojection edges.
       */
      function ReprojTile(sourceProj, sourceTileGrid, targetProj, targetTileGrid, tileCoord, wrappedTileCoord, pixelRatio, gutter, getTileFunction, opt_errorThreshold, opt_renderEdges) {
          var _this = _super.call(this, tileCoord, TileState.IDLE) || this;
          /**
           * @private
           * @type {boolean}
           */
          _this.renderEdges_ = opt_renderEdges !== undefined ? opt_renderEdges : false;
          /**
           * @private
           * @type {number}
           */
          _this.pixelRatio_ = pixelRatio;
          /**
           * @private
           * @type {number}
           */
          _this.gutter_ = gutter;
          /**
           * @private
           * @type {HTMLCanvasElement}
           */
          _this.canvas_ = null;
          /**
           * @private
           * @type {import("../tilegrid/TileGrid.js").default}
           */
          _this.sourceTileGrid_ = sourceTileGrid;
          /**
           * @private
           * @type {import("../tilegrid/TileGrid.js").default}
           */
          _this.targetTileGrid_ = targetTileGrid;
          /**
           * @private
           * @type {import("../tilecoord.js").TileCoord}
           */
          _this.wrappedTileCoord_ = wrappedTileCoord ? wrappedTileCoord : tileCoord;
          /**
           * @private
           * @type {!Array<import("../Tile.js").default>}
           */
          _this.sourceTiles_ = [];
          /**
           * @private
           * @type {?Array<import("../events.js").EventsKey>}
           */
          _this.sourcesListenerKeys_ = null;
          /**
           * @private
           * @type {number}
           */
          _this.sourceZ_ = 0;
          var targetExtent = targetTileGrid.getTileCoordExtent(_this.wrappedTileCoord_);
          var maxTargetExtent = _this.targetTileGrid_.getExtent();
          var maxSourceExtent = _this.sourceTileGrid_.getExtent();
          var limitedTargetExtent = maxTargetExtent ?
              getIntersection(targetExtent, maxTargetExtent) : targetExtent;
          if (getArea(limitedTargetExtent) === 0) {
              // Tile is completely outside range -> EMPTY
              // TODO: is it actually correct that the source even creates the tile ?
              _this.state = TileState.EMPTY;
              return _this;
          }
          var sourceProjExtent = sourceProj.getExtent();
          if (sourceProjExtent) {
              if (!maxSourceExtent) {
                  maxSourceExtent = sourceProjExtent;
              }
              else {
                  maxSourceExtent = getIntersection(maxSourceExtent, sourceProjExtent);
              }
          }
          var targetResolution = targetTileGrid.getResolution(_this.wrappedTileCoord_[0]);
          var targetCenter = getCenter(limitedTargetExtent);
          var sourceResolution = calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution);
          if (!isFinite(sourceResolution) || sourceResolution <= 0) {
              // invalid sourceResolution -> EMPTY
              // probably edges of the projections when no extent is defined
              _this.state = TileState.EMPTY;
              return _this;
          }
          var errorThresholdInPixels = opt_errorThreshold !== undefined ?
              opt_errorThreshold : ERROR_THRESHOLD;
          /**
           * @private
           * @type {!import("./Triangulation.js").default}
           */
          _this.triangulation_ = new Triangulation(sourceProj, targetProj, limitedTargetExtent, maxSourceExtent, sourceResolution * errorThresholdInPixels, targetResolution);
          if (_this.triangulation_.getTriangles().length === 0) {
              // no valid triangles -> EMPTY
              _this.state = TileState.EMPTY;
              return _this;
          }
          _this.sourceZ_ = sourceTileGrid.getZForResolution(sourceResolution);
          var sourceExtent = _this.triangulation_.calculateSourceExtent();
          if (maxSourceExtent) {
              if (sourceProj.canWrapX()) {
                  sourceExtent[1] = clamp(sourceExtent[1], maxSourceExtent[1], maxSourceExtent[3]);
                  sourceExtent[3] = clamp(sourceExtent[3], maxSourceExtent[1], maxSourceExtent[3]);
              }
              else {
                  sourceExtent = getIntersection(sourceExtent, maxSourceExtent);
              }
          }
          if (!getArea(sourceExtent)) {
              _this.state = TileState.EMPTY;
          }
          else {
              var sourceRange = sourceTileGrid.getTileRangeForExtentAndZ(sourceExtent, _this.sourceZ_);
              for (var srcX = sourceRange.minX; srcX <= sourceRange.maxX; srcX++) {
                  for (var srcY = sourceRange.minY; srcY <= sourceRange.maxY; srcY++) {
                      var tile = getTileFunction(_this.sourceZ_, srcX, srcY, pixelRatio);
                      if (tile) {
                          _this.sourceTiles_.push(tile);
                      }
                  }
              }
              if (_this.sourceTiles_.length === 0) {
                  _this.state = TileState.EMPTY;
              }
          }
          return _this;
      }
      /**
       * Get the HTML Canvas element for this tile.
       * @return {HTMLCanvasElement} Canvas.
       */
      ReprojTile.prototype.getImage = function () {
          return this.canvas_;
      };
      /**
       * @private
       */
      ReprojTile.prototype.reproject_ = function () {
          var sources = [];
          this.sourceTiles_.forEach(function (tile, i, arr) {
              if (tile && tile.getState() == TileState.LOADED) {
                  sources.push({
                      extent: this.sourceTileGrid_.getTileCoordExtent(tile.tileCoord),
                      image: tile.getImage()
                  });
              }
          }.bind(this));
          this.sourceTiles_.length = 0;
          if (sources.length === 0) {
              this.state = TileState.ERROR;
          }
          else {
              var z = this.wrappedTileCoord_[0];
              var size = this.targetTileGrid_.getTileSize(z);
              var width = typeof size === 'number' ? size : size[0];
              var height = typeof size === 'number' ? size : size[1];
              var targetResolution = this.targetTileGrid_.getResolution(z);
              var sourceResolution = this.sourceTileGrid_.getResolution(this.sourceZ_);
              var targetExtent = this.targetTileGrid_.getTileCoordExtent(this.wrappedTileCoord_);
              this.canvas_ = render$2(width, height, this.pixelRatio_, sourceResolution, this.sourceTileGrid_.getExtent(), targetResolution, targetExtent, this.triangulation_, sources, this.gutter_, this.renderEdges_);
              this.state = TileState.LOADED;
          }
          this.changed();
      };
      /**
       * @inheritDoc
       */
      ReprojTile.prototype.load = function () {
          if (this.state == TileState.IDLE) {
              this.state = TileState.LOADING;
              this.changed();
              var leftToLoad_1 = 0;
              this.sourcesListenerKeys_ = [];
              this.sourceTiles_.forEach(function (tile, i, arr) {
                  var state = tile.getState();
                  if (state == TileState.IDLE || state == TileState.LOADING) {
                      leftToLoad_1++;
                      var sourceListenKey_1 = listen(tile, EventType.CHANGE, function (e) {
                          var state = tile.getState();
                          if (state == TileState.LOADED ||
                              state == TileState.ERROR ||
                              state == TileState.EMPTY) {
                              unlistenByKey(sourceListenKey_1);
                              leftToLoad_1--;
                              if (leftToLoad_1 === 0) {
                                  this.unlistenSources_();
                                  this.reproject_();
                              }
                          }
                      }, this);
                      this.sourcesListenerKeys_.push(sourceListenKey_1);
                  }
              }.bind(this));
              this.sourceTiles_.forEach(function (tile, i, arr) {
                  var state = tile.getState();
                  if (state == TileState.IDLE) {
                      tile.load();
                  }
              });
              if (leftToLoad_1 === 0) {
                  setTimeout(this.reproject_.bind(this), 0);
              }
          }
      };
      /**
       * @private
       */
      ReprojTile.prototype.unlistenSources_ = function () {
          this.sourcesListenerKeys_.forEach(unlistenByKey);
          this.sourcesListenerKeys_ = null;
      };
      return ReprojTile;
  }(Tile));

  var __extends$1h =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions]
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {number} [cacheSize]
   * @property {boolean} [opaque]
   * @property {number} [tilePixelRatio]
   * @property {import("../proj.js").ProjectionLike} [projection]
   * @property {import("./State.js").default} [state]
   * @property {import("../tilegrid/TileGrid.js").default} [tileGrid]
   * @property {boolean} [wrapX=true]
   * @property {number} [transition]
   * @property {string} [key]
   * @property {number} [zDirection=0]
   */
  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Base class for sources providing images divided into a tile grid.
   * @abstract
   * @api
   */
  var TileSource = /** @class */ (function (_super) {
      __extends$1h(TileSource, _super);
      /**
       * @param {Options} options SourceTile source options.
       */
      function TileSource(options) {
          var _this = _super.call(this, {
              attributions: options.attributions,
              attributionsCollapsible: options.attributionsCollapsible,
              projection: options.projection,
              state: options.state,
              wrapX: options.wrapX
          }) || this;
          /**
           * @private
           * @type {boolean}
           */
          _this.opaque_ = options.opaque !== undefined ? options.opaque : false;
          /**
           * @private
           * @type {number}
           */
          _this.tilePixelRatio_ = options.tilePixelRatio !== undefined ?
              options.tilePixelRatio : 1;
          /**
           * @protected
           * @type {import("../tilegrid/TileGrid.js").default}
           */
          _this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;
          var tileSize = [256, 256];
          var tileGrid = options.tileGrid;
          if (tileGrid) {
              toSize(tileGrid.getTileSize(tileGrid.getMinZoom()), tileSize);
          }
          var canUseScreen = typeof screen !== 'undefined';
          var width = canUseScreen ? (screen.availWidth || screen.width) : 1920;
          var height = canUseScreen ? (screen.availHeight || screen.height) : 1080;
          var minCacheSize = 4 * Math.ceil(width / tileSize[0]) * Math.ceil(height / tileSize[1]);
          /**
           * @protected
           * @type {import("../TileCache.js").default}
           */
          _this.tileCache = new TileCache(Math.max(minCacheSize, options.cacheSize || 0));
          /**
           * @protected
           * @type {import("../size.js").Size}
           */
          _this.tmpSize = [0, 0];
          /**
           * @private
           * @type {string}
           */
          _this.key_ = options.key || '';
          /**
           * @protected
           * @type {import("../Tile.js").Options}
           */
          _this.tileOptions = { transition: options.transition };
          /**
           * zDirection hint, read by the renderer. Indicates which resolution should be used
           * by a renderer if the views resolution does not match any resolution of the tile source.
           * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
           * will be used. If -1, the nearest higher resolution will be used.
           * @type {number}
           */
          _this.zDirection = options.zDirection ? options.zDirection : 0;
          return _this;
      }
      /**
       * @return {boolean} Can expire cache.
       */
      TileSource.prototype.canExpireCache = function () {
          return this.tileCache.canExpireCache();
      };
      /**
       * @param {import("../proj/Projection.js").default} projection Projection.
       * @param {!Object<string, boolean>} usedTiles Used tiles.
       */
      TileSource.prototype.expireCache = function (projection, usedTiles) {
          var tileCache = this.getTileCacheForProjection(projection);
          if (tileCache) {
              tileCache.expireCache(usedTiles);
          }
      };
      /**
       * @param {import("../proj/Projection.js").default} projection Projection.
       * @param {number} z Zoom level.
       * @param {import("../TileRange.js").default} tileRange Tile range.
       * @param {function(import("../Tile.js").default):(boolean|void)} callback Called with each
       *     loaded tile.  If the callback returns `false`, the tile will not be
       *     considered loaded.
       * @return {boolean} The tile range is fully covered with loaded tiles.
       */
      TileSource.prototype.forEachLoadedTile = function (projection, z, tileRange, callback) {
          var tileCache = this.getTileCacheForProjection(projection);
          if (!tileCache) {
              return false;
          }
          var covered = true;
          var tile, tileCoordKey, loaded;
          for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {
              for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {
                  tileCoordKey = getKeyZXY(z, x, y);
                  loaded = false;
                  if (tileCache.containsKey(tileCoordKey)) {
                      tile = /** @type {!import("../Tile.js").default} */ (tileCache.get(tileCoordKey));
                      loaded = tile.getState() === TileState.LOADED;
                      if (loaded) {
                          loaded = (callback(tile) !== false);
                      }
                  }
                  if (!loaded) {
                      covered = false;
                  }
              }
          }
          return covered;
      };
      /**
       * @param {import("../proj/Projection.js").default} projection Projection.
       * @return {number} Gutter.
       */
      TileSource.prototype.getGutterForProjection = function (projection) {
          return 0;
      };
      /**
       * Return the key to be used for all tiles in the source.
       * @return {string} The key for all tiles.
       * @protected
       */
      TileSource.prototype.getKey = function () {
          return this.key_;
      };
      /**
       * Set the value to be used as the key for all tiles in the source.
       * @param {string} key The key for tiles.
       * @protected
       */
      TileSource.prototype.setKey = function (key) {
          if (this.key_ !== key) {
              this.key_ = key;
              this.changed();
          }
      };
      /**
       * @param {import("../proj/Projection.js").default} projection Projection.
       * @return {boolean} Opaque.
       */
      TileSource.prototype.getOpaque = function (projection) {
          return this.opaque_;
      };
      /**
       * @inheritDoc
       */
      TileSource.prototype.getResolutions = function () {
          return this.tileGrid.getResolutions();
      };
      /**
       * @abstract
       * @param {number} z Tile coordinate z.
       * @param {number} x Tile coordinate x.
       * @param {number} y Tile coordinate y.
       * @param {number} pixelRatio Pixel ratio.
       * @param {import("../proj/Projection.js").default} projection Projection.
       * @return {!import("../Tile.js").default} Tile.
       */
      TileSource.prototype.getTile = function (z, x, y, pixelRatio, projection) {
          return abstract();
      };
      /**
       * Return the tile grid of the tile source.
       * @return {import("../tilegrid/TileGrid.js").default} Tile grid.
       * @api
       */
      TileSource.prototype.getTileGrid = function () {
          return this.tileGrid;
      };
      /**
       * @param {import("../proj/Projection.js").default} projection Projection.
       * @return {!import("../tilegrid/TileGrid.js").default} Tile grid.
       */
      TileSource.prototype.getTileGridForProjection = function (projection) {
          if (!this.tileGrid) {
              return getForProjection(projection);
          }
          else {
              return this.tileGrid;
          }
      };
      /**
       * @param {import("../proj/Projection.js").default} projection Projection.
       * @return {import("../TileCache.js").default} Tile cache.
       * @protected
       */
      TileSource.prototype.getTileCacheForProjection = function (projection) {
          var thisProj = this.getProjection();
          if (thisProj && !equivalent(thisProj, projection)) {
              return null;
          }
          else {
              return this.tileCache;
          }
      };
      /**
       * Get the tile pixel ratio for this source. Subclasses may override this
       * method, which is meant to return a supported pixel ratio that matches the
       * provided `pixelRatio` as close as possible.
       * @param {number} pixelRatio Pixel ratio.
       * @return {number} Tile pixel ratio.
       */
      TileSource.prototype.getTilePixelRatio = function (pixelRatio) {
          return this.tilePixelRatio_;
      };
      /**
       * @param {number} z Z.
       * @param {number} pixelRatio Pixel ratio.
       * @param {import("../proj/Projection.js").default} projection Projection.
       * @return {import("../size.js").Size} Tile size.
       */
      TileSource.prototype.getTilePixelSize = function (z, pixelRatio, projection) {
          var tileGrid = this.getTileGridForProjection(projection);
          var tilePixelRatio = this.getTilePixelRatio(pixelRatio);
          var tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);
          if (tilePixelRatio == 1) {
              return tileSize;
          }
          else {
              return scale$2(tileSize, tilePixelRatio, this.tmpSize);
          }
      };
      /**
       * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate
       * is outside the resolution and extent range of the tile grid, `null` will be
       * returned.
       * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
       * @param {import("../proj/Projection.js").default=} opt_projection Projection.
       * @return {import("../tilecoord.js").TileCoord} Tile coordinate to be passed to the tileUrlFunction or
       *     null if no tile URL should be created for the passed `tileCoord`.
       */
      TileSource.prototype.getTileCoordForTileUrlFunction = function (tileCoord, opt_projection) {
          var projection = opt_projection !== undefined ?
              opt_projection : this.getProjection();
          var tileGrid = this.getTileGridForProjection(projection);
          if (this.getWrapX() && projection.isGlobal()) {
              tileCoord = wrapX$1(tileGrid, tileCoord, projection);
          }
          return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;
      };
      /**
       * Remove all cached tiles from the source. The next render cycle will fetch new tiles.
       * @api
       */
      TileSource.prototype.clear = function () {
          this.tileCache.clear();
      };
      TileSource.prototype.refresh = function () {
          this.clear();
          _super.prototype.refresh.call(this);
      };
      /**
       * Marks a tile coord as being used, without triggering a load.
       * @abstract
       * @param {number} z Tile coordinate z.
       * @param {number} x Tile coordinate x.
       * @param {number} y Tile coordinate y.
       * @param {import("../proj/Projection.js").default} projection Projection.
       */
      TileSource.prototype.useTile = function (z, x, y, projection) { };
      return TileSource;
  }(Source));
  /**
   * @classdesc
   * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this
   * type.
   */
  var TileSourceEvent = /** @class */ (function (_super) {
      __extends$1h(TileSourceEvent, _super);
      /**
       * @param {string} type Type.
       * @param {import("../Tile.js").default} tile The tile.
       */
      function TileSourceEvent(type, tile) {
          var _this = _super.call(this, type) || this;
          /**
           * The tile related to the event.
           * @type {import("../Tile.js").default}
           * @api
           */
          _this.tile = tile;
          return _this;
      }
      return TileSourceEvent;
  }(BaseEvent));

  /**
   * @module ol/source/TileEventType
   */
  /**
   * @enum {string}
   */
  var TileEventType = {
      /**
       * Triggered when a tile starts loading.
       * @event module:ol/source/Tile.TileSourceEvent#tileloadstart
       * @api
       */
      TILELOADSTART: 'tileloadstart',
      /**
       * Triggered when a tile finishes loading, either when its data is loaded,
       * or when loading was aborted because the tile is no longer needed.
       * @event module:ol/source/Tile.TileSourceEvent#tileloadend
       * @api
       */
      TILELOADEND: 'tileloadend',
      /**
       * Triggered if tile loading results in an error.
       * @event module:ol/source/Tile.TileSourceEvent#tileloaderror
       * @api
       */
      TILELOADERROR: 'tileloaderror'
  };

  var __extends$1i =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions]
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {number} [cacheSize]
   * @property {boolean} [opaque]
   * @property {import("../proj.js").ProjectionLike} [projection]
   * @property {import("./State.js").default} [state]
   * @property {import("../tilegrid/TileGrid.js").default} [tileGrid]
   * @property {import("../Tile.js").LoadFunction} tileLoadFunction
   * @property {number} [tilePixelRatio]
   * @property {import("../Tile.js").UrlFunction} [tileUrlFunction]
   * @property {string} [url]
   * @property {Array<string>} [urls]
   * @property {boolean} [wrapX=true]
   * @property {number} [transition]
   * @property {string} [key]
   * @property {number} [zDirection=0]
   */
  /**
   * @classdesc
   * Base class for sources providing tiles divided into a tile grid over http.
   *
   * @fires import("./Tile.js").TileSourceEvent
   */
  var UrlTile = /** @class */ (function (_super) {
      __extends$1i(UrlTile, _super);
      /**
       * @param {Options} options Image tile options.
       */
      function UrlTile(options) {
          var _this = _super.call(this, {
              attributions: options.attributions,
              cacheSize: options.cacheSize,
              opaque: options.opaque,
              projection: options.projection,
              state: options.state,
              tileGrid: options.tileGrid,
              tilePixelRatio: options.tilePixelRatio,
              wrapX: options.wrapX,
              transition: options.transition,
              key: options.key,
              attributionsCollapsible: options.attributionsCollapsible,
              zDirection: options.zDirection
          }) || this;
          /**
           * @private
           * @type {boolean}
           */
          _this.generateTileUrlFunction_ = !options.tileUrlFunction;
          /**
           * @protected
           * @type {import("../Tile.js").LoadFunction}
           */
          _this.tileLoadFunction = options.tileLoadFunction;
          /**
           * @protected
           * @type {import("../Tile.js").UrlFunction}
           */
          _this.tileUrlFunction = options.tileUrlFunction ? options.tileUrlFunction.bind(_this) : nullTileUrlFunction;
          /**
           * @protected
           * @type {!Array<string>|null}
           */
          _this.urls = null;
          if (options.urls) {
              _this.setUrls(options.urls);
          }
          else if (options.url) {
              _this.setUrl(options.url);
          }
          /**
           * @private
           * @type {!Object<string, boolean>}
           */
          _this.tileLoadingKeys_ = {};
          return _this;
      }
      /**
       * Return the tile load function of the source.
       * @return {import("../Tile.js").LoadFunction} TileLoadFunction
       * @api
       */
      UrlTile.prototype.getTileLoadFunction = function () {
          return this.tileLoadFunction;
      };
      /**
       * Return the tile URL function of the source.
       * @return {import("../Tile.js").UrlFunction} TileUrlFunction
       * @api
       */
      UrlTile.prototype.getTileUrlFunction = function () {
          return this.tileUrlFunction;
      };
      /**
       * Return the URLs used for this source.
       * When a tileUrlFunction is used instead of url or urls,
       * null will be returned.
       * @return {!Array<string>|null} URLs.
       * @api
       */
      UrlTile.prototype.getUrls = function () {
          return this.urls;
      };
      /**
       * Handle tile change events.
       * @param {import("../events/Event.js").default} event Event.
       * @protected
       */
      UrlTile.prototype.handleTileChange = function (event) {
          var tile = /** @type {import("../Tile.js").default} */ (event.target);
          var uid = getUid(tile);
          var tileState = tile.getState();
          var type;
          if (tileState == TileState.LOADING) {
              this.tileLoadingKeys_[uid] = true;
              type = TileEventType.TILELOADSTART;
          }
          else if (uid in this.tileLoadingKeys_) {
              delete this.tileLoadingKeys_[uid];
              type = tileState == TileState.ERROR ? TileEventType.TILELOADERROR :
                  tileState == TileState.LOADED ?
                      TileEventType.TILELOADEND : undefined;
          }
          if (type != undefined) {
              this.dispatchEvent(new TileSourceEvent(type, tile));
          }
      };
      /**
       * Set the tile load function of the source.
       * @param {import("../Tile.js").LoadFunction} tileLoadFunction Tile load function.
       * @api
       */
      UrlTile.prototype.setTileLoadFunction = function (tileLoadFunction) {
          this.tileCache.clear();
          this.tileLoadFunction = tileLoadFunction;
          this.changed();
      };
      /**
       * Set the tile URL function of the source.
       * @param {import("../Tile.js").UrlFunction} tileUrlFunction Tile URL function.
       * @param {string=} key Optional new tile key for the source.
       * @api
       */
      UrlTile.prototype.setTileUrlFunction = function (tileUrlFunction, key) {
          this.tileUrlFunction = tileUrlFunction;
          this.tileCache.pruneExceptNewestZ();
          if (typeof key !== 'undefined') {
              this.setKey(key);
          }
          else {
              this.changed();
          }
      };
      /**
       * Set the URL to use for requests.
       * @param {string} url URL.
       * @api
       */
      UrlTile.prototype.setUrl = function (url) {
          var urls = expandUrl(url);
          this.urls = urls;
          this.setUrls(urls);
      };
      /**
       * Set the URLs to use for requests.
       * @param {Array<string>} urls URLs.
       * @api
       */
      UrlTile.prototype.setUrls = function (urls) {
          this.urls = urls;
          var key = urls.join('\n');
          if (this.generateTileUrlFunction_) {
              this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);
          }
          else {
              this.setKey(key);
          }
      };
      /**
       * @inheritDoc
       */
      UrlTile.prototype.useTile = function (z, x, y) {
          var tileCoordKey = getKeyZXY(z, x, y);
          if (this.tileCache.containsKey(tileCoordKey)) {
              this.tileCache.get(tileCoordKey);
          }
      };
      return UrlTile;
  }(TileSource));

  var __extends$1j =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {number} [cacheSize] Tile cache size. The default depends on the screen size. Will be ignored if too small.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {boolean} [opaque=true] Whether the layer is opaque.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
   * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
   * Higher values can increase reprojection performance, but decrease precision.
   * @property {import("./State.js").default} [state] Source state.
   * @property {typeof import("../ImageTile.js").default} [tileClass] Class used to instantiate image tiles.
   * Default is {@link module:ol/ImageTile~ImageTile}.
   * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] Tile grid.
   * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
   * ```js
   * function(imageTile, src) {
   *   imageTile.getImage().src = src;
   * };
   * ```
   * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile
   * service advertizes 256px by 256px tiles but actually sends 512px
   * by 512px images (for retina/hidpi devices) then `tilePixelRatio`
   * should be set to `2`.
   * @property {import("../Tile.js").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.
   * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
   * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be
   * used instead of defining each one separately in the `urls` option.
   * @property {Array<string>} [urls] An array of URL templates.
   * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to
   * request out-of-bounds tiles from the server. When set to `false`, only one
   * world will be rendered. When set to `true`, tiles will be requested for one
   * world only, but they will be wrapped horizontally to render multiple worlds.
   * @property {number} [transition] Duration of the opacity transition for rendering.
   * To disable the opacity transition, pass `transition: 0`.
   * @property {string} [key] Optional tile key for proper cache fetching
   * @property {number} [zDirection=0] Indicate which resolution should be used
   * by a renderer if the view resolution does not match any resolution of the tile source.
   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
   * will be used. If -1, the nearest higher resolution will be used.
   */
  /**
   * @classdesc
   * Base class for sources providing images divided into a tile grid.
   *
   * @fires import("./Tile.js").TileSourceEvent
   * @api
   */
  var TileImage = /** @class */ (function (_super) {
      __extends$1j(TileImage, _super);
      /**
       * @param {!Options} options Image tile options.
       */
      function TileImage(options) {
          var _this = _super.call(this, {
              attributions: options.attributions,
              cacheSize: options.cacheSize,
              opaque: options.opaque,
              projection: options.projection,
              state: options.state,
              tileGrid: options.tileGrid,
              tileLoadFunction: options.tileLoadFunction ?
                  options.tileLoadFunction : defaultTileLoadFunction,
              tilePixelRatio: options.tilePixelRatio,
              tileUrlFunction: options.tileUrlFunction,
              url: options.url,
              urls: options.urls,
              wrapX: options.wrapX,
              transition: options.transition,
              key: options.key,
              attributionsCollapsible: options.attributionsCollapsible,
              zDirection: options.zDirection
          }) || this;
          /**
           * @protected
           * @type {?string}
           */
          _this.crossOrigin =
              options.crossOrigin !== undefined ? options.crossOrigin : null;
          /**
           * @protected
           * @type {typeof ImageTile}
           */
          _this.tileClass = options.tileClass !== undefined ?
              options.tileClass : ImageTile;
          /**
           * @protected
           * @type {!Object<string, TileCache>}
           */
          _this.tileCacheForProjection = {};
          /**
           * @protected
           * @type {!Object<string, import("../tilegrid/TileGrid.js").default>}
           */
          _this.tileGridForProjection = {};
          /**
           * @private
           * @type {number|undefined}
           */
          _this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;
          /**
           * @private
           * @type {boolean}
           */
          _this.renderReprojectionEdges_ = false;
          return _this;
      }
      /**
       * @inheritDoc
       */
      TileImage.prototype.canExpireCache = function () {
          if (this.tileCache.canExpireCache()) {
              return true;
          }
          else {
              for (var key in this.tileCacheForProjection) {
                  if (this.tileCacheForProjection[key].canExpireCache()) {
                      return true;
                  }
              }
          }
          return false;
      };
      /**
       * @inheritDoc
       */
      TileImage.prototype.expireCache = function (projection, usedTiles) {
          var usedTileCache = this.getTileCacheForProjection(projection);
          this.tileCache.expireCache(this.tileCache == usedTileCache ? usedTiles : {});
          for (var id in this.tileCacheForProjection) {
              var tileCache = this.tileCacheForProjection[id];
              tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});
          }
      };
      /**
       * @inheritDoc
       */
      TileImage.prototype.getGutterForProjection = function (projection) {
          if (
              this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {
              return 0;
          }
          else {
              return this.getGutter();
          }
      };
      /**
       * @return {number} Gutter.
       */
      TileImage.prototype.getGutter = function () {
          return 0;
      };
      /**
       * @inheritDoc
       */
      TileImage.prototype.getOpaque = function (projection) {
          if (
              this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {
              return false;
          }
          else {
              return _super.prototype.getOpaque.call(this, projection);
          }
      };
      /**
       * @inheritDoc
       */
      TileImage.prototype.getTileGridForProjection = function (projection) {
          var thisProj = this.getProjection();
          if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {
              return this.tileGrid;
          }
          else {
              var projKey = getUid(projection);
              if (!(projKey in this.tileGridForProjection)) {
                  this.tileGridForProjection[projKey] = getForProjection(projection);
              }
              return (
              /** @type {!import("../tilegrid/TileGrid.js").default} */ (this.tileGridForProjection[projKey]));
          }
      };
      /**
       * @inheritDoc
       */
      TileImage.prototype.getTileCacheForProjection = function (projection) {
          var thisProj = this.getProjection();
          if (!thisProj || equivalent(thisProj, projection)) {
              return this.tileCache;
          }
          else {
              var projKey = getUid(projection);
              if (!(projKey in this.tileCacheForProjection)) {
                  this.tileCacheForProjection[projKey] = new TileCache(this.tileCache.highWaterMark);
              }
              return this.tileCacheForProjection[projKey];
          }
      };
      /**
       * @param {number} z Tile coordinate z.
       * @param {number} x Tile coordinate x.
       * @param {number} y Tile coordinate y.
       * @param {number} pixelRatio Pixel ratio.
       * @param {import("../proj/Projection.js").default} projection Projection.
       * @param {string} key The key set on the tile.
       * @return {!import("../Tile.js").default} Tile.
       * @private
       */
      TileImage.prototype.createTile_ = function (z, x, y, pixelRatio, projection, key) {
          var tileCoord = [z, x, y];
          var urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);
          var tileUrl = urlTileCoord ?
              this.tileUrlFunction(urlTileCoord, pixelRatio, projection) : undefined;
          var tile = new this.tileClass(tileCoord, tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY, tileUrl !== undefined ? tileUrl : '', this.crossOrigin, this.tileLoadFunction, this.tileOptions);
          tile.key = key;
          tile.addEventListener(EventType.CHANGE, this.handleTileChange.bind(this));
          return tile;
      };
      /**
       * @inheritDoc
       */
      TileImage.prototype.getTile = function (z, x, y, pixelRatio, projection) {
          var sourceProjection = /** @type {!import("../proj/Projection.js").default} */ (this.getProjection());
          if (
              !sourceProjection || !projection || equivalent(sourceProjection, projection)) {
              return this.getTileInternal(z, x, y, pixelRatio, sourceProjection || projection);
          }
          else {
              var cache = this.getTileCacheForProjection(projection);
              var tileCoord = [z, x, y];
              var tile = void 0;
              var tileCoordKey = getKey$1(tileCoord);
              if (cache.containsKey(tileCoordKey)) {
                  tile = /** @type {!import("../Tile.js").default} */ (cache.get(tileCoordKey));
              }
              var key = this.getKey();
              if (tile && tile.key == key) {
                  return tile;
              }
              else {
                  var sourceTileGrid = this.getTileGridForProjection(sourceProjection);
                  var targetTileGrid = this.getTileGridForProjection(projection);
                  var wrappedTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);
                  var newTile = new ReprojTile(sourceProjection, sourceTileGrid, projection, targetTileGrid, tileCoord, wrappedTileCoord, this.getTilePixelRatio(pixelRatio), this.getGutter(), function (z, x, y, pixelRatio) {
                      return this.getTileInternal(z, x, y, pixelRatio, sourceProjection);
                  }.bind(this), this.reprojectionErrorThreshold_, this.renderReprojectionEdges_);
                  newTile.key = key;
                  if (tile) {
                      newTile.interimTile = tile;
                      newTile.refreshInterimChain();
                      cache.replace(tileCoordKey, newTile);
                  }
                  else {
                      cache.set(tileCoordKey, newTile);
                  }
                  return newTile;
              }
          }
      };
      /**
       * @param {number} z Tile coordinate z.
       * @param {number} x Tile coordinate x.
       * @param {number} y Tile coordinate y.
       * @param {number} pixelRatio Pixel ratio.
       * @param {!import("../proj/Projection.js").default} projection Projection.
       * @return {!import("../Tile.js").default} Tile.
       * @protected
       */
      TileImage.prototype.getTileInternal = function (z, x, y, pixelRatio, projection) {
          var tile = null;
          var tileCoordKey = getKeyZXY(z, x, y);
          var key = this.getKey();
          if (!this.tileCache.containsKey(tileCoordKey)) {
              tile = this.createTile_(z, x, y, pixelRatio, projection, key);
              this.tileCache.set(tileCoordKey, tile);
          }
          else {
              tile = this.tileCache.get(tileCoordKey);
              if (tile.key != key) {
                  // The source's params changed. If the tile has an interim tile and if we
                  // can use it then we use it. Otherwise we create a new tile.  In both
                  // cases we attempt to assign an interim tile to the new tile.
                  var interimTile = tile;
                  tile = this.createTile_(z, x, y, pixelRatio, projection, key);
                  //make the new tile the head of the list,
                  if (interimTile.getState() == TileState.IDLE) {
                      //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it
                      tile.interimTile = interimTile.interimTile;
                  }
                  else {
                      tile.interimTile = interimTile;
                  }
                  tile.refreshInterimChain();
                  this.tileCache.replace(tileCoordKey, tile);
              }
          }
          return tile;
      };
      /**
       * Sets whether to render reprojection edges or not (usually for debugging).
       * @param {boolean} render Render the edges.
       * @api
       */
      TileImage.prototype.setRenderReprojectionEdges = function (render) {
          if (
              this.renderReprojectionEdges_ == render) {
              return;
          }
          this.renderReprojectionEdges_ = render;
          for (var id in this.tileCacheForProjection) {
              this.tileCacheForProjection[id].clear();
          }
          this.changed();
      };
      /**
       * Sets the tile grid to use when reprojecting the tiles to the given
       * projection instead of the default tile grid for the projection.
       *
       * This can be useful when the default tile grid cannot be created
       * (e.g. projection has no extent defined) or
       * for optimization reasons (custom tile size, resolutions, ...).
       *
       * @param {import("../proj.js").ProjectionLike} projection Projection.
       * @param {import("../tilegrid/TileGrid.js").default} tilegrid Tile grid to use for the projection.
       * @api
       */
      TileImage.prototype.setTileGridForProjection = function (projection, tilegrid) {
          {
              var proj = get$4(projection);
              if (proj) {
                  var projKey = getUid(proj);
                  if (!(projKey in this.tileGridForProjection)) {
                      this.tileGridForProjection[projKey] = tilegrid;
                  }
              }
          }
      };
      return TileImage;
  }(UrlTile));
  /**
   * @param {ImageTile} imageTile Image tile.
   * @param {string} src Source.
   */
  function defaultTileLoadFunction(imageTile, src) {
      /** @type {HTMLImageElement|HTMLVideoElement} */ (imageTile.getImage()).src = src;
  }

  /**
   * @module ol/source/TileJSON
   */
  // FIXME check order of async callbacks
  var __extends$1k =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {Object} Config
   * @property {string} [name] The name.
   * @property {string} [description] The description.
   * @property {string} [version] The version.
   * @property {string} [attribution] The attribution.
   * @property {string} [template] The template.
   * @property {string} [legend] The legend.
   * @property {string} [scheme] The scheme.
   * @property {Array<string>} tiles The tile URL templates.
   * @property {Array<string>} [grids] Optional grids.
   * @property {number} [minzoom] Minimum zoom level.
   * @property {number} [maxzoom] Maximum zoom level.
   * @property {Array<number>} [bounds] Optional bounds.
   * @property {Array<number>} [center] Optional center.
   */
  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {number} [cacheSize] Tile cache size. The default depends on the screen size. Will be ignored if too small.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.
   * Useful when the server does not support CORS..
   * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
   * Higher values can increase reprojection performance, but decrease precision.
   * @property {Config} [tileJSON] TileJSON configuration for this source.
   * If not provided, `url` must be configured.
   * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
   * ```js
   * function(imageTile, src) {
   *   imageTile.getImage().src = src;
   * };
   * ```
   * @property {number|import("../size.js").Size} [tileSize=[256, 256]] The tile size used by the tile service.
   * Note: `tileSize` and other non-standard TileJSON properties are currently ignored.
   * @property {string} [url] URL to the TileJSON file. If not provided, `tileJSON` must be configured.
   * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
   * @property {number} [transition] Duration of the opacity transition for rendering.
   * To disable the opacity transition, pass `transition: 0`.
   */
  /**
   * @classdesc
   * Layer source for tile data in TileJSON format.
   * @api
   */
  var TileJSON = /** @class */ (function (_super) {
      __extends$1k(TileJSON, _super);
      /**
       * @param {Options} options TileJSON options.
       */
      function TileJSON(options) {
          var _this = _super.call(this, {
              attributions: options.attributions,
              cacheSize: options.cacheSize,
              crossOrigin: options.crossOrigin,
              projection: get$4('EPSG:3857'),
              reprojectionErrorThreshold: options.reprojectionErrorThreshold,
              state: SourceState.LOADING,
              tileLoadFunction: options.tileLoadFunction,
              wrapX: options.wrapX !== undefined ? options.wrapX : true,
              transition: options.transition
          }) || this;
          /**
           * @type {Config}
           * @private
           */
          _this.tileJSON_ = null;
          /**
           * @type {number|import("../size.js").Size}
           * @private
           */
          _this.tileSize_ = options.tileSize;
          if (options.url) {
              if (options.jsonp) {
                  jsonp(options.url, _this.handleTileJSONResponse.bind(_this), _this.handleTileJSONError.bind(_this));
              }
              else {
                  var client = new XMLHttpRequest();
                  client.addEventListener('load', _this.onXHRLoad_.bind(_this));
                  client.addEventListener('error', _this.onXHRError_.bind(_this));
                  client.open('GET', options.url);
                  client.send();
              }
          }
          else if (options.tileJSON) {
              _this.handleTileJSONResponse(options.tileJSON);
          }
          else {
              assert(false, 51); // Either `url` or `tileJSON` options must be provided
          }
          return _this;
      }
      /**
       * @private
       * @param {Event} event The load event.
       */
      TileJSON.prototype.onXHRLoad_ = function (event) {
          var client = /** @type {XMLHttpRequest} */ (event.target);
          // status will be 0 for file:// urls
          if (!client.status || client.status >= 200 && client.status < 300) {
              var response = void 0;
              try {
                  response = /** @type {TileJSON} */ (JSON.parse(client.responseText));
              }
              catch (err) {
                  this.handleTileJSONError();
                  return;
              }
              this.handleTileJSONResponse(response);
          }
          else {
              this.handleTileJSONError();
          }
      };
      /**
       * @private
       * @param {Event} event The error event.
       */
      TileJSON.prototype.onXHRError_ = function (event) {
          this.handleTileJSONError();
      };
      /**
       * @return {Config} The tilejson object.
       * @api
       */
      TileJSON.prototype.getTileJSON = function () {
          return this.tileJSON_;
      };
      /**
       * @protected
       * @param {Config} tileJSON Tile JSON.
       */
      TileJSON.prototype.handleTileJSONResponse = function (tileJSON) {
          var epsg4326Projection = get$4('EPSG:4326');
          var sourceProjection = this.getProjection();
          var extent;
          if (tileJSON['bounds'] !== undefined) {
              var transform = getTransformFromProjections(epsg4326Projection, sourceProjection);
              extent = applyTransform(tileJSON['bounds'], transform);
          }
          var minZoom = tileJSON['minzoom'] || 0;
          var maxZoom = tileJSON['maxzoom'] || 22;
          var tileGrid = createXYZ({
              extent: extentFromProjection(sourceProjection),
              maxZoom: maxZoom,
              minZoom: minZoom,
              tileSize: this.tileSize_
          });
          this.tileGrid = tileGrid;
          this.tileUrlFunction = createFromTemplates(tileJSON['tiles'], tileGrid);
          if (tileJSON['attribution'] !== undefined && !this.getAttributions()) {
              var attributionExtent_1 = extent !== undefined ?
                  extent : epsg4326Projection.getExtent();
              this.setAttributions(function (frameState) {
                  if (intersects(attributionExtent_1, frameState.extent)) {
                      return [tileJSON['attribution']];
                  }
                  return null;
              });
          }
          this.tileJSON_ = tileJSON;
          this.setState(SourceState.READY);
      };
      /**
       * @protected
       */
      TileJSON.prototype.handleTileJSONError = function () {
          this.setState(SourceState.ERROR);
      };
      return TileJSON;
  }(TileImage));

  var __extends$1l =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {Object} ReplayState
   * @property {boolean} dirty
   * @property {null|import("./render.js").OrderFunction} renderedRenderOrder
   * @property {number} renderedTileRevision
   * @property {number} renderedResolution
   * @property {number} renderedRevision
   * @property {number} renderedZ
   * @property {number} renderedTileResolution
   * @property {number} renderedTileZ
   */
  /**
   * @type {Array<HTMLCanvasElement>}
   */
  var canvasPool = [];
  var VectorRenderTile = /** @class */ (function (_super) {
      __extends$1l(VectorRenderTile, _super);
      /**
       * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
       * @param {import("./TileState.js").default} state State.
       * @param {import("./tilecoord.js").TileCoord} urlTileCoord Wrapped tile coordinate for source urls.
       * @param {function(VectorRenderTile):Array<import("./VectorTile").default>} getSourceTiles Function
       * to get source tiles for this tile.
       */
      function VectorRenderTile(tileCoord, state, urlTileCoord, getSourceTiles) {
          var _this = _super.call(this, tileCoord, state, { transition: 0 }) || this;
          /**
           * @private
           * @type {!Object<string, CanvasRenderingContext2D>}
           */
          _this.context_ = {};
          /**
           * Executor groups by layer uid. Entries are read/written by the renderer.
           * @type {Object<string, Array<import("./render/canvas/ExecutorGroup.js").default>>}
           */
          _this.executorGroups = {};
          /**
           * Number of loading source tiles. Read/written by the source.
           * @type {number}
           */
          _this.loadingSourceTiles = 0;
          /**
           * Tile keys of error source tiles. Read/written by the source.
           * @type {Object<string, boolean>}
           */
          _this.errorSourceTileKeys = {};
          /**
           * @type {Object<number, ImageData>}
           */
          _this.hitDetectionImageData = {};
          /**
           * @private
           * @type {!Object<string, ReplayState>}
           */
          _this.replayState_ = {};
          /**
           * @type {Array<import("./VectorTile.js").default>}
           */
          _this.sourceTiles = null;
          /**
           * @type {number}
           */
          _this.wantedResolution;
          /**
           * @type {!function():Array<import("./VectorTile.js").default>}
           */
          _this.getSourceTiles = getSourceTiles.bind(undefined, _this);
          /**
           * z of the source tiles of the last getSourceTiles call.
           * @type {number}
           */
          _this.sourceZ = -1;
          /**
           * True when all tiles for this tile's nominal resolution are available.
           * @type {boolean}
           */
          _this.hifi = false;
          /**
           * @type {import("./tilecoord.js").TileCoord}
           */
          _this.wrappedTileCoord = urlTileCoord;
          return _this;
      }
      /**
       * @param {import("./layer/Layer.js").default} layer Layer.
       * @return {CanvasRenderingContext2D} The rendering context.
       */
      VectorRenderTile.prototype.getContext = function (layer) {
          var key = getUid(layer);
          if (!(key in this.context_)) {
              this.context_[key] = createCanvasContext2D(1, 1, canvasPool);
          }
          return this.context_[key];
      };
      /**
       * @param {import("./layer/Layer.js").default} layer Layer.
       * @return {boolean} Tile has a rendering context for the given layer.
       */
      VectorRenderTile.prototype.hasContext = function (layer) {
          return getUid(layer) in this.context_;
      };
      /**
       * Get the Canvas for this tile.
       * @param {import("./layer/Layer.js").default} layer Layer.
       * @return {HTMLCanvasElement} Canvas.
       */
      VectorRenderTile.prototype.getImage = function (layer) {
          return this.hasContext(layer) ? this.getContext(layer).canvas : null;
      };
      /**
       * @param {import("./layer/Layer.js").default} layer Layer.
       * @return {ReplayState} The replay state.
       */
      VectorRenderTile.prototype.getReplayState = function (layer) {
          var key = getUid(layer);
          if (!(key in this.replayState_)) {
              this.replayState_[key] = {
                  dirty: false,
                  renderedRenderOrder: null,
                  renderedResolution: NaN,
                  renderedRevision: -1,
                  renderedTileResolution: NaN,
                  renderedTileRevision: -1,
                  renderedZ: -1,
                  renderedTileZ: -1
              };
          }
          return this.replayState_[key];
      };
      /**
       * @inheritDoc
       */
      VectorRenderTile.prototype.load = function () {
          this.getSourceTiles();
      };
      /**
       * @inheritDoc
       */
      VectorRenderTile.prototype.release = function () {
          for (var key in this.context_) {
              canvasPool.push(this.context_[key].canvas);
          }
          _super.prototype.release.call(this);
      };
      return VectorRenderTile;
  }(Tile));

  var __extends$1m =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  var VectorTile = /** @class */ (function (_super) {
      __extends$1m(VectorTile, _super);
      /**
       * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
       * @param {TileState} state State.
       * @param {string} src Data source url.
       * @param {import("./format/Feature.js").default} format Feature format.
       * @param {import("./Tile.js").LoadFunction} tileLoadFunction Tile load function.
       * @param {import("./Tile.js").Options=} opt_options Tile options.
       */
      function VectorTile(tileCoord, state, src, format, tileLoadFunction, opt_options) {
          var _this = _super.call(this, tileCoord, state, opt_options) || this;
          /**
           * Extent of this tile; set by the source.
           * @type {import("./extent.js").Extent}
           */
          _this.extent = null;
          /**
           * @private
           * @type {import("./format/Feature.js").default}
           */
          _this.format_ = format;
          /**
           * @private
           * @type {Array<import("./Feature.js").default>}
           */
          _this.features_ = null;
          /**
           * @private
           * @type {import("./featureloader.js").FeatureLoader}
           */
          _this.loader_;
          /**
           * Feature projection of this tile; set by the source.
           * @type {import("./proj/Projection.js").default}
           */
          _this.projection = null;
          /**
           * Resolution of this tile; set by the source.
           * @type {number}
           */
          _this.resolution;
          /**
           * @private
           * @type {import("./Tile.js").LoadFunction}
           */
          _this.tileLoadFunction_ = tileLoadFunction;
          /**
           * @private
           * @type {string}
           */
          _this.url_ = src;
          return _this;
      }
      /**
       * Get the feature format assigned for reading this tile's features.
       * @return {import("./format/Feature.js").default} Feature format.
       * @api
       */
      VectorTile.prototype.getFormat = function () {
          return this.format_;
      };
      /**
       * Get the features for this tile. Geometries will be in the view projection.
       * @return {Array<import("./Feature.js").FeatureLike>} Features.
       * @api
       */
      VectorTile.prototype.getFeatures = function () {
          return this.features_;
      };
      /**
       * @inheritDoc
       */
      VectorTile.prototype.getKey = function () {
          return this.url_;
      };
      /**
       * @inheritDoc
       */
      VectorTile.prototype.load = function () {
          if (this.state == TileState.IDLE) {
              this.setState(TileState.LOADING);
              this.tileLoadFunction_(this, this.url_);
              if (this.loader_) {
                  this.loader_(this.extent, this.resolution, this.projection);
              }
          }
      };
      /**
       * Handler for successful tile load.
       * @param {Array<import("./Feature.js").default>} features The loaded features.
       * @param {import("./proj/Projection.js").default} dataProjection Data projection.
       */
      VectorTile.prototype.onLoad = function (features, dataProjection) {
          this.setFeatures(features);
      };
      /**
       * Handler for tile load errors.
       */
      VectorTile.prototype.onError = function () {
          this.setState(TileState.ERROR);
      };
      /**
       * Function for use in an {@link module:ol/source/VectorTile~VectorTile}'s `tileLoadFunction`.
       * Sets the features for the tile.
       * @param {Array<import("./Feature.js").default>} features Features.
       * @api
       */
      VectorTile.prototype.setFeatures = function (features) {
          this.features_ = features;
          this.setState(TileState.LOADED);
      };
      /**
       * Set the feature loader for reading this tile's features.
       * @param {import("./featureloader.js").FeatureLoader} loader Feature loader.
       * @api
       */
      VectorTile.prototype.setLoader = function (loader) {
          this.loader_ = loader;
      };
      return VectorTile;
  }(Tile));

  /**
   * @module ol/source/VectorTile
   */
  var __extends$1n =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {number} [cacheSize=128] Cache size.
   * @property {import("../extent.js").Extent} [extent]
   * @property {import("../format/Feature.js").default} [format] Feature format for tiles. Used and required by the default.
   * @property {boolean} [overlaps=true] This source may have overlapping geometries. Setting this
   * to `false` (e.g. for sources with polygons that represent administrative
   * boundaries or TopoJSON sources) allows the renderer to optimise fill and
   * stroke operations.
   * @property {import("../proj.js").ProjectionLike} [projection='EPSG:3857'] Projection of the tile grid.
   * @property {import("./State.js").default} [state] Source state.
   * @property {typeof import("../VectorTile.js").default} [tileClass] Class used to instantiate image tiles.
   * Default is {@link module:ol/VectorTile}.
   * @property {number} [maxZoom=22] Optional max zoom level. Not used if `tileGrid` is provided.
   * @property {number} [minZoom] Optional min zoom level. Not used if `tileGrid` is provided.
   * @property {number|import("../size.js").Size} [tileSize=512] Optional tile size. Not used if `tileGrid` is provided.
   * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.
   * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] Tile grid.
   * @property {import("../Tile.js").LoadFunction} [tileLoadFunction]
   * Optional function to load a tile given a URL. Could look like this for pbf tiles:
   * ```js
   * function(tile, url) {
   *   tile.setLoader(function(extent, resolution, projection) {
   *     fetch(url).then(function(response) {
   *       response.arrayBuffer().then(function(data) {
   *         const format = tile.getFormat() // ol/format/MVT configured as source format
   *         const features = format.readFeatures(data, {
   *           extent: extent,
   *           featureProjection: projection
   *         });
   *         tile.setFeatures(features);
   *       });
   *     });
   *   });
   * }
   * ```
   * If you do not need extent, resolution and projection to get the features for a tile (e.g.
   * for GeoJSON tiles), your `tileLoadFunction` does not need a `setLoader()` call. Only make sure
   * to call `setFeatures()` on the tile:
   * ```js
   * const format = new GeoJSON({featureProjection: map.getView().getProjection()});
   * async function tileLoadFunction(tile, url) {
   *   const response = await fetch(url);
   *   const data = await response.json();
   *   tile.setFeatures(format.readFeatures(data));
   * }
   * ```
   * @property {import("../Tile.js").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.
   * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
   * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be
   * used instead of defining each one separately in the `urls` option.
   * @property {number} [transition] A duration for tile opacity
   * transitions in milliseconds. A duration of 0 disables the opacity transition.
   * @property {Array<string>} [urls] An array of URL templates.
   * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
   * When set to `false`, only one world
   * will be rendered. When set to `true`, tiles will be wrapped horizontally to
   * render multiple worlds.
   * @property {number} [zDirection=1] Indicate which resolution should be used
   * by a renderer if the view resolution does not match any resolution of the tile source.
   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
   * will be used. If -1, the nearest higher resolution will be used.
   */
  /**
   * @classdesc
   * Class for layer sources providing vector data divided into a tile grid, to be
   * used with {@link module:ol/layer/VectorTile~VectorTile}. Although this source receives tiles
   * with vector features from the server, it is not meant for feature editing.
   * Features are optimized for rendering, their geometries are clipped at or near
   * tile boundaries and simplified for a view resolution. See
   * {@link module:ol/source/Vector} for vector sources that are suitable for feature
   * editing.
   *
   * @fires import("./Tile.js").TileSourceEvent
   * @api
   */
  var VectorTile$1 = /** @class */ (function (_super) {
      __extends$1n(VectorTile$1, _super);
      /**
       * @param {!Options} options Vector tile options.
       */
      function VectorTile$1(options) {
          var _this = this;
          var projection = options.projection || 'EPSG:3857';
          var extent = options.extent || extentFromProjection(projection);
          var tileGrid = options.tileGrid || createXYZ({
              extent: extent,
              maxResolution: options.maxResolution,
              maxZoom: options.maxZoom !== undefined ? options.maxZoom : 22,
              minZoom: options.minZoom,
              tileSize: options.tileSize || 512
          });
          _this = _super.call(this, {
              attributions: options.attributions,
              attributionsCollapsible: options.attributionsCollapsible,
              cacheSize: options.cacheSize,
              opaque: false,
              projection: projection,
              state: options.state,
              tileGrid: tileGrid,
              tileLoadFunction: options.tileLoadFunction ? options.tileLoadFunction : defaultLoadFunction,
              tileUrlFunction: options.tileUrlFunction,
              url: options.url,
              urls: options.urls,
              wrapX: options.wrapX === undefined ? true : options.wrapX,
              transition: options.transition,
              zDirection: options.zDirection === undefined ? 1 : options.zDirection
          }) || this;
          /**
           * @private
           * @type {import("../format/Feature.js").default}
           */
          _this.format_ = options.format ? options.format : null;
          /**
           * @type {Object<string, import("./VectorTile").default>}
           */
          _this.loadingTiles_ = {};
          /**
           * @private
           * @type {TileCache}
           */
          _this.sourceTileCache = new TileCache(_this.tileCache.highWaterMark);
          /**
           * @private
           * @type {boolean}
           */
          _this.overlaps_ = options.overlaps == undefined ? true : options.overlaps;
          /**
           * @protected
           * @type {typeof import("../VectorTile.js").default}
           */
          _this.tileClass = options.tileClass ? options.tileClass : VectorTile;
          /**
           * @private
           * @type {Object<string, import("../tilegrid/TileGrid.js").default>}
           */
          _this.tileGrids_ = {};
          return _this;
      }
      /**
       * Get features whose bounding box intersects the provided extent. Only features for cached
       * tiles for the last rendered zoom level are available in the source. So this method is only
       * suitable for requesting tiles for extents that are currently rendered.
       *
       * Features are returned in random tile order and as they are included in the tiles. This means
       * they can be clipped, duplicated across tiles, and simplified to the render resolution.
       *
       * @param {import("../extent.js").Extent} extent Extent.
       * @return {Array<import("../Feature.js").FeatureLike>} Features.
       * @api
       */
      VectorTile$1.prototype.getFeaturesInExtent = function (extent) {
          var features = [];
          var tileCache = this.tileCache;
          if (tileCache.getCount() === 0) {
              return features;
          }
          var z = fromKey(tileCache.peekFirstKey())[0];
          var tileGrid = this.tileGrid;
          tileCache.forEach(function (tile) {
              if (tile.tileCoord[0] !== z || tile.getState() !== TileState.LOADED) {
                  return;
              }
              var sourceTiles = tile.getSourceTiles();
              for (var i = 0, ii = sourceTiles.length; i < ii; ++i) {
                  var sourceTile = sourceTiles[i];
                  var tileCoord = sourceTile.tileCoord;
                  if (intersects(extent, tileGrid.getTileCoordExtent(tileCoord))) {
                      var tileFeatures = sourceTile.getFeatures();
                      if (tileFeatures) {
                          for (var j = 0, jj = tileFeatures.length; j < jj; ++j) {
                              var candidate = tileFeatures[j];
                              var geometry = candidate.getGeometry();
                              if (intersects(extent, geometry.getExtent())) {
                                  features.push(candidate);
                              }
                          }
                      }
                  }
              }
          });
          return features;
      };
      /**
       * @return {boolean} The source can have overlapping geometries.
       */
      VectorTile$1.prototype.getOverlaps = function () {
          return this.overlaps_;
      };
      /**
       * clear {@link module:ol/TileCache~TileCache} and delete all source tiles
       * @api
       */
      VectorTile$1.prototype.clear = function () {
          this.tileCache.clear();
          this.sourceTileCache.clear();
      };
      /**
       * @param {import("../proj/Projection.js").default} projection Projection.
       * @param {!Object<string, boolean>} usedTiles Used tiles.
       */
      VectorTile$1.prototype.expireCache = function (projection, usedTiles) {
          _super.prototype.expireCache.call(this, projection, usedTiles);
          this.sourceTileCache.expireCache({});
      };
      /**
       * @param {number} pixelRatio Pixel ratio.
       * @param {import("../proj/Projection").default} projection Projection.
       * @param {VectorRenderTile} tile Vector image tile.
       * @return {Array<import("../VectorTile").default>} Tile keys.
       */
      VectorTile$1.prototype.getSourceTiles = function (pixelRatio, projection, tile) {
          var urlTileCoord = tile.wrappedTileCoord;
          var tileGrid = this.getTileGridForProjection(projection);
          var extent = tileGrid.getTileCoordExtent(urlTileCoord);
          var z = urlTileCoord[0];
          var resolution = tileGrid.getResolution(z);
          // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space
          buffer(extent, -resolution, extent);
          var sourceTileGrid = this.tileGrid;
          var sourceExtent = sourceTileGrid.getExtent();
          if (sourceExtent) {
              getIntersection(extent, sourceExtent, extent);
          }
          var sourceZ = sourceTileGrid.getZForResolution(resolution, 1);
          var minZoom = sourceTileGrid.getMinZoom();
          var previousSourceTiles = tile.sourceTiles;
          var sourceTiles, covered, loadedZ;
          if (previousSourceTiles && previousSourceTiles.length > 0 && previousSourceTiles[0].tileCoord[0] === sourceZ) {
              sourceTiles = previousSourceTiles;
              covered = true;
              loadedZ = sourceZ;
          }
          else {
              sourceTiles = [];
              loadedZ = sourceZ + 1;
              do {
                  --loadedZ;
                  covered = true;
                  sourceTileGrid.forEachTileCoord(extent, loadedZ, function (sourceTileCoord) {
                      var tileUrl = this.tileUrlFunction(sourceTileCoord, pixelRatio, projection);
                      var sourceTile;
                      if (tileUrl !== undefined) {
                          if (this.sourceTileCache.containsKey(tileUrl)) {
                              sourceTile = this.sourceTileCache.get(tileUrl);
                              var state = sourceTile.getState();
                              if (state === TileState.LOADED || state === TileState.ERROR || state === TileState.EMPTY) {
                                  sourceTiles.push(sourceTile);
                                  return;
                              }
                          }
                          else if (loadedZ === sourceZ) {
                              sourceTile = new this.tileClass(sourceTileCoord, TileState.IDLE, tileUrl, this.format_, this.tileLoadFunction);
                              sourceTile.extent = sourceTileGrid.getTileCoordExtent(sourceTileCoord);
                              sourceTile.projection = projection;
                              sourceTile.resolution = sourceTileGrid.getResolution(sourceTileCoord[0]);
                              this.sourceTileCache.set(tileUrl, sourceTile);
                              sourceTile.addEventListener(EventType.CHANGE, this.handleTileChange.bind(this));
                              sourceTile.load();
                          }
                      }
                      covered = covered && sourceTile && sourceTile.getState() === TileState.LOADED;
                      if (!sourceTile) {
                          return;
                      }
                      if (sourceTile.getState() !== TileState.EMPTY && tile.getState() === TileState.IDLE) {
                          tile.loadingSourceTiles++;
                          sourceTile.addEventListener(EventType.CHANGE, function listenChange() {
                              var state = sourceTile.getState();
                              var sourceTileKey = sourceTile.getKey();
                              if (state === TileState.LOADED || state === TileState.ERROR) {
                                  if (state === TileState.LOADED) {
                                      sourceTile.removeEventListener(EventType.CHANGE, listenChange);
                                      tile.loadingSourceTiles--;
                                      delete tile.errorSourceTileKeys[sourceTileKey];
                                  }
                                  else if (state === TileState.ERROR) {
                                      tile.errorSourceTileKeys[sourceTileKey] = true;
                                  }
                                  var errorTileCount = Object.keys(tile.errorSourceTileKeys).length;
                                  if (tile.loadingSourceTiles - errorTileCount === 0) {
                                      tile.hifi = errorTileCount === 0;
                                      tile.sourceZ = sourceZ;
                                      tile.setState(TileState.LOADED);
                                  }
                              }
                          });
                      }
                  }.bind(this));
                  if (!covered) {
                      sourceTiles.length = 0;
                  }
              } while (!covered && loadedZ > minZoom);
          }
          if (tile.getState() === TileState.IDLE) {
              tile.setState(TileState.LOADING);
          }
          if (covered) {
              tile.hifi = sourceZ === loadedZ;
              tile.sourceZ = loadedZ;
              if (tile.getState() < TileState.LOADED) {
                  tile.setState(TileState.LOADED);
              }
              else if (!previousSourceTiles || !equals$1(sourceTiles, previousSourceTiles)) {
                  tile.sourceTiles = sourceTiles;
              }
          }
          return sourceTiles;
      };
      /**
       * @inheritDoc
       */
      VectorTile$1.prototype.getTile = function (z, x, y, pixelRatio, projection) {
          var coordKey = getKeyZXY(z, x, y);
          var key = this.getKey();
          var tile;
          if (this.tileCache.containsKey(coordKey)) {
              tile = /** @type {!import("../Tile.js").default} */ (this.tileCache.get(coordKey));
              if (tile.key === key) {
                  return tile;
              }
          }
          var tileCoord = [z, x, y];
          var urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);
          var sourceExtent = this.getTileGrid().getExtent();
          var tileGrid = this.getTileGridForProjection(projection);
          if (urlTileCoord && sourceExtent) {
              var tileExtent = tileGrid.getTileCoordExtent(urlTileCoord);
              // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space
              buffer(tileExtent, -tileGrid.getResolution(z), tileExtent);
              if (!intersects(sourceExtent, tileExtent)) {
                  urlTileCoord = null;
              }
          }
          var empty = true;
          if (urlTileCoord !== null) {
              var sourceTileGrid = this.tileGrid;
              var resolution = tileGrid.getResolution(z);
              var sourceZ = sourceTileGrid.getZForResolution(resolution, 1);
              // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space
              var extent = tileGrid.getTileCoordExtent(urlTileCoord);
              buffer(extent, -resolution, extent);
              sourceTileGrid.forEachTileCoord(extent, sourceZ, function (sourceTileCoord) {
                  empty = empty && !this.tileUrlFunction(sourceTileCoord, pixelRatio, projection);
              }.bind(this));
          }
          var newTile = new VectorRenderTile(tileCoord, empty ? TileState.EMPTY : TileState.IDLE, urlTileCoord, this.getSourceTiles.bind(this, pixelRatio, projection));
          newTile.key = key;
          if (tile) {
              newTile.interimTile = tile;
              newTile.refreshInterimChain();
              this.tileCache.replace(coordKey, newTile);
          }
          else {
              this.tileCache.set(coordKey, newTile);
          }
          return newTile;
      };
      /**
       * @inheritDoc
       */
      VectorTile$1.prototype.getTileGridForProjection = function (projection) {
          var code = projection.getCode();
          var tileGrid = this.tileGrids_[code];
          if (!tileGrid) {
              // A tile grid that matches the tile size of the source tile grid is more
              // likely to have 1:1 relationships between source tiles and rendered tiles.
              var sourceTileGrid = this.tileGrid;
              tileGrid = createForProjection(projection, undefined, sourceTileGrid ? sourceTileGrid.getTileSize(sourceTileGrid.getMinZoom()) : undefined);
              this.tileGrids_[code] = tileGrid;
          }
          return tileGrid;
      };
      /**
       * @inheritDoc
       */
      VectorTile$1.prototype.getTilePixelRatio = function (pixelRatio) {
          return pixelRatio;
      };
      /**
       * @inheritDoc
       */
      VectorTile$1.prototype.getTilePixelSize = function (z, pixelRatio, projection) {
          var tileGrid = this.getTileGridForProjection(projection);
          var tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);
          return [Math.round(tileSize[0] * pixelRatio), Math.round(tileSize[1] * pixelRatio)];
      };
      return VectorTile$1;
  }(UrlTile));
  /**
   * Sets the loader for a tile.
   * @param {import("../VectorTile.js").default} tile Vector tile.
   * @param {string} url URL.
   */
  function defaultLoadFunction(tile, url) {
      var loader = loadFeaturesXhr(url, tile.getFormat(), tile.onLoad.bind(tile), tile.onError.bind(tile));
      tile.setLoader(loader);
  }

  /*
  ol-mapbox-style - Use Mapbox Style objects with OpenLayers
  Copyright 2016-present ol-mapbox-style contributors
  License: https://raw.githubusercontent.com/openlayers/ol-mapbox-style/master/LICENSE
  */
  /**
   * @typedef {import("ol/layer/VectorTile").default} VectorTileLayer
   * @typedef {import("ol/layer/Vector").default} VectorLayer
   * @typedef {import("ol/PluggableMap").default} PluggableMap
   * @typedef {import("ol/layer/Layer").default} Layer
   * @typedef {import("ol/source/Source").default} Source
   * @private
   */
  var tilejsonCache = {};
  var fontFamilyRegEx = /font-family: ?([^;]*);/;
  var stripQuotesRegEx = /("|')/g;
  var loadedFontFamilies;
  function hasFontFamily(family) {
      if (!loadedFontFamilies) {
          loadedFontFamilies = {};
          var styleSheets = document.styleSheets;
          for (var i = 0, ii = styleSheets.length; i < ii; ++i) {
              var styleSheet = /** @type {CSSStyleSheet} */ (styleSheets[i]);
              try {
                  var cssRules = styleSheet.rules || styleSheet.cssRules;
                  if (cssRules) {
                      for (var j = 0, jj = cssRules.length; j < jj; ++j) {
                          var cssRule = cssRules[j];
                          if (cssRule.type == 5) {
                              var match = cssRule.cssText.match(fontFamilyRegEx);
                              loadedFontFamilies[match[1].replace(stripQuotesRegEx, '')] = true;
                          }
                      }
                  }
              }
              catch (e) {
                  // empty catch block
              }
          }
      }
      return family in loadedFontFamilies;
  }
  var processedFontFamilies = {};
  var googleFamilies = google.getNames();
  /**
   * @private
   * @param {Array} fonts Fonts.
   * @return {Array} Processed fonts.
   */
  function getFonts(fonts) {
      var fontsKey = fonts.toString();
      if (fontsKey in processedFontFamilies) {
          return fonts;
      }
      var googleFontDescriptions = fonts.map(function (font) {
          var parts = mapboxToCssFont(font, 1).split(' ');
          return [parts.slice(3).join(' ').replace(/"/g, ''), parts[1] + parts[0]];
      });
      for (var i = 0, ii = googleFontDescriptions.length; i < ii; ++i) {
          var googleFontDescription = googleFontDescriptions[i];
          var family = googleFontDescription[0];
          if (!hasFontFamily(family) && googleFamilies.indexOf(family) !== -1) {
              var fontUrl = 'https://fonts.googleapis.com/css?family=' + family.replace(/ /g, '+') + ':' + googleFontDescription[1];
              if (!document.querySelector('link[href="' + fontUrl + '"]')) {
                  var markup = document.createElement('link');
                  markup.href = fontUrl;
                  markup.rel = 'stylesheet';
                  document.head.appendChild(markup);
              }
          }
      }
      processedFontFamilies[fontsKey] = true;
      return fonts;
  }
  var spriteRegEx = /^(.*)(\?.*)$/;
  function withPath(url, path) {
      if (path && url.startsWith('.')) {
          url = path + url;
      }
      return url;
  }
  function toSpriteUrl(url, path, extension) {
      url = withPath(url, path);
      var parts = url.match(spriteRegEx);
      return parts ?
          parts[1] + extension + (parts.length > 2 ? parts[2] : '') :
          url + extension;
  }
  /**
   * ```js
   * import {applyStyle} from 'ol-mapbox-style';
   * ```
   *
   * Applies a style function to an `ol.layer.VectorTile` or `ol.layer.Vector`
   * with an `ol.source.VectorTile` or an `ol.source.Vector`. The style function
   * will render all layers from the `glStyle` object that use the specified
   * `source`, or a subset of layers from the same source. The source needs to be
   * a `"type": "vector"` or `"type": "geojson"` source.
   *
   * Two additional properties will be set on the provided layer:
   *
   *  * `mapbox-source`: The `id` of the Mapbox Style document's source that the
   *    OpenLayers layer was created from. Usually `apply()` creates one
   *    OpenLayers layer per Mapbox Style source, unless the layer stack has
   *    layers from different sources in between.
   *  * `mapbox-layers`: The `id`s of the Mapbox Style document's layers that are
   *    included in the OpenLayers layer.
   *
   * @param {VectorTileLayer|VectorLayer} layer OpenLayers layer.
   * @param {string|Object} glStyle Mapbox Style object.
   * @param {string|Array<string>} source `source` key or an array of layer `id`s from the
   * Mapbox Style object. When a `source` key is provided, all layers for the
   * specified source will be included in the style function. When layer `id`s
   * are provided, they must be from layers that use the same source.
   * @param {string} [path=undefined] Path of the style file. Only required when
   * a relative path is used with the `"sprite"` property of the style.
   * @param {Array<number>} [resolutions=undefined] Resolutions for mapping resolution to zoom level.
   * @return {Promise} Promise which will be resolved when the style can be used
   * for rendering.
   */
  function applyStyle(layer, glStyle, source, path, resolutions) {
      return new Promise(function (resolve, reject) {
          // TODO: figure out where best place to check source type is
          // Note that the source arg is an array of gl layer ids and each must be
          // dereferenced to get source type to validate
          if (typeof glStyle != 'object') {
              glStyle = JSON.parse(glStyle);
          }
          if (glStyle.version != 8) {
              return reject(new Error('glStyle version 8 required.'));
          }
          if (!(layer instanceof VectorLayer || layer instanceof VectorTileLayer)) {
              return reject(new Error('Can only apply to VectorLayer or VectorTileLayer'));
          }
          var spriteScale, spriteData, spriteImageUrl, style;
          function onChange() {
              if (!style && (!glStyle.sprite || spriteData)) {
                  style = applyStyleFunction(layer, glStyle, source, resolutions, spriteData, spriteImageUrl, getFonts);
                  if (!layer.getStyle()) {
                      reject(new Error("Nothing to show for source [" + source + "]"));
                  }
                  else {
                      resolve();
                  }
              }
              else if (style) {
                  layer.setStyle(style);
                  resolve();
              }
              else {
                  reject(new Error('Something went wrong trying to apply style.'));
              }
          }
          if (glStyle.sprite) {
              spriteScale = window.devicePixelRatio >= 1.5 ? 0.5 : 1;
              var sizeFactor_1 = spriteScale == 0.5 ? '@2x' : '';
              var spriteUrl_1 = toSpriteUrl(glStyle.sprite, path, sizeFactor_1 + '.json');
              fetch(spriteUrl_1, { credentials: 'same-origin' })
                  .then(function (response) {
                  if (!response.ok && (sizeFactor_1 !== '')) {
                      spriteUrl_1 = toSpriteUrl(glStyle.sprite, path, '.json');
                      return fetch(spriteUrl_1, { credentials: 'same-origin' });
                  }
                  else {
                      return response;
                  }
              })
                  .then(function (response) {
                  if (response.ok) {
                      return response.json();
                  }
                  else {
                      reject(new Error("Problem fetching sprite from " + spriteUrl_1 + ": " + response.statusText));
                  }
              })
                  .then(function (spritesJson) {
                  if ((spritesJson === undefined) || (Object.keys(spritesJson).length === 0)) {
                      return reject(new Error('No sprites found.'));
                  }
                  spriteData = spritesJson;
                  spriteImageUrl = toSpriteUrl(glStyle.sprite, path, sizeFactor_1 + '.png');
                  onChange();
              })
                  .catch(function (err) {
                  reject(new Error("Sprites cannot be loaded: " + spriteUrl_1 + ": " + err.message));
              });
          }
          else {
              onChange();
          }
      });
  }
  var emptyObj$1 = {};
  function setBackground(map, layer) {
      var background = {
          type: layer.type
      };
      function updateStyle() {
          var element = map.getTargetElement();
          if (!element) {
              return;
          }
          var layout = layer.layout || {};
          var paint = layer.paint || {};
          background['paint'] = paint;
          background.id = 'olms-bg-' + paint['background-opacity'] + paint['background-color'];
          var zoom = map.getView().getZoom();
          if (paint['background-color'] !== undefined) {
              var bg = getValue(background, 'paint', 'background-color', zoom, emptyObj$1);
              element.style.background = Color.parse(bg).toString();
          }
          if (paint['background-opacity'] !== undefined) {
              element.style.opacity = getValue(background, 'paint', 'background-opacity', zoom, emptyObj$1);
          }
          if (layout.visibility == 'none') {
              element.style.backgroundColor = '';
              element.style.opacity = '';
          }
      }
      if (map.getTargetElement()) {
          updateStyle();
      }
      map.on(['change:resolution', 'change:target'], updateStyle);
  }
  function getSourceIdByRef(layers, ref) {
      var sourceId;
      layers.some(function (layer) {
          if (layer.id == ref) {
              sourceId = layer.source;
              return true;
          }
      });
      return sourceId;
  }
  function extentFromTileJSON(tileJSON) {
      var bounds = tileJSON.bounds;
      if (bounds) {
          var ll = fromLonLat([bounds[0], bounds[1]]);
          var tr = fromLonLat([bounds[2], bounds[3]]);
          return [ll[0], ll[1], tr[0], tr[1]];
      }
  }
  function setupVectorLayer(glSource, accessToken, url) {
      glSource = Object.assign({}, glSource);
      var layer = new VectorTileLayer({
          declutter: true,
          visible: false
      });
      var cacheKey = JSON.stringify(glSource);
      var tilejson = tilejsonCache[cacheKey];
      if (!tilejson) {
          tilejson = tilejsonCache[cacheKey] = new TileJSON({
              url: glSource.tiles ? undefined : url,
              tileJSON: glSource.tiles ? glSource : undefined
          });
      }
      var key = tilejson.on('change', function () {
          var state = tilejson.getState();
          if (state === 'ready') {
              var tileJSONDoc = tilejson.getTileJSON();
              var tiles = Array.isArray(tileJSONDoc.tiles) ? tileJSONDoc.tiles : [tileJSONDoc.tiles];
              if (glSource.url) {
                  for (var i = 0, ii = tiles.length; i < ii; ++i) {
                      var tile = tiles[i];
                      if (tile.indexOf('http') != 0) {
                          tiles[i] = glSource.url + tile;
                      }
                  }
              }
              var tileGrid = tilejson.getTileGrid();
              var extent = extentFromTileJSON(tileJSONDoc);
              var minZoom = tileJSONDoc.minzoom || 0;
              var maxZoom = tileJSONDoc.maxzoom || 22;
              var source = tilejson.get('ol-source');
              if (source === undefined) {
                  source = new VectorTile$1({
                      attributions: tilejson.getAttributions(),
                      format: new MVT(),
                      tileGrid: new TileGrid({
                          origin: tileGrid.getOrigin(0),
                          extent: extent || tileGrid.getExtent(),
                          minZoom: minZoom,
                          resolutions: defaultResolutions.slice(0, maxZoom + 1),
                          tileSize: 512
                      }),
                      urls: tiles
                  });
                  tilejson.set('ol-source', source);
              }
              unByKey(key);
              layer.setSource(source);
          }
          else if (state === 'error') {
              tilejson.set('ol-source', null);
              unByKey(key);
              layer.setSource(undefined);
          }
      });
      if (tilejson.getState() === 'ready') {
          tilejson.changed();
      }
      return layer;
  }
  function setupRasterLayer(glSource, url) {
      var layer = new TileLayer();
      var source = new TileJSON({
          transition: 0,
          url: glSource.tiles ? undefined : url,
          tileJSON: glSource.tiles ? glSource : undefined,
          crossOrigin: 'anonymous'
      });
      var key = source.on('change', function () {
          var state = source.getState();
          if (state === 'ready') {
              unByKey(key);
              var tileJSONDoc = /** @type {Object} */ (source.getTileJSON());
              var extent = extentFromTileJSON(tileJSONDoc);
              var tileGrid = source.getTileGrid();
              var tileSize = glSource.tileSize || tileJSONDoc.tileSize || 512;
              var minZoom = tileJSONDoc.minzoom || 0;
              var maxZoom = tileJSONDoc.maxzoom || 22;
              // Only works when using ES modules
              source.tileGrid = new TileGrid({
                  origin: tileGrid.getOrigin(0),
                  extent: extent || tileGrid.getExtent(),
                  minZoom: minZoom,
                  resolutions: createXYZ({
                      maxZoom: maxZoom,
                      tileSize: tileSize
                  }).getResolutions(),
                  tileSize: tileSize
              });
              layer.setSource(source);
          }
          else if (state === 'error') {
              unByKey(key);
              layer.setSource(undefined);
          }
      });
      source.setTileLoadFunction(function (tile, src) {
          if (src.indexOf('{bbox-epsg-3857}') != -1) {
              var bbox = source.getTileGrid().getTileCoordExtent(tile.getTileCoord());
              src = src.replace('{bbox-epsg-3857}', bbox.toString());
          }
          var img = /** @type {import("ol/ImageTile").default} */ (tile).getImage();
          /** @type {HTMLImageElement} */ (img).src = src;
      });
      return layer;
  }
  var geoJsonFormat = new GeoJSON();
  function setupGeoJSONLayer(glSource, path) {
      var data = glSource.data;
      var features, geoJsonUrl;
      if (typeof data == 'string') {
          geoJsonUrl = withPath(data, path);
      }
      else {
          features = geoJsonFormat.readFeatures(data, { featureProjection: 'EPSG:3857' });
      }
      return new VectorLayer({
          source: new VectorSource({
              attributions: glSource.attribution,
              features: features,
              format: geoJsonFormat,
              url: geoJsonUrl
          }),
          visible: false
      });
  }
  function updateRasterLayerProperties(glLayer, layer, view) {
      var zoom = view.getZoom();
      var opacity = getValue(glLayer, 'paint', 'raster-opacity', zoom, emptyObj$1);
      layer.setOpacity(opacity);
  }
  function processStyle(glStyle, map, baseUrl, host, path, accessToken) {
      var promises = [];
      var view = map.getView();
      if (!view.isDef() && !view.getRotation() && !view.getResolutions()) {
          view = new View({
              maxResolution: defaultResolutions[0]
          });
          map.setView(view);
      }
      if ('center' in glStyle && !view.getCenter()) {
          view.setCenter(fromLonLat(glStyle.center));
      }
      if ('zoom' in glStyle && view.getZoom() === undefined) {
          view.setResolution(defaultResolutions[0] / Math.pow(2, glStyle.zoom));
      }
      if (!view.getCenter() || view.getZoom() === undefined) {
          view.fit(view.getProjection().getExtent(), {
              nearest: true,
              size: map.getSize()
          });
      }
      if (glStyle.sprite) {
          if (glStyle.sprite.indexOf('mapbox://') == 0) {
              glStyle.sprite = baseUrl + '/sprite' + accessToken;
          }
          else if (glStyle.sprite.indexOf('http') != 0) {
              glStyle.sprite = (host ? (host + path) : '') + glStyle.sprite + accessToken;
          }
      }
      var glLayers = glStyle.layers;
      var layerIds = [];
      var glLayer, glSource, glSourceId, id, layer, url;
      var _loop_1 = function (i, ii) {
          glLayer = glLayers[i];
          var type = glLayer.type;
          if (type == 'heatmap' || type == 'fill-extrusion' || type == 'hillshade') ;
          else if (type == 'background') {
              setBackground(map, glLayer);
          }
          else {
              id = glLayer.source || getSourceIdByRef(glLayers, glLayer.ref);
              // this technique assumes gl layers will be in a particular order
              if (id != glSourceId) {
                  if (layerIds.length) {
                      promises.push(finalizeLayer(layer, layerIds, glStyle, path, map));
                      layerIds = [];
                  }
                  glSource = glStyle.sources[id];
                  url = glSource.url;
                  if (url) {
                      url = withPath(url, path);
                      if (url.indexOf('mapbox://') == 0) {
                          var mapid_1 = url.replace('mapbox://', '');
                          glSource.tiles = ['a', 'b', 'c', 'd'].map(function (host) {
                              return 'https://' + host + '.tiles.mapbox.com/v4/' + mapid_1 +
                                  '/{z}/{x}/{y}.' +
                                  (glSource.type == 'vector' ? 'vector.pbf' : 'png') +
                                  accessToken;
                          });
                      }
                  }
                  if (glSource.type == 'vector') {
                      layer = setupVectorLayer(glSource, accessToken, url);
                  }
                  else if (glSource.type == 'raster') {
                      layer = setupRasterLayer(glSource, url);
                      layer.setVisible(glLayer.layout ? glLayer.layout.visibility !== 'none' : true);
                      view.on('change:resolution', updateRasterLayerProperties.bind(this_1, glLayer, layer, view));
                      updateRasterLayerProperties(glLayer, layer, view);
                  }
                  else if (glSource.type == 'geojson') {
                      layer = setupGeoJSONLayer(glSource, path);
                  }
                  glSourceId = id;
                  if (layer) {
                      layer.set('mapbox-source', glSourceId);
                  }
              }
              layerIds.push(glLayer.id);
          }
      };
      var this_1 = this;
      for (var i = 0, ii = glLayers.length; i < ii; ++i) {
          _loop_1(i);
      }
      promises.push(finalizeLayer(layer, layerIds, glStyle, path, map));
      map.set('mapbox-style', glStyle);
      return Promise.all(promises);
  }
  /**
   * ```js
   * import olms from 'ol-mapbox-style';
   * ```
   *
   * Loads and applies a Mapbox Style object to an OpenLayers Map. This includes
   * the map background, the layers, the center and the zoom.
   *
   * The center and zoom will only be set if present in the Mapbox Style document,
   * and if not already set on the OpenLayers map.
   *
   * Layers will be added to the OpenLayers map, without affecting any layers that
   * might already be set on the map.
   *
   * Layers added by `apply()` will have two additional properties:
   *
   *  * `mapbox-source`: The `id` of the Mapbox Style document's source that the
   *    OpenLayers layer was created from. Usually `apply()` creates one
   *    OpenLayers layer per Mapbox Style source, unless the layer stack has
   *    layers from different sources in between.
   *  * `mapbox-layers`: The `id`s of the Mapbox Style document's layers that are
   *    included in the OpenLayers layer.
   *
   * This function sets an additional `mapbox-style` property on the OpenLayers
   * map instance, which holds the Mapbox Style object.
   *
   * @param {PluggableMap|HTMLElement|string} map Either an existing OpenLayers Map
   * instance, or a HTML element, or the id of a HTML element that will be the
   * target of a new OpenLayers Map.
   * @param {string|Object} style JSON style object or style url pointing to a
   * Mapbox Style object. When using Mapbox APIs, the url must contain an access
   * token and look like
   * `https://api.mapbox.com/styles/v1/mapbox/bright-v9?access_token=[your_access_token_here]`.
   * When passed as JSON style object, all OpenLayers layers created by `apply()`
   * will be immediately available, but they may not have a source yet (i.e. when
   * they are defined by a TileJSON url in the Mapbox Style document). When passed
   * as style url, layers will be added to the map when the Mapbox Style document
   * is loaded and parsed.
   * @return {Promise} A promise that resolves after all layers have been added to
   * the OpenLayers Map instance, their sources set, and their styles applied. the
   * `resolve` callback will be called with the OpenLayers Map instance as
   * argument.
   */
  function olms(map, style) {
      var accessToken, baseUrl, host, path, promise;
      accessToken = baseUrl = host = path = '';
      if (typeof map === 'string' || map instanceof HTMLElement) {
          map = new Map$1({
              target: map
          });
      }
      if (typeof style === 'string') {
          var parts = style.match(spriteRegEx);
          if (parts) {
              baseUrl = parts[1];
              accessToken = parts.length > 2 ? parts[2] : '';
          }
          promise = new Promise(function (resolve, reject) {
              fetch(style, {
                  credentials: 'same-origin'
              })
                  .then(function (response) {
                  return response.json();
              })
                  .then(function (glStyle) {
                  var a = /** @type {HTMLAnchorElement} */ (document.createElement('A'));
                  a.href = style;
                  var href = a.href;
                  path = a.pathname.split('/').slice(0, -1).join('/') + '/';
                  host = href.substr(0, href.indexOf(path));
                  processStyle(glStyle, map, baseUrl, host, path, accessToken)
                      .then(function () {
                      resolve(map);
                  })
                      .catch(reject);
              })
                  .catch(function (err) {
                  reject(new Error("Could not load " + style + ": " + err.message));
              });
          });
      }
      else {
          promise = new Promise(function (resolve, reject) {
              processStyle(style, map)
                  .then(function () {
                  resolve(map);
              })
                  .catch(reject);
          });
      }
      return promise;
  }
  /**
   * @private
   * If layerIds is not empty, applies the style specified in glStyle to the layer,
   * and adds the layer to the map.
   *
   * The layer may not yet have a source when the function is called.  If so, the style
   * is applied to the layer via a once listener on the 'change:source' event.
   *
   * @param {Layer} layer An OpenLayers layer instance.
   * @param {Array<string>} layerIds Array containing layer ids of already-processed layers.
   * @param {Object} glStyle Style as a JSON object.
   * @param {string|undefined} path The path part of the style URL. Only required
   * when a relative path is used with the `"sprite"` property of the style.
   * @param {PluggableMap} map OpenLayers Map.
   * @return {Promise} Returns a promise that resolves after the source has
   * been set on the specified layer, and the style has been applied.
   */
  function finalizeLayer(layer, layerIds, glStyle, path, map) {
      var minZoom = 24;
      var maxZoom = 0;
      var glLayers = glStyle.layers;
      for (var i = 0, ii = glLayers.length; i < ii; ++i) {
          var glLayer = glLayers[i];
          if (layerIds.indexOf(glLayer.id) !== -1) {
              minZoom = Math.min('minzoom' in glLayer ? glLayer.minzoom : 0, minZoom);
              maxZoom = Math.max('maxzoom' in glLayer ? glLayer.maxzoom : 24, maxZoom);
          }
      }
      return new Promise(function (resolve, reject) {
          var setStyle = function () {
              var source = layer.getSource();
              if (!source || source.getState() === 'error') {
                  reject(new Error('Error accessing data for source ' + layer.get('mapbox-source')));
                  return;
              }
              if (typeof source.getTileGrid === 'function') {
                  var tileGrid = source.getTileGrid();
                  if (tileGrid) {
                      var sourceMinZoom = tileGrid.getMinZoom();
                      if (minZoom > 0 || sourceMinZoom > 0) {
                          layer.setMaxResolution(Math.min(defaultResolutions[minZoom], tileGrid.getResolution(sourceMinZoom)) + 1e-9);
                      }
                      if (maxZoom < 24) {
                          layer.setMinResolution(defaultResolutions[maxZoom] + 1e-9);
                      }
                  }
              }
              if (source instanceof VectorSource || source instanceof VectorTile$1) {
                  applyStyle(/** @type {import("ol/layer/Vector").default|import("ol/layer/VectorTile").default} */ (layer), glStyle, layerIds, path).then(function () {
                      layer.setVisible(true);
                      resolve();
                  }, function (e) {
                      reject(e);
                  });
              }
              else {
                  resolve();
              }
          };
          layer.set('mapbox-layers', layerIds);
          if (map.getLayers().getArray().indexOf(layer) === -1) {
              map.addLayer(layer);
          }
          if (layer.getSource()) {
              setStyle();
          }
          else {
              layer.once('change:source', setStyle);
          }
      });
  }

  var ElementVisibilityWatcher = createCommonjsModule(function (module, exports) {
  /** @license
   * element-visibility-watcher <Prathap Reddy (svap.reddy@hotmail.com)>
   * Date: 2019-03-05
   * License: Apache-2.0
   * 
   * Bundled dependencies (npm packages): 
   * {"package":"intersection-observer@0.5.1","license":"W3C-20150513","link":"https://github.com/w3c/IntersectionObserver#readme"}
  */
  !function(t,e){module.exports=e();}(commonjsGlobal,function(){!function(g,d){function a(t){this.time=t.time,this.target=t.target,this.rootBounds=t.rootBounds,this.boundingClientRect=t.boundingClientRect,this.intersectionRect=t.intersectionRect||{top:0,bottom:0,left:0,right:0,width:0,height:0},this.isIntersecting=!!t.intersectionRect;var e=this.boundingClientRect,n=e.width*e.height,i=this.intersectionRect,o=i.width*i.height;this.intersectionRatio=n?Number((o/n).toFixed(4)):this.isIntersecting?1:0;}function t(t,e){var n,i,o,r=e||{};if("function"!=typeof t)throw new Error("callback must be a function");if(r.root&&1!=r.root.nodeType)throw new Error("root must be an Element");this._checkForIntersections=(n=this._checkForIntersections.bind(this),i=this.THROTTLE_TIMEOUT,o=null,function(){o||(o=setTimeout(function(){n(),o=null;},i));}),this._callback=t,this._observationTargets=[],this._queuedEntries=[],this._rootMarginValues=this._parseRootMargin(r.rootMargin),this.thresholds=this._initThresholds(r.threshold),this.root=r.root||null,this.rootMargin=this._rootMarginValues.map(function(t){return t.value+t.unit}).join(" ");}function e(t,e,n,i){"function"==typeof t.addEventListener?t.addEventListener(e,n,i||!1):"function"==typeof t.attachEvent&&t.attachEvent("on"+e,n);}function n(t,e,n,i){"function"==typeof t.removeEventListener?t.removeEventListener(e,n,i||!1):"function"==typeof t.detatchEvent&&t.detatchEvent("on"+e,n);}function b(t){var e;try{e=t.getBoundingClientRect();}catch(t){}return e?(e.width&&e.height||(e={top:e.top,right:e.right,bottom:e.bottom,left:e.left,width:e.right-e.left,height:e.bottom-e.top}),e):{top:0,bottom:0,left:0,right:0,width:0,height:0}}function i(t,e){for(var n=e;n;){if(n==t)return !0;n=m(n);}return !1}function m(t){var e=t.parentNode;return e&&11==e.nodeType&&e.host?e.host:e}"IntersectionObserver"in g&&"IntersectionObserverEntry"in g&&"intersectionRatio"in g.IntersectionObserverEntry.prototype?"isIntersecting"in g.IntersectionObserverEntry.prototype||Object.defineProperty(g.IntersectionObserverEntry.prototype,"isIntersecting",{get:function(){return 0<this.intersectionRatio}}):(t.prototype.THROTTLE_TIMEOUT=100,t.prototype.POLL_INTERVAL=null,t.prototype.USE_MUTATION_OBSERVER=!0,t.prototype.observe=function(e){if(!this._observationTargets.some(function(t){return t.element==e})){if(!e||1!=e.nodeType)throw new Error("target must be an Element");this._registerInstance(),this._observationTargets.push({element:e,entry:null}),this._monitorIntersections(),this._checkForIntersections();}},t.prototype.unobserve=function(e){this._observationTargets=this._observationTargets.filter(function(t){return t.element!=e}),this._observationTargets.length||(this._unmonitorIntersections(),this._unregisterInstance());},t.prototype.disconnect=function(){this._observationTargets=[],this._unmonitorIntersections(),this._unregisterInstance();},t.prototype.takeRecords=function(){var t=this._queuedEntries.slice();return this._queuedEntries=[],t},t.prototype._initThresholds=function(t){var e=t||[0];return Array.isArray(e)||(e=[e]),e.sort().filter(function(t,e,n){if("number"!=typeof t||isNaN(t)||t<0||1<t)throw new Error("threshold must be a number between 0 and 1 inclusively");return t!==n[e-1]})},t.prototype._parseRootMargin=function(t){var e=(t||"0px").split(/\s+/).map(function(t){var e=/^(-?\d*\.?\d+)(px|%)$/.exec(t);if(!e)throw new Error("rootMargin must be specified in pixels or percent");return {value:parseFloat(e[1]),unit:e[2]}});return e[1]=e[1]||e[0],e[2]=e[2]||e[0],e[3]=e[3]||e[1],e},t.prototype._monitorIntersections=function(){this._monitoringIntersections||(this._monitoringIntersections=!0,this.POLL_INTERVAL?this._monitoringInterval=setInterval(this._checkForIntersections,this.POLL_INTERVAL):(e(g,"resize",this._checkForIntersections,!0),e(d,"scroll",this._checkForIntersections,!0),this.USE_MUTATION_OBSERVER&&"MutationObserver"in g&&(this._domObserver=new MutationObserver(this._checkForIntersections),this._domObserver.observe(d,{attributes:!0,childList:!0,characterData:!0,subtree:!0}))));},t.prototype._unmonitorIntersections=function(){this._monitoringIntersections&&(this._monitoringIntersections=!1,clearInterval(this._monitoringInterval),this._monitoringInterval=null,n(g,"resize",this._checkForIntersections,!0),n(d,"scroll",this._checkForIntersections,!0),this._domObserver&&(this._domObserver.disconnect(),this._domObserver=null));},t.prototype._checkForIntersections=function(){var h=this._rootIsInDom(),c=h?this._getRootRect():{top:0,bottom:0,left:0,right:0,width:0,height:0};this._observationTargets.forEach(function(t){var e=t.element,n=b(e),i=this._rootContainsTarget(e),o=t.entry,r=h&&i&&this._computeTargetAndRootIntersection(e,c),s=t.entry=new a({time:g.performance&&performance.now&&performance.now(),target:e,boundingClientRect:n,rootBounds:c,intersectionRect:r});o?h&&i?this._hasCrossedThreshold(o,s)&&this._queuedEntries.push(s):o&&o.isIntersecting&&this._queuedEntries.push(s):this._queuedEntries.push(s);},this),this._queuedEntries.length&&this._callback(this.takeRecords(),this);},t.prototype._computeTargetAndRootIntersection=function(t,e){if("none"!=g.getComputedStyle(t).display){for(var n,i,o,r,s,h,c,a,u=b(t),l=m(t),p=!1;!p;){var f=null,v=1==l.nodeType?g.getComputedStyle(l):{};if("none"==v.display)return;if(l==this.root||l==d?(p=!0,f=e):l!=d.body&&l!=d.documentElement&&"visible"!=v.overflow&&(f=b(l)),f&&(n=f,i=u,o=Math.max(n.top,i.top),r=Math.min(n.bottom,i.bottom),s=Math.max(n.left,i.left),h=Math.min(n.right,i.right),a=r-o,!(u=0<=(c=h-s)&&0<=a&&{top:o,bottom:r,left:s,right:h,width:c,height:a})))break;l=m(l);}return u}},t.prototype._getRootRect=function(){var t;if(this.root)t=b(this.root);else {var e=d.documentElement,n=d.body;t={top:0,left:0,right:e.clientWidth||n.clientWidth,width:e.clientWidth||n.clientWidth,bottom:e.clientHeight||n.clientHeight,height:e.clientHeight||n.clientHeight};}return this._expandRectByRootMargin(t)},t.prototype._expandRectByRootMargin=function(n){var t=this._rootMarginValues.map(function(t,e){return "px"==t.unit?t.value:t.value*(e%2?n.width:n.height)/100}),e={top:n.top-t[0],right:n.right+t[1],bottom:n.bottom+t[2],left:n.left-t[3]};return e.width=e.right-e.left,e.height=e.bottom-e.top,e},t.prototype._hasCrossedThreshold=function(t,e){var n=t&&t.isIntersecting?t.intersectionRatio||0:-1,i=e.isIntersecting?e.intersectionRatio||0:-1;if(n!==i)for(var o=0;o<this.thresholds.length;o++){var r=this.thresholds[o];if(r==n||r==i||r<n!=r<i)return !0}},t.prototype._rootIsInDom=function(){return !this.root||i(d,this.root)},t.prototype._rootContainsTarget=function(t){return i(this.root||d,t)},t.prototype._registerInstance=function(){},t.prototype._unregisterInstance=function(){},g.IntersectionObserver=t,g.IntersectionObserverEntry=a);}(window,document);var t=function(t){void 0===t&&(t={}),this.observerOptions=Object.assign({root:null,rootMargin:"0px",threshold:.01},t),this.visibleElementsStack=[],this.observingElements=[],this.observingElementsCallbacks=[],this.initialize();};t.prototype.triggerCallbacks=function(s,t){var e=this.observingElements,h=this.observingElementsCallbacks,c=s.map(function(t){return t.target}),a=t.map(function(t){return t.target});e.forEach(function(t,e){var n,i,o=c.indexOf(t),r=a.indexOf(t);-1<o&&(n=!0,i=s[o]),-1<r&&(n=!1,i=s[r]),void 0!==n&&h[e](n,i);});},t.prototype.observerCallback=function(t){var i=this,o=[],r=[];t.forEach(function(t){var e=t.target,n=i.visibleElementsStack.indexOf(e);t.isIntersecting?-1===n&&(r.push(t),i.visibleElementsStack.push(t.target)):-1<n&&(o.push(t),i.visibleElementsStack.splice(n,1));}),this.triggerCallbacks(r,o);},t.prototype.initialize=function(){var t=this.observerCallback.bind(this);this.visibilityObserver=new window.IntersectionObserver(t,this.observerOptions);},t.prototype.watch=function(t,e){t&&e&&(this.observingElements.push(t),this.observingElementsCallbacks.push(e),this.visibilityObserver.observe(t));},t.prototype.unwatch=function(t){var e=this.observingElements.indexOf(t);-1<e&&(this.observingElements.splice(e,1),this.observingElementsCallbacks.splice(e,1));};var e=new t;return window.Ractive&&window.Ractive.events&&!window.Ractive.events.viewport&&(window.Ractive.events.viewport=function(n,i){return e.watch(n,function(t,e){i({node:n,original:{visible:t,intersectionData:e}});}),{teardown:function(){e.unwatch(n);}}}),t});

  });

  // `Array.from` method implementation
  // https://tc39.github.io/ecma262/#sec-array.from
  var arrayFrom = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var argumentsLength = arguments.length;
    var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var iteratorMethod = getIteratorMethod(O);
    var index = 0;
    var length, result, step, iterator, next, value;
    if (mapping) mapfn = functionBindContext(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);
    // if the target is not iterable or it's an array with the default iterator - use a simple case
    if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
      iterator = iteratorMethod.call(O);
      next = iterator.next;
      result = new C();
      for (;!(step = next.call(iterator)).done; index++) {
        value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
        createProperty(result, index, value);
      }
    } else {
      length = toLength(O.length);
      result = new C(length);
      for (;length > index; index++) {
        value = mapping ? mapfn(O[index], index) : O[index];
        createProperty(result, index, value);
      }
    }
    result.length = index;
    return result;
  };

  var INCORRECT_ITERATION$1 = !checkCorrectnessOfIteration(function (iterable) {
    Array.from(iterable);
  });

  // `Array.from` method
  // https://tc39.github.io/ecma262/#sec-array.from
  _export({ target: 'Array', stat: true, forced: INCORRECT_ITERATION$1 }, {
    from: arrayFrom
  });

  var $indexOf = arrayIncludes.indexOf;



  var nativeIndexOf = [].indexOf;

  var NEGATIVE_ZERO$1 = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;
  var STRICT_METHOD$6 = arrayMethodIsStrict('indexOf');
  var USES_TO_LENGTH$b = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });

  // `Array.prototype.indexOf` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
  _export({ target: 'Array', proto: true, forced: NEGATIVE_ZERO$1 || !STRICT_METHOD$6 || !USES_TO_LENGTH$b }, {
    indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
      return NEGATIVE_ZERO$1
        // convert -0 to +0
        ? nativeIndexOf.apply(this, arguments) || 0
        : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);
    }
  });

  var TO_STRING = 'toString';
  var RegExpPrototype = RegExp.prototype;
  var nativeToString = RegExpPrototype[TO_STRING];

  var NOT_GENERIC = fails(function () { return nativeToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });
  // FF44- RegExp#toString has a wrong name
  var INCORRECT_NAME = nativeToString.name != TO_STRING;

  // `RegExp.prototype.toString` method
  // https://tc39.github.io/ecma262/#sec-regexp.prototype.tostring
  if (NOT_GENERIC || INCORRECT_NAME) {
    redefine(RegExp.prototype, TO_STRING, function toString() {
      var R = anObject(this);
      var p = String(R.source);
      var rf = R.flags;
      var f = String(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype) ? regexpFlags.call(R) : rf);
      return '/' + p + '/' + f;
    }, { unsafe: true });
  }

  // @@match logic
  fixRegexpWellKnownSymbolLogic('match', 1, function (MATCH, nativeMatch, maybeCallNative) {
    return [
      // `String.prototype.match` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.match
      function match(regexp) {
        var O = requireObjectCoercible(this);
        var matcher = regexp == undefined ? undefined : regexp[MATCH];
        return matcher !== undefined ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
      },
      // `RegExp.prototype[@@match]` method
      // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
      function (regexp) {
        var res = maybeCallNative(nativeMatch, regexp, this);
        if (res.done) return res.value;

        var rx = anObject(regexp);
        var S = String(this);

        if (!rx.global) return regexpExecAbstract(rx, S);

        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
        var A = [];
        var n = 0;
        var result;
        while ((result = regexpExecAbstract(rx, S)) !== null) {
          var matchStr = String(result[0]);
          A[n] = matchStr;
          if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
          n++;
        }
        return n === 0 ? null : A;
      }
    ];
  });

  var max$2 = Math.max;
  var min$7 = Math.min;
  var floor$1 = Math.floor;
  var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d\d?|<[^>]*>)/g;
  var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d\d?)/g;

  var maybeToString = function (it) {
    return it === undefined ? it : String(it);
  };

  // @@replace logic
  fixRegexpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative, reason) {
    var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = reason.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE;
    var REPLACE_KEEPS_$0 = reason.REPLACE_KEEPS_$0;
    var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';

    return [
      // `String.prototype.replace` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.replace
      function replace(searchValue, replaceValue) {
        var O = requireObjectCoercible(this);
        var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];
        return replacer !== undefined
          ? replacer.call(searchValue, O, replaceValue)
          : nativeReplace.call(String(O), searchValue, replaceValue);
      },
      // `RegExp.prototype[@@replace]` method
      // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
      function (regexp, replaceValue) {
        if (
          (!REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE && REPLACE_KEEPS_$0) ||
          (typeof replaceValue === 'string' && replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1)
        ) {
          var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);
          if (res.done) return res.value;
        }

        var rx = anObject(regexp);
        var S = String(this);

        var functionalReplace = typeof replaceValue === 'function';
        if (!functionalReplace) replaceValue = String(replaceValue);

        var global = rx.global;
        if (global) {
          var fullUnicode = rx.unicode;
          rx.lastIndex = 0;
        }
        var results = [];
        while (true) {
          var result = regexpExecAbstract(rx, S);
          if (result === null) break;

          results.push(result);
          if (!global) break;

          var matchStr = String(result[0]);
          if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
        }

        var accumulatedResult = '';
        var nextSourcePosition = 0;
        for (var i = 0; i < results.length; i++) {
          result = results[i];

          var matched = String(result[0]);
          var position = max$2(min$7(toInteger(result.index), S.length), 0);
          var captures = [];
          // NOTE: This is equivalent to
          //   captures = result.slice(1).map(maybeToString)
          // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
          // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
          // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
          for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
          var namedCaptures = result.groups;
          if (functionalReplace) {
            var replacerArgs = [matched].concat(captures, position, S);
            if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
            var replacement = String(replaceValue.apply(undefined, replacerArgs));
          } else {
            replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
          }
          if (position >= nextSourcePosition) {
            accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
            nextSourcePosition = position + matched.length;
          }
        }
        return accumulatedResult + S.slice(nextSourcePosition);
      }
    ];

    // https://tc39.github.io/ecma262/#sec-getsubstitution
    function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
      var tailPos = position + matched.length;
      var m = captures.length;
      var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
      if (namedCaptures !== undefined) {
        namedCaptures = toObject(namedCaptures);
        symbols = SUBSTITUTION_SYMBOLS;
      }
      return nativeReplace.call(replacement, symbols, function (match, ch) {
        var capture;
        switch (ch.charAt(0)) {
          case '$': return '$';
          case '&': return matched;
          case '`': return str.slice(0, position);
          case "'": return str.slice(tailPos);
          case '<':
            capture = namedCaptures[ch.slice(1, -1)];
            break;
          default: // \d\d?
            var n = +ch;
            if (n === 0) return match;
            if (n > m) {
              var f = floor$1(n / 10);
              if (f === 0) return match;
              if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
              return match;
            }
            capture = captures[n - 1];
        }
        return capture === undefined ? '' : capture;
      });
    }
  });

  var non = '\u200B\u0085\u180E';

  // check that a method works with the correct list
  // of whitespaces and has a correct name
  var stringTrimForced = function (METHOD_NAME) {
    return fails(function () {
      return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;
    });
  };

  var $trim = stringTrim.trim;


  // `String.prototype.trim` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.trim
  _export({ target: 'String', proto: true, forced: stringTrimForced('trim') }, {
    trim: function trim() {
      return $trim(this);
    }
  });

  var url_min = createCommonjsModule(function (module) {
  !function(t){var y=/^[a-z]+:/,d=/[-a-z0-9]+(\.[-a-z0-9])*:\d+/i,v=/\/\/(.*?)(?::(.*?))?@/,r=/^win/i,g=/:$/,m=/^\?/,q=/^#/,w=/(.*\/)/,A=/^\/{2,}/,I=/(^\/?)/,e=/'/g,o=/%([ef][0-9a-f])%([89ab][0-9a-f])%([89ab][0-9a-f])/gi,n=/%([cd][0-9a-f])%([89ab][0-9a-f])/gi,i=/%([0-7][0-9a-f])/gi,s=/\+/g,a=/^\w:$/,C=/[^/#?]/;var p,S="undefined"==typeof window&&"undefined"!=typeof commonjsGlobal&&"function"==typeof commonjsRequire,b=!S&&t.navigator&&t.navigator.userAgent&&~t.navigator.userAgent.indexOf("MSIE"),x=S?t.require:null,j={protocol:"protocol",host:"hostname",port:"port",path:"pathname",query:"search",hash:"hash"},z={ftp:21,gopher:70,http:80,https:443,ws:80,wss:443};function E(){return S?p=p||"file://"+(process.platform.match(r)?"/":"")+x("fs").realpathSync("."):"about:srcdoc"===document.location.href?self.parent.document.location.href:document.location.href}function h(t,r,e){var o,n,i;r=r||E(),S?o=x("url").parse(r):(o=document.createElement("a")).href=r;var a,s,p=(s={path:!0,query:!0,hash:!0},(a=r)&&y.test(a)&&(s.protocol=!0,s.host=!0,d.test(a)&&(s.port=!0),v.test(a)&&(s.user=!0,s.pass=!0)),s);for(n in i=r.match(v)||[],j)p[n]?t[n]=o[j[n]]||"":t[n]="";if(t.protocol=t.protocol.replace(g,""),t.query=t.query.replace(m,""),t.hash=F(t.hash.replace(q,"")),t.user=F(i[1]||""),t.pass=F(i[2]||""),t.port=z[t.protocol]==t.port||0==t.port?"":t.port,!p.protocol&&C.test(r.charAt(0))&&(t.path=r.split("?")[0].split("#")[0]),!p.protocol&&e){var h=new L(E().match(w)[0]),u=h.path.split("/"),c=t.path.split("/"),f=["protocol","user","pass","host","port"],l=f.length;for(u.pop(),n=0;n<l;n++)t[f[n]]=h[f[n]];for(;".."===c[0];)u.pop(),c.shift();t.path=("/"!==r.charAt(0)?u.join("/"):"")+"/"+c.join("/");}t.path=t.path.replace(A,"/"),b&&(t.path=t.path.replace(I,"/")),t.paths(t.paths()),t.query=new U(t.query);}function u(t){return encodeURIComponent(t).replace(e,"%27")}function F(t){return (t=(t=(t=t.replace(s," ")).replace(o,function(t,r,e,o){var n=parseInt(r,16)-224,i=parseInt(e,16)-128;if(0==n&&i<32)return t;var a=(n<<12)+(i<<6)+(parseInt(o,16)-128);return 65535<a?t:String.fromCharCode(a)})).replace(n,function(t,r,e){var o=parseInt(r,16)-192;if(o<2)return t;var n=parseInt(e,16)-128;return String.fromCharCode((o<<6)+n)})).replace(i,function(t,r){return String.fromCharCode(parseInt(r,16))})}function U(t){for(var r=t.split("&"),e=0,o=r.length;e<o;e++){var n=r[e].split("="),i=decodeURIComponent(n[0].replace(s," "));if(i){var a=void 0!==n[1]?F(n[1]):null;void 0===this[i]?this[i]=a:(this[i]instanceof Array||(this[i]=[this[i]]),this[i].push(a));}}}function L(t,r){h(this,t,!r);}U.prototype.toString=function(){var t,r,e="",o=u;for(t in this){var n=this[t];if(!(n instanceof Function||void 0===n))if(n instanceof Array){var i=n.length;if(!i){e+=(e?"&":"")+o(t)+"=";continue}for(r=0;r<i;r++){var a=n[r];void 0!==a&&(e+=e?"&":"",e+=o(t)+(null===a?"":"="+o(a)));}}else e+=e?"&":"",e+=o(t)+(null===n?"":"="+o(n));}return e},L.prototype.clearQuery=function(){for(var t in this.query)this.query[t]instanceof Function||delete this.query[t];return this},L.prototype.queryLength=function(){var t=0;for(var r in this.query)this.query[r]instanceof Function||t++;return t},L.prototype.isEmptyQuery=function(){return 0===this.queryLength()},L.prototype.paths=function(t){var r,e="",o=0;if(t&&t.length&&t+""!==t){for(this.isAbsolute()&&(e="/"),r=t.length;o<r;o++)t[o]=!o&&a.test(t[o])?t[o]:u(t[o]);this.path=e+t.join("/");}for(o=0,r=(t=("/"===this.path.charAt(0)?this.path.slice(1):this.path).split("/")).length;o<r;o++)t[o]=F(t[o]);return t},L.prototype.encode=u,L.prototype.decode=F,L.prototype.isAbsolute=function(){return this.protocol||"/"===this.path.charAt(0)},L.prototype.toString=function(){return (this.protocol&&this.protocol+"://")+(this.user&&u(this.user)+(this.pass&&":"+u(this.pass))+"@")+(this.host&&this.host)+(this.port&&":"+this.port)+(this.path&&this.path)+(this.query.toString()&&"?"+this.query)+(this.hash&&"#"+u(this.hash))},t[t.exports?"exports":"Url"]=L;}(module.exports?module:window);
  });

  var nativeAssign = Object.assign;
  var defineProperty$5 = Object.defineProperty;

  // `Object.assign` method
  // https://tc39.github.io/ecma262/#sec-object.assign
  var objectAssign = !nativeAssign || fails(function () {
    // should have correct order of operations (Edge bug)
    if (descriptors && nativeAssign({ b: 1 }, nativeAssign(defineProperty$5({}, 'a', {
      enumerable: true,
      get: function () {
        defineProperty$5(this, 'b', {
          value: 3,
          enumerable: false
        });
      }
    }), { b: 2 })).b !== 1) return true;
    // should work with symbols and should have deterministic property order (V8 bug)
    var A = {};
    var B = {};
    // eslint-disable-next-line no-undef
    var symbol = Symbol();
    var alphabet = 'abcdefghijklmnopqrst';
    A[symbol] = 7;
    alphabet.split('').forEach(function (chr) { B[chr] = chr; });
    return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;
  }) ? function assign(target, source) { // eslint-disable-line no-unused-vars
    var T = toObject(target);
    var argumentsLength = arguments.length;
    var index = 1;
    var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
    var propertyIsEnumerable = objectPropertyIsEnumerable.f;
    while (argumentsLength > index) {
      var S = indexedObject(arguments[index++]);
      var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
      var length = keys.length;
      var j = 0;
      var key;
      while (length > j) {
        key = keys[j++];
        if (!descriptors || propertyIsEnumerable.call(S, key)) T[key] = S[key];
      }
    } return T;
  } : nativeAssign;

  // `Object.assign` method
  // https://tc39.github.io/ecma262/#sec-object.assign
  _export({ target: 'Object', stat: true, forced: Object.assign !== objectAssign }, {
    assign: objectAssign
  });

  var HAS_SPECIES_SUPPORT$3 = arrayMethodHasSpeciesSupport('slice');
  var USES_TO_LENGTH$c = arrayMethodUsesToLength('slice', { ACCESSORS: true, 0: 0, 1: 2 });

  var SPECIES$6 = wellKnownSymbol('species');
  var nativeSlice = [].slice;
  var max$3 = Math.max;

  // `Array.prototype.slice` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.slice
  // fallback for not array-like ES3 strings and DOM objects
  _export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$3 || !USES_TO_LENGTH$c }, {
    slice: function slice(start, end) {
      var O = toIndexedObject(this);
      var length = toLength(O.length);
      var k = toAbsoluteIndex(start, length);
      var fin = toAbsoluteIndex(end === undefined ? length : end, length);
      // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
      var Constructor, result, n;
      if (isArray(O)) {
        Constructor = O.constructor;
        // cross-realm fallback
        if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {
          Constructor = undefined;
        } else if (isObject(Constructor)) {
          Constructor = Constructor[SPECIES$6];
          if (Constructor === null) Constructor = undefined;
        }
        if (Constructor === Array || Constructor === undefined) {
          return nativeSlice.call(O, k, fin);
        }
      }
      result = new (Constructor === undefined ? Array : Constructor)(max$3(fin - k, 0));
      for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);
      result.length = n;
      return result;
    }
  });

  var ceil$1 = Math.ceil;
  var floor$2 = Math.floor;

  // `Math.trunc` method
  // https://tc39.github.io/ecma262/#sec-math.trunc
  _export({ target: 'Math', stat: true }, {
    trunc: function trunc(it) {
      return (it > 0 ? floor$2 : ceil$1)(it);
    }
  });

  // these aren't really private, but nor are they really useful to document

  /**
   * @private
   */
  var LuxonError = /*#__PURE__*/function (_Error) {
    _inherits(LuxonError, _Error);

    var _super = _createSuper(LuxonError);

    function LuxonError() {
      _classCallCheck(this, LuxonError);

      return _super.apply(this, arguments);
    }

    return LuxonError;
  }( /*#__PURE__*/_wrapNativeSuper(Error));
  /**
   * @private
   */


  var InvalidDateTimeError = /*#__PURE__*/function (_LuxonError) {
    _inherits(InvalidDateTimeError, _LuxonError);

    var _super2 = _createSuper(InvalidDateTimeError);

    function InvalidDateTimeError(reason) {
      _classCallCheck(this, InvalidDateTimeError);

      return _super2.call(this, "Invalid DateTime: ".concat(reason.toMessage()));
    }

    return InvalidDateTimeError;
  }(LuxonError);
  /**
   * @private
   */

  var InvalidIntervalError = /*#__PURE__*/function (_LuxonError2) {
    _inherits(InvalidIntervalError, _LuxonError2);

    var _super3 = _createSuper(InvalidIntervalError);

    function InvalidIntervalError(reason) {
      _classCallCheck(this, InvalidIntervalError);

      return _super3.call(this, "Invalid Interval: ".concat(reason.toMessage()));
    }

    return InvalidIntervalError;
  }(LuxonError);
  /**
   * @private
   */

  var InvalidDurationError = /*#__PURE__*/function (_LuxonError3) {
    _inherits(InvalidDurationError, _LuxonError3);

    var _super4 = _createSuper(InvalidDurationError);

    function InvalidDurationError(reason) {
      _classCallCheck(this, InvalidDurationError);

      return _super4.call(this, "Invalid Duration: ".concat(reason.toMessage()));
    }

    return InvalidDurationError;
  }(LuxonError);
  /**
   * @private
   */

  var ConflictingSpecificationError = /*#__PURE__*/function (_LuxonError4) {
    _inherits(ConflictingSpecificationError, _LuxonError4);

    var _super5 = _createSuper(ConflictingSpecificationError);

    function ConflictingSpecificationError() {
      _classCallCheck(this, ConflictingSpecificationError);

      return _super5.apply(this, arguments);
    }

    return ConflictingSpecificationError;
  }(LuxonError);
  /**
   * @private
   */

  var InvalidUnitError = /*#__PURE__*/function (_LuxonError5) {
    _inherits(InvalidUnitError, _LuxonError5);

    var _super6 = _createSuper(InvalidUnitError);

    function InvalidUnitError(unit) {
      _classCallCheck(this, InvalidUnitError);

      return _super6.call(this, "Invalid unit ".concat(unit));
    }

    return InvalidUnitError;
  }(LuxonError);
  /**
   * @private
   */

  var InvalidArgumentError = /*#__PURE__*/function (_LuxonError6) {
    _inherits(InvalidArgumentError, _LuxonError6);

    var _super7 = _createSuper(InvalidArgumentError);

    function InvalidArgumentError() {
      _classCallCheck(this, InvalidArgumentError);

      return _super7.apply(this, arguments);
    }

    return InvalidArgumentError;
  }(LuxonError);
  /**
   * @private
   */

  var ZoneIsAbstractError = /*#__PURE__*/function (_LuxonError7) {
    _inherits(ZoneIsAbstractError, _LuxonError7);

    var _super8 = _createSuper(ZoneIsAbstractError);

    function ZoneIsAbstractError() {
      _classCallCheck(this, ZoneIsAbstractError);

      return _super8.call(this, "Zone is an abstract class");
    }

    return ZoneIsAbstractError;
  }(LuxonError);

  // `SameValue` abstract operation
  // https://tc39.github.io/ecma262/#sec-samevalue
  var sameValue = Object.is || function is(x, y) {
    // eslint-disable-next-line no-self-compare
    return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
  };

  // `Object.is` method
  // https://tc39.github.io/ecma262/#sec-object.is
  _export({ target: 'Object', stat: true }, {
    is: sameValue
  });

  /**
   * @private
   */
  var n = "numeric",
      s = "short",
      l = "long";
  var DATE_SHORT = {
    year: n,
    month: n,
    day: n
  };
  var DATE_MED = {
    year: n,
    month: s,
    day: n
  };
  var DATE_FULL = {
    year: n,
    month: l,
    day: n
  };
  var DATE_HUGE = {
    year: n,
    month: l,
    day: n,
    weekday: l
  };
  var TIME_SIMPLE = {
    hour: n,
    minute: n
  };
  var TIME_WITH_SECONDS = {
    hour: n,
    minute: n,
    second: n
  };
  var TIME_WITH_SHORT_OFFSET = {
    hour: n,
    minute: n,
    second: n,
    timeZoneName: s
  };
  var TIME_WITH_LONG_OFFSET = {
    hour: n,
    minute: n,
    second: n,
    timeZoneName: l
  };
  var TIME_24_SIMPLE = {
    hour: n,
    minute: n,
    hour12: false
  };
  /**
   * {@link toLocaleString}; format like '09:30:23', always 24-hour.
   */

  var TIME_24_WITH_SECONDS = {
    hour: n,
    minute: n,
    second: n,
    hour12: false
  };
  /**
   * {@link toLocaleString}; format like '09:30:23 EDT', always 24-hour.
   */

  var TIME_24_WITH_SHORT_OFFSET = {
    hour: n,
    minute: n,
    second: n,
    hour12: false,
    timeZoneName: s
  };
  /**
   * {@link toLocaleString}; format like '09:30:23 Eastern Daylight Time', always 24-hour.
   */

  var TIME_24_WITH_LONG_OFFSET = {
    hour: n,
    minute: n,
    second: n,
    hour12: false,
    timeZoneName: l
  };
  /**
   * {@link toLocaleString}; format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.
   */

  var DATETIME_SHORT = {
    year: n,
    month: n,
    day: n,
    hour: n,
    minute: n
  };
  /**
   * {@link toLocaleString}; format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.
   */

  var DATETIME_SHORT_WITH_SECONDS = {
    year: n,
    month: n,
    day: n,
    hour: n,
    minute: n,
    second: n
  };
  var DATETIME_MED = {
    year: n,
    month: s,
    day: n,
    hour: n,
    minute: n
  };
  var DATETIME_MED_WITH_SECONDS = {
    year: n,
    month: s,
    day: n,
    hour: n,
    minute: n,
    second: n
  };
  var DATETIME_MED_WITH_WEEKDAY = {
    year: n,
    month: s,
    day: n,
    weekday: s,
    hour: n,
    minute: n
  };
  var DATETIME_FULL = {
    year: n,
    month: l,
    day: n,
    hour: n,
    minute: n,
    timeZoneName: s
  };
  var DATETIME_FULL_WITH_SECONDS = {
    year: n,
    month: l,
    day: n,
    hour: n,
    minute: n,
    second: n,
    timeZoneName: s
  };
  var DATETIME_HUGE = {
    year: n,
    month: l,
    day: n,
    weekday: l,
    hour: n,
    minute: n,
    timeZoneName: l
  };
  var DATETIME_HUGE_WITH_SECONDS = {
    year: n,
    month: l,
    day: n,
    weekday: l,
    hour: n,
    minute: n,
    second: n,
    timeZoneName: l
  };

  // `String.prototype.repeat` method implementation
  // https://tc39.github.io/ecma262/#sec-string.prototype.repeat
  var stringRepeat = ''.repeat || function repeat(count) {
    var str = String(requireObjectCoercible(this));
    var result = '';
    var n = toInteger(count);
    if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');
    for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;
    return result;
  };

  // `String.prototype.repeat` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.repeat
  _export({ target: 'String', proto: true }, {
    repeat: stringRepeat
  });

  /**
   * @private
   */
  // TYPES

  function isUndefined(o) {
    return typeof o === "undefined";
  }
  function isNumber(o) {
    return typeof o === "number";
  }
  function isInteger(o) {
    return typeof o === "number" && o % 1 === 0;
  }
  function isString(o) {
    return typeof o === "string";
  }
  function isDate(o) {
    return Object.prototype.toString.call(o) === "[object Date]";
  } // CAPABILITIES

  function hasIntl() {
    try {
      return typeof Intl !== "undefined" && Intl.DateTimeFormat;
    } catch (e) {
      return false;
    }
  }
  function hasFormatToParts() {
    return !isUndefined(Intl.DateTimeFormat.prototype.formatToParts);
  }
  function hasRelative() {
    try {
      return typeof Intl !== "undefined" && !!Intl.RelativeTimeFormat;
    } catch (e) {
      return false;
    }
  } // OBJECTS AND ARRAYS

  function maybeArray(thing) {
    return Array.isArray(thing) ? thing : [thing];
  }
  function bestBy(arr, by, compare) {
    if (arr.length === 0) {
      return undefined;
    }

    return arr.reduce(function (best, next) {
      var pair = [by(next), next];

      if (!best) {
        return pair;
      } else if (compare(best[0], pair[0]) === best[0]) {
        return best;
      } else {
        return pair;
      }
    }, null)[1];
  }
  function pick(obj, keys) {
    return keys.reduce(function (a, k) {
      a[k] = obj[k];
      return a;
    }, {});
  }
  function hasOwnProperty$2(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  } // NUMBERS AND STRINGS

  function integerBetween(thing, bottom, top) {
    return isInteger(thing) && thing >= bottom && thing <= top;
  } // x % n but takes the sign of n instead of x

  function floorMod(x, n) {
    return x - n * Math.floor(x / n);
  }
  function padStart(input) {
    var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;

    if (input.toString().length < n) {
      return ("0".repeat(n) + input).slice(-n);
    } else {
      return input.toString();
    }
  }
  function parseInteger(string) {
    if (isUndefined(string) || string === null || string === "") {
      return undefined;
    } else {
      return parseInt(string, 10);
    }
  }
  function parseMillis(fraction) {
    // Return undefined (instead of 0) in these cases, where fraction is not set
    if (isUndefined(fraction) || fraction === null || fraction === "") {
      return undefined;
    } else {
      var f = parseFloat("0." + fraction) * 1000;
      return Math.floor(f);
    }
  }
  function roundTo(number, digits) {
    var towardZero = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var factor = Math.pow(10, digits),
        rounder = towardZero ? Math.trunc : Math.round;
    return rounder(number * factor) / factor;
  } // DATE BASICS

  function isLeapYear(year) {
    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
  }
  function daysInYear(year) {
    return isLeapYear(year) ? 366 : 365;
  }
  function daysInMonth(year, month) {
    var modMonth = floorMod(month - 1, 12) + 1,
        modYear = year + (month - modMonth) / 12;

    if (modMonth === 2) {
      return isLeapYear(modYear) ? 29 : 28;
    } else {
      return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][modMonth - 1];
    }
  } // covert a calendar object to a local timestamp (epoch, but with the offset baked in)

  function objToLocalTS(obj) {
    var d = Date.UTC(obj.year, obj.month - 1, obj.day, obj.hour, obj.minute, obj.second, obj.millisecond); // for legacy reasons, years between 0 and 99 are interpreted as 19XX; revert that

    if (obj.year < 100 && obj.year >= 0) {
      d = new Date(d);
      d.setUTCFullYear(d.getUTCFullYear() - 1900);
    }

    return +d;
  }
  function weeksInWeekYear(weekYear) {
    var p1 = (weekYear + Math.floor(weekYear / 4) - Math.floor(weekYear / 100) + Math.floor(weekYear / 400)) % 7,
        last = weekYear - 1,
        p2 = (last + Math.floor(last / 4) - Math.floor(last / 100) + Math.floor(last / 400)) % 7;
    return p1 === 4 || p2 === 3 ? 53 : 52;
  }
  function untruncateYear(year) {
    if (year > 99) {
      return year;
    } else return year > 60 ? 1900 + year : 2000 + year;
  } // PARSING

  function parseZoneInfo(ts, offsetFormat, locale) {
    var timeZone = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    var date = new Date(ts),
        intlOpts = {
      hour12: false,
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit"
    };

    if (timeZone) {
      intlOpts.timeZone = timeZone;
    }

    var modified = Object.assign({
      timeZoneName: offsetFormat
    }, intlOpts),
        intl = hasIntl();

    if (intl && hasFormatToParts()) {
      var parsed = new Intl.DateTimeFormat(locale, modified).formatToParts(date).find(function (m) {
        return m.type.toLowerCase() === "timezonename";
      });
      return parsed ? parsed.value : null;
    } else if (intl) {
      // this probably doesn't work for all locales
      var without = new Intl.DateTimeFormat(locale, intlOpts).format(date),
          included = new Intl.DateTimeFormat(locale, modified).format(date),
          diffed = included.substring(without.length),
          trimmed = diffed.replace(/^[, \u200e]+/, "");
      return trimmed;
    } else {
      return null;
    }
  } // signedOffset('-5', '30') -> -330

  function signedOffset(offHourStr, offMinuteStr) {
    var offHour = parseInt(offHourStr, 10); // don't || this because we want to preserve -0

    if (Number.isNaN(offHour)) {
      offHour = 0;
    }

    var offMin = parseInt(offMinuteStr, 10) || 0,
        offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;
    return offHour * 60 + offMinSigned;
  } // COERCION

  function asNumber(value) {
    var numericValue = Number(value);
    if (typeof value === "boolean" || value === "" || Number.isNaN(numericValue)) throw new InvalidArgumentError("Invalid unit value ".concat(value));
    return numericValue;
  }
  function normalizeObject(obj, normalizer, nonUnitKeys) {
    var normalized = {};

    for (var u in obj) {
      if (hasOwnProperty$2(obj, u)) {
        if (nonUnitKeys.indexOf(u) >= 0) continue;
        var v = obj[u];
        if (v === undefined || v === null) continue;
        normalized[normalizer(u)] = asNumber(v);
      }
    }

    return normalized;
  }
  function formatOffset(offset, format) {
    var hours = Math.trunc(offset / 60),
        minutes = Math.abs(offset % 60),
        sign = hours >= 0 && !Object.is(hours, -0) ? "+" : "-",
        base = "".concat(sign).concat(Math.abs(hours));

    switch (format) {
      case "short":
        return "".concat(sign).concat(padStart(Math.abs(hours), 2), ":").concat(padStart(minutes, 2));

      case "narrow":
        return minutes > 0 ? "".concat(base, ":").concat(minutes) : base;

      case "techie":
        return "".concat(sign).concat(padStart(Math.abs(hours), 2)).concat(padStart(minutes, 2));

      default:
        throw new RangeError("Value format ".concat(format, " is out of range for property format"));
    }
  }
  function timeObject(obj) {
    return pick(obj, ["hour", "minute", "second", "millisecond"]);
  }
  var ianaRegex = /[A-Za-z_+-]{1,256}(:?\/[A-Za-z_+-]{1,256}(\/[A-Za-z_+-]{1,256})?)?/;

  function stringify(obj) {
    return JSON.stringify(obj, Object.keys(obj).sort());
  }
  /**
   * @private
   */


  var monthsLong = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
  var monthsShort = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
  var monthsNarrow = ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"];
  function months(length) {
    switch (length) {
      case "narrow":
        return monthsNarrow;

      case "short":
        return monthsShort;

      case "long":
        return monthsLong;

      case "numeric":
        return ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"];

      case "2-digit":
        return ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];

      default:
        return null;
    }
  }
  var weekdaysLong = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];
  var weekdaysShort = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
  var weekdaysNarrow = ["M", "T", "W", "T", "F", "S", "S"];
  function weekdays(length) {
    switch (length) {
      case "narrow":
        return weekdaysNarrow;

      case "short":
        return weekdaysShort;

      case "long":
        return weekdaysLong;

      case "numeric":
        return ["1", "2", "3", "4", "5", "6", "7"];

      default:
        return null;
    }
  }
  var meridiems = ["AM", "PM"];
  var erasLong = ["Before Christ", "Anno Domini"];
  var erasShort = ["BC", "AD"];
  var erasNarrow = ["B", "A"];
  function eras(length) {
    switch (length) {
      case "narrow":
        return erasNarrow;

      case "short":
        return erasShort;

      case "long":
        return erasLong;

      default:
        return null;
    }
  }
  function meridiemForDateTime(dt) {
    return meridiems[dt.hour < 12 ? 0 : 1];
  }
  function weekdayForDateTime(dt, length) {
    return weekdays(length)[dt.weekday - 1];
  }
  function monthForDateTime(dt, length) {
    return months(length)[dt.month - 1];
  }
  function eraForDateTime(dt, length) {
    return eras(length)[dt.year < 0 ? 0 : 1];
  }
  function formatRelativeTime(unit, count) {
    var numeric = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "always";
    var narrow = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    var units = {
      years: ["year", "yr."],
      quarters: ["quarter", "qtr."],
      months: ["month", "mo."],
      weeks: ["week", "wk."],
      days: ["day", "day", "days"],
      hours: ["hour", "hr."],
      minutes: ["minute", "min."],
      seconds: ["second", "sec."]
    };
    var lastable = ["hours", "minutes", "seconds"].indexOf(unit) === -1;

    if (numeric === "auto" && lastable) {
      var isDay = unit === "days";

      switch (count) {
        case 1:
          return isDay ? "tomorrow" : "next ".concat(units[unit][0]);

        case -1:
          return isDay ? "yesterday" : "last ".concat(units[unit][0]);

        case 0:
          return isDay ? "today" : "this ".concat(units[unit][0]);

      }
    }

    var isInPast = Object.is(count, -0) || count < 0,
        fmtValue = Math.abs(count),
        singular = fmtValue === 1,
        lilUnits = units[unit],
        fmtUnit = narrow ? singular ? lilUnits[1] : lilUnits[2] || lilUnits[1] : singular ? units[unit][0] : unit;
    return isInPast ? "".concat(fmtValue, " ").concat(fmtUnit, " ago") : "in ".concat(fmtValue, " ").concat(fmtUnit);
  }
  function formatString(knownFormat) {
    // these all have the offsets removed because we don't have access to them
    // without all the intl stuff this is backfilling
    var filtered = pick(knownFormat, ["weekday", "era", "year", "month", "day", "hour", "minute", "second", "timeZoneName", "hour12"]),
        key = stringify(filtered),
        dateTimeHuge = "EEEE, LLLL d, yyyy, h:mm a";

    switch (key) {
      case stringify(DATE_SHORT):
        return "M/d/yyyy";

      case stringify(DATE_MED):
        return "LLL d, yyyy";

      case stringify(DATE_FULL):
        return "LLLL d, yyyy";

      case stringify(DATE_HUGE):
        return "EEEE, LLLL d, yyyy";

      case stringify(TIME_SIMPLE):
        return "h:mm a";

      case stringify(TIME_WITH_SECONDS):
        return "h:mm:ss a";

      case stringify(TIME_WITH_SHORT_OFFSET):
        return "h:mm a";

      case stringify(TIME_WITH_LONG_OFFSET):
        return "h:mm a";

      case stringify(TIME_24_SIMPLE):
        return "HH:mm";

      case stringify(TIME_24_WITH_SECONDS):
        return "HH:mm:ss";

      case stringify(TIME_24_WITH_SHORT_OFFSET):
        return "HH:mm";

      case stringify(TIME_24_WITH_LONG_OFFSET):
        return "HH:mm";

      case stringify(DATETIME_SHORT):
        return "M/d/yyyy, h:mm a";

      case stringify(DATETIME_MED):
        return "LLL d, yyyy, h:mm a";

      case stringify(DATETIME_FULL):
        return "LLLL d, yyyy, h:mm a";

      case stringify(DATETIME_HUGE):
        return dateTimeHuge;

      case stringify(DATETIME_SHORT_WITH_SECONDS):
        return "M/d/yyyy, h:mm:ss a";

      case stringify(DATETIME_MED_WITH_SECONDS):
        return "LLL d, yyyy, h:mm:ss a";

      case stringify(DATETIME_MED_WITH_WEEKDAY):
        return "EEE, d LLL yyyy, h:mm a";

      case stringify(DATETIME_FULL_WITH_SECONDS):
        return "LLLL d, yyyy, h:mm:ss a";

      case stringify(DATETIME_HUGE_WITH_SECONDS):
        return "EEEE, LLLL d, yyyy, h:mm:ss a";

      default:
        return dateTimeHuge;
    }
  }

  function stringifyTokens(splits, tokenToString) {
    var s = "";

    var _iterator = _createForOfIteratorHelper(splits),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var token = _step.value;

        if (token.literal) {
          s += token.val;
        } else {
          s += tokenToString(token.val);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return s;
  }

  var _macroTokenToFormatOpts = {
    D: DATE_SHORT,
    DD: DATE_MED,
    DDD: DATE_FULL,
    DDDD: DATE_HUGE,
    t: TIME_SIMPLE,
    tt: TIME_WITH_SECONDS,
    ttt: TIME_WITH_SHORT_OFFSET,
    tttt: TIME_WITH_LONG_OFFSET,
    T: TIME_24_SIMPLE,
    TT: TIME_24_WITH_SECONDS,
    TTT: TIME_24_WITH_SHORT_OFFSET,
    TTTT: TIME_24_WITH_LONG_OFFSET,
    f: DATETIME_SHORT,
    ff: DATETIME_MED,
    fff: DATETIME_FULL,
    ffff: DATETIME_HUGE,
    F: DATETIME_SHORT_WITH_SECONDS,
    FF: DATETIME_MED_WITH_SECONDS,
    FFF: DATETIME_FULL_WITH_SECONDS,
    FFFF: DATETIME_HUGE_WITH_SECONDS
  };
  /**
   * @private
   */

  var Formatter = /*#__PURE__*/function () {
    _createClass(Formatter, null, [{
      key: "create",
      value: function create(locale) {
        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return new Formatter(locale, opts);
      }
    }, {
      key: "parseFormat",
      value: function parseFormat(fmt) {
        var current = null,
            currentFull = "",
            bracketed = false;
        var splits = [];

        for (var i = 0; i < fmt.length; i++) {
          var c = fmt.charAt(i);

          if (c === "'") {
            if (currentFull.length > 0) {
              splits.push({
                literal: bracketed,
                val: currentFull
              });
            }

            current = null;
            currentFull = "";
            bracketed = !bracketed;
          } else if (bracketed) {
            currentFull += c;
          } else if (c === current) {
            currentFull += c;
          } else {
            if (currentFull.length > 0) {
              splits.push({
                literal: false,
                val: currentFull
              });
            }

            currentFull = c;
            current = c;
          }
        }

        if (currentFull.length > 0) {
          splits.push({
            literal: bracketed,
            val: currentFull
          });
        }

        return splits;
      }
    }, {
      key: "macroTokenToFormatOpts",
      value: function macroTokenToFormatOpts(token) {
        return _macroTokenToFormatOpts[token];
      }
    }]);

    function Formatter(locale, formatOpts) {
      _classCallCheck(this, Formatter);

      this.opts = formatOpts;
      this.loc = locale;
      this.systemLoc = null;
    }

    _createClass(Formatter, [{
      key: "formatWithSystemDefault",
      value: function formatWithSystemDefault(dt, opts) {
        if (this.systemLoc === null) {
          this.systemLoc = this.loc.redefaultToSystem();
        }

        var df = this.systemLoc.dtFormatter(dt, Object.assign({}, this.opts, opts));
        return df.format();
      }
    }, {
      key: "formatDateTime",
      value: function formatDateTime(dt) {
        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var df = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));
        return df.format();
      }
    }, {
      key: "formatDateTimeParts",
      value: function formatDateTimeParts(dt) {
        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var df = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));
        return df.formatToParts();
      }
    }, {
      key: "resolvedOptions",
      value: function resolvedOptions(dt) {
        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var df = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));
        return df.resolvedOptions();
      }
    }, {
      key: "num",
      value: function num(n) {
        var p = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        // we get some perf out of doing this here, annoyingly
        if (this.opts.forceSimple) {
          return padStart(n, p);
        }

        var opts = Object.assign({}, this.opts);

        if (p > 0) {
          opts.padTo = p;
        }

        return this.loc.numberFormatter(opts).format(n);
      }
    }, {
      key: "formatDateTimeFromString",
      value: function formatDateTimeFromString(dt, fmt) {
        var _this = this;

        var knownEnglish = this.loc.listingMode() === "en",
            useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== "gregory" && hasFormatToParts(),
            string = function string(opts, extract) {
          return _this.loc.extract(dt, opts, extract);
        },
            formatOffset = function formatOffset(opts) {
          if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {
            return "Z";
          }

          return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : "";
        },
            meridiem = function meridiem() {
          return knownEnglish ? meridiemForDateTime(dt) : string({
            hour: "numeric",
            hour12: true
          }, "dayperiod");
        },
            month = function month(length, standalone) {
          return knownEnglish ? monthForDateTime(dt, length) : string(standalone ? {
            month: length
          } : {
            month: length,
            day: "numeric"
          }, "month");
        },
            weekday = function weekday(length, standalone) {
          return knownEnglish ? weekdayForDateTime(dt, length) : string(standalone ? {
            weekday: length
          } : {
            weekday: length,
            month: "long",
            day: "numeric"
          }, "weekday");
        },
            maybeMacro = function maybeMacro(token) {
          var formatOpts = Formatter.macroTokenToFormatOpts(token);

          if (formatOpts) {
            return _this.formatWithSystemDefault(dt, formatOpts);
          } else {
            return token;
          }
        },
            era = function era(length) {
          return knownEnglish ? eraForDateTime(dt, length) : string({
            era: length
          }, "era");
        },
            tokenToString = function tokenToString(token) {
          // Where possible: http://cldr.unicode.org/translation/date-time#TOC-Stand-Alone-vs.-Format-Styles
          switch (token) {
            // ms
            case "S":
              return _this.num(dt.millisecond);

            case "u": // falls through

            case "SSS":
              return _this.num(dt.millisecond, 3);
            // seconds

            case "s":
              return _this.num(dt.second);

            case "ss":
              return _this.num(dt.second, 2);
            // minutes

            case "m":
              return _this.num(dt.minute);

            case "mm":
              return _this.num(dt.minute, 2);
            // hours

            case "h":
              return _this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);

            case "hh":
              return _this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);

            case "H":
              return _this.num(dt.hour);

            case "HH":
              return _this.num(dt.hour, 2);
            // offset

            case "Z":
              // like +6
              return formatOffset({
                format: "narrow",
                allowZ: _this.opts.allowZ
              });

            case "ZZ":
              // like +06:00
              return formatOffset({
                format: "short",
                allowZ: _this.opts.allowZ
              });

            case "ZZZ":
              // like +0600
              return formatOffset({
                format: "techie",
                allowZ: _this.opts.allowZ
              });

            case "ZZZZ":
              // like EST
              return dt.zone.offsetName(dt.ts, {
                format: "short",
                locale: _this.loc.locale
              });

            case "ZZZZZ":
              // like Eastern Standard Time
              return dt.zone.offsetName(dt.ts, {
                format: "long",
                locale: _this.loc.locale
              });
            // zone

            case "z":
              // like America/New_York
              return dt.zoneName;
            // meridiems

            case "a":
              return meridiem();
            // dates

            case "d":
              return useDateTimeFormatter ? string({
                day: "numeric"
              }, "day") : _this.num(dt.day);

            case "dd":
              return useDateTimeFormatter ? string({
                day: "2-digit"
              }, "day") : _this.num(dt.day, 2);
            // weekdays - standalone

            case "c":
              // like 1
              return _this.num(dt.weekday);

            case "ccc":
              // like 'Tues'
              return weekday("short", true);

            case "cccc":
              // like 'Tuesday'
              return weekday("long", true);

            case "ccccc":
              // like 'T'
              return weekday("narrow", true);
            // weekdays - format

            case "E":
              // like 1
              return _this.num(dt.weekday);

            case "EEE":
              // like 'Tues'
              return weekday("short", false);

            case "EEEE":
              // like 'Tuesday'
              return weekday("long", false);

            case "EEEEE":
              // like 'T'
              return weekday("narrow", false);
            // months - standalone

            case "L":
              // like 1
              return useDateTimeFormatter ? string({
                month: "numeric",
                day: "numeric"
              }, "month") : _this.num(dt.month);

            case "LL":
              // like 01, doesn't seem to work
              return useDateTimeFormatter ? string({
                month: "2-digit",
                day: "numeric"
              }, "month") : _this.num(dt.month, 2);

            case "LLL":
              // like Jan
              return month("short", true);

            case "LLLL":
              // like January
              return month("long", true);

            case "LLLLL":
              // like J
              return month("narrow", true);
            // months - format

            case "M":
              // like 1
              return useDateTimeFormatter ? string({
                month: "numeric"
              }, "month") : _this.num(dt.month);

            case "MM":
              // like 01
              return useDateTimeFormatter ? string({
                month: "2-digit"
              }, "month") : _this.num(dt.month, 2);

            case "MMM":
              // like Jan
              return month("short", false);

            case "MMMM":
              // like January
              return month("long", false);

            case "MMMMM":
              // like J
              return month("narrow", false);
            // years

            case "y":
              // like 2014
              return useDateTimeFormatter ? string({
                year: "numeric"
              }, "year") : _this.num(dt.year);

            case "yy":
              // like 14
              return useDateTimeFormatter ? string({
                year: "2-digit"
              }, "year") : _this.num(dt.year.toString().slice(-2), 2);

            case "yyyy":
              // like 0012
              return useDateTimeFormatter ? string({
                year: "numeric"
              }, "year") : _this.num(dt.year, 4);

            case "yyyyyy":
              // like 000012
              return useDateTimeFormatter ? string({
                year: "numeric"
              }, "year") : _this.num(dt.year, 6);
            // eras

            case "G":
              // like AD
              return era("short");

            case "GG":
              // like Anno Domini
              return era("long");

            case "GGGGG":
              return era("narrow");

            case "kk":
              return _this.num(dt.weekYear.toString().slice(-2), 2);

            case "kkkk":
              return _this.num(dt.weekYear, 4);

            case "W":
              return _this.num(dt.weekNumber);

            case "WW":
              return _this.num(dt.weekNumber, 2);

            case "o":
              return _this.num(dt.ordinal);

            case "ooo":
              return _this.num(dt.ordinal, 3);

            case "q":
              // like 1
              return _this.num(dt.quarter);

            case "qq":
              // like 01
              return _this.num(dt.quarter, 2);

            case "X":
              return _this.num(Math.floor(dt.ts / 1000));

            case "x":
              return _this.num(dt.ts);

            default:
              return maybeMacro(token);
          }
        };

        return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);
      }
    }, {
      key: "formatDurationFromString",
      value: function formatDurationFromString(dur, fmt) {
        var _this2 = this;

        var tokenToField = function tokenToField(token) {
          switch (token[0]) {
            case "S":
              return "millisecond";

            case "s":
              return "second";

            case "m":
              return "minute";

            case "h":
              return "hour";

            case "d":
              return "day";

            case "M":
              return "month";

            case "y":
              return "year";

            default:
              return null;
          }
        },
            tokenToString = function tokenToString(lildur) {
          return function (token) {
            var mapped = tokenToField(token);

            if (mapped) {
              return _this2.num(lildur.get(mapped), token.length);
            } else {
              return token;
            }
          };
        },
            tokens = Formatter.parseFormat(fmt),
            realTokens = tokens.reduce(function (found, _ref) {
          var literal = _ref.literal,
              val = _ref.val;
          return literal ? found : found.concat(val);
        }, []),
            collapsed = dur.shiftTo.apply(dur, _toConsumableArray(realTokens.map(tokenToField).filter(function (t) {
          return t;
        })));

        return stringifyTokens(tokens, tokenToString(collapsed));
      }
    }]);

    return Formatter;
  }();

  var Invalid = /*#__PURE__*/function () {
    function Invalid(reason, explanation) {
      _classCallCheck(this, Invalid);

      this.reason = reason;
      this.explanation = explanation;
    }

    _createClass(Invalid, [{
      key: "toMessage",
      value: function toMessage() {
        if (this.explanation) {
          return "".concat(this.reason, ": ").concat(this.explanation);
        } else {
          return this.reason;
        }
      }
    }]);

    return Invalid;
  }();

  var nativeGetOwnPropertyNames = objectGetOwnPropertyNames.f;

  var toString$4 = {}.toString;

  var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
    ? Object.getOwnPropertyNames(window) : [];

  var getWindowNames = function (it) {
    try {
      return nativeGetOwnPropertyNames(it);
    } catch (error) {
      return windowNames.slice();
    }
  };

  // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
  var f$6 = function getOwnPropertyNames(it) {
    return windowNames && toString$4.call(it) == '[object Window]'
      ? getWindowNames(it)
      : nativeGetOwnPropertyNames(toIndexedObject(it));
  };

  var objectGetOwnPropertyNamesExternal = {
  	f: f$6
  };

  var nativeGetOwnPropertyNames$1 = objectGetOwnPropertyNamesExternal.f;

  var FAILS_ON_PRIMITIVES$1 = fails(function () { return !Object.getOwnPropertyNames(1); });

  // `Object.getOwnPropertyNames` method
  // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
  _export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$1 }, {
    getOwnPropertyNames: nativeGetOwnPropertyNames$1
  });

  /**
   * @interface
   */

  var Zone = /*#__PURE__*/function () {
    function Zone() {
      _classCallCheck(this, Zone);
    }

    _createClass(Zone, [{
      key: "offsetName",

      /**
       * Returns the offset's common name (such as EST) at the specified timestamp
       * @abstract
       * @param {number} ts - Epoch milliseconds for which to get the name
       * @param {Object} opts - Options to affect the format
       * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.
       * @param {string} opts.locale - What locale to return the offset name in.
       * @return {string}
       */
      value: function offsetName(ts, opts) {
        throw new ZoneIsAbstractError();
      }
      /**
       * Returns the offset's value as a string
       * @abstract
       * @param {number} ts - Epoch milliseconds for which to get the offset
       * @param {string} format - What style of offset to return.
       *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
       * @return {string}
       */

    }, {
      key: "formatOffset",
      value: function formatOffset(ts, format) {
        throw new ZoneIsAbstractError();
      }
      /**
       * Return the offset in minutes for this zone at the specified timestamp.
       * @abstract
       * @param {number} ts - Epoch milliseconds for which to compute the offset
       * @return {number}
       */

    }, {
      key: "offset",
      value: function offset(ts) {
        throw new ZoneIsAbstractError();
      }
      /**
       * Return whether this Zone is equal to another zone
       * @abstract
       * @param {Zone} otherZone - the zone to compare
       * @return {boolean}
       */

    }, {
      key: "equals",
      value: function equals(otherZone) {
        throw new ZoneIsAbstractError();
      }
      /**
       * Return whether this Zone is valid.
       * @abstract
       * @type {boolean}
       */

    }, {
      key: "type",

      /**
       * The type of zone
       * @abstract
       * @type {string}
       */
      get: function get() {
        throw new ZoneIsAbstractError();
      }
      /**
       * The name of this zone.
       * @abstract
       * @type {string}
       */

    }, {
      key: "name",
      get: function get() {
        throw new ZoneIsAbstractError();
      }
      /**
       * Returns whether the offset is known to be fixed for the whole year.
       * @abstract
       * @type {boolean}
       */

    }, {
      key: "universal",
      get: function get() {
        throw new ZoneIsAbstractError();
      }
    }, {
      key: "isValid",
      get: function get() {
        throw new ZoneIsAbstractError();
      }
    }]);

    return Zone;
  }();

  var singleton = null;
  /**
   * Represents the local zone for this Javascript environment.
   * @implements {Zone}
   */

  var LocalZone = /*#__PURE__*/function (_Zone) {
    _inherits(LocalZone, _Zone);

    var _super = _createSuper(LocalZone);

    function LocalZone() {
      _classCallCheck(this, LocalZone);

      return _super.apply(this, arguments);
    }

    _createClass(LocalZone, [{
      key: "offsetName",

      /** @override **/
      value: function offsetName(ts, _ref) {
        var format = _ref.format,
            locale = _ref.locale;
        return parseZoneInfo(ts, format, locale);
      }
      /** @override **/

    }, {
      key: "formatOffset",
      value: function formatOffset$1(ts, format) {
        return formatOffset(this.offset(ts), format);
      }
      /** @override **/

    }, {
      key: "offset",
      value: function offset(ts) {
        return -new Date(ts).getTimezoneOffset();
      }
      /** @override **/

    }, {
      key: "equals",
      value: function equals(otherZone) {
        return otherZone.type === "local";
      }
      /** @override **/

    }, {
      key: "type",

      /** @override **/
      get: function get() {
        return "local";
      }
      /** @override **/

    }, {
      key: "name",
      get: function get() {
        if (hasIntl()) {
          return new Intl.DateTimeFormat().resolvedOptions().timeZone;
        } else return "local";
      }
      /** @override **/

    }, {
      key: "universal",
      get: function get() {
        return false;
      }
    }, {
      key: "isValid",
      get: function get() {
        return true;
      }
    }], [{
      key: "instance",

      /**
       * Get a singleton instance of the local zone
       * @return {LocalZone}
       */
      get: function get() {
        if (singleton === null) {
          singleton = new LocalZone();
        }

        return singleton;
      }
    }]);

    return LocalZone;
  }(Zone);

  var defineProperty$6 = objectDefineProperty.f;
  var getOwnPropertyNames$1 = objectGetOwnPropertyNames.f;





  var setInternalState$4 = internalState.set;



  var MATCH$2 = wellKnownSymbol('match');
  var NativeRegExp = global_1.RegExp;
  var RegExpPrototype$1 = NativeRegExp.prototype;
  var re1 = /a/g;
  var re2 = /a/g;

  // "new" should create a new object, old webkit bug
  var CORRECT_NEW = new NativeRegExp(re1) !== re1;

  var UNSUPPORTED_Y$2 = regexpStickyHelpers.UNSUPPORTED_Y;

  var FORCED$3 = descriptors && isForced_1('RegExp', (!CORRECT_NEW || UNSUPPORTED_Y$2 || fails(function () {
    re2[MATCH$2] = false;
    // RegExp constructor can alter flags and IsRegExp works correct with @@match
    return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, 'i') != '/a/i';
  })));

  // `RegExp` constructor
  // https://tc39.github.io/ecma262/#sec-regexp-constructor
  if (FORCED$3) {
    var RegExpWrapper = function RegExp(pattern, flags) {
      var thisIsRegExp = this instanceof RegExpWrapper;
      var patternIsRegExp = isRegexp(pattern);
      var flagsAreUndefined = flags === undefined;
      var sticky;

      if (!thisIsRegExp && patternIsRegExp && pattern.constructor === RegExpWrapper && flagsAreUndefined) {
        return pattern;
      }

      if (CORRECT_NEW) {
        if (patternIsRegExp && !flagsAreUndefined) pattern = pattern.source;
      } else if (pattern instanceof RegExpWrapper) {
        if (flagsAreUndefined) flags = regexpFlags.call(pattern);
        pattern = pattern.source;
      }

      if (UNSUPPORTED_Y$2) {
        sticky = !!flags && flags.indexOf('y') > -1;
        if (sticky) flags = flags.replace(/y/g, '');
      }

      var result = inheritIfRequired(
        CORRECT_NEW ? new NativeRegExp(pattern, flags) : NativeRegExp(pattern, flags),
        thisIsRegExp ? this : RegExpPrototype$1,
        RegExpWrapper
      );

      if (UNSUPPORTED_Y$2 && sticky) setInternalState$4(result, { sticky: sticky });

      return result;
    };
    var proxy = function (key) {
      key in RegExpWrapper || defineProperty$6(RegExpWrapper, key, {
        configurable: true,
        get: function () { return NativeRegExp[key]; },
        set: function (it) { NativeRegExp[key] = it; }
      });
    };
    var keys$2 = getOwnPropertyNames$1(NativeRegExp);
    var index = 0;
    while (keys$2.length > index) proxy(keys$2[index++]);
    RegExpPrototype$1.constructor = RegExpWrapper;
    RegExpWrapper.prototype = RegExpPrototype$1;
    redefine(global_1, 'RegExp', RegExpWrapper);
  }

  // https://tc39.github.io/ecma262/#sec-get-regexp-@@species
  setSpecies('RegExp');

  var matchingRegex = RegExp("^".concat(ianaRegex.source, "$"));
  var dtfCache = {};

  function makeDTF(zone) {
    if (!dtfCache[zone]) {
      dtfCache[zone] = new Intl.DateTimeFormat("en-US", {
        hour12: false,
        timeZone: zone,
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
        second: "2-digit"
      });
    }

    return dtfCache[zone];
  }

  var typeToPos = {
    year: 0,
    month: 1,
    day: 2,
    hour: 3,
    minute: 4,
    second: 5
  };

  function hackyOffset(dtf, date) {
    var formatted = dtf.format(date).replace(/\u200E/g, ""),
        parsed = /(\d+)\/(\d+)\/(\d+),? (\d+):(\d+):(\d+)/.exec(formatted),
        _parsed = _slicedToArray(parsed, 7),
        fMonth = _parsed[1],
        fDay = _parsed[2],
        fYear = _parsed[3],
        fHour = _parsed[4],
        fMinute = _parsed[5],
        fSecond = _parsed[6];

    return [fYear, fMonth, fDay, fHour, fMinute, fSecond];
  }

  function partsOffset(dtf, date) {
    var formatted = dtf.formatToParts(date),
        filled = [];

    for (var i = 0; i < formatted.length; i++) {
      var _formatted$i = formatted[i],
          type = _formatted$i.type,
          value = _formatted$i.value,
          pos = typeToPos[type];

      if (!isUndefined(pos)) {
        filled[pos] = parseInt(value, 10);
      }
    }

    return filled;
  }

  var ianaZoneCache = {};
  /**
   * A zone identified by an IANA identifier, like America/New_York
   * @implements {Zone}
   */

  var IANAZone = /*#__PURE__*/function (_Zone) {
    _inherits(IANAZone, _Zone);

    var _super = _createSuper(IANAZone);

    _createClass(IANAZone, null, [{
      key: "create",

      /**
       * @param {string} name - Zone name
       * @return {IANAZone}
       */
      value: function create(name) {
        if (!ianaZoneCache[name]) {
          ianaZoneCache[name] = new IANAZone(name);
        }

        return ianaZoneCache[name];
      }
      /**
       * Reset local caches. Should only be necessary in testing scenarios.
       * @return {void}
       */

    }, {
      key: "resetCache",
      value: function resetCache() {
        ianaZoneCache = {};
        dtfCache = {};
      }
      /**
       * Returns whether the provided string is a valid specifier. This only checks the string's format, not that the specifier identifies a known zone; see isValidZone for that.
       * @param {string} s - The string to check validity on
       * @example IANAZone.isValidSpecifier("America/New_York") //=> true
       * @example IANAZone.isValidSpecifier("Fantasia/Castle") //=> true
       * @example IANAZone.isValidSpecifier("Sport~~blorp") //=> false
       * @return {boolean}
       */

    }, {
      key: "isValidSpecifier",
      value: function isValidSpecifier(s) {
        return !!(s && s.match(matchingRegex));
      }
      /**
       * Returns whether the provided string identifies a real zone
       * @param {string} zone - The string to check
       * @example IANAZone.isValidZone("America/New_York") //=> true
       * @example IANAZone.isValidZone("Fantasia/Castle") //=> false
       * @example IANAZone.isValidZone("Sport~~blorp") //=> false
       * @return {boolean}
       */

    }, {
      key: "isValidZone",
      value: function isValidZone(zone) {
        try {
          new Intl.DateTimeFormat("en-US", {
            timeZone: zone
          }).format();
          return true;
        } catch (e) {
          return false;
        }
      } // Etc/GMT+8 -> -480

      /** @ignore */

    }, {
      key: "parseGMTOffset",
      value: function parseGMTOffset(specifier) {
        if (specifier) {
          var match = specifier.match(/^Etc\/GMT([+-]\d{1,2})$/i);

          if (match) {
            return -60 * parseInt(match[1]);
          }
        }

        return null;
      }
    }]);

    function IANAZone(name) {
      var _this;

      _classCallCheck(this, IANAZone);

      _this = _super.call(this);
      /** @private **/

      _this.zoneName = name;
      /** @private **/

      _this.valid = IANAZone.isValidZone(name);
      return _this;
    }
    /** @override **/


    _createClass(IANAZone, [{
      key: "offsetName",

      /** @override **/
      value: function offsetName(ts, _ref) {
        var format = _ref.format,
            locale = _ref.locale;
        return parseZoneInfo(ts, format, locale, this.name);
      }
      /** @override **/

    }, {
      key: "formatOffset",
      value: function formatOffset$1(ts, format) {
        return formatOffset(this.offset(ts), format);
      }
      /** @override **/

    }, {
      key: "offset",
      value: function offset(ts) {
        var date = new Date(ts),
            dtf = makeDTF(this.name),
            _ref2 = dtf.formatToParts ? partsOffset(dtf, date) : hackyOffset(dtf, date),
            _ref3 = _slicedToArray(_ref2, 6),
            year = _ref3[0],
            month = _ref3[1],
            day = _ref3[2],
            hour = _ref3[3],
            minute = _ref3[4],
            second = _ref3[5],
            adjustedHour = hour === 24 ? 0 : hour;

        var asUTC = objToLocalTS({
          year: year,
          month: month,
          day: day,
          hour: adjustedHour,
          minute: minute,
          second: second,
          millisecond: 0
        });
        var asTS = +date;
        var over = asTS % 1000;
        asTS -= over >= 0 ? over : 1000 + over;
        return (asUTC - asTS) / (60 * 1000);
      }
      /** @override **/

    }, {
      key: "equals",
      value: function equals(otherZone) {
        return otherZone.type === "iana" && otherZone.name === this.name;
      }
      /** @override **/

    }, {
      key: "type",
      get: function get() {
        return "iana";
      }
      /** @override **/

    }, {
      key: "name",
      get: function get() {
        return this.zoneName;
      }
      /** @override **/

    }, {
      key: "universal",
      get: function get() {
        return false;
      }
    }, {
      key: "isValid",
      get: function get() {
        return this.valid;
      }
    }]);

    return IANAZone;
  }(Zone);

  var quot = /"/g;

  // B.2.3.2.1 CreateHTML(string, tag, attribute, value)
  // https://tc39.github.io/ecma262/#sec-createhtml
  var createHtml = function (string, tag, attribute, value) {
    var S = String(requireObjectCoercible(string));
    var p1 = '<' + tag;
    if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
    return p1 + '>' + S + '</' + tag + '>';
  };

  // check the existence of a method, lowercase
  // of a tag and escaping quotes in arguments
  var stringHtmlForced = function (METHOD_NAME) {
    return fails(function () {
      var test = ''[METHOD_NAME]('"');
      return test !== test.toLowerCase() || test.split('"').length > 3;
    });
  };

  // `String.prototype.fixed` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.fixed
  _export({ target: 'String', proto: true, forced: stringHtmlForced('fixed') }, {
    fixed: function fixed() {
      return createHtml(this, 'tt', '', '');
    }
  });

  var singleton$1 = null;
  /**
   * A zone with a fixed offset (meaning no DST)
   * @implements {Zone}
   */

  var FixedOffsetZone = /*#__PURE__*/function (_Zone) {
    _inherits(FixedOffsetZone, _Zone);

    var _super = _createSuper(FixedOffsetZone);

    _createClass(FixedOffsetZone, null, [{
      key: "instance",

      /**
       * Get an instance with a specified offset
       * @param {number} offset - The offset in minutes
       * @return {FixedOffsetZone}
       */
      value: function instance(offset) {
        return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);
      }
      /**
       * Get an instance of FixedOffsetZone from a UTC offset string, like "UTC+6"
       * @param {string} s - The offset string to parse
       * @example FixedOffsetZone.parseSpecifier("UTC+6")
       * @example FixedOffsetZone.parseSpecifier("UTC+06")
       * @example FixedOffsetZone.parseSpecifier("UTC-6:00")
       * @return {FixedOffsetZone}
       */

    }, {
      key: "parseSpecifier",
      value: function parseSpecifier(s) {
        if (s) {
          var r = s.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);

          if (r) {
            return new FixedOffsetZone(signedOffset(r[1], r[2]));
          }
        }

        return null;
      }
    }, {
      key: "utcInstance",

      /**
       * Get a singleton instance of UTC
       * @return {FixedOffsetZone}
       */
      get: function get() {
        if (singleton$1 === null) {
          singleton$1 = new FixedOffsetZone(0);
        }

        return singleton$1;
      }
    }]);

    function FixedOffsetZone(offset) {
      var _this;

      _classCallCheck(this, FixedOffsetZone);

      _this = _super.call(this);
      /** @private **/

      _this.fixed = offset;
      return _this;
    }
    /** @override **/


    _createClass(FixedOffsetZone, [{
      key: "offsetName",

      /** @override **/
      value: function offsetName() {
        return this.name;
      }
      /** @override **/

    }, {
      key: "formatOffset",
      value: function formatOffset$1(ts, format) {
        return formatOffset(this.fixed, format);
      }
      /** @override **/

    }, {
      key: "offset",

      /** @override **/
      value: function offset() {
        return this.fixed;
      }
      /** @override **/

    }, {
      key: "equals",
      value: function equals(otherZone) {
        return otherZone.type === "fixed" && otherZone.fixed === this.fixed;
      }
      /** @override **/

    }, {
      key: "type",
      get: function get() {
        return "fixed";
      }
      /** @override **/

    }, {
      key: "name",
      get: function get() {
        return this.fixed === 0 ? "UTC" : "UTC".concat(formatOffset(this.fixed, "narrow"));
      }
    }, {
      key: "universal",
      get: function get() {
        return true;
      }
    }, {
      key: "isValid",
      get: function get() {
        return true;
      }
    }]);

    return FixedOffsetZone;
  }(Zone);

  /**
   * A zone that failed to parse. You should never need to instantiate this.
   * @implements {Zone}
   */

  var InvalidZone = /*#__PURE__*/function (_Zone) {
    _inherits(InvalidZone, _Zone);

    var _super = _createSuper(InvalidZone);

    function InvalidZone(zoneName) {
      var _this;

      _classCallCheck(this, InvalidZone);

      _this = _super.call(this);
      /**  @private */

      _this.zoneName = zoneName;
      return _this;
    }
    /** @override **/


    _createClass(InvalidZone, [{
      key: "offsetName",

      /** @override **/
      value: function offsetName() {
        return null;
      }
      /** @override **/

    }, {
      key: "formatOffset",
      value: function formatOffset() {
        return "";
      }
      /** @override **/

    }, {
      key: "offset",
      value: function offset() {
        return NaN;
      }
      /** @override **/

    }, {
      key: "equals",
      value: function equals() {
        return false;
      }
      /** @override **/

    }, {
      key: "type",
      get: function get() {
        return "invalid";
      }
      /** @override **/

    }, {
      key: "name",
      get: function get() {
        return this.zoneName;
      }
      /** @override **/

    }, {
      key: "universal",
      get: function get() {
        return false;
      }
    }, {
      key: "isValid",
      get: function get() {
        return false;
      }
    }]);

    return InvalidZone;
  }(Zone);

  function normalizeZone(input, defaultZone) {
    var offset;

    if (isUndefined(input) || input === null) {
      return defaultZone;
    } else if (input instanceof Zone) {
      return input;
    } else if (isString(input)) {
      var lowered = input.toLowerCase();
      if (lowered === "local") return defaultZone;else if (lowered === "utc" || lowered === "gmt") return FixedOffsetZone.utcInstance;else if ((offset = IANAZone.parseGMTOffset(input)) != null) {
        // handle Etc/GMT-4, which V8 chokes on
        return FixedOffsetZone.instance(offset);
      } else if (IANAZone.isValidSpecifier(lowered)) return IANAZone.create(input);else return FixedOffsetZone.parseSpecifier(lowered) || new InvalidZone(input);
    } else if (isNumber(input)) {
      return FixedOffsetZone.instance(input);
    } else if (_typeof(input) === "object" && input.offset && typeof input.offset === "number") {
      // This is dumb, but the instanceof check above doesn't seem to really work
      // so we're duck checking it
      return input;
    } else {
      return new InvalidZone(input);
    }
  }

  var now = function now() {
    return Date.now();
  },
      defaultZone = null,
      // not setting this directly to LocalZone.instance bc loading order issues
  defaultLocale = null,
      defaultNumberingSystem = null,
      defaultOutputCalendar = null,
      throwOnInvalid = false;
  /**
   * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.
   */


  var Settings = /*#__PURE__*/function () {
    function Settings() {
      _classCallCheck(this, Settings);
    }

    _createClass(Settings, null, [{
      key: "resetCaches",

      /**
       * Reset Luxon's global caches. Should only be necessary in testing scenarios.
       * @return {void}
       */
      value: function resetCaches() {
        Locale.resetCache();
        IANAZone.resetCache();
      }
    }, {
      key: "now",

      /**
       * Get the callback for returning the current timestamp.
       * @type {function}
       */
      get: function get() {
        return now;
      }
      /**
       * Set the callback for returning the current timestamp.
       * The function should return a number, which will be interpreted as an Epoch millisecond count
       * @type {function}
       * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future
       * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time
       */
      ,
      set: function set(n) {
        now = n;
      }
      /**
       * Get the default time zone to create DateTimes in.
       * @type {string}
       */

    }, {
      key: "defaultZoneName",
      get: function get() {
        return Settings.defaultZone.name;
      }
      /**
       * Set the default time zone to create DateTimes in. Does not affect existing instances.
       * @type {string}
       */
      ,
      set: function set(z) {
        if (!z) {
          defaultZone = null;
        } else {
          defaultZone = normalizeZone(z);
        }
      }
      /**
       * Get the default time zone object to create DateTimes in. Does not affect existing instances.
       * @type {Zone}
       */

    }, {
      key: "defaultZone",
      get: function get() {
        return defaultZone || LocalZone.instance;
      }
      /**
       * Get the default locale to create DateTimes with. Does not affect existing instances.
       * @type {string}
       */

    }, {
      key: "defaultLocale",
      get: function get() {
        return defaultLocale;
      }
      /**
       * Set the default locale to create DateTimes with. Does not affect existing instances.
       * @type {string}
       */
      ,
      set: function set(locale) {
        defaultLocale = locale;
      }
      /**
       * Get the default numbering system to create DateTimes with. Does not affect existing instances.
       * @type {string}
       */

    }, {
      key: "defaultNumberingSystem",
      get: function get() {
        return defaultNumberingSystem;
      }
      /**
       * Set the default numbering system to create DateTimes with. Does not affect existing instances.
       * @type {string}
       */
      ,
      set: function set(numberingSystem) {
        defaultNumberingSystem = numberingSystem;
      }
      /**
       * Get the default output calendar to create DateTimes with. Does not affect existing instances.
       * @type {string}
       */

    }, {
      key: "defaultOutputCalendar",
      get: function get() {
        return defaultOutputCalendar;
      }
      /**
       * Set the default output calendar to create DateTimes with. Does not affect existing instances.
       * @type {string}
       */
      ,
      set: function set(outputCalendar) {
        defaultOutputCalendar = outputCalendar;
      }
      /**
       * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
       * @type {boolean}
       */

    }, {
      key: "throwOnInvalid",
      get: function get() {
        return throwOnInvalid;
      }
      /**
       * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
       * @type {boolean}
       */
      ,
      set: function set(t) {
        throwOnInvalid = t;
      }
    }]);

    return Settings;
  }();

  var intlDTCache = {};

  function getCachedDTF(locString) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var key = JSON.stringify([locString, opts]);
    var dtf = intlDTCache[key];

    if (!dtf) {
      dtf = new Intl.DateTimeFormat(locString, opts);
      intlDTCache[key] = dtf;
    }

    return dtf;
  }

  var intlNumCache = {};

  function getCachedINF(locString) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var key = JSON.stringify([locString, opts]);
    var inf = intlNumCache[key];

    if (!inf) {
      inf = new Intl.NumberFormat(locString, opts);
      intlNumCache[key] = inf;
    }

    return inf;
  }

  var intlRelCache = {};

  function getCachedRTF(locString) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var base = opts.base,
        cacheKeyOpts = _objectWithoutProperties(opts, ["base"]); // exclude `base` from the options


    var key = JSON.stringify([locString, cacheKeyOpts]);
    var inf = intlRelCache[key];

    if (!inf) {
      inf = new Intl.RelativeTimeFormat(locString, opts);
      intlRelCache[key] = inf;
    }

    return inf;
  }

  var sysLocaleCache = null;

  function systemLocale() {
    if (sysLocaleCache) {
      return sysLocaleCache;
    } else if (hasIntl()) {
      var computedSys = new Intl.DateTimeFormat().resolvedOptions().locale; // node sometimes defaults to "und". Override that because that is dumb

      sysLocaleCache = !computedSys || computedSys === "und" ? "en-US" : computedSys;
      return sysLocaleCache;
    } else {
      sysLocaleCache = "en-US";
      return sysLocaleCache;
    }
  }

  function parseLocaleString(localeStr) {
    // I really want to avoid writing a BCP 47 parser
    // see, e.g. https://github.com/wooorm/bcp-47
    // Instead, we'll do this:
    // a) if the string has no -u extensions, just leave it alone
    // b) if it does, use Intl to resolve everything
    // c) if Intl fails, try again without the -u
    var uIndex = localeStr.indexOf("-u-");

    if (uIndex === -1) {
      return [localeStr];
    } else {
      var options;
      var smaller = localeStr.substring(0, uIndex);

      try {
        options = getCachedDTF(localeStr).resolvedOptions();
      } catch (e) {
        options = getCachedDTF(smaller).resolvedOptions();
      }

      var _options = options,
          numberingSystem = _options.numberingSystem,
          calendar = _options.calendar; // return the smaller one so that we can append the calendar and numbering overrides to it

      return [smaller, numberingSystem, calendar];
    }
  }

  function intlConfigString(localeStr, numberingSystem, outputCalendar) {
    if (hasIntl()) {
      if (outputCalendar || numberingSystem) {
        localeStr += "-u";

        if (outputCalendar) {
          localeStr += "-ca-".concat(outputCalendar);
        }

        if (numberingSystem) {
          localeStr += "-nu-".concat(numberingSystem);
        }

        return localeStr;
      } else {
        return localeStr;
      }
    } else {
      return [];
    }
  }

  function mapMonths(f) {
    var ms = [];

    for (var i = 1; i <= 12; i++) {
      var dt = DateTime.utc(2016, i, 1);
      ms.push(f(dt));
    }

    return ms;
  }

  function mapWeekdays(f) {
    var ms = [];

    for (var i = 1; i <= 7; i++) {
      var dt = DateTime.utc(2016, 11, 13 + i);
      ms.push(f(dt));
    }

    return ms;
  }

  function listStuff(loc, length, defaultOK, englishFn, intlFn) {
    var mode = loc.listingMode(defaultOK);

    if (mode === "error") {
      return null;
    } else if (mode === "en") {
      return englishFn(length);
    } else {
      return intlFn(length);
    }
  }

  function supportsFastNumbers(loc) {
    if (loc.numberingSystem && loc.numberingSystem !== "latn") {
      return false;
    } else {
      return loc.numberingSystem === "latn" || !loc.locale || loc.locale.startsWith("en") || hasIntl() && new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === "latn";
    }
  }
  /**
   * @private
   */


  var PolyNumberFormatter = /*#__PURE__*/function () {
    function PolyNumberFormatter(intl, forceSimple, opts) {
      _classCallCheck(this, PolyNumberFormatter);

      this.padTo = opts.padTo || 0;
      this.floor = opts.floor || false;

      if (!forceSimple && hasIntl()) {
        var intlOpts = {
          useGrouping: false
        };
        if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;
        this.inf = getCachedINF(intl, intlOpts);
      }
    }

    _createClass(PolyNumberFormatter, [{
      key: "format",
      value: function format(i) {
        if (this.inf) {
          var fixed = this.floor ? Math.floor(i) : i;
          return this.inf.format(fixed);
        } else {
          // to match the browser's numberformatter defaults
          var _fixed = this.floor ? Math.floor(i) : roundTo(i, 3);

          return padStart(_fixed, this.padTo);
        }
      }
    }]);

    return PolyNumberFormatter;
  }();
  /**
   * @private
   */


  var PolyDateFormatter = /*#__PURE__*/function () {
    function PolyDateFormatter(dt, intl, opts) {
      _classCallCheck(this, PolyDateFormatter);

      this.opts = opts;
      this.hasIntl = hasIntl();
      var z;

      if (dt.zone.universal && this.hasIntl) {
        // Chromium doesn't support fixed-offset zones like Etc/GMT+8 in its formatter,
        // See https://bugs.chromium.org/p/chromium/issues/detail?id=364374.
        // So we have to make do. Two cases:
        // 1. The format options tell us to show the zone. We can't do that, so the best
        // we can do is format the date in UTC.
        // 2. The format options don't tell us to show the zone. Then we can adjust them
        // the time and tell the formatter to show it to us in UTC, so that the time is right
        // and the bad zone doesn't show up.
        // We can clean all this up when Chrome fixes this.
        z = "UTC";

        if (opts.timeZoneName) {
          this.dt = dt;
        } else {
          this.dt = dt.offset === 0 ? dt : DateTime.fromMillis(dt.ts + dt.offset * 60 * 1000);
        }
      } else if (dt.zone.type === "local") {
        this.dt = dt;
      } else {
        this.dt = dt;
        z = dt.zone.name;
      }

      if (this.hasIntl) {
        var intlOpts = Object.assign({}, this.opts);

        if (z) {
          intlOpts.timeZone = z;
        }

        this.dtf = getCachedDTF(intl, intlOpts);
      }
    }

    _createClass(PolyDateFormatter, [{
      key: "format",
      value: function format() {
        if (this.hasIntl) {
          return this.dtf.format(this.dt.toJSDate());
        } else {
          var tokenFormat = formatString(this.opts),
              loc = Locale.create("en-US");
          return Formatter.create(loc).formatDateTimeFromString(this.dt, tokenFormat);
        }
      }
    }, {
      key: "formatToParts",
      value: function formatToParts() {
        if (this.hasIntl && hasFormatToParts()) {
          return this.dtf.formatToParts(this.dt.toJSDate());
        } else {
          // This is kind of a cop out. We actually could do this for English. However, we couldn't do it for intl strings
          // and IMO it's too weird to have an uncanny valley like that
          return [];
        }
      }
    }, {
      key: "resolvedOptions",
      value: function resolvedOptions() {
        if (this.hasIntl) {
          return this.dtf.resolvedOptions();
        } else {
          return {
            locale: "en-US",
            numberingSystem: "latn",
            outputCalendar: "gregory"
          };
        }
      }
    }]);

    return PolyDateFormatter;
  }();
  /**
   * @private
   */


  var PolyRelFormatter = /*#__PURE__*/function () {
    function PolyRelFormatter(intl, isEnglish, opts) {
      _classCallCheck(this, PolyRelFormatter);

      this.opts = Object.assign({
        style: "long"
      }, opts);

      if (!isEnglish && hasRelative()) {
        this.rtf = getCachedRTF(intl, opts);
      }
    }

    _createClass(PolyRelFormatter, [{
      key: "format",
      value: function format(count, unit) {
        if (this.rtf) {
          return this.rtf.format(count, unit);
        } else {
          return formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== "long");
        }
      }
    }, {
      key: "formatToParts",
      value: function formatToParts(count, unit) {
        if (this.rtf) {
          return this.rtf.formatToParts(count, unit);
        } else {
          return [];
        }
      }
    }]);

    return PolyRelFormatter;
  }();
  /**
   * @private
   */


  var Locale = /*#__PURE__*/function () {
    _createClass(Locale, null, [{
      key: "fromOpts",
      value: function fromOpts(opts) {
        return Locale.create(opts.locale, opts.numberingSystem, opts.outputCalendar, opts.defaultToEN);
      }
    }, {
      key: "create",
      value: function create(locale, numberingSystem, outputCalendar) {
        var defaultToEN = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
        var specifiedLocale = locale || Settings.defaultLocale,
            // the system locale is useful for human readable strings but annoying for parsing/formatting known formats
        localeR = specifiedLocale || (defaultToEN ? "en-US" : systemLocale()),
            numberingSystemR = numberingSystem || Settings.defaultNumberingSystem,
            outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;
        return new Locale(localeR, numberingSystemR, outputCalendarR, specifiedLocale);
      }
    }, {
      key: "resetCache",
      value: function resetCache() {
        sysLocaleCache = null;
        intlDTCache = {};
        intlNumCache = {};
        intlRelCache = {};
      }
    }, {
      key: "fromObject",
      value: function fromObject() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            locale = _ref.locale,
            numberingSystem = _ref.numberingSystem,
            outputCalendar = _ref.outputCalendar;

        return Locale.create(locale, numberingSystem, outputCalendar);
      }
    }]);

    function Locale(locale, numbering, outputCalendar, specifiedLocale) {
      _classCallCheck(this, Locale);

      var _parseLocaleString = parseLocaleString(locale),
          _parseLocaleString2 = _slicedToArray(_parseLocaleString, 3),
          parsedLocale = _parseLocaleString2[0],
          parsedNumberingSystem = _parseLocaleString2[1],
          parsedOutputCalendar = _parseLocaleString2[2];

      this.locale = parsedLocale;
      this.numberingSystem = numbering || parsedNumberingSystem || null;
      this.outputCalendar = outputCalendar || parsedOutputCalendar || null;
      this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);
      this.weekdaysCache = {
        format: {},
        standalone: {}
      };
      this.monthsCache = {
        format: {},
        standalone: {}
      };
      this.meridiemCache = null;
      this.eraCache = {};
      this.specifiedLocale = specifiedLocale;
      this.fastNumbersCached = null;
    }

    _createClass(Locale, [{
      key: "listingMode",
      value: function listingMode() {
        var defaultOK = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        var intl = hasIntl(),
            hasFTP = intl && hasFormatToParts(),
            isActuallyEn = this.isEnglish(),
            hasNoWeirdness = (this.numberingSystem === null || this.numberingSystem === "latn") && (this.outputCalendar === null || this.outputCalendar === "gregory");

        if (!hasFTP && !(isActuallyEn && hasNoWeirdness) && !defaultOK) {
          return "error";
        } else if (!hasFTP || isActuallyEn && hasNoWeirdness) {
          return "en";
        } else {
          return "intl";
        }
      }
    }, {
      key: "clone",
      value: function clone(alts) {
        if (!alts || Object.getOwnPropertyNames(alts).length === 0) {
          return this;
        } else {
          return Locale.create(alts.locale || this.specifiedLocale, alts.numberingSystem || this.numberingSystem, alts.outputCalendar || this.outputCalendar, alts.defaultToEN || false);
        }
      }
    }, {
      key: "redefaultToEN",
      value: function redefaultToEN() {
        var alts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return this.clone(Object.assign({}, alts, {
          defaultToEN: true
        }));
      }
    }, {
      key: "redefaultToSystem",
      value: function redefaultToSystem() {
        var alts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return this.clone(Object.assign({}, alts, {
          defaultToEN: false
        }));
      }
    }, {
      key: "months",
      value: function months$1(length) {
        var _this = this;

        var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var defaultOK = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        return listStuff(this, length, defaultOK, months, function () {
          var intl = format ? {
            month: length,
            day: "numeric"
          } : {
            month: length
          },
              formatStr = format ? "format" : "standalone";

          if (!_this.monthsCache[formatStr][length]) {
            _this.monthsCache[formatStr][length] = mapMonths(function (dt) {
              return _this.extract(dt, intl, "month");
            });
          }

          return _this.monthsCache[formatStr][length];
        });
      }
    }, {
      key: "weekdays",
      value: function weekdays$1(length) {
        var _this2 = this;

        var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var defaultOK = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        return listStuff(this, length, defaultOK, weekdays, function () {
          var intl = format ? {
            weekday: length,
            year: "numeric",
            month: "long",
            day: "numeric"
          } : {
            weekday: length
          },
              formatStr = format ? "format" : "standalone";

          if (!_this2.weekdaysCache[formatStr][length]) {
            _this2.weekdaysCache[formatStr][length] = mapWeekdays(function (dt) {
              return _this2.extract(dt, intl, "weekday");
            });
          }

          return _this2.weekdaysCache[formatStr][length];
        });
      }
    }, {
      key: "meridiems",
      value: function meridiems$1() {
        var _this3 = this;

        var defaultOK = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        return listStuff(this, undefined, defaultOK, function () {
          return meridiems;
        }, function () {
          // In theory there could be aribitrary day periods. We're gonna assume there are exactly two
          // for AM and PM. This is probably wrong, but it's makes parsing way easier.
          if (!_this3.meridiemCache) {
            var intl = {
              hour: "numeric",
              hour12: true
            };
            _this3.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(function (dt) {
              return _this3.extract(dt, intl, "dayperiod");
            });
          }

          return _this3.meridiemCache;
        });
      }
    }, {
      key: "eras",
      value: function eras$1(length) {
        var _this4 = this;

        var defaultOK = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        return listStuff(this, length, defaultOK, eras, function () {
          var intl = {
            era: length
          }; // This is utter bullshit. Different calendars are going to define eras totally differently. What I need is the minimum set of dates
          // to definitely enumerate them.

          if (!_this4.eraCache[length]) {
            _this4.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map(function (dt) {
              return _this4.extract(dt, intl, "era");
            });
          }

          return _this4.eraCache[length];
        });
      }
    }, {
      key: "extract",
      value: function extract(dt, intlOpts, field) {
        var df = this.dtFormatter(dt, intlOpts),
            results = df.formatToParts(),
            matching = results.find(function (m) {
          return m.type.toLowerCase() === field;
        });
        return matching ? matching.value : null;
      }
    }, {
      key: "numberFormatter",
      value: function numberFormatter() {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        // this forcesimple option is never used (the only caller short-circuits on it, but it seems safer to leave)
        // (in contrast, the rest of the condition is used heavily)
        return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);
      }
    }, {
      key: "dtFormatter",
      value: function dtFormatter(dt) {
        var intlOpts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return new PolyDateFormatter(dt, this.intl, intlOpts);
      }
    }, {
      key: "relFormatter",
      value: function relFormatter() {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return new PolyRelFormatter(this.intl, this.isEnglish(), opts);
      }
    }, {
      key: "isEnglish",
      value: function isEnglish() {
        return this.locale === "en" || this.locale.toLowerCase() === "en-us" || hasIntl() && new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us");
      }
    }, {
      key: "equals",
      value: function equals(other) {
        return this.locale === other.locale && this.numberingSystem === other.numberingSystem && this.outputCalendar === other.outputCalendar;
      }
    }, {
      key: "fastNumbers",
      get: function get() {
        if (this.fastNumbersCached == null) {
          this.fastNumbersCached = supportsFastNumbers(this);
        }

        return this.fastNumbersCached;
      }
    }]);

    return Locale;
  }();

  /*
   * This file handles parsing for well-specified formats. Here's how it works:
   * Two things go into parsing: a regex to match with and an extractor to take apart the groups in the match.
   * An extractor is just a function that takes a regex match array and returns a { year: ..., month: ... } object
   * parse() does the work of executing the regex and applying the extractor. It takes multiple regex/extractor pairs to try in sequence.
   * Extractors can take a "cursor" representing the offset in the match to look at. This makes it easy to combine extractors.
   * combineExtractors() does the work of combining them, keeping track of the cursor through multiple extractions.
   * Some extractions are super dumb and simpleParse and fromStrings help DRY them.
   */

  function combineRegexes() {
    for (var _len = arguments.length, regexes = new Array(_len), _key = 0; _key < _len; _key++) {
      regexes[_key] = arguments[_key];
    }

    var full = regexes.reduce(function (f, r) {
      return f + r.source;
    }, "");
    return RegExp("^".concat(full, "$"));
  }

  function combineExtractors() {
    for (var _len2 = arguments.length, extractors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      extractors[_key2] = arguments[_key2];
    }

    return function (m) {
      return extractors.reduce(function (_ref, ex) {
        var _ref2 = _slicedToArray(_ref, 3),
            mergedVals = _ref2[0],
            mergedZone = _ref2[1],
            cursor = _ref2[2];

        var _ex = ex(m, cursor),
            _ex2 = _slicedToArray(_ex, 3),
            val = _ex2[0],
            zone = _ex2[1],
            next = _ex2[2];

        return [Object.assign(mergedVals, val), mergedZone || zone, next];
      }, [{}, null, 1]).slice(0, 2);
    };
  }

  function parse(s) {
    if (s == null) {
      return [null, null];
    }

    for (var _len3 = arguments.length, patterns = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      patterns[_key3 - 1] = arguments[_key3];
    }

    for (var _i = 0, _patterns = patterns; _i < _patterns.length; _i++) {
      var _patterns$_i = _slicedToArray(_patterns[_i], 2),
          regex = _patterns$_i[0],
          extractor = _patterns$_i[1];

      var m = regex.exec(s);

      if (m) {
        return extractor(m);
      }
    }

    return [null, null];
  }

  function simpleParse() {
    for (var _len4 = arguments.length, keys = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      keys[_key4] = arguments[_key4];
    }

    return function (match, cursor) {
      var ret = {};
      var i;

      for (i = 0; i < keys.length; i++) {
        ret[keys[i]] = parseInteger(match[cursor + i]);
      }

      return [ret, null, cursor + i];
    };
  } // ISO and SQL parsing


  var offsetRegex = /(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/,
      isoTimeBaseRegex = /(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,9}))?)?)?/,
      isoTimeRegex = RegExp("".concat(isoTimeBaseRegex.source).concat(offsetRegex.source, "?")),
      isoTimeExtensionRegex = RegExp("(?:T".concat(isoTimeRegex.source, ")?")),
      isoYmdRegex = /([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/,
      isoWeekRegex = /(\d{4})-?W(\d\d)(?:-?(\d))?/,
      isoOrdinalRegex = /(\d{4})-?(\d{3})/,
      extractISOWeekData = simpleParse("weekYear", "weekNumber", "weekDay"),
      extractISOOrdinalData = simpleParse("year", "ordinal"),
      sqlYmdRegex = /(\d{4})-(\d\d)-(\d\d)/,
      // dumbed-down version of the ISO one
  sqlTimeRegex = RegExp("".concat(isoTimeBaseRegex.source, " ?(?:").concat(offsetRegex.source, "|(").concat(ianaRegex.source, "))?")),
      sqlTimeExtensionRegex = RegExp("(?: ".concat(sqlTimeRegex.source, ")?"));

  function int(match, pos, fallback) {
    var m = match[pos];
    return isUndefined(m) ? fallback : parseInteger(m);
  }

  function extractISOYmd(match, cursor) {
    var item = {
      year: int(match, cursor),
      month: int(match, cursor + 1, 1),
      day: int(match, cursor + 2, 1)
    };
    return [item, null, cursor + 3];
  }

  function extractISOTime(match, cursor) {
    var item = {
      hour: int(match, cursor, 0),
      minute: int(match, cursor + 1, 0),
      second: int(match, cursor + 2, 0),
      millisecond: parseMillis(match[cursor + 3])
    };
    return [item, null, cursor + 4];
  }

  function extractISOOffset(match, cursor) {
    var local = !match[cursor] && !match[cursor + 1],
        fullOffset = signedOffset(match[cursor + 1], match[cursor + 2]),
        zone = local ? null : FixedOffsetZone.instance(fullOffset);
    return [{}, zone, cursor + 3];
  }

  function extractIANAZone(match, cursor) {
    var zone = match[cursor] ? IANAZone.create(match[cursor]) : null;
    return [{}, zone, cursor + 1];
  } // ISO duration parsing


  var isoDuration = /^-?P(?:(?:(-?\d{1,9})Y)?(?:(-?\d{1,9})M)?(?:(-?\d{1,9})W)?(?:(-?\d{1,9})D)?(?:T(?:(-?\d{1,9})H)?(?:(-?\d{1,9})M)?(?:(-?\d{1,9})(?:[.,](-?\d{1,9}))?S)?)?)$/;

  function extractISODuration(match) {
    var _match = _slicedToArray(match, 9),
        s = _match[0],
        yearStr = _match[1],
        monthStr = _match[2],
        weekStr = _match[3],
        dayStr = _match[4],
        hourStr = _match[5],
        minuteStr = _match[6],
        secondStr = _match[7],
        millisecondsStr = _match[8];

    var hasNegativePrefix = s[0] === "-";

    var maybeNegate = function maybeNegate(num) {
      return num && hasNegativePrefix ? -num : num;
    };

    return [{
      years: maybeNegate(parseInteger(yearStr)),
      months: maybeNegate(parseInteger(monthStr)),
      weeks: maybeNegate(parseInteger(weekStr)),
      days: maybeNegate(parseInteger(dayStr)),
      hours: maybeNegate(parseInteger(hourStr)),
      minutes: maybeNegate(parseInteger(minuteStr)),
      seconds: maybeNegate(parseInteger(secondStr)),
      milliseconds: maybeNegate(parseMillis(millisecondsStr))
    }];
  } // These are a little braindead. EDT *should* tell us that we're in, say, America/New_York
  // and not just that we're in -240 *right now*. But since I don't think these are used that often
  // I'm just going to ignore that


  var obsOffsets = {
    GMT: 0,
    EDT: -4 * 60,
    EST: -5 * 60,
    CDT: -5 * 60,
    CST: -6 * 60,
    MDT: -6 * 60,
    MST: -7 * 60,
    PDT: -7 * 60,
    PST: -8 * 60
  };

  function fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
    var result = {
      year: yearStr.length === 2 ? untruncateYear(parseInteger(yearStr)) : parseInteger(yearStr),
      month: monthsShort.indexOf(monthStr) + 1,
      day: parseInteger(dayStr),
      hour: parseInteger(hourStr),
      minute: parseInteger(minuteStr)
    };
    if (secondStr) result.second = parseInteger(secondStr);

    if (weekdayStr) {
      result.weekday = weekdayStr.length > 3 ? weekdaysLong.indexOf(weekdayStr) + 1 : weekdaysShort.indexOf(weekdayStr) + 1;
    }

    return result;
  } // RFC 2822/5322


  var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;

  function extractRFC2822(match) {
    var _match2 = _slicedToArray(match, 12),
        weekdayStr = _match2[1],
        dayStr = _match2[2],
        monthStr = _match2[3],
        yearStr = _match2[4],
        hourStr = _match2[5],
        minuteStr = _match2[6],
        secondStr = _match2[7],
        obsOffset = _match2[8],
        milOffset = _match2[9],
        offHourStr = _match2[10],
        offMinuteStr = _match2[11],
        result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);

    var offset;

    if (obsOffset) {
      offset = obsOffsets[obsOffset];
    } else if (milOffset) {
      offset = 0;
    } else {
      offset = signedOffset(offHourStr, offMinuteStr);
    }

    return [result, new FixedOffsetZone(offset)];
  }

  function preprocessRFC2822(s) {
    // Remove comments and folding whitespace and replace multiple-spaces with a single space
    return s.replace(/\([^)]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").trim();
  } // http date


  var rfc1123 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/,
      rfc850 = /^(Monday|Tuesday|Wedsday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/,
      ascii = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;

  function extractRFC1123Or850(match) {
    var _match3 = _slicedToArray(match, 8),
        weekdayStr = _match3[1],
        dayStr = _match3[2],
        monthStr = _match3[3],
        yearStr = _match3[4],
        hourStr = _match3[5],
        minuteStr = _match3[6],
        secondStr = _match3[7],
        result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);

    return [result, FixedOffsetZone.utcInstance];
  }

  function extractASCII(match) {
    var _match4 = _slicedToArray(match, 8),
        weekdayStr = _match4[1],
        monthStr = _match4[2],
        dayStr = _match4[3],
        hourStr = _match4[4],
        minuteStr = _match4[5],
        secondStr = _match4[6],
        yearStr = _match4[7],
        result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);

    return [result, FixedOffsetZone.utcInstance];
  }

  var isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);
  var isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);
  var isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);
  var isoTimeCombinedRegex = combineRegexes(isoTimeRegex);
  var extractISOYmdTimeAndOffset = combineExtractors(extractISOYmd, extractISOTime, extractISOOffset);
  var extractISOWeekTimeAndOffset = combineExtractors(extractISOWeekData, extractISOTime, extractISOOffset);
  var extractISOOrdinalDataAndTime = combineExtractors(extractISOOrdinalData, extractISOTime);
  var extractISOTimeAndOffset = combineExtractors(extractISOTime, extractISOOffset);
  /**
   * @private
   */

  function parseISODate(s) {
    return parse(s, [isoYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset], [isoWeekWithTimeExtensionRegex, extractISOWeekTimeAndOffset], [isoOrdinalWithTimeExtensionRegex, extractISOOrdinalDataAndTime], [isoTimeCombinedRegex, extractISOTimeAndOffset]);
  }
  function parseRFC2822Date(s) {
    return parse(preprocessRFC2822(s), [rfc2822, extractRFC2822]);
  }
  function parseHTTPDate(s) {
    return parse(s, [rfc1123, extractRFC1123Or850], [rfc850, extractRFC1123Or850], [ascii, extractASCII]);
  }
  function parseISODuration(s) {
    return parse(s, [isoDuration, extractISODuration]);
  }
  var sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);
  var sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);
  var extractISOYmdTimeOffsetAndIANAZone = combineExtractors(extractISOYmd, extractISOTime, extractISOOffset, extractIANAZone);
  var extractISOTimeOffsetAndIANAZone = combineExtractors(extractISOTime, extractISOOffset, extractIANAZone);
  function parseSQL(s) {
    return parse(s, [sqlYmdWithTimeExtensionRegex, extractISOYmdTimeOffsetAndIANAZone], [sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone]);
  }

  var INVALID = "Invalid Duration"; // unit conversion constants

  var lowOrderMatrix = {
    weeks: {
      days: 7,
      hours: 7 * 24,
      minutes: 7 * 24 * 60,
      seconds: 7 * 24 * 60 * 60,
      milliseconds: 7 * 24 * 60 * 60 * 1000
    },
    days: {
      hours: 24,
      minutes: 24 * 60,
      seconds: 24 * 60 * 60,
      milliseconds: 24 * 60 * 60 * 1000
    },
    hours: {
      minutes: 60,
      seconds: 60 * 60,
      milliseconds: 60 * 60 * 1000
    },
    minutes: {
      seconds: 60,
      milliseconds: 60 * 1000
    },
    seconds: {
      milliseconds: 1000
    }
  },
      casualMatrix = Object.assign({
    years: {
      months: 12,
      weeks: 52,
      days: 365,
      hours: 365 * 24,
      minutes: 365 * 24 * 60,
      seconds: 365 * 24 * 60 * 60,
      milliseconds: 365 * 24 * 60 * 60 * 1000
    },
    quarters: {
      months: 3,
      weeks: 13,
      days: 91,
      hours: 91 * 24,
      minutes: 91 * 24 * 60,
      milliseconds: 91 * 24 * 60 * 60 * 1000
    },
    months: {
      weeks: 4,
      days: 30,
      hours: 30 * 24,
      minutes: 30 * 24 * 60,
      seconds: 30 * 24 * 60 * 60,
      milliseconds: 30 * 24 * 60 * 60 * 1000
    }
  }, lowOrderMatrix),
      daysInYearAccurate = 146097.0 / 400,
      daysInMonthAccurate = 146097.0 / 4800,
      accurateMatrix = Object.assign({
    years: {
      months: 12,
      weeks: daysInYearAccurate / 7,
      days: daysInYearAccurate,
      hours: daysInYearAccurate * 24,
      minutes: daysInYearAccurate * 24 * 60,
      seconds: daysInYearAccurate * 24 * 60 * 60,
      milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000
    },
    quarters: {
      months: 3,
      weeks: daysInYearAccurate / 28,
      days: daysInYearAccurate / 4,
      hours: daysInYearAccurate * 24 / 4,
      minutes: daysInYearAccurate * 24 * 60 / 4,
      seconds: daysInYearAccurate * 24 * 60 * 60 / 4,
      milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000 / 4
    },
    months: {
      weeks: daysInMonthAccurate / 7,
      days: daysInMonthAccurate,
      hours: daysInMonthAccurate * 24,
      minutes: daysInMonthAccurate * 24 * 60,
      seconds: daysInMonthAccurate * 24 * 60 * 60,
      milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1000
    }
  }, lowOrderMatrix); // units ordered by size

  var orderedUnits = ["years", "quarters", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds"];
  var reverseUnits = orderedUnits.slice(0).reverse(); // clone really means "create another instance just like this one, but with these changes"

  function clone$1(dur, alts) {
    var clear = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    // deep merge for vals
    var conf = {
      values: clear ? alts.values : Object.assign({}, dur.values, alts.values || {}),
      loc: dur.loc.clone(alts.loc),
      conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy
    };
    return new Duration(conf);
  }

  function antiTrunc(n) {
    return n < 0 ? Math.floor(n) : Math.ceil(n);
  } // NB: mutates parameters


  function convert(matrix, fromMap, fromUnit, toMap, toUnit) {
    var conv = matrix[toUnit][fromUnit],
        raw = fromMap[fromUnit] / conv,
        sameSign = Math.sign(raw) === Math.sign(toMap[toUnit]),
        // ok, so this is wild, but see the matrix in the tests
    added = !sameSign && toMap[toUnit] !== 0 && Math.abs(raw) <= 1 ? antiTrunc(raw) : Math.trunc(raw);
    toMap[toUnit] += added;
    fromMap[fromUnit] -= added * conv;
  } // NB: mutates parameters


  function normalizeValues(matrix, vals) {
    reverseUnits.reduce(function (previous, current) {
      if (!isUndefined(vals[current])) {
        if (previous) {
          convert(matrix, vals, previous, vals, current);
        }

        return current;
      } else {
        return previous;
      }
    }, null);
  }
  /**
   * A Duration object represents a period of time, like "2 months" or "1 day, 1 hour". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime.plus} to add a Duration object to a DateTime, producing another DateTime.
   *
   * Here is a brief overview of commonly used methods and getters in Duration:
   *
   * * **Creation** To create a Duration, use {@link Duration.fromMillis}, {@link Duration.fromObject}, or {@link Duration.fromISO}.
   * * **Unit values** See the {@link Duration.years}, {@link Duration.months}, {@link Duration.weeks}, {@link Duration.days}, {@link Duration.hours}, {@link Duration.minutes}, {@link Duration.seconds}, {@link Duration.milliseconds} accessors.
   * * **Configuration** See  {@link Duration.locale} and {@link Duration.numberingSystem} accessors.
   * * **Transformation** To create new Durations out of old ones use {@link Duration.plus}, {@link Duration.minus}, {@link Duration.normalize}, {@link Duration.set}, {@link Duration.reconfigure}, {@link Duration.shiftTo}, and {@link Duration.negate}.
   * * **Output** To convert the Duration into other representations, see {@link Duration.as}, {@link Duration.toISO}, {@link Duration.toFormat}, and {@link Duration.toJSON}
   *
   * There's are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.
   */


  var Duration = /*#__PURE__*/function () {
    /**
     * @private
     */
    function Duration(config) {
      _classCallCheck(this, Duration);

      var accurate = config.conversionAccuracy === "longterm" || false;
      /**
       * @access private
       */

      this.values = config.values;
      /**
       * @access private
       */

      this.loc = config.loc || Locale.create();
      /**
       * @access private
       */

      this.conversionAccuracy = accurate ? "longterm" : "casual";
      /**
       * @access private
       */

      this.invalid = config.invalid || null;
      /**
       * @access private
       */

      this.matrix = accurate ? accurateMatrix : casualMatrix;
      /**
       * @access private
       */

      this.isLuxonDuration = true;
    }
    /**
     * Create Duration from a number of milliseconds.
     * @param {number} count of milliseconds
     * @param {Object} opts - options for parsing
     * @param {string} [opts.locale='en-US'] - the locale to use
     * @param {string} opts.numberingSystem - the numbering system to use
     * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
     * @return {Duration}
     */


    _createClass(Duration, [{
      key: "toFormat",

      /**
       * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:
       * * `S` for milliseconds
       * * `s` for seconds
       * * `m` for minutes
       * * `h` for hours
       * * `d` for days
       * * `M` for months
       * * `y` for years
       * Notes:
       * * Add padding by repeating the token, e.g. "yy" pads the years to two digits, "hhhh" pads the hours out to four digits
       * * The duration will be converted to the set of units in the format string using {@link Duration.shiftTo} and the Durations's conversion accuracy setting.
       * @param {string} fmt - the format string
       * @param {Object} opts - options
       * @param {boolean} [opts.floor=true] - floor numerical values
       * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("y d s") //=> "1 6 2"
       * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("yy dd sss") //=> "01 06 002"
       * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("M S") //=> "12 518402000"
       * @return {string}
       */
      value: function toFormat(fmt) {
        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        // reverse-compat since 1.2; we always round down now, never up, and we do it by default
        var fmtOpts = Object.assign({}, opts, {
          floor: opts.round !== false && opts.floor !== false
        });
        return this.isValid ? Formatter.create(this.loc, fmtOpts).formatDurationFromString(this, fmt) : INVALID;
      }
      /**
       * Returns a Javascript object with this Duration's values.
       * @param opts - options for generating the object
       * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output
       * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }
       * @return {Object}
       */

    }, {
      key: "toObject",
      value: function toObject() {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        if (!this.isValid) return {};
        var base = Object.assign({}, this.values);

        if (opts.includeConfig) {
          base.conversionAccuracy = this.conversionAccuracy;
          base.numberingSystem = this.loc.numberingSystem;
          base.locale = this.loc.locale;
        }

        return base;
      }
      /**
       * Returns an ISO 8601-compliant string representation of this Duration.
       * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
       * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'
       * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'
       * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'
       * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'
       * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'
       * @return {string}
       */

    }, {
      key: "toISO",
      value: function toISO() {
        // we could use the formatter, but this is an easier way to get the minimum string
        if (!this.isValid) return null;
        var s = "P";
        if (this.years !== 0) s += this.years + "Y";
        if (this.months !== 0 || this.quarters !== 0) s += this.months + this.quarters * 3 + "M";
        if (this.weeks !== 0) s += this.weeks + "W";
        if (this.days !== 0) s += this.days + "D";
        if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0) s += "T";
        if (this.hours !== 0) s += this.hours + "H";
        if (this.minutes !== 0) s += this.minutes + "M";
        if (this.seconds !== 0 || this.milliseconds !== 0) // this will handle "floating point madness" by removing extra decimal places
          // https://stackoverflow.com/questions/588004/is-floating-point-math-broken
          s += roundTo(this.seconds + this.milliseconds / 1000, 3) + "S";
        if (s === "P") s += "T0S";
        return s;
      }
      /**
       * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.
       * @return {string}
       */

    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.toISO();
      }
      /**
       * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.
       * @return {string}
       */

    }, {
      key: "toString",
      value: function toString() {
        return this.toISO();
      }
      /**
       * Returns an milliseconds value of this Duration.
       * @return {number}
       */

    }, {
      key: "valueOf",
      value: function valueOf() {
        return this.as("milliseconds");
      }
      /**
       * Make this Duration longer by the specified amount. Return a newly-constructed Duration.
       * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
       * @return {Duration}
       */

    }, {
      key: "plus",
      value: function plus(duration) {
        if (!this.isValid) return this;
        var dur = friendlyDuration(duration),
            result = {};

        var _iterator = _createForOfIteratorHelper(orderedUnits),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var k = _step.value;

            if (hasOwnProperty$2(dur.values, k) || hasOwnProperty$2(this.values, k)) {
              result[k] = dur.get(k) + this.get(k);
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        return clone$1(this, {
          values: result
        }, true);
      }
      /**
       * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.
       * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
       * @return {Duration}
       */

    }, {
      key: "minus",
      value: function minus(duration) {
        if (!this.isValid) return this;
        var dur = friendlyDuration(duration);
        return this.plus(dur.negate());
      }
      /**
       * Scale this Duration by the specified amount. Return a newly-constructed Duration.
       * @param {function} fn - The function to apply to each unit. Arity is 1 or 2: the value of the unit and, optionally, the unit name. Must return a number.
       * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnit(x => x * 2) //=> { hours: 2, minutes: 60 }
       * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnit((x, u) => u === "hour" ? x * 2 : x) //=> { hours: 2, minutes: 30 }
       * @return {Duration}
       */

    }, {
      key: "mapUnits",
      value: function mapUnits(fn) {
        if (!this.isValid) return this;
        var result = {};

        for (var _i = 0, _Object$keys = Object.keys(this.values); _i < _Object$keys.length; _i++) {
          var k = _Object$keys[_i];
          result[k] = asNumber(fn(this.values[k], k));
        }

        return clone$1(this, {
          values: result
        }, true);
      }
      /**
       * Get the value of unit.
       * @param {string} unit - a unit such as 'minute' or 'day'
       * @example Duration.fromObject({years: 2, days: 3}).years //=> 2
       * @example Duration.fromObject({years: 2, days: 3}).months //=> 0
       * @example Duration.fromObject({years: 2, days: 3}).days //=> 3
       * @return {number}
       */

    }, {
      key: "get",
      value: function get(unit) {
        return this[Duration.normalizeUnit(unit)];
      }
      /**
       * "Set" the values of specified units. Return a newly-constructed Duration.
       * @param {Object} values - a mapping of units to numbers
       * @example dur.set({ years: 2017 })
       * @example dur.set({ hours: 8, minutes: 30 })
       * @return {Duration}
       */

    }, {
      key: "set",
      value: function set(values) {
        if (!this.isValid) return this;
        var mixed = Object.assign(this.values, normalizeObject(values, Duration.normalizeUnit, []));
        return clone$1(this, {
          values: mixed
        });
      }
      /**
       * "Set" the locale and/or numberingSystem.  Returns a newly-constructed Duration.
       * @example dur.reconfigure({ locale: 'en-GB' })
       * @return {Duration}
       */

    }, {
      key: "reconfigure",
      value: function reconfigure() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            locale = _ref.locale,
            numberingSystem = _ref.numberingSystem,
            conversionAccuracy = _ref.conversionAccuracy;

        var loc = this.loc.clone({
          locale: locale,
          numberingSystem: numberingSystem
        }),
            opts = {
          loc: loc
        };

        if (conversionAccuracy) {
          opts.conversionAccuracy = conversionAccuracy;
        }

        return clone$1(this, opts);
      }
      /**
       * Return the length of the duration in the specified unit.
       * @param {string} unit - a unit such as 'minutes' or 'days'
       * @example Duration.fromObject({years: 1}).as('days') //=> 365
       * @example Duration.fromObject({years: 1}).as('months') //=> 12
       * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5
       * @return {number}
       */

    }, {
      key: "as",
      value: function as(unit) {
        return this.isValid ? this.shiftTo(unit).get(unit) : NaN;
      }
      /**
       * Reduce this Duration to its canonical representation in its current units.
       * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }
       * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }
       * @return {Duration}
       */

    }, {
      key: "normalize",
      value: function normalize() {
        if (!this.isValid) return this;
        var vals = this.toObject();
        normalizeValues(this.matrix, vals);
        return clone$1(this, {
          values: vals
        }, true);
      }
      /**
       * Convert this Duration into its representation in a different set of units.
       * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }
       * @return {Duration}
       */

    }, {
      key: "shiftTo",
      value: function shiftTo() {
        for (var _len = arguments.length, units = new Array(_len), _key = 0; _key < _len; _key++) {
          units[_key] = arguments[_key];
        }

        if (!this.isValid) return this;

        if (units.length === 0) {
          return this;
        }

        units = units.map(function (u) {
          return Duration.normalizeUnit(u);
        });
        var built = {},
            accumulated = {},
            vals = this.toObject();
        var lastUnit;
        normalizeValues(this.matrix, vals);

        var _iterator2 = _createForOfIteratorHelper(orderedUnits),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var k = _step2.value;

            if (units.indexOf(k) >= 0) {
              lastUnit = k;
              var own = 0; // anything we haven't boiled down yet should get boiled to this unit

              for (var ak in accumulated) {
                own += this.matrix[ak][k] * accumulated[ak];
                accumulated[ak] = 0;
              } // plus anything that's already in this unit


              if (isNumber(vals[k])) {
                own += vals[k];
              }

              var i = Math.trunc(own);
              built[k] = i;
              accumulated[k] = own - i; // we'd like to absorb these fractions in another unit
              // plus anything further down the chain that should be rolled up in to this

              for (var down in vals) {
                if (orderedUnits.indexOf(down) > orderedUnits.indexOf(k)) {
                  convert(this.matrix, vals, down, built, k);
                }
              } // otherwise, keep it in the wings to boil it later

            } else if (isNumber(vals[k])) {
              accumulated[k] = vals[k];
            }
          } // anything leftover becomes the decimal for the last unit
          // lastUnit must be defined since units is not empty

        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        for (var key in accumulated) {
          if (accumulated[key] !== 0) {
            built[lastUnit] += key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];
          }
        }

        return clone$1(this, {
          values: built
        }, true).normalize();
      }
      /**
       * Return the negative of this Duration.
       * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }
       * @return {Duration}
       */

    }, {
      key: "negate",
      value: function negate() {
        if (!this.isValid) return this;
        var negated = {};

        for (var _i2 = 0, _Object$keys2 = Object.keys(this.values); _i2 < _Object$keys2.length; _i2++) {
          var k = _Object$keys2[_i2];
          negated[k] = -this.values[k];
        }

        return clone$1(this, {
          values: negated
        }, true);
      }
      /**
       * Get the years.
       * @type {number}
       */

    }, {
      key: "equals",

      /**
       * Equality check
       * Two Durations are equal iff they have the same units and the same values for each unit.
       * @param {Duration} other
       * @return {boolean}
       */
      value: function equals(other) {
        if (!this.isValid || !other.isValid) {
          return false;
        }

        if (!this.loc.equals(other.loc)) {
          return false;
        }

        var _iterator3 = _createForOfIteratorHelper(orderedUnits),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var u = _step3.value;

            if (this.values[u] !== other.values[u]) {
              return false;
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        return true;
      }
    }, {
      key: "locale",

      /**
       * Get  the locale of a Duration, such 'en-GB'
       * @type {string}
       */
      get: function get() {
        return this.isValid ? this.loc.locale : null;
      }
      /**
       * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration
       *
       * @type {string}
       */

    }, {
      key: "numberingSystem",
      get: function get() {
        return this.isValid ? this.loc.numberingSystem : null;
      }
    }, {
      key: "years",
      get: function get() {
        return this.isValid ? this.values.years || 0 : NaN;
      }
      /**
       * Get the quarters.
       * @type {number}
       */

    }, {
      key: "quarters",
      get: function get() {
        return this.isValid ? this.values.quarters || 0 : NaN;
      }
      /**
       * Get the months.
       * @type {number}
       */

    }, {
      key: "months",
      get: function get() {
        return this.isValid ? this.values.months || 0 : NaN;
      }
      /**
       * Get the weeks
       * @type {number}
       */

    }, {
      key: "weeks",
      get: function get() {
        return this.isValid ? this.values.weeks || 0 : NaN;
      }
      /**
       * Get the days.
       * @type {number}
       */

    }, {
      key: "days",
      get: function get() {
        return this.isValid ? this.values.days || 0 : NaN;
      }
      /**
       * Get the hours.
       * @type {number}
       */

    }, {
      key: "hours",
      get: function get() {
        return this.isValid ? this.values.hours || 0 : NaN;
      }
      /**
       * Get the minutes.
       * @type {number}
       */

    }, {
      key: "minutes",
      get: function get() {
        return this.isValid ? this.values.minutes || 0 : NaN;
      }
      /**
       * Get the seconds.
       * @return {number}
       */

    }, {
      key: "seconds",
      get: function get() {
        return this.isValid ? this.values.seconds || 0 : NaN;
      }
      /**
       * Get the milliseconds.
       * @return {number}
       */

    }, {
      key: "milliseconds",
      get: function get() {
        return this.isValid ? this.values.milliseconds || 0 : NaN;
      }
      /**
       * Returns whether the Duration is invalid. Invalid durations are returned by diff operations
       * on invalid DateTimes or Intervals.
       * @return {boolean}
       */

    }, {
      key: "isValid",
      get: function get() {
        return this.invalid === null;
      }
      /**
       * Returns an error code if this Duration became invalid, or null if the Duration is valid
       * @return {string}
       */

    }, {
      key: "invalidReason",
      get: function get() {
        return this.invalid ? this.invalid.reason : null;
      }
      /**
       * Returns an explanation of why this Duration became invalid, or null if the Duration is valid
       * @type {string}
       */

    }, {
      key: "invalidExplanation",
      get: function get() {
        return this.invalid ? this.invalid.explanation : null;
      }
    }], [{
      key: "fromMillis",
      value: function fromMillis(count, opts) {
        return Duration.fromObject(Object.assign({
          milliseconds: count
        }, opts));
      }
      /**
       * Create a Duration from a Javascript object with keys like 'years' and 'hours.
       * If this object is empty then a zero milliseconds duration is returned.
       * @param {Object} obj - the object to create the DateTime from
       * @param {number} obj.years
       * @param {number} obj.quarters
       * @param {number} obj.months
       * @param {number} obj.weeks
       * @param {number} obj.days
       * @param {number} obj.hours
       * @param {number} obj.minutes
       * @param {number} obj.seconds
       * @param {number} obj.milliseconds
       * @param {string} [obj.locale='en-US'] - the locale to use
       * @param {string} obj.numberingSystem - the numbering system to use
       * @param {string} [obj.conversionAccuracy='casual'] - the conversion system to use
       * @return {Duration}
       */

    }, {
      key: "fromObject",
      value: function fromObject(obj) {
        if (obj == null || _typeof(obj) !== "object") {
          throw new InvalidArgumentError("Duration.fromObject: argument expected to be an object, got ".concat(obj === null ? "null" : _typeof(obj)));
        }

        return new Duration({
          values: normalizeObject(obj, Duration.normalizeUnit, ["locale", "numberingSystem", "conversionAccuracy", "zone" // a bit of debt; it's super inconvenient internally not to be able to blindly pass this
          ]),
          loc: Locale.fromObject(obj),
          conversionAccuracy: obj.conversionAccuracy
        });
      }
      /**
       * Create a Duration from an ISO 8601 duration string.
       * @param {string} text - text to parse
       * @param {Object} opts - options for parsing
       * @param {string} [opts.locale='en-US'] - the locale to use
       * @param {string} opts.numberingSystem - the numbering system to use
       * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
       * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
       * @example Duration.fromISO('P3Y6M1W4DT12H30M5S').toObject() //=> { years: 3, months: 6, weeks: 1, days: 4, hours: 12, minutes: 30, seconds: 5 }
       * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }
       * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }
       * @return {Duration}
       */

    }, {
      key: "fromISO",
      value: function fromISO(text, opts) {
        var _parseISODuration = parseISODuration(text),
            _parseISODuration2 = _slicedToArray(_parseISODuration, 1),
            parsed = _parseISODuration2[0];

        if (parsed) {
          var obj = Object.assign(parsed, opts);
          return Duration.fromObject(obj);
        } else {
          return Duration.invalid("unparsable", "the input \"".concat(text, "\" can't be parsed as ISO 8601"));
        }
      }
      /**
       * Create an invalid Duration.
       * @param {string} reason - simple string of why this datetime is invalid. Should not contain parameters or anything else data-dependent
       * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
       * @return {Duration}
       */

    }, {
      key: "invalid",
      value: function invalid(reason) {
        var explanation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        if (!reason) {
          throw new InvalidArgumentError("need to specify a reason the Duration is invalid");
        }

        var invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

        if (Settings.throwOnInvalid) {
          throw new InvalidDurationError(invalid);
        } else {
          return new Duration({
            invalid: invalid
          });
        }
      }
      /**
       * @private
       */

    }, {
      key: "normalizeUnit",
      value: function normalizeUnit(unit) {
        var normalized = {
          year: "years",
          years: "years",
          quarter: "quarters",
          quarters: "quarters",
          month: "months",
          months: "months",
          week: "weeks",
          weeks: "weeks",
          day: "days",
          days: "days",
          hour: "hours",
          hours: "hours",
          minute: "minutes",
          minutes: "minutes",
          second: "seconds",
          seconds: "seconds",
          millisecond: "milliseconds",
          milliseconds: "milliseconds"
        }[unit ? unit.toLowerCase() : unit];
        if (!normalized) throw new InvalidUnitError(unit);
        return normalized;
      }
      /**
       * Check if an object is a Duration. Works across context boundaries
       * @param {object} o
       * @return {boolean}
       */

    }, {
      key: "isDuration",
      value: function isDuration(o) {
        return o && o.isLuxonDuration || false;
      }
    }]);

    return Duration;
  }();
  function friendlyDuration(durationish) {
    if (isNumber(durationish)) {
      return Duration.fromMillis(durationish);
    } else if (Duration.isDuration(durationish)) {
      return durationish;
    } else if (_typeof(durationish) === "object") {
      return Duration.fromObject(durationish);
    } else {
      throw new InvalidArgumentError("Unknown duration argument ".concat(durationish, " of type ").concat(_typeof(durationish)));
    }
  }

  var INVALID$1 = "Invalid Interval"; // checks if the start is equal to or before the end

  function validateStartEnd(start, end) {
    if (!start || !start.isValid) {
      return Interval.invalid("missing or invalid start");
    } else if (!end || !end.isValid) {
      return Interval.invalid("missing or invalid end");
    } else if (end < start) {
      return Interval.invalid("end before start", "The end of an interval must be after its start, but you had start=".concat(start.toISO(), " and end=").concat(end.toISO()));
    } else {
      return null;
    }
  }
  /**
   * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.
   *
   * Here is a brief overview of the most commonly used methods and getters in Interval:
   *
   * * **Creation** To create an Interval, use {@link fromDateTimes}, {@link after}, {@link before}, or {@link fromISO}.
   * * **Accessors** Use {@link start} and {@link end} to get the start and end.
   * * **Interrogation** To analyze the Interval, use {@link count}, {@link length}, {@link hasSame}, {@link contains}, {@link isAfter}, or {@link isBefore}.
   * * **Transformation** To create other Intervals out of this one, use {@link set}, {@link splitAt}, {@link splitBy}, {@link divideEqually}, {@link merge}, {@link xor}, {@link union}, {@link intersection}, or {@link difference}.
   * * **Comparison** To compare this Interval to another one, use {@link equals}, {@link overlaps}, {@link abutsStart}, {@link abutsEnd}, {@link engulfs}
   * * **Output** To convert the Interval into other representations, see {@link toString}, {@link toISO}, {@link toISODate}, {@link toISOTime}, {@link toFormat}, and {@link toDuration}.
   */


  var Interval = /*#__PURE__*/function () {
    /**
     * @private
     */
    function Interval(config) {
      _classCallCheck(this, Interval);

      /**
       * @access private
       */
      this.s = config.start;
      /**
       * @access private
       */

      this.e = config.end;
      /**
       * @access private
       */

      this.invalid = config.invalid || null;
      /**
       * @access private
       */

      this.isLuxonInterval = true;
    }
    /**
     * Create an invalid Interval.
     * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent
     * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
     * @return {Interval}
     */


    _createClass(Interval, [{
      key: "length",

      /**
       * Returns the length of the Interval in the specified unit.
       * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.
       * @return {number}
       */
      value: function length() {
        var unit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "milliseconds";
        return this.isValid ? this.toDuration.apply(this, [unit]).get(unit) : NaN;
      }
      /**
       * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.
       * Unlike {@link length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'
       * asks 'what dates are included in this interval?', not 'how many days long is this interval?'
       * @param {string} [unit='milliseconds'] - the unit of time to count.
       * @return {number}
       */

    }, {
      key: "count",
      value: function count() {
        var unit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "milliseconds";
        if (!this.isValid) return NaN;
        var start = this.start.startOf(unit),
            end = this.end.startOf(unit);
        return Math.floor(end.diff(start, unit).get(unit)) + 1;
      }
      /**
       * Returns whether this Interval's start and end are both in the same unit of time
       * @param {string} unit - the unit of time to check sameness on
       * @return {boolean}
       */

    }, {
      key: "hasSame",
      value: function hasSame(unit) {
        return this.isValid ? this.e.minus(1).hasSame(this.s, unit) : false;
      }
      /**
       * Return whether this Interval has the same start and end DateTimes.
       * @return {boolean}
       */

    }, {
      key: "isEmpty",
      value: function isEmpty() {
        return this.s.valueOf() === this.e.valueOf();
      }
      /**
       * Return whether this Interval's start is after the specified DateTime.
       * @param {DateTime} dateTime
       * @return {boolean}
       */

    }, {
      key: "isAfter",
      value: function isAfter(dateTime) {
        if (!this.isValid) return false;
        return this.s > dateTime;
      }
      /**
       * Return whether this Interval's end is before the specified DateTime.
       * @param {DateTime} dateTime
       * @return {boolean}
       */

    }, {
      key: "isBefore",
      value: function isBefore(dateTime) {
        if (!this.isValid) return false;
        return this.e <= dateTime;
      }
      /**
       * Return whether this Interval contains the specified DateTime.
       * @param {DateTime} dateTime
       * @return {boolean}
       */

    }, {
      key: "contains",
      value: function contains(dateTime) {
        if (!this.isValid) return false;
        return this.s <= dateTime && this.e > dateTime;
      }
      /**
       * "Sets" the start and/or end dates. Returns a newly-constructed Interval.
       * @param {Object} values - the values to set
       * @param {DateTime} values.start - the starting DateTime
       * @param {DateTime} values.end - the ending DateTime
       * @return {Interval}
       */

    }, {
      key: "set",
      value: function set() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            start = _ref.start,
            end = _ref.end;

        if (!this.isValid) return this;
        return Interval.fromDateTimes(start || this.s, end || this.e);
      }
      /**
       * Split this Interval at each of the specified DateTimes
       * @param {...[DateTime]} dateTimes - the unit of time to count.
       * @return {[Interval]}
       */

    }, {
      key: "splitAt",
      value: function splitAt() {
        var _this = this;

        if (!this.isValid) return [];

        for (var _len = arguments.length, dateTimes = new Array(_len), _key = 0; _key < _len; _key++) {
          dateTimes[_key] = arguments[_key];
        }

        var sorted = dateTimes.map(friendlyDateTime).filter(function (d) {
          return _this.contains(d);
        }).sort(),
            results = [];
        var s = this.s,
            i = 0;

        while (s < this.e) {
          var added = sorted[i] || this.e,
              next = +added > +this.e ? this.e : added;
          results.push(Interval.fromDateTimes(s, next));
          s = next;
          i += 1;
        }

        return results;
      }
      /**
       * Split this Interval into smaller Intervals, each of the specified length.
       * Left over time is grouped into a smaller interval
       * @param {Duration|Object|number} duration - The length of each resulting interval.
       * @return {[Interval]}
       */

    }, {
      key: "splitBy",
      value: function splitBy(duration) {
        var dur = friendlyDuration(duration);

        if (!this.isValid || !dur.isValid || dur.as("milliseconds") === 0) {
          return [];
        }

        var s = this.s,
            added,
            next;
        var results = [];

        while (s < this.e) {
          added = s.plus(dur);
          next = +added > +this.e ? this.e : added;
          results.push(Interval.fromDateTimes(s, next));
          s = next;
        }

        return results;
      }
      /**
       * Split this Interval into the specified number of smaller intervals.
       * @param {number} numberOfParts - The number of Intervals to divide the Interval into.
       * @return {[Interval]}
       */

    }, {
      key: "divideEqually",
      value: function divideEqually(numberOfParts) {
        if (!this.isValid) return [];
        return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);
      }
      /**
       * Return whether this Interval overlaps with the specified Interval
       * @param {Interval} other
       * @return {boolean}
       */

    }, {
      key: "overlaps",
      value: function overlaps(other) {
        return this.e > other.s && this.s < other.e;
      }
      /**
       * Return whether this Interval's end is adjacent to the specified Interval's start.
       * @param {Interval} other
       * @return {boolean}
       */

    }, {
      key: "abutsStart",
      value: function abutsStart(other) {
        if (!this.isValid) return false;
        return +this.e === +other.s;
      }
      /**
       * Return whether this Interval's start is adjacent to the specified Interval's end.
       * @param {Interval} other
       * @return {boolean}
       */

    }, {
      key: "abutsEnd",
      value: function abutsEnd(other) {
        if (!this.isValid) return false;
        return +other.e === +this.s;
      }
      /**
       * Return whether this Interval engulfs the start and end of the specified Interval.
       * @param {Interval} other
       * @return {boolean}
       */

    }, {
      key: "engulfs",
      value: function engulfs(other) {
        if (!this.isValid) return false;
        return this.s <= other.s && this.e >= other.e;
      }
      /**
       * Return whether this Interval has the same start and end as the specified Interval.
       * @param {Interval} other
       * @return {boolean}
       */

    }, {
      key: "equals",
      value: function equals(other) {
        if (!this.isValid || !other.isValid) {
          return false;
        }

        return this.s.equals(other.s) && this.e.equals(other.e);
      }
      /**
       * Return an Interval representing the intersection of this Interval and the specified Interval.
       * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.
       * Returns null if the intersection is empty, meaning, the intervals don't intersect.
       * @param {Interval} other
       * @return {Interval}
       */

    }, {
      key: "intersection",
      value: function intersection(other) {
        if (!this.isValid) return this;
        var s = this.s > other.s ? this.s : other.s,
            e = this.e < other.e ? this.e : other.e;

        if (s > e) {
          return null;
        } else {
          return Interval.fromDateTimes(s, e);
        }
      }
      /**
       * Return an Interval representing the union of this Interval and the specified Interval.
       * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.
       * @param {Interval} other
       * @return {Interval}
       */

    }, {
      key: "union",
      value: function union(other) {
        if (!this.isValid) return this;
        var s = this.s < other.s ? this.s : other.s,
            e = this.e > other.e ? this.e : other.e;
        return Interval.fromDateTimes(s, e);
      }
      /**
       * Merge an array of Intervals into a equivalent minimal set of Intervals.
       * Combines overlapping and adjacent Intervals.
       * @param {[Interval]} intervals
       * @return {[Interval]}
       */

    }, {
      key: "difference",

      /**
       * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.
       * @param {...Interval} intervals
       * @return {[Interval]}
       */
      value: function difference() {
        var _this2 = this;

        for (var _len2 = arguments.length, intervals = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          intervals[_key2] = arguments[_key2];
        }

        return Interval.xor([this].concat(intervals)).map(function (i) {
          return _this2.intersection(i);
        }).filter(function (i) {
          return i && !i.isEmpty();
        });
      }
      /**
       * Returns a string representation of this Interval appropriate for debugging.
       * @return {string}
       */

    }, {
      key: "toString",
      value: function toString() {
        if (!this.isValid) return INVALID$1;
        return "[".concat(this.s.toISO(), " \u2013 ").concat(this.e.toISO(), ")");
      }
      /**
       * Returns an ISO 8601-compliant string representation of this Interval.
       * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
       * @param {Object} opts - The same options as {@link DateTime.toISO}
       * @return {string}
       */

    }, {
      key: "toISO",
      value: function toISO(opts) {
        if (!this.isValid) return INVALID$1;
        return "".concat(this.s.toISO(opts), "/").concat(this.e.toISO(opts));
      }
      /**
       * Returns an ISO 8601-compliant string representation of date of this Interval.
       * The time components are ignored.
       * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
       * @return {string}
       */

    }, {
      key: "toISODate",
      value: function toISODate() {
        if (!this.isValid) return INVALID$1;
        return "".concat(this.s.toISODate(), "/").concat(this.e.toISODate());
      }
      /**
       * Returns an ISO 8601-compliant string representation of time of this Interval.
       * The date components are ignored.
       * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
       * @param {Object} opts - The same options as {@link DateTime.toISO}
       * @return {string}
       */

    }, {
      key: "toISOTime",
      value: function toISOTime(opts) {
        if (!this.isValid) return INVALID$1;
        return "".concat(this.s.toISOTime(opts), "/").concat(this.e.toISOTime(opts));
      }
      /**
       * Returns a string representation of this Interval formatted according to the specified format string.
       * @param {string} dateFormat - the format string. This string formats the start and end time. See {@link DateTime.toFormat} for details.
       * @param {Object} opts - options
       * @param {string} [opts.separator =  ' â '] - a separator to place between the start and end representations
       * @return {string}
       */

    }, {
      key: "toFormat",
      value: function toFormat(dateFormat) {
        var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
            _ref2$separator = _ref2.separator,
            separator = _ref2$separator === void 0 ? " â " : _ref2$separator;

        if (!this.isValid) return INVALID$1;
        return "".concat(this.s.toFormat(dateFormat)).concat(separator).concat(this.e.toFormat(dateFormat));
      }
      /**
       * Return a Duration representing the time spanned by this interval.
       * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.
       * @param {Object} opts - options that affect the creation of the Duration
       * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
       * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }
       * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }
       * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }
       * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }
       * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }
       * @return {Duration}
       */

    }, {
      key: "toDuration",
      value: function toDuration(unit, opts) {
        if (!this.isValid) {
          return Duration.invalid(this.invalidReason);
        }

        return this.e.diff(this.s, unit, opts);
      }
      /**
       * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes
       * @param {function} mapFn
       * @return {Interval}
       * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())
       * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))
       */

    }, {
      key: "mapEndpoints",
      value: function mapEndpoints(mapFn) {
        return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));
      }
    }, {
      key: "start",

      /**
       * Returns the start of the Interval
       * @type {DateTime}
       */
      get: function get() {
        return this.isValid ? this.s : null;
      }
      /**
       * Returns the end of the Interval
       * @type {DateTime}
       */

    }, {
      key: "end",
      get: function get() {
        return this.isValid ? this.e : null;
      }
      /**
       * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.
       * @type {boolean}
       */

    }, {
      key: "isValid",
      get: function get() {
        return this.invalidReason === null;
      }
      /**
       * Returns an error code if this Interval is invalid, or null if the Interval is valid
       * @type {string}
       */

    }, {
      key: "invalidReason",
      get: function get() {
        return this.invalid ? this.invalid.reason : null;
      }
      /**
       * Returns an explanation of why this Interval became invalid, or null if the Interval is valid
       * @type {string}
       */

    }, {
      key: "invalidExplanation",
      get: function get() {
        return this.invalid ? this.invalid.explanation : null;
      }
    }], [{
      key: "invalid",
      value: function invalid(reason) {
        var explanation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        if (!reason) {
          throw new InvalidArgumentError("need to specify a reason the Interval is invalid");
        }

        var invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

        if (Settings.throwOnInvalid) {
          throw new InvalidIntervalError(invalid);
        } else {
          return new Interval({
            invalid: invalid
          });
        }
      }
      /**
       * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.
       * @param {DateTime|Date|Object} start
       * @param {DateTime|Date|Object} end
       * @return {Interval}
       */

    }, {
      key: "fromDateTimes",
      value: function fromDateTimes(start, end) {
        var builtStart = friendlyDateTime(start),
            builtEnd = friendlyDateTime(end);
        var validateError = validateStartEnd(builtStart, builtEnd);

        if (validateError == null) {
          return new Interval({
            start: builtStart,
            end: builtEnd
          });
        } else {
          return validateError;
        }
      }
      /**
       * Create an Interval from a start DateTime and a Duration to extend to.
       * @param {DateTime|Date|Object} start
       * @param {Duration|Object|number} duration - the length of the Interval.
       * @return {Interval}
       */

    }, {
      key: "after",
      value: function after(start, duration) {
        var dur = friendlyDuration(duration),
            dt = friendlyDateTime(start);
        return Interval.fromDateTimes(dt, dt.plus(dur));
      }
      /**
       * Create an Interval from an end DateTime and a Duration to extend backwards to.
       * @param {DateTime|Date|Object} end
       * @param {Duration|Object|number} duration - the length of the Interval.
       * @return {Interval}
       */

    }, {
      key: "before",
      value: function before(end, duration) {
        var dur = friendlyDuration(duration),
            dt = friendlyDateTime(end);
        return Interval.fromDateTimes(dt.minus(dur), dt);
      }
      /**
       * Create an Interval from an ISO 8601 string.
       * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.
       * @param {string} text - the ISO string to parse
       * @param {Object} [opts] - options to pass {@link DateTime.fromISO} and optionally {@link Duration.fromISO}
       * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
       * @return {Interval}
       */

    }, {
      key: "fromISO",
      value: function fromISO(text, opts) {
        var _split = (text || "").split("/", 2),
            _split2 = _slicedToArray(_split, 2),
            s = _split2[0],
            e = _split2[1];

        if (s && e) {
          var start = DateTime.fromISO(s, opts),
              end = DateTime.fromISO(e, opts);

          if (start.isValid && end.isValid) {
            return Interval.fromDateTimes(start, end);
          }

          if (start.isValid) {
            var dur = Duration.fromISO(e, opts);

            if (dur.isValid) {
              return Interval.after(start, dur);
            }
          } else if (end.isValid) {
            var _dur = Duration.fromISO(s, opts);

            if (_dur.isValid) {
              return Interval.before(end, _dur);
            }
          }
        }

        return Interval.invalid("unparsable", "the input \"".concat(text, "\" can't be parsed as ISO 8601"));
      }
      /**
       * Check if an object is an Interval. Works across context boundaries
       * @param {object} o
       * @return {boolean}
       */

    }, {
      key: "isInterval",
      value: function isInterval(o) {
        return o && o.isLuxonInterval || false;
      }
    }, {
      key: "merge",
      value: function merge(intervals) {
        var _intervals$sort$reduc = intervals.sort(function (a, b) {
          return a.s - b.s;
        }).reduce(function (_ref3, item) {
          var _ref4 = _slicedToArray(_ref3, 2),
              sofar = _ref4[0],
              current = _ref4[1];

          if (!current) {
            return [sofar, item];
          } else if (current.overlaps(item) || current.abutsStart(item)) {
            return [sofar, current.union(item)];
          } else {
            return [sofar.concat([current]), item];
          }
        }, [[], null]),
            _intervals$sort$reduc2 = _slicedToArray(_intervals$sort$reduc, 2),
            found = _intervals$sort$reduc2[0],
            final = _intervals$sort$reduc2[1];

        if (final) {
          found.push(final);
        }

        return found;
      }
      /**
       * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.
       * @param {[Interval]} intervals
       * @return {[Interval]}
       */

    }, {
      key: "xor",
      value: function xor(intervals) {
        var _Array$prototype;

        var start = null,
            currentCount = 0;

        var results = [],
            ends = intervals.map(function (i) {
          return [{
            time: i.s,
            type: "s"
          }, {
            time: i.e,
            type: "e"
          }];
        }),
            flattened = (_Array$prototype = Array.prototype).concat.apply(_Array$prototype, _toConsumableArray(ends)),
            arr = flattened.sort(function (a, b) {
          return a.time - b.time;
        });

        var _iterator = _createForOfIteratorHelper(arr),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var i = _step.value;
            currentCount += i.type === "s" ? 1 : -1;

            if (currentCount === 1) {
              start = i.time;
            } else {
              if (start && +start !== +i.time) {
                results.push(Interval.fromDateTimes(start, i.time));
              }

              start = null;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        return Interval.merge(results);
      }
    }]);

    return Interval;
  }();

  /**
   * The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.
   */

  var Info = /*#__PURE__*/function () {
    function Info() {
      _classCallCheck(this, Info);
    }

    _createClass(Info, null, [{
      key: "hasDST",

      /**
       * Return whether the specified zone contains a DST.
       * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.
       * @return {boolean}
       */
      value: function hasDST() {
        var zone = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Settings.defaultZone;
        var proto = DateTime.local().setZone(zone).set({
          month: 12
        });
        return !zone.universal && proto.offset !== proto.set({
          month: 6
        }).offset;
      }
      /**
       * Return whether the specified zone is a valid IANA specifier.
       * @param {string} zone - Zone to check
       * @return {boolean}
       */

    }, {
      key: "isValidIANAZone",
      value: function isValidIANAZone(zone) {
        return IANAZone.isValidSpecifier(zone) && IANAZone.isValidZone(zone);
      }
      /**
       * Converts the input into a {@link Zone} instance.
       *
       * * If `input` is already a Zone instance, it is returned unchanged.
       * * If `input` is a string containing a valid time zone name, a Zone instance
       *   with that name is returned.
       * * If `input` is a string that doesn't refer to a known time zone, a Zone
       *   instance with {@link Zone.isValid} == false is returned.
       * * If `input is a number, a Zone instance with the specified fixed offset
       *   in minutes is returned.
       * * If `input` is `null` or `undefined`, the default zone is returned.
       * @param {string|Zone|number} [input] - the value to be converted
       * @return {Zone}
       */

    }, {
      key: "normalizeZone",
      value: function normalizeZone$1(input) {
        return normalizeZone(input, Settings.defaultZone);
      }
      /**
       * Return an array of standalone month names.
       * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
       * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
       * @param {Object} opts - options
       * @param {string} [opts.locale] - the locale code
       * @param {string} [opts.numberingSystem=null] - the numbering system
       * @param {string} [opts.outputCalendar='gregory'] - the calendar
       * @example Info.months()[0] //=> 'January'
       * @example Info.months('short')[0] //=> 'Jan'
       * @example Info.months('numeric')[0] //=> '1'
       * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'
       * @example Info.months('numeric', { locale: 'ar' })[0] //=> 'Ù¡'
       * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'RabiÊ» I'
       * @return {[string]}
       */

    }, {
      key: "months",
      value: function months() {
        var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "long";

        var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
            _ref$locale = _ref.locale,
            locale = _ref$locale === void 0 ? null : _ref$locale,
            _ref$numberingSystem = _ref.numberingSystem,
            numberingSystem = _ref$numberingSystem === void 0 ? null : _ref$numberingSystem,
            _ref$outputCalendar = _ref.outputCalendar,
            outputCalendar = _ref$outputCalendar === void 0 ? "gregory" : _ref$outputCalendar;

        return Locale.create(locale, numberingSystem, outputCalendar).months(length);
      }
      /**
       * Return an array of format month names.
       * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that
       * changes the string.
       * See {@link months}
       * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
       * @param {Object} opts - options
       * @param {string} [opts.locale] - the locale code
       * @param {string} [opts.numberingSystem=null] - the numbering system
       * @param {string} [opts.outputCalendar='gregory'] - the calendar
       * @return {[string]}
       */

    }, {
      key: "monthsFormat",
      value: function monthsFormat() {
        var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "long";

        var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
            _ref2$locale = _ref2.locale,
            locale = _ref2$locale === void 0 ? null : _ref2$locale,
            _ref2$numberingSystem = _ref2.numberingSystem,
            numberingSystem = _ref2$numberingSystem === void 0 ? null : _ref2$numberingSystem,
            _ref2$outputCalendar = _ref2.outputCalendar,
            outputCalendar = _ref2$outputCalendar === void 0 ? "gregory" : _ref2$outputCalendar;

        return Locale.create(locale, numberingSystem, outputCalendar).months(length, true);
      }
      /**
       * Return an array of standalone week names.
       * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
       * @param {string} [length='long'] - the length of the month representation, such as "narrow", "short", "long".
       * @param {Object} opts - options
       * @param {string} [opts.locale] - the locale code
       * @param {string} [opts.numberingSystem=null] - the numbering system
       * @example Info.weekdays()[0] //=> 'Monday'
       * @example Info.weekdays('short')[0] //=> 'Mon'
       * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'
       * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'Ø§ÙØ§Ø«ÙÙÙ'
       * @return {[string]}
       */

    }, {
      key: "weekdays",
      value: function weekdays() {
        var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "long";

        var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
            _ref3$locale = _ref3.locale,
            locale = _ref3$locale === void 0 ? null : _ref3$locale,
            _ref3$numberingSystem = _ref3.numberingSystem,
            numberingSystem = _ref3$numberingSystem === void 0 ? null : _ref3$numberingSystem;

        return Locale.create(locale, numberingSystem, null).weekdays(length);
      }
      /**
       * Return an array of format week names.
       * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that
       * changes the string.
       * See {@link weekdays}
       * @param {string} [length='long'] - the length of the month representation, such as "narrow", "short", "long".
       * @param {Object} opts - options
       * @param {string} [opts.locale=null] - the locale code
       * @param {string} [opts.numberingSystem=null] - the numbering system
       * @return {[string]}
       */

    }, {
      key: "weekdaysFormat",
      value: function weekdaysFormat() {
        var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "long";

        var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
            _ref4$locale = _ref4.locale,
            locale = _ref4$locale === void 0 ? null : _ref4$locale,
            _ref4$numberingSystem = _ref4.numberingSystem,
            numberingSystem = _ref4$numberingSystem === void 0 ? null : _ref4$numberingSystem;

        return Locale.create(locale, numberingSystem, null).weekdays(length, true);
      }
      /**
       * Return an array of meridiems.
       * @param {Object} opts - options
       * @param {string} [opts.locale] - the locale code
       * @example Info.meridiems() //=> [ 'AM', 'PM' ]
       * @example Info.meridiems({ locale: 'my' }) //=> [ 'áá¶áááº', 'ááá±' ]
       * @return {[string]}
       */

    }, {
      key: "meridiems",
      value: function meridiems() {
        var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref5$locale = _ref5.locale,
            locale = _ref5$locale === void 0 ? null : _ref5$locale;

        return Locale.create(locale).meridiems();
      }
      /**
       * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.
       * @param {string} [length='short'] - the length of the era representation, such as "short" or "long".
       * @param {Object} opts - options
       * @param {string} [opts.locale] - the locale code
       * @example Info.eras() //=> [ 'BC', 'AD' ]
       * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]
       * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant JÃ©sus-Christ', 'aprÃ¨s JÃ©sus-Christ' ]
       * @return {[string]}
       */

    }, {
      key: "eras",
      value: function eras() {
        var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "short";

        var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
            _ref6$locale = _ref6.locale,
            locale = _ref6$locale === void 0 ? null : _ref6$locale;

        return Locale.create(locale, null, "gregory").eras(length);
      }
      /**
       * Return the set of available features in this environment.
       * Some features of Luxon are not available in all environments. For example, on older browsers, timezone support is not available. Use this function to figure out if that's the case.
       * Keys:
       * * `zones`: whether this environment supports IANA timezones
       * * `intlTokens`: whether this environment supports internationalized token-based formatting/parsing
       * * `intl`: whether this environment supports general internationalization
       * * `relative`: whether this environment supports relative time formatting
       * @example Info.features() //=> { intl: true, intlTokens: false, zones: true, relative: false }
       * @return {Object}
       */

    }, {
      key: "features",
      value: function features() {
        var intl = false,
            intlTokens = false,
            zones = false,
            relative = false;

        if (hasIntl()) {
          intl = true;
          intlTokens = hasFormatToParts();
          relative = hasRelative();

          try {
            zones = new Intl.DateTimeFormat("en", {
              timeZone: "America/New_York"
            }).resolvedOptions().timeZone === "America/New_York";
          } catch (e) {
            zones = false;
          }
        }

        return {
          intl: intl,
          intlTokens: intlTokens,
          zones: zones,
          relative: relative
        };
      }
    }]);

    return Info;
  }();

  function dayDiff(earlier, later) {
    var utcDayStart = function utcDayStart(dt) {
      return dt.toUTC(0, {
        keepLocalTime: true
      }).startOf("day").valueOf();
    },
        ms = utcDayStart(later) - utcDayStart(earlier);

    return Math.floor(Duration.fromMillis(ms).as("days"));
  }

  function highOrderDiffs(cursor, later, units) {
    var differs = [["years", function (a, b) {
      return b.year - a.year;
    }], ["months", function (a, b) {
      return b.month - a.month + (b.year - a.year) * 12;
    }], ["weeks", function (a, b) {
      var days = dayDiff(a, b);
      return (days - days % 7) / 7;
    }], ["days", dayDiff]];
    var results = {};
    var lowestOrder, highWater;

    for (var _i = 0, _differs = differs; _i < _differs.length; _i++) {
      var _differs$_i = _slicedToArray(_differs[_i], 2),
          unit = _differs$_i[0],
          differ = _differs$_i[1];

      if (units.indexOf(unit) >= 0) {
        lowestOrder = unit;
        var delta = differ(cursor, later);
        highWater = cursor.plus(_defineProperty({}, unit, delta));

        if (highWater > later) {
          cursor = cursor.plus(_defineProperty({}, unit, delta - 1));
          delta -= 1;
        } else {
          cursor = highWater;
        }

        results[unit] = delta;
      }
    }

    return [cursor, results, highWater, lowestOrder];
  }

  function _diff (earlier, later, units, opts) {
    var _highOrderDiffs = highOrderDiffs(earlier, later, units),
        _highOrderDiffs2 = _slicedToArray(_highOrderDiffs, 4),
        cursor = _highOrderDiffs2[0],
        results = _highOrderDiffs2[1],
        highWater = _highOrderDiffs2[2],
        lowestOrder = _highOrderDiffs2[3];

    var remainingMillis = later - cursor;
    var lowerOrderUnits = units.filter(function (u) {
      return ["hours", "minutes", "seconds", "milliseconds"].indexOf(u) >= 0;
    });

    if (lowerOrderUnits.length === 0) {
      if (highWater < later) {
        highWater = cursor.plus(_defineProperty({}, lowestOrder, 1));
      }

      if (highWater !== cursor) {
        results[lowestOrder] = (results[lowestOrder] || 0) + remainingMillis / (highWater - cursor);
      }
    }

    var duration = Duration.fromObject(Object.assign(results, opts));

    if (lowerOrderUnits.length > 0) {
      var _Duration$fromMillis;

      return (_Duration$fromMillis = Duration.fromMillis(remainingMillis, opts)).shiftTo.apply(_Duration$fromMillis, _toConsumableArray(lowerOrderUnits)).plus(duration);
    } else {
      return duration;
    }
  }

  // @@search logic
  fixRegexpWellKnownSymbolLogic('search', 1, function (SEARCH, nativeSearch, maybeCallNative) {
    return [
      // `String.prototype.search` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.search
      function search(regexp) {
        var O = requireObjectCoercible(this);
        var searcher = regexp == undefined ? undefined : regexp[SEARCH];
        return searcher !== undefined ? searcher.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
      },
      // `RegExp.prototype[@@search]` method
      // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
      function (regexp) {
        var res = maybeCallNative(nativeSearch, regexp, this);
        if (res.done) return res.value;

        var rx = anObject(regexp);
        var S = String(this);

        var previousLastIndex = rx.lastIndex;
        if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
        var result = regexpExecAbstract(rx, S);
        if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
        return result === null ? -1 : result.index;
      }
    ];
  });

  var numberingSystems = {
    arab: "[\u0660-\u0669]",
    arabext: "[\u06F0-\u06F9]",
    bali: "[\u1B50-\u1B59]",
    beng: "[\u09E6-\u09EF]",
    deva: "[\u0966-\u096F]",
    fullwide: "[\uFF10-\uFF19]",
    gujr: "[\u0AE6-\u0AEF]",
    hanidec: "[ã|ä¸|äº|ä¸|å|äº|å­|ä¸|å«|ä¹]",
    khmr: "[\u17E0-\u17E9]",
    knda: "[\u0CE6-\u0CEF]",
    laoo: "[\u0ED0-\u0ED9]",
    limb: "[\u1946-\u194F]",
    mlym: "[\u0D66-\u0D6F]",
    mong: "[\u1810-\u1819]",
    mymr: "[\u1040-\u1049]",
    orya: "[\u0B66-\u0B6F]",
    tamldec: "[\u0BE6-\u0BEF]",
    telu: "[\u0C66-\u0C6F]",
    thai: "[\u0E50-\u0E59]",
    tibt: "[\u0F20-\u0F29]",
    latn: "\\d"
  };
  var numberingSystemsUTF16 = {
    arab: [1632, 1641],
    arabext: [1776, 1785],
    bali: [6992, 7001],
    beng: [2534, 2543],
    deva: [2406, 2415],
    fullwide: [65296, 65303],
    gujr: [2790, 2799],
    khmr: [6112, 6121],
    knda: [3302, 3311],
    laoo: [3792, 3801],
    limb: [6470, 6479],
    mlym: [3430, 3439],
    mong: [6160, 6169],
    mymr: [4160, 4169],
    orya: [2918, 2927],
    tamldec: [3046, 3055],
    telu: [3174, 3183],
    thai: [3664, 3673],
    tibt: [3872, 3881]
  }; // eslint-disable-next-line

  var hanidecChars = numberingSystems.hanidec.replace(/[\[|\]]/g, "").split("");
  function parseDigits(str) {
    var value = parseInt(str, 10);

    if (isNaN(value)) {
      value = "";

      for (var i = 0; i < str.length; i++) {
        var code = str.charCodeAt(i);

        if (str[i].search(numberingSystems.hanidec) !== -1) {
          value += hanidecChars.indexOf(str[i]);
        } else {
          for (var key in numberingSystemsUTF16) {
            var _numberingSystemsUTF = _slicedToArray(numberingSystemsUTF16[key], 2),
                min = _numberingSystemsUTF[0],
                max = _numberingSystemsUTF[1];

            if (code >= min && code <= max) {
              value += code - min;
            }
          }
        }
      }

      return parseInt(value, 10);
    } else {
      return value;
    }
  }
  function digitRegex(_ref) {
    var numberingSystem = _ref.numberingSystem;
    var append = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
    return new RegExp("".concat(numberingSystems[numberingSystem || "latn"]).concat(append));
  }

  var MISSING_FTP = "missing Intl.DateTimeFormat.formatToParts support";

  function intUnit(regex) {
    var post = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (i) {
      return i;
    };
    return {
      regex: regex,
      deser: function deser(_ref) {
        var _ref2 = _slicedToArray(_ref, 1),
            s = _ref2[0];

        return post(parseDigits(s));
      }
    };
  }

  function fixListRegex(s) {
    // make dots optional and also make them literal
    return s.replace(/\./, "\\.?");
  }

  function stripInsensitivities(s) {
    return s.replace(/\./, "").toLowerCase();
  }

  function oneOf(strings, startIndex) {
    if (strings === null) {
      return null;
    } else {
      return {
        regex: RegExp(strings.map(fixListRegex).join("|")),
        deser: function deser(_ref3) {
          var _ref4 = _slicedToArray(_ref3, 1),
              s = _ref4[0];

          return strings.findIndex(function (i) {
            return stripInsensitivities(s) === stripInsensitivities(i);
          }) + startIndex;
        }
      };
    }
  }

  function offset(regex, groups) {
    return {
      regex: regex,
      deser: function deser(_ref5) {
        var _ref6 = _slicedToArray(_ref5, 3),
            h = _ref6[1],
            m = _ref6[2];

        return signedOffset(h, m);
      },
      groups: groups
    };
  }

  function simple(regex) {
    return {
      regex: regex,
      deser: function deser(_ref7) {
        var _ref8 = _slicedToArray(_ref7, 1),
            s = _ref8[0];

        return s;
      }
    };
  }

  function escapeToken(value) {
    // eslint-disable-next-line no-useless-escape
    return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
  }

  function unitForToken(token, loc) {
    var one = digitRegex(loc),
        two = digitRegex(loc, "{2}"),
        three = digitRegex(loc, "{3}"),
        four = digitRegex(loc, "{4}"),
        six = digitRegex(loc, "{6}"),
        oneOrTwo = digitRegex(loc, "{1,2}"),
        oneToThree = digitRegex(loc, "{1,3}"),
        oneToSix = digitRegex(loc, "{1,6}"),
        oneToNine = digitRegex(loc, "{1,9}"),
        twoToFour = digitRegex(loc, "{2,4}"),
        fourToSix = digitRegex(loc, "{4,6}"),
        literal = function literal(t) {
      return {
        regex: RegExp(escapeToken(t.val)),
        deser: function deser(_ref9) {
          var _ref10 = _slicedToArray(_ref9, 1),
              s = _ref10[0];

          return s;
        },
        literal: true
      };
    },
        unitate = function unitate(t) {
      if (token.literal) {
        return literal(t);
      }

      switch (t.val) {
        // era
        case "G":
          return oneOf(loc.eras("short", false), 0);

        case "GG":
          return oneOf(loc.eras("long", false), 0);
        // years

        case "y":
          return intUnit(oneToSix);

        case "yy":
          return intUnit(twoToFour, untruncateYear);

        case "yyyy":
          return intUnit(four);

        case "yyyyy":
          return intUnit(fourToSix);

        case "yyyyyy":
          return intUnit(six);
        // months

        case "M":
          return intUnit(oneOrTwo);

        case "MM":
          return intUnit(two);

        case "MMM":
          return oneOf(loc.months("short", true, false), 1);

        case "MMMM":
          return oneOf(loc.months("long", true, false), 1);

        case "L":
          return intUnit(oneOrTwo);

        case "LL":
          return intUnit(two);

        case "LLL":
          return oneOf(loc.months("short", false, false), 1);

        case "LLLL":
          return oneOf(loc.months("long", false, false), 1);
        // dates

        case "d":
          return intUnit(oneOrTwo);

        case "dd":
          return intUnit(two);
        // ordinals

        case "o":
          return intUnit(oneToThree);

        case "ooo":
          return intUnit(three);
        // time

        case "HH":
          return intUnit(two);

        case "H":
          return intUnit(oneOrTwo);

        case "hh":
          return intUnit(two);

        case "h":
          return intUnit(oneOrTwo);

        case "mm":
          return intUnit(two);

        case "m":
          return intUnit(oneOrTwo);

        case "q":
          return intUnit(oneOrTwo);

        case "qq":
          return intUnit(two);

        case "s":
          return intUnit(oneOrTwo);

        case "ss":
          return intUnit(two);

        case "S":
          return intUnit(oneToThree);

        case "SSS":
          return intUnit(three);

        case "u":
          return simple(oneToNine);
        // meridiem

        case "a":
          return oneOf(loc.meridiems(), 0);
        // weekYear (k)

        case "kkkk":
          return intUnit(four);

        case "kk":
          return intUnit(twoToFour, untruncateYear);
        // weekNumber (W)

        case "W":
          return intUnit(oneOrTwo);

        case "WW":
          return intUnit(two);
        // weekdays

        case "E":
        case "c":
          return intUnit(one);

        case "EEE":
          return oneOf(loc.weekdays("short", false, false), 1);

        case "EEEE":
          return oneOf(loc.weekdays("long", false, false), 1);

        case "ccc":
          return oneOf(loc.weekdays("short", true, false), 1);

        case "cccc":
          return oneOf(loc.weekdays("long", true, false), 1);
        // offset/zone

        case "Z":
        case "ZZ":
          return offset(new RegExp("([+-]".concat(oneOrTwo.source, ")(?::(").concat(two.source, "))?")), 2);

        case "ZZZ":
          return offset(new RegExp("([+-]".concat(oneOrTwo.source, ")(").concat(two.source, ")?")), 2);
        // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing
        // because we don't have any way to figure out what they are

        case "z":
          return simple(/[a-z_+-/]{1,256}?/i);

        default:
          return literal(t);
      }
    };

    var unit = unitate(token) || {
      invalidReason: MISSING_FTP
    };
    unit.token = token;
    return unit;
  }

  var partTypeStyleToTokenVal = {
    year: {
      "2-digit": "yy",
      numeric: "yyyyy"
    },
    month: {
      numeric: "M",
      "2-digit": "MM",
      short: "MMM",
      long: "MMMM"
    },
    day: {
      numeric: "d",
      "2-digit": "dd"
    },
    weekday: {
      short: "EEE",
      long: "EEEE"
    },
    dayperiod: "a",
    dayPeriod: "a",
    hour: {
      numeric: "h",
      "2-digit": "hh"
    },
    minute: {
      numeric: "m",
      "2-digit": "mm"
    },
    second: {
      numeric: "s",
      "2-digit": "ss"
    }
  };

  function tokenForPart(part, locale, formatOpts) {
    var type = part.type,
        value = part.value;

    if (type === "literal") {
      return {
        literal: true,
        val: value
      };
    }

    var style = formatOpts[type];
    var val = partTypeStyleToTokenVal[type];

    if (_typeof(val) === "object") {
      val = val[style];
    }

    if (val) {
      return {
        literal: false,
        val: val
      };
    }

    return undefined;
  }

  function buildRegex(units) {
    var re = units.map(function (u) {
      return u.regex;
    }).reduce(function (f, r) {
      return "".concat(f, "(").concat(r.source, ")");
    }, "");
    return ["^".concat(re, "$"), units];
  }

  function match$1(input, regex, handlers) {
    var matches = input.match(regex);

    if (matches) {
      var all = {};
      var matchIndex = 1;

      for (var i in handlers) {
        if (hasOwnProperty$2(handlers, i)) {
          var h = handlers[i],
              groups = h.groups ? h.groups + 1 : 1;

          if (!h.literal && h.token) {
            all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));
          }

          matchIndex += groups;
        }
      }

      return [matches, all];
    } else {
      return [matches, {}];
    }
  }

  function dateTimeFromMatches(matches) {
    var toField = function toField(token) {
      switch (token) {
        case "S":
          return "millisecond";

        case "s":
          return "second";

        case "m":
          return "minute";

        case "h":
        case "H":
          return "hour";

        case "d":
          return "day";

        case "o":
          return "ordinal";

        case "L":
        case "M":
          return "month";

        case "y":
          return "year";

        case "E":
        case "c":
          return "weekday";

        case "W":
          return "weekNumber";

        case "k":
          return "weekYear";

        case "q":
          return "quarter";

        default:
          return null;
      }
    };

    var zone;

    if (!isUndefined(matches.Z)) {
      zone = new FixedOffsetZone(matches.Z);
    } else if (!isUndefined(matches.z)) {
      zone = IANAZone.create(matches.z);
    } else {
      zone = null;
    }

    if (!isUndefined(matches.q)) {
      matches.M = (matches.q - 1) * 3 + 1;
    }

    if (!isUndefined(matches.h)) {
      if (matches.h < 12 && matches.a === 1) {
        matches.h += 12;
      } else if (matches.h === 12 && matches.a === 0) {
        matches.h = 0;
      }
    }

    if (matches.G === 0 && matches.y) {
      matches.y = -matches.y;
    }

    if (!isUndefined(matches.u)) {
      matches.S = parseMillis(matches.u);
    }

    var vals = Object.keys(matches).reduce(function (r, k) {
      var f = toField(k);

      if (f) {
        r[f] = matches[k];
      }

      return r;
    }, {});
    return [vals, zone];
  }

  var dummyDateTimeCache = null;

  function getDummyDateTime() {
    if (!dummyDateTimeCache) {
      dummyDateTimeCache = DateTime.fromMillis(1555555555555);
    }

    return dummyDateTimeCache;
  }

  function maybeExpandMacroToken(token, locale) {
    if (token.literal) {
      return token;
    }

    var formatOpts = Formatter.macroTokenToFormatOpts(token.val);

    if (!formatOpts) {
      return token;
    }

    var formatter = Formatter.create(locale, formatOpts);
    var parts = formatter.formatDateTimeParts(getDummyDateTime());
    var tokens = parts.map(function (p) {
      return tokenForPart(p, locale, formatOpts);
    });

    if (tokens.includes(undefined)) {
      return token;
    }

    return tokens;
  }

  function expandMacroTokens(tokens, locale) {
    var _Array$prototype;

    return (_Array$prototype = Array.prototype).concat.apply(_Array$prototype, _toConsumableArray(tokens.map(function (t) {
      return maybeExpandMacroToken(t, locale);
    })));
  }
  /**
   * @private
   */


  function explainFromTokens(locale, input, format) {
    var tokens = expandMacroTokens(Formatter.parseFormat(format), locale),
        units = tokens.map(function (t) {
      return unitForToken(t, locale);
    }),
        disqualifyingUnit = units.find(function (t) {
      return t.invalidReason;
    });

    if (disqualifyingUnit) {
      return {
        input: input,
        tokens: tokens,
        invalidReason: disqualifyingUnit.invalidReason
      };
    } else {
      var _buildRegex = buildRegex(units),
          _buildRegex2 = _slicedToArray(_buildRegex, 2),
          regexString = _buildRegex2[0],
          handlers = _buildRegex2[1],
          regex = RegExp(regexString, "i"),
          _match = match$1(input, regex, handlers),
          _match2 = _slicedToArray(_match, 2),
          rawMatches = _match2[0],
          matches = _match2[1],
          _ref11 = matches ? dateTimeFromMatches(matches) : [null, null],
          _ref12 = _slicedToArray(_ref11, 2),
          result = _ref12[0],
          zone = _ref12[1];

      if (hasOwnProperty$2(matches, "a") && hasOwnProperty$2(matches, "H")) {
        throw new ConflictingSpecificationError("Can't include meridiem when specifying 24-hour format");
      }

      return {
        input: input,
        tokens: tokens,
        regex: regex,
        rawMatches: rawMatches,
        matches: matches,
        result: result,
        zone: zone
      };
    }
  }
  function parseFromTokens(locale, input, format) {
    var _explainFromTokens = explainFromTokens(locale, input, format),
        result = _explainFromTokens.result,
        zone = _explainFromTokens.zone,
        invalidReason = _explainFromTokens.invalidReason;

    return [result, zone, invalidReason];
  }

  var nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],
      leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];

  function unitOutOfRange(unit, value) {
    return new Invalid("unit out of range", "you specified ".concat(value, " (of type ").concat(_typeof(value), ") as a ").concat(unit, ", which is invalid"));
  }

  function dayOfWeek(year, month, day) {
    var js = new Date(Date.UTC(year, month - 1, day)).getUTCDay();
    return js === 0 ? 7 : js;
  }

  function computeOrdinal(year, month, day) {
    return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];
  }

  function uncomputeOrdinal(year, ordinal) {
    var table = isLeapYear(year) ? leapLadder : nonLeapLadder,
        month0 = table.findIndex(function (i) {
      return i < ordinal;
    }),
        day = ordinal - table[month0];
    return {
      month: month0 + 1,
      day: day
    };
  }
  /**
   * @private
   */


  function gregorianToWeek(gregObj) {
    var year = gregObj.year,
        month = gregObj.month,
        day = gregObj.day,
        ordinal = computeOrdinal(year, month, day),
        weekday = dayOfWeek(year, month, day);
    var weekNumber = Math.floor((ordinal - weekday + 10) / 7),
        weekYear;

    if (weekNumber < 1) {
      weekYear = year - 1;
      weekNumber = weeksInWeekYear(weekYear);
    } else if (weekNumber > weeksInWeekYear(year)) {
      weekYear = year + 1;
      weekNumber = 1;
    } else {
      weekYear = year;
    }

    return Object.assign({
      weekYear: weekYear,
      weekNumber: weekNumber,
      weekday: weekday
    }, timeObject(gregObj));
  }
  function weekToGregorian(weekData) {
    var weekYear = weekData.weekYear,
        weekNumber = weekData.weekNumber,
        weekday = weekData.weekday,
        weekdayOfJan4 = dayOfWeek(weekYear, 1, 4),
        yearInDays = daysInYear(weekYear);
    var ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 3,
        year;

    if (ordinal < 1) {
      year = weekYear - 1;
      ordinal += daysInYear(year);
    } else if (ordinal > yearInDays) {
      year = weekYear + 1;
      ordinal -= daysInYear(weekYear);
    } else {
      year = weekYear;
    }

    var _uncomputeOrdinal = uncomputeOrdinal(year, ordinal),
        month = _uncomputeOrdinal.month,
        day = _uncomputeOrdinal.day;

    return Object.assign({
      year: year,
      month: month,
      day: day
    }, timeObject(weekData));
  }
  function gregorianToOrdinal(gregData) {
    var year = gregData.year,
        month = gregData.month,
        day = gregData.day,
        ordinal = computeOrdinal(year, month, day);
    return Object.assign({
      year: year,
      ordinal: ordinal
    }, timeObject(gregData));
  }
  function ordinalToGregorian(ordinalData) {
    var year = ordinalData.year,
        ordinal = ordinalData.ordinal,
        _uncomputeOrdinal2 = uncomputeOrdinal(year, ordinal),
        month = _uncomputeOrdinal2.month,
        day = _uncomputeOrdinal2.day;

    return Object.assign({
      year: year,
      month: month,
      day: day
    }, timeObject(ordinalData));
  }
  function hasInvalidWeekData(obj) {
    var validYear = isInteger(obj.weekYear),
        validWeek = integerBetween(obj.weekNumber, 1, weeksInWeekYear(obj.weekYear)),
        validWeekday = integerBetween(obj.weekday, 1, 7);

    if (!validYear) {
      return unitOutOfRange("weekYear", obj.weekYear);
    } else if (!validWeek) {
      return unitOutOfRange("week", obj.week);
    } else if (!validWeekday) {
      return unitOutOfRange("weekday", obj.weekday);
    } else return false;
  }
  function hasInvalidOrdinalData(obj) {
    var validYear = isInteger(obj.year),
        validOrdinal = integerBetween(obj.ordinal, 1, daysInYear(obj.year));

    if (!validYear) {
      return unitOutOfRange("year", obj.year);
    } else if (!validOrdinal) {
      return unitOutOfRange("ordinal", obj.ordinal);
    } else return false;
  }
  function hasInvalidGregorianData(obj) {
    var validYear = isInteger(obj.year),
        validMonth = integerBetween(obj.month, 1, 12),
        validDay = integerBetween(obj.day, 1, daysInMonth(obj.year, obj.month));

    if (!validYear) {
      return unitOutOfRange("year", obj.year);
    } else if (!validMonth) {
      return unitOutOfRange("month", obj.month);
    } else if (!validDay) {
      return unitOutOfRange("day", obj.day);
    } else return false;
  }
  function hasInvalidTimeData(obj) {
    var hour = obj.hour,
        minute = obj.minute,
        second = obj.second,
        millisecond = obj.millisecond;
    var validHour = integerBetween(hour, 0, 23) || hour === 24 && minute === 0 && second === 0 && millisecond === 0,
        validMinute = integerBetween(minute, 0, 59),
        validSecond = integerBetween(second, 0, 59),
        validMillisecond = integerBetween(millisecond, 0, 999);

    if (!validHour) {
      return unitOutOfRange("hour", hour);
    } else if (!validMinute) {
      return unitOutOfRange("minute", minute);
    } else if (!validSecond) {
      return unitOutOfRange("second", second);
    } else if (!validMillisecond) {
      return unitOutOfRange("millisecond", millisecond);
    } else return false;
  }

  var INVALID$2 = "Invalid DateTime";
  var MAX_DATE = 8.64e15;

  function unsupportedZone(zone) {
    return new Invalid("unsupported zone", "the zone \"".concat(zone.name, "\" is not supported"));
  } // we cache week data on the DT object and this intermediates the cache


  function possiblyCachedWeekData(dt) {
    if (dt.weekData === null) {
      dt.weekData = gregorianToWeek(dt.c);
    }

    return dt.weekData;
  } // clone really means, "make a new object with these modifications". all "setters" really use this
  // to create a new object while only changing some of the properties


  function clone$2(inst, alts) {
    var current = {
      ts: inst.ts,
      zone: inst.zone,
      c: inst.c,
      o: inst.o,
      loc: inst.loc,
      invalid: inst.invalid
    };
    return new DateTime(Object.assign({}, current, alts, {
      old: current
    }));
  } // find the right offset a given local time. The o input is our guess, which determines which
  // offset we'll pick in ambiguous cases (e.g. there are two 3 AMs b/c Fallback DST)


  function fixOffset(localTS, o, tz) {
    // Our UTC time is just a guess because our offset is just a guess
    var utcGuess = localTS - o * 60 * 1000; // Test whether the zone matches the offset for this ts

    var o2 = tz.offset(utcGuess); // If so, offset didn't change and we're done

    if (o === o2) {
      return [utcGuess, o];
    } // If not, change the ts by the difference in the offset


    utcGuess -= (o2 - o) * 60 * 1000; // If that gives us the local time we want, we're done

    var o3 = tz.offset(utcGuess);

    if (o2 === o3) {
      return [utcGuess, o2];
    } // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time


    return [localTS - Math.min(o2, o3) * 60 * 1000, Math.max(o2, o3)];
  } // convert an epoch timestamp into a calendar object with the given offset


  function tsToObj(ts, offset) {
    ts += offset * 60 * 1000;
    var d = new Date(ts);
    return {
      year: d.getUTCFullYear(),
      month: d.getUTCMonth() + 1,
      day: d.getUTCDate(),
      hour: d.getUTCHours(),
      minute: d.getUTCMinutes(),
      second: d.getUTCSeconds(),
      millisecond: d.getUTCMilliseconds()
    };
  } // convert a calendar object to a epoch timestamp


  function objToTS(obj, offset, zone) {
    return fixOffset(objToLocalTS(obj), offset, zone);
  } // create a new DT instance by adding a duration, adjusting for DSTs


  function adjustTime(inst, dur) {
    var _dur;

    var keys = Object.keys(dur.values);

    if (keys.indexOf("milliseconds") === -1) {
      keys.push("milliseconds");
    }

    dur = (_dur = dur).shiftTo.apply(_dur, _toConsumableArray(keys));
    var oPre = inst.o,
        year = inst.c.year + dur.years,
        month = inst.c.month + dur.months + dur.quarters * 3,
        c = Object.assign({}, inst.c, {
      year: year,
      month: month,
      day: Math.min(inst.c.day, daysInMonth(year, month)) + dur.days + dur.weeks * 7
    }),
        millisToAdd = Duration.fromObject({
      hours: dur.hours,
      minutes: dur.minutes,
      seconds: dur.seconds,
      milliseconds: dur.milliseconds
    }).as("milliseconds"),
        localTS = objToLocalTS(c);

    var _fixOffset = fixOffset(localTS, oPre, inst.zone),
        _fixOffset2 = _slicedToArray(_fixOffset, 2),
        ts = _fixOffset2[0],
        o = _fixOffset2[1];

    if (millisToAdd !== 0) {
      ts += millisToAdd; // that could have changed the offset by going over a DST, but we want to keep the ts the same

      o = inst.zone.offset(ts);
    }

    return {
      ts: ts,
      o: o
    };
  } // helper useful in turning the results of parsing into real dates
  // by handling the zone options


  function parseDataToDateTime(parsed, parsedZone, opts, format, text) {
    var setZone = opts.setZone,
        zone = opts.zone;

    if (parsed && Object.keys(parsed).length !== 0) {
      var interpretationZone = parsedZone || zone,
          inst = DateTime.fromObject(Object.assign(parsed, opts, {
        zone: interpretationZone,
        // setZone is a valid option in the calling methods, but not in fromObject
        setZone: undefined
      }));
      return setZone ? inst : inst.setZone(zone);
    } else {
      return DateTime.invalid(new Invalid("unparsable", "the input \"".concat(text, "\" can't be parsed as ").concat(format)));
    }
  } // if you want to output a technical format (e.g. RFC 2822), this helper
  // helps handle the details


  function toTechFormat(dt, format) {
    var allowZ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    return dt.isValid ? Formatter.create(Locale.create("en-US"), {
      allowZ: allowZ,
      forceSimple: true
    }).formatDateTimeFromString(dt, format) : null;
  } // technical time formats (e.g. the time part of ISO 8601), take some options
  // and this commonizes their handling


  function toTechTimeFormat(dt, _ref) {
    var _ref$suppressSeconds = _ref.suppressSeconds,
        suppressSeconds = _ref$suppressSeconds === void 0 ? false : _ref$suppressSeconds,
        _ref$suppressMillisec = _ref.suppressMilliseconds,
        suppressMilliseconds = _ref$suppressMillisec === void 0 ? false : _ref$suppressMillisec,
        includeOffset = _ref.includeOffset,
        _ref$includeZone = _ref.includeZone,
        includeZone = _ref$includeZone === void 0 ? false : _ref$includeZone,
        _ref$spaceZone = _ref.spaceZone,
        spaceZone = _ref$spaceZone === void 0 ? false : _ref$spaceZone,
        _ref$format = _ref.format,
        format = _ref$format === void 0 ? "extended" : _ref$format;
    var fmt = format === "basic" ? "HHmm" : "HH:mm";

    if (!suppressSeconds || dt.second !== 0 || dt.millisecond !== 0) {
      fmt += format === "basic" ? "ss" : ":ss";

      if (!suppressMilliseconds || dt.millisecond !== 0) {
        fmt += ".SSS";
      }
    }

    if ((includeZone || includeOffset) && spaceZone) {
      fmt += " ";
    }

    if (includeZone) {
      fmt += "z";
    } else if (includeOffset) {
      fmt += format === "basic" ? "ZZZ" : "ZZ";
    }

    return toTechFormat(dt, fmt);
  } // defaults for unspecified units in the supported calendars


  var defaultUnitValues = {
    month: 1,
    day: 1,
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0
  },
      defaultWeekUnitValues = {
    weekNumber: 1,
    weekday: 1,
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0
  },
      defaultOrdinalUnitValues = {
    ordinal: 1,
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0
  }; // Units in the supported calendars, sorted by bigness

  var orderedUnits$1 = ["year", "month", "day", "hour", "minute", "second", "millisecond"],
      orderedWeekUnits = ["weekYear", "weekNumber", "weekday", "hour", "minute", "second", "millisecond"],
      orderedOrdinalUnits = ["year", "ordinal", "hour", "minute", "second", "millisecond"]; // standardize case and plurality in units

  function normalizeUnit(unit) {
    var normalized = {
      year: "year",
      years: "year",
      month: "month",
      months: "month",
      day: "day",
      days: "day",
      hour: "hour",
      hours: "hour",
      minute: "minute",
      minutes: "minute",
      quarter: "quarter",
      quarters: "quarter",
      second: "second",
      seconds: "second",
      millisecond: "millisecond",
      milliseconds: "millisecond",
      weekday: "weekday",
      weekdays: "weekday",
      weeknumber: "weekNumber",
      weeksnumber: "weekNumber",
      weeknumbers: "weekNumber",
      weekyear: "weekYear",
      weekyears: "weekYear",
      ordinal: "ordinal"
    }[unit.toLowerCase()];
    if (!normalized) throw new InvalidUnitError(unit);
    return normalized;
  } // this is a dumbed down version of fromObject() that runs about 60% faster
  // but doesn't do any validation, makes a bunch of assumptions about what units
  // are present, and so on.


  function quickDT(obj, zone) {
    // assume we have the higher-order units
    var _iterator = _createForOfIteratorHelper(orderedUnits$1),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var u = _step.value;

        if (isUndefined(obj[u])) {
          obj[u] = defaultUnitValues[u];
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    var invalid = hasInvalidGregorianData(obj) || hasInvalidTimeData(obj);

    if (invalid) {
      return DateTime.invalid(invalid);
    }

    var tsNow = Settings.now(),
        offsetProvis = zone.offset(tsNow),
        _objToTS = objToTS(obj, offsetProvis, zone),
        _objToTS2 = _slicedToArray(_objToTS, 2),
        ts = _objToTS2[0],
        o = _objToTS2[1];

    return new DateTime({
      ts: ts,
      zone: zone,
      o: o
    });
  }

  function diffRelative(start, end, opts) {
    var round = isUndefined(opts.round) ? true : opts.round,
        format = function format(c, unit) {
      c = roundTo(c, round || opts.calendary ? 0 : 2, true);
      var formatter = end.loc.clone(opts).relFormatter(opts);
      return formatter.format(c, unit);
    },
        differ = function differ(unit) {
      if (opts.calendary) {
        if (!end.hasSame(start, unit)) {
          return end.startOf(unit).diff(start.startOf(unit), unit).get(unit);
        } else return 0;
      } else {
        return end.diff(start, unit).get(unit);
      }
    };

    if (opts.unit) {
      return format(differ(opts.unit), opts.unit);
    }

    var _iterator2 = _createForOfIteratorHelper(opts.units),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var unit = _step2.value;
        var count = differ(unit);

        if (Math.abs(count) >= 1) {
          return format(count, unit);
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    return format(0, opts.units[opts.units.length - 1]);
  }
  /**
   * A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.
   *
   * A DateTime comprises of:
   * * A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.
   * * A time zone. Each instance is considered in the context of a specific zone (by default the local system's zone).
   * * Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.
   *
   * Here is a brief overview of the most commonly used functionality it provides:
   *
   * * **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link local}, {@link utc}, and (most flexibly) {@link fromObject}. To create one from a standard string format, use {@link fromISO}, {@link fromHTTP}, and {@link fromRFC2822}. To create one from a custom string format, use {@link fromFormat}. To create one from a native JS date, use {@link fromJSDate}.
   * * **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link toObject}), use the {@link year}, {@link month},
   * {@link day}, {@link hour}, {@link minute}, {@link second}, {@link millisecond} accessors.
   * * **Week calendar**: For ISO week calendar attributes, see the {@link weekYear}, {@link weekNumber}, and {@link weekday} accessors.
   * * **Configuration** See the {@link locale} and {@link numberingSystem} accessors.
   * * **Transformation**: To transform the DateTime into other DateTimes, use {@link set}, {@link reconfigure}, {@link setZone}, {@link setLocale}, {@link plus}, {@link minus}, {@link endOf}, {@link startOf}, {@link toUTC}, and {@link toLocal}.
   * * **Output**: To convert the DateTime to other representations, use the {@link toRelative}, {@link toRelativeCalendar}, {@link toJSON}, {@link toISO}, {@link toHTTP}, {@link toObject}, {@link toRFC2822}, {@link toString}, {@link toLocaleString}, {@link toFormat}, {@link toMillis} and {@link toJSDate}.
   *
   * There's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.
   */


  var DateTime = /*#__PURE__*/function () {
    /**
     * @access private
     */
    function DateTime(config) {
      _classCallCheck(this, DateTime);

      var zone = config.zone || Settings.defaultZone;
      var invalid = config.invalid || (Number.isNaN(config.ts) ? new Invalid("invalid input") : null) || (!zone.isValid ? unsupportedZone(zone) : null);
      /**
       * @access private
       */

      this.ts = isUndefined(config.ts) ? Settings.now() : config.ts;
      var c = null,
          o = null;

      if (!invalid) {
        var unchanged = config.old && config.old.ts === this.ts && config.old.zone.equals(zone);

        if (unchanged) {
          var _ref2 = [config.old.c, config.old.o];
          c = _ref2[0];
          o = _ref2[1];
        } else {
          var ot = zone.offset(this.ts);
          c = tsToObj(this.ts, ot);
          invalid = Number.isNaN(c.year) ? new Invalid("invalid input") : null;
          c = invalid ? null : c;
          o = invalid ? null : ot;
        }
      }
      /**
       * @access private
       */


      this._zone = zone;
      /**
       * @access private
       */

      this.loc = config.loc || Locale.create();
      /**
       * @access private
       */

      this.invalid = invalid;
      /**
       * @access private
       */

      this.weekData = null;
      /**
       * @access private
       */

      this.c = c;
      /**
       * @access private
       */

      this.o = o;
      /**
       * @access private
       */

      this.isLuxonDateTime = true;
    } // CONSTRUCT

    /**
     * Create a local DateTime
     * @param {number} [year] - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used
     * @param {number} [month=1] - The month, 1-indexed
     * @param {number} [day=1] - The day of the month
     * @param {number} [hour=0] - The hour of the day, in 24-hour time
     * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
     * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
     * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
     * @example DateTime.local()                            //~> now
     * @example DateTime.local(2017)                        //~> 2017-01-01T00:00:00
     * @example DateTime.local(2017, 3)                     //~> 2017-03-01T00:00:00
     * @example DateTime.local(2017, 3, 12)                 //~> 2017-03-12T00:00:00
     * @example DateTime.local(2017, 3, 12, 5)              //~> 2017-03-12T05:00:00
     * @example DateTime.local(2017, 3, 12, 5, 45)          //~> 2017-03-12T05:45:00
     * @example DateTime.local(2017, 3, 12, 5, 45, 10)      //~> 2017-03-12T05:45:10
     * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765) //~> 2017-03-12T05:45:10.765
     * @return {DateTime}
     */


    _createClass(DateTime, [{
      key: "get",
      // INFO

      /**
       * Get the value of unit.
       * @param {string} unit - a unit such as 'minute' or 'day'
       * @example DateTime.local(2017, 7, 4).get('month'); //=> 7
       * @example DateTime.local(2017, 7, 4).get('day'); //=> 4
       * @return {number}
       */
      value: function get(unit) {
        return this[unit];
      }
      /**
       * Returns whether the DateTime is valid. Invalid DateTimes occur when:
       * * The DateTime was created from invalid calendar information, such as the 13th month or February 30
       * * The DateTime was created by an operation on another invalid date
       * @type {boolean}
       */

    }, {
      key: "resolvedLocaleOpts",

      /**
       * Returns the resolved Intl options for this DateTime.
       * This is useful in understanding the behavior of formatting methods
       * @param {Object} opts - the same options as toLocaleString
       * @return {Object}
       */
      value: function resolvedLocaleOpts() {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var _Formatter$create$res = Formatter.create(this.loc.clone(opts), opts).resolvedOptions(this),
            locale = _Formatter$create$res.locale,
            numberingSystem = _Formatter$create$res.numberingSystem,
            calendar = _Formatter$create$res.calendar;

        return {
          locale: locale,
          numberingSystem: numberingSystem,
          outputCalendar: calendar
        };
      } // TRANSFORM

      /**
       * "Set" the DateTime's zone to UTC. Returns a newly-constructed DateTime.
       *
       * Equivalent to {@link setZone}('utc')
       * @param {number} [offset=0] - optionally, an offset from UTC in minutes
       * @param {Object} [opts={}] - options to pass to `setZone()`
       * @return {DateTime}
       */

    }, {
      key: "toUTC",
      value: function toUTC() {
        var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return this.setZone(FixedOffsetZone.instance(offset), opts);
      }
      /**
       * "Set" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.
       *
       * Equivalent to `setZone('local')`
       * @return {DateTime}
       */

    }, {
      key: "toLocal",
      value: function toLocal() {
        return this.setZone(Settings.defaultZone);
      }
      /**
       * "Set" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.
       *
       * By default, the setter keeps the underlying time the same (as in, the same timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link plus}. You may wish to use {@link toLocal} and {@link toUTC} which provide simple convenience wrappers for commonly used zones.
       * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link Zone} class.
       * @param {Object} opts - options
       * @param {boolean} [opts.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.
       * @return {DateTime}
       */

    }, {
      key: "setZone",
      value: function setZone(zone) {
        var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
            _ref3$keepLocalTime = _ref3.keepLocalTime,
            keepLocalTime = _ref3$keepLocalTime === void 0 ? false : _ref3$keepLocalTime,
            _ref3$keepCalendarTim = _ref3.keepCalendarTime,
            keepCalendarTime = _ref3$keepCalendarTim === void 0 ? false : _ref3$keepCalendarTim;

        zone = normalizeZone(zone, Settings.defaultZone);

        if (zone.equals(this.zone)) {
          return this;
        } else if (!zone.isValid) {
          return DateTime.invalid(unsupportedZone(zone));
        } else {
          var newTS = this.ts;

          if (keepLocalTime || keepCalendarTime) {
            var offsetGuess = zone.offset(this.ts);
            var asObj = this.toObject();

            var _objToTS3 = objToTS(asObj, offsetGuess, zone);

            var _objToTS4 = _slicedToArray(_objToTS3, 1);

            newTS = _objToTS4[0];
          }

          return clone$2(this, {
            ts: newTS,
            zone: zone
          });
        }
      }
      /**
       * "Set" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.
       * @param {Object} properties - the properties to set
       * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })
       * @return {DateTime}
       */

    }, {
      key: "reconfigure",
      value: function reconfigure() {
        var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            locale = _ref4.locale,
            numberingSystem = _ref4.numberingSystem,
            outputCalendar = _ref4.outputCalendar;

        var loc = this.loc.clone({
          locale: locale,
          numberingSystem: numberingSystem,
          outputCalendar: outputCalendar
        });
        return clone$2(this, {
          loc: loc
        });
      }
      /**
       * "Set" the locale. Returns a newly-constructed DateTime.
       * Just a convenient alias for reconfigure({ locale })
       * @example DateTime.local(2017, 5, 25).setLocale('en-GB')
       * @return {DateTime}
       */

    }, {
      key: "setLocale",
      value: function setLocale(locale) {
        return this.reconfigure({
          locale: locale
        });
      }
      /**
       * "Set" the values of specified units. Returns a newly-constructed DateTime.
       * You can only set units with this method; for "setting" metadata, see {@link reconfigure} and {@link setZone}.
       * @param {Object} values - a mapping of units to numbers
       * @example dt.set({ year: 2017 })
       * @example dt.set({ hour: 8, minute: 30 })
       * @example dt.set({ weekday: 5 })
       * @example dt.set({ year: 2005, ordinal: 234 })
       * @return {DateTime}
       */

    }, {
      key: "set",
      value: function set(values) {
        if (!this.isValid) return this;
        var normalized = normalizeObject(values, normalizeUnit, []),
            settingWeekStuff = !isUndefined(normalized.weekYear) || !isUndefined(normalized.weekNumber) || !isUndefined(normalized.weekday);
        var mixed;

        if (settingWeekStuff) {
          mixed = weekToGregorian(Object.assign(gregorianToWeek(this.c), normalized));
        } else if (!isUndefined(normalized.ordinal)) {
          mixed = ordinalToGregorian(Object.assign(gregorianToOrdinal(this.c), normalized));
        } else {
          mixed = Object.assign(this.toObject(), normalized); // if we didn't set the day but we ended up on an overflow date,
          // use the last day of the right month

          if (isUndefined(normalized.day)) {
            mixed.day = Math.min(daysInMonth(mixed.year, mixed.month), mixed.day);
          }
        }

        var _objToTS5 = objToTS(mixed, this.o, this.zone),
            _objToTS6 = _slicedToArray(_objToTS5, 2),
            ts = _objToTS6[0],
            o = _objToTS6[1];

        return clone$2(this, {
          ts: ts,
          o: o
        });
      }
      /**
       * Add a period of time to this DateTime and return the resulting DateTime
       *
       * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.
       * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
       * @example DateTime.local().plus(123) //~> in 123 milliseconds
       * @example DateTime.local().plus({ minutes: 15 }) //~> in 15 minutes
       * @example DateTime.local().plus({ days: 1 }) //~> this time tomorrow
       * @example DateTime.local().plus({ days: -1 }) //~> this time yesterday
       * @example DateTime.local().plus({ hours: 3, minutes: 13 }) //~> in 3 hr, 13 min
       * @example DateTime.local().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 3 hr, 13 min
       * @return {DateTime}
       */

    }, {
      key: "plus",
      value: function plus(duration) {
        if (!this.isValid) return this;
        var dur = friendlyDuration(duration);
        return clone$2(this, adjustTime(this, dur));
      }
      /**
       * Subtract a period of time to this DateTime and return the resulting DateTime
       * See {@link plus}
       * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
       @return {DateTime}
      */

    }, {
      key: "minus",
      value: function minus(duration) {
        if (!this.isValid) return this;
        var dur = friendlyDuration(duration).negate();
        return clone$2(this, adjustTime(this, dur));
      }
      /**
       * "Set" this DateTime to the beginning of a unit of time.
       * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
       * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'
       * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'
       * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'
       * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'
       * @return {DateTime}
       */

    }, {
      key: "startOf",
      value: function startOf(unit) {
        if (!this.isValid) return this;
        var o = {},
            normalizedUnit = Duration.normalizeUnit(unit);

        switch (normalizedUnit) {
          case "years":
            o.month = 1;
          // falls through

          case "quarters":
          case "months":
            o.day = 1;
          // falls through

          case "weeks":
          case "days":
            o.hour = 0;
          // falls through

          case "hours":
            o.minute = 0;
          // falls through

          case "minutes":
            o.second = 0;
          // falls through

          case "seconds":
            o.millisecond = 0;
            break;
          // no default, invalid units throw in normalizeUnit()
        }

        if (normalizedUnit === "weeks") {
          o.weekday = 1;
        }

        if (normalizedUnit === "quarters") {
          var q = Math.ceil(this.month / 3);
          o.month = (q - 1) * 3 + 1;
        }

        return this.set(o);
      }
      /**
       * "Set" this DateTime to the end (meaning the last millisecond) of a unit of time
       * @param {string} unit - The unit to go to the end of. Can be 'year', 'month', 'day', 'hour', 'minute', 'second', or 'millisecond'.
       * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'
       * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'
       * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'
       * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'
       * @return {DateTime}
       */

    }, {
      key: "endOf",
      value: function endOf(unit) {
        return this.isValid ? this.plus(_defineProperty({}, unit, 1)).startOf(unit).minus(1) : this;
      } // OUTPUT

      /**
       * Returns a string representation of this DateTime formatted according to the specified format string.
       * **You may not want this.** See {@link toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/docs/manual/formatting.html#table-of-tokens).
       * Defaults to en-US if no locale has been specified, regardless of the system's locale.
       * @see https://moment.github.io/luxon/docs/manual/formatting.html#table-of-tokens
       * @param {string} fmt - the format string
       * @param {Object} opts - opts to override the configuration options
       * @example DateTime.local().toFormat('yyyy LLL dd') //=> '2017 Apr 22'
       * @example DateTime.local().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'
       * @example DateTime.local().toFormat('yyyy LLL dd', { locale: "fr" }) //=> '2017 avr. 22'
       * @example DateTime.local().toFormat("HH 'hours and' mm 'minutes'") //=> '20 hours and 55 minutes'
       * @return {string}
       */

    }, {
      key: "toFormat",
      value: function toFormat(fmt) {
        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return this.isValid ? Formatter.create(this.loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt) : INVALID$2;
      }
      /**
       * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.
       * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation
       * of the DateTime in the assigned locale.
       * Defaults to the system's locale if no locale has been specified
       * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
       * @param opts {Object} - Intl.DateTimeFormat constructor options and configuration options
       * @example DateTime.local().toLocaleString(); //=> 4/20/2017
       * @example DateTime.local().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'
       * @example DateTime.local().toLocaleString({ locale: 'en-gb' }); //=> '20/04/2017'
       * @example DateTime.local().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'
       * @example DateTime.local().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'
       * @example DateTime.local().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'
       * @example DateTime.local().toLocaleString({ weekday: 'long', month: 'long', day: '2-digit' }); //=> 'Thursday, April 20'
       * @example DateTime.local().toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> 'Thu, Apr 20, 11:27 AM'
       * @example DateTime.local().toLocaleString({ hour: '2-digit', minute: '2-digit', hour12: false }); //=> '11:32'
       * @return {string}
       */

    }, {
      key: "toLocaleString",
      value: function toLocaleString() {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DATE_SHORT;
        return this.isValid ? Formatter.create(this.loc.clone(opts), opts).formatDateTime(this) : INVALID$2;
      }
      /**
       * Returns an array of format "parts", meaning individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.
       * Defaults to the system's locale if no locale has been specified
       * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts
       * @param opts {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.
       * @example DateTime.local().toLocaleParts(); //=> [
       *                                   //=>   { type: 'day', value: '25' },
       *                                   //=>   { type: 'literal', value: '/' },
       *                                   //=>   { type: 'month', value: '05' },
       *                                   //=>   { type: 'literal', value: '/' },
       *                                   //=>   { type: 'year', value: '1982' }
       *                                   //=> ]
       */

    }, {
      key: "toLocaleParts",
      value: function toLocaleParts() {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return this.isValid ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this) : [];
      }
      /**
       * Returns an ISO 8601-compliant string representation of this DateTime
       * @param {Object} opts - options
       * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
       * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
       * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
       * @param {string} [opts.format='extended'] - choose between the basic and extended format
       * @example DateTime.utc(1982, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'
       * @example DateTime.local().toISO() //=> '2017-04-22T20:47:05.335-04:00'
       * @example DateTime.local().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'
       * @example DateTime.local().toISO({ format: 'basic' }) //=> '20170422T204705.335-0400'
       * @return {string}
       */

    }, {
      key: "toISO",
      value: function toISO() {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        if (!this.isValid) {
          return null;
        }

        return "".concat(this.toISODate(opts), "T").concat(this.toISOTime(opts));
      }
      /**
       * Returns an ISO 8601-compliant string representation of this DateTime's date component
       * @param {Object} opts - options
       * @param {string} [opts.format='extended'] - choose between the basic and extended format
       * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'
       * @example DateTime.utc(1982, 5, 25).toISODate({ format: 'basic' }) //=> '19820525'
       * @return {string}
       */

    }, {
      key: "toISODate",
      value: function toISODate() {
        var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref5$format = _ref5.format,
            format = _ref5$format === void 0 ? "extended" : _ref5$format;

        var fmt = format === "basic" ? "yyyyMMdd" : "yyyy-MM-dd";

        if (this.year > 9999) {
          fmt = "+" + fmt;
        }

        return toTechFormat(this, fmt);
      }
      /**
       * Returns an ISO 8601-compliant string representation of this DateTime's week date
       * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'
       * @return {string}
       */

    }, {
      key: "toISOWeekDate",
      value: function toISOWeekDate() {
        return toTechFormat(this, "kkkk-'W'WW-c");
      }
      /**
       * Returns an ISO 8601-compliant string representation of this DateTime's time component
       * @param {Object} opts - options
       * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
       * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
       * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
       * @param {string} [opts.format='extended'] - choose between the basic and extended format
       * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime() //=> '07:34:19.361Z'
       * @example DateTime.utc().set({ hour: 7, minute: 34, seconds: 0, milliseconds: 0 }).toISOTime({ suppressSeconds: true }) //=> '07:34Z'
       * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ format: 'basic' }) //=> '073419.361Z'
       * @return {string}
       */

    }, {
      key: "toISOTime",
      value: function toISOTime() {
        var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref6$suppressMillise = _ref6.suppressMilliseconds,
            suppressMilliseconds = _ref6$suppressMillise === void 0 ? false : _ref6$suppressMillise,
            _ref6$suppressSeconds = _ref6.suppressSeconds,
            suppressSeconds = _ref6$suppressSeconds === void 0 ? false : _ref6$suppressSeconds,
            _ref6$includeOffset = _ref6.includeOffset,
            includeOffset = _ref6$includeOffset === void 0 ? true : _ref6$includeOffset,
            _ref6$format = _ref6.format,
            format = _ref6$format === void 0 ? "extended" : _ref6$format;

        return toTechTimeFormat(this, {
          suppressSeconds: suppressSeconds,
          suppressMilliseconds: suppressMilliseconds,
          includeOffset: includeOffset,
          format: format
        });
      }
      /**
       * Returns an RFC 2822-compatible string representation of this DateTime, always in UTC
       * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'
       * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'
       * @return {string}
       */

    }, {
      key: "toRFC2822",
      value: function toRFC2822() {
        return toTechFormat(this, "EEE, dd LLL yyyy HH:mm:ss ZZZ", false);
      }
      /**
       * Returns a string representation of this DateTime appropriate for use in HTTP headers.
       * Specifically, the string conforms to RFC 1123.
       * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
       * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'
       * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'
       * @return {string}
       */

    }, {
      key: "toHTTP",
      value: function toHTTP() {
        return toTechFormat(this.toUTC(), "EEE, dd LLL yyyy HH:mm:ss 'GMT'");
      }
      /**
       * Returns a string representation of this DateTime appropriate for use in SQL Date
       * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'
       * @return {string}
       */

    }, {
      key: "toSQLDate",
      value: function toSQLDate() {
        return toTechFormat(this, "yyyy-MM-dd");
      }
      /**
       * Returns a string representation of this DateTime appropriate for use in SQL Time
       * @param {Object} opts - options
       * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
       * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
       * @example DateTime.utc().toSQL() //=> '05:15:16.345'
       * @example DateTime.local().toSQL() //=> '05:15:16.345 -04:00'
       * @example DateTime.local().toSQL({ includeOffset: false }) //=> '05:15:16.345'
       * @example DateTime.local().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'
       * @return {string}
       */

    }, {
      key: "toSQLTime",
      value: function toSQLTime() {
        var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref7$includeOffset = _ref7.includeOffset,
            includeOffset = _ref7$includeOffset === void 0 ? true : _ref7$includeOffset,
            _ref7$includeZone = _ref7.includeZone,
            includeZone = _ref7$includeZone === void 0 ? false : _ref7$includeZone;

        return toTechTimeFormat(this, {
          includeOffset: includeOffset,
          includeZone: includeZone,
          spaceZone: true
        });
      }
      /**
       * Returns a string representation of this DateTime appropriate for use in SQL DateTime
       * @param {Object} opts - options
       * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
       * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
       * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'
       * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'
       * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'
       * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'
       * @return {string}
       */

    }, {
      key: "toSQL",
      value: function toSQL() {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        if (!this.isValid) {
          return null;
        }

        return "".concat(this.toSQLDate(), " ").concat(this.toSQLTime(opts));
      }
      /**
       * Returns a string representation of this DateTime appropriate for debugging
       * @return {string}
       */

    }, {
      key: "toString",
      value: function toString() {
        return this.isValid ? this.toISO() : INVALID$2;
      }
      /**
       * Returns the epoch milliseconds of this DateTime. Alias of {@link toMillis}
       * @return {number}
       */

    }, {
      key: "valueOf",
      value: function valueOf() {
        return this.toMillis();
      }
      /**
       * Returns the epoch milliseconds of this DateTime.
       * @return {number}
       */

    }, {
      key: "toMillis",
      value: function toMillis() {
        return this.isValid ? this.ts : NaN;
      }
      /**
       * Returns the epoch seconds of this DateTime.
       * @return {number}
       */

    }, {
      key: "toSeconds",
      value: function toSeconds() {
        return this.isValid ? this.ts / 1000 : NaN;
      }
      /**
       * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.
       * @return {string}
       */

    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.toISO();
      }
      /**
       * Returns a BSON serializable equivalent to this DateTime.
       * @return {Date}
       */

    }, {
      key: "toBSON",
      value: function toBSON() {
        return this.toJSDate();
      }
      /**
       * Returns a Javascript object with this DateTime's year, month, day, and so on.
       * @param opts - options for generating the object
       * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output
       * @example DateTime.local().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }
       * @return {Object}
       */

    }, {
      key: "toObject",
      value: function toObject() {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        if (!this.isValid) return {};
        var base = Object.assign({}, this.c);

        if (opts.includeConfig) {
          base.outputCalendar = this.outputCalendar;
          base.numberingSystem = this.loc.numberingSystem;
          base.locale = this.loc.locale;
        }

        return base;
      }
      /**
       * Returns a Javascript Date equivalent to this DateTime.
       * @return {Date}
       */

    }, {
      key: "toJSDate",
      value: function toJSDate() {
        return new Date(this.isValid ? this.ts : NaN);
      } // COMPARE

      /**
       * Return the difference between two DateTimes as a Duration.
       * @param {DateTime} otherDateTime - the DateTime to compare this one to
       * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.
       * @param {Object} opts - options that affect the creation of the Duration
       * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
       * @example
       * var i1 = DateTime.fromISO('1982-05-25T09:45'),
       *     i2 = DateTime.fromISO('1983-10-14T10:30');
       * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }
       * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }
       * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }
       * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }
       * @return {Duration}
       */

    }, {
      key: "diff",
      value: function diff(otherDateTime) {
        var unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "milliseconds";
        var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        if (!this.isValid || !otherDateTime.isValid) {
          return Duration.invalid(this.invalid || otherDateTime.invalid, "created by diffing an invalid DateTime");
        }

        var durOpts = Object.assign({
          locale: this.locale,
          numberingSystem: this.numberingSystem
        }, opts);

        var units = maybeArray(unit).map(Duration.normalizeUnit),
            otherIsLater = otherDateTime.valueOf() > this.valueOf(),
            earlier = otherIsLater ? this : otherDateTime,
            later = otherIsLater ? otherDateTime : this,
            diffed = _diff(earlier, later, units, durOpts);

        return otherIsLater ? diffed.negate() : diffed;
      }
      /**
       * Return the difference between this DateTime and right now.
       * See {@link diff}
       * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration
       * @param {Object} opts - options that affect the creation of the Duration
       * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
       * @return {Duration}
       */

    }, {
      key: "diffNow",
      value: function diffNow() {
        var unit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "milliseconds";
        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return this.diff(DateTime.local(), unit, opts);
      }
      /**
       * Return an Interval spanning between this DateTime and another DateTime
       * @param {DateTime} otherDateTime - the other end point of the Interval
       * @return {Interval}
       */

    }, {
      key: "until",
      value: function until(otherDateTime) {
        return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;
      }
      /**
       * Return whether this DateTime is in the same unit of time as another DateTime
       * @param {DateTime} otherDateTime - the other DateTime
       * @param {string} unit - the unit of time to check sameness on
       * @example DateTime.local().hasSame(otherDT, 'day'); //~> true if both the same calendar day
       * @return {boolean}
       */

    }, {
      key: "hasSame",
      value: function hasSame(otherDateTime, unit) {
        if (!this.isValid) return false;

        if (unit === "millisecond") {
          return this.valueOf() === otherDateTime.valueOf();
        } else {
          var inputMs = otherDateTime.valueOf();
          return this.startOf(unit) <= inputMs && inputMs <= this.endOf(unit);
        }
      }
      /**
       * Equality check
       * Two DateTimes are equal iff they represent the same millisecond, have the same zone and location, and are both valid.
       * To compare just the millisecond values, use `+dt1 === +dt2`.
       * @param {DateTime} other - the other DateTime
       * @return {boolean}
       */

    }, {
      key: "equals",
      value: function equals(other) {
        return this.isValid && other.isValid && this.valueOf() === other.valueOf() && this.zone.equals(other.zone) && this.loc.equals(other.loc);
      }
      /**
       * Returns a string representation of a this time relative to now, such as "in two days". Can only internationalize if your
       * platform supports Intl.RelativeTimeFormat. Rounds down by default.
       * @param {Object} options - options that affect the output
       * @param {DateTime} [options.base=DateTime.local()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
       * @param {string} [options.style="long"] - the style of units, must be "long", "short", or "narrow"
       * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of "years", "quarters", "months", "weeks", "days", "hours", "minutes", or "seconds"
       * @param {boolean} [options.round=true] - whether to round the numbers in the output.
       * @param {boolean} [options.padding=0] - padding in milliseconds. This allows you to round up the result if it fits inside the threshold. Don't use in combination with {round: false} because the decimal output will include the padding.
       * @param {string} options.locale - override the locale of this DateTime
       * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
       * @example DateTime.local().plus({ days: 1 }).toRelative() //=> "in 1 day"
       * @example DateTime.local().setLocale("es").toRelative({ days: 1 }) //=> "dentro de 1 dÃ­a"
       * @example DateTime.local().plus({ days: 1 }).toRelative({ locale: "fr" }) //=> "dans 23 heures"
       * @example DateTime.local().minus({ days: 2 }).toRelative() //=> "2 days ago"
       * @example DateTime.local().minus({ days: 2 }).toRelative({ unit: "hours" }) //=> "48 hours ago"
       * @example DateTime.local().minus({ hours: 36 }).toRelative({ round: false }) //=> "1.5 days ago"
       */

    }, {
      key: "toRelative",
      value: function toRelative() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        if (!this.isValid) return null;
        var base = options.base || DateTime.fromObject({
          zone: this.zone
        }),
            padding = options.padding ? this < base ? -options.padding : options.padding : 0;
        return diffRelative(base, this.plus(padding), Object.assign(options, {
          numeric: "always",
          units: ["years", "months", "days", "hours", "minutes", "seconds"]
        }));
      }
      /**
       * Returns a string representation of this date relative to today, such as "yesterday" or "next month".
       * Only internationalizes on platforms that supports Intl.RelativeTimeFormat.
       * @param {Object} options - options that affect the output
       * @param {DateTime} [options.base=DateTime.local()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
       * @param {string} options.locale - override the locale of this DateTime
       * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of "years", "quarters", "months", "weeks", or "days"
       * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
       * @example DateTime.local().plus({ days: 1 }).toRelativeCalendar() //=> "tomorrow"
       * @example DateTime.local().setLocale("es").plus({ days: 1 }).toRelative() //=> ""maÃ±ana"
       * @example DateTime.local().plus({ days: 1 }).toRelativeCalendar({ locale: "fr" }) //=> "demain"
       * @example DateTime.local().minus({ days: 2 }).toRelativeCalendar() //=> "2 days ago"
       */

    }, {
      key: "toRelativeCalendar",
      value: function toRelativeCalendar() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        if (!this.isValid) return null;
        return diffRelative(options.base || DateTime.fromObject({
          zone: this.zone
        }), this, Object.assign(options, {
          numeric: "auto",
          units: ["years", "months", "days"],
          calendary: true
        }));
      }
      /**
       * Return the min of several date times
       * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum
       * @return {DateTime} the min DateTime, or undefined if called with no argument
       */

    }, {
      key: "isValid",
      get: function get() {
        return this.invalid === null;
      }
      /**
       * Returns an error code if this DateTime is invalid, or null if the DateTime is valid
       * @type {string}
       */

    }, {
      key: "invalidReason",
      get: function get() {
        return this.invalid ? this.invalid.reason : null;
      }
      /**
       * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid
       * @type {string}
       */

    }, {
      key: "invalidExplanation",
      get: function get() {
        return this.invalid ? this.invalid.explanation : null;
      }
      /**
       * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime
       *
       * @type {string}
       */

    }, {
      key: "locale",
      get: function get() {
        return this.isValid ? this.loc.locale : null;
      }
      /**
       * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime
       *
       * @type {string}
       */

    }, {
      key: "numberingSystem",
      get: function get() {
        return this.isValid ? this.loc.numberingSystem : null;
      }
      /**
       * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime
       *
       * @type {string}
       */

    }, {
      key: "outputCalendar",
      get: function get() {
        return this.isValid ? this.loc.outputCalendar : null;
      }
      /**
       * Get the time zone associated with this DateTime.
       * @type {Zone}
       */

    }, {
      key: "zone",
      get: function get() {
        return this._zone;
      }
      /**
       * Get the name of the time zone.
       * @type {string}
       */

    }, {
      key: "zoneName",
      get: function get() {
        return this.isValid ? this.zone.name : null;
      }
      /**
       * Get the year
       * @example DateTime.local(2017, 5, 25).year //=> 2017
       * @type {number}
       */

    }, {
      key: "year",
      get: function get() {
        return this.isValid ? this.c.year : NaN;
      }
      /**
       * Get the quarter
       * @example DateTime.local(2017, 5, 25).quarter //=> 2
       * @type {number}
       */

    }, {
      key: "quarter",
      get: function get() {
        return this.isValid ? Math.ceil(this.c.month / 3) : NaN;
      }
      /**
       * Get the month (1-12).
       * @example DateTime.local(2017, 5, 25).month //=> 5
       * @type {number}
       */

    }, {
      key: "month",
      get: function get() {
        return this.isValid ? this.c.month : NaN;
      }
      /**
       * Get the day of the month (1-30ish).
       * @example DateTime.local(2017, 5, 25).day //=> 25
       * @type {number}
       */

    }, {
      key: "day",
      get: function get() {
        return this.isValid ? this.c.day : NaN;
      }
      /**
       * Get the hour of the day (0-23).
       * @example DateTime.local(2017, 5, 25, 9).hour //=> 9
       * @type {number}
       */

    }, {
      key: "hour",
      get: function get() {
        return this.isValid ? this.c.hour : NaN;
      }
      /**
       * Get the minute of the hour (0-59).
       * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30
       * @type {number}
       */

    }, {
      key: "minute",
      get: function get() {
        return this.isValid ? this.c.minute : NaN;
      }
      /**
       * Get the second of the minute (0-59).
       * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52
       * @type {number}
       */

    }, {
      key: "second",
      get: function get() {
        return this.isValid ? this.c.second : NaN;
      }
      /**
       * Get the millisecond of the second (0-999).
       * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654
       * @type {number}
       */

    }, {
      key: "millisecond",
      get: function get() {
        return this.isValid ? this.c.millisecond : NaN;
      }
      /**
       * Get the week year
       * @see https://en.wikipedia.org/wiki/ISO_week_date
       * @example DateTime.local(2014, 11, 31).weekYear //=> 2015
       * @type {number}
       */

    }, {
      key: "weekYear",
      get: function get() {
        return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;
      }
      /**
       * Get the week number of the week year (1-52ish).
       * @see https://en.wikipedia.org/wiki/ISO_week_date
       * @example DateTime.local(2017, 5, 25).weekNumber //=> 21
       * @type {number}
       */

    }, {
      key: "weekNumber",
      get: function get() {
        return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;
      }
      /**
       * Get the day of the week.
       * 1 is Monday and 7 is Sunday
       * @see https://en.wikipedia.org/wiki/ISO_week_date
       * @example DateTime.local(2014, 11, 31).weekday //=> 4
       * @type {number}
       */

    }, {
      key: "weekday",
      get: function get() {
        return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;
      }
      /**
       * Get the ordinal (meaning the day of the year)
       * @example DateTime.local(2017, 5, 25).ordinal //=> 145
       * @type {number|DateTime}
       */

    }, {
      key: "ordinal",
      get: function get() {
        return this.isValid ? gregorianToOrdinal(this.c).ordinal : NaN;
      }
      /**
       * Get the human readable short month name, such as 'Oct'.
       * Defaults to the system's locale if no locale has been specified
       * @example DateTime.local(2017, 10, 30).monthShort //=> Oct
       * @type {string}
       */

    }, {
      key: "monthShort",
      get: function get() {
        return this.isValid ? Info.months("short", {
          locale: this.locale
        })[this.month - 1] : null;
      }
      /**
       * Get the human readable long month name, such as 'October'.
       * Defaults to the system's locale if no locale has been specified
       * @example DateTime.local(2017, 10, 30).monthLong //=> October
       * @type {string}
       */

    }, {
      key: "monthLong",
      get: function get() {
        return this.isValid ? Info.months("long", {
          locale: this.locale
        })[this.month - 1] : null;
      }
      /**
       * Get the human readable short weekday, such as 'Mon'.
       * Defaults to the system's locale if no locale has been specified
       * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon
       * @type {string}
       */

    }, {
      key: "weekdayShort",
      get: function get() {
        return this.isValid ? Info.weekdays("short", {
          locale: this.locale
        })[this.weekday - 1] : null;
      }
      /**
       * Get the human readable long weekday, such as 'Monday'.
       * Defaults to the system's locale if no locale has been specified
       * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday
       * @type {string}
       */

    }, {
      key: "weekdayLong",
      get: function get() {
        return this.isValid ? Info.weekdays("long", {
          locale: this.locale
        })[this.weekday - 1] : null;
      }
      /**
       * Get the UTC offset of this DateTime in minutes
       * @example DateTime.local().offset //=> -240
       * @example DateTime.utc().offset //=> 0
       * @type {number}
       */

    }, {
      key: "offset",
      get: function get() {
        return this.isValid ? +this.o : NaN;
      }
      /**
       * Get the short human name for the zone's current offset, for example "EST" or "EDT".
       * Defaults to the system's locale if no locale has been specified
       * @type {string}
       */

    }, {
      key: "offsetNameShort",
      get: function get() {
        if (this.isValid) {
          return this.zone.offsetName(this.ts, {
            format: "short",
            locale: this.locale
          });
        } else {
          return null;
        }
      }
      /**
       * Get the long human name for the zone's current offset, for example "Eastern Standard Time" or "Eastern Daylight Time".
       * Defaults to the system's locale if no locale has been specified
       * @type {string}
       */

    }, {
      key: "offsetNameLong",
      get: function get() {
        if (this.isValid) {
          return this.zone.offsetName(this.ts, {
            format: "long",
            locale: this.locale
          });
        } else {
          return null;
        }
      }
      /**
       * Get whether this zone's offset ever changes, as in a DST.
       * @type {boolean}
       */

    }, {
      key: "isOffsetFixed",
      get: function get() {
        return this.isValid ? this.zone.universal : null;
      }
      /**
       * Get whether the DateTime is in a DST.
       * @type {boolean}
       */

    }, {
      key: "isInDST",
      get: function get() {
        if (this.isOffsetFixed) {
          return false;
        } else {
          return this.offset > this.set({
            month: 1
          }).offset || this.offset > this.set({
            month: 5
          }).offset;
        }
      }
      /**
       * Returns true if this DateTime is in a leap year, false otherwise
       * @example DateTime.local(2016).isInLeapYear //=> true
       * @example DateTime.local(2013).isInLeapYear //=> false
       * @type {boolean}
       */

    }, {
      key: "isInLeapYear",
      get: function get() {
        return isLeapYear(this.year);
      }
      /**
       * Returns the number of days in this DateTime's month
       * @example DateTime.local(2016, 2).daysInMonth //=> 29
       * @example DateTime.local(2016, 3).daysInMonth //=> 31
       * @type {number}
       */

    }, {
      key: "daysInMonth",
      get: function get() {
        return daysInMonth(this.year, this.month);
      }
      /**
       * Returns the number of days in this DateTime's year
       * @example DateTime.local(2016).daysInYear //=> 366
       * @example DateTime.local(2013).daysInYear //=> 365
       * @type {number}
       */

    }, {
      key: "daysInYear",
      get: function get() {
        return this.isValid ? daysInYear(this.year) : NaN;
      }
      /**
       * Returns the number of weeks in this DateTime's year
       * @see https://en.wikipedia.org/wiki/ISO_week_date
       * @example DateTime.local(2004).weeksInWeekYear //=> 53
       * @example DateTime.local(2013).weeksInWeekYear //=> 52
       * @type {number}
       */

    }, {
      key: "weeksInWeekYear",
      get: function get() {
        return this.isValid ? weeksInWeekYear(this.weekYear) : NaN;
      }
    }], [{
      key: "local",
      value: function local(year, month, day, hour, minute, second, millisecond) {
        if (isUndefined(year)) {
          return new DateTime({
            ts: Settings.now()
          });
        } else {
          return quickDT({
            year: year,
            month: month,
            day: day,
            hour: hour,
            minute: minute,
            second: second,
            millisecond: millisecond
          }, Settings.defaultZone);
        }
      }
      /**
       * Create a DateTime in UTC
       * @param {number} [year] - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used
       * @param {number} [month=1] - The month, 1-indexed
       * @param {number} [day=1] - The day of the month
       * @param {number} [hour=0] - The hour of the day, in 24-hour time
       * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
       * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
       * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
       * @example DateTime.utc()                            //~> now
       * @example DateTime.utc(2017)                        //~> 2017-01-01T00:00:00Z
       * @example DateTime.utc(2017, 3)                     //~> 2017-03-01T00:00:00Z
       * @example DateTime.utc(2017, 3, 12)                 //~> 2017-03-12T00:00:00Z
       * @example DateTime.utc(2017, 3, 12, 5)              //~> 2017-03-12T05:00:00Z
       * @example DateTime.utc(2017, 3, 12, 5, 45)          //~> 2017-03-12T05:45:00Z
       * @example DateTime.utc(2017, 3, 12, 5, 45, 10)      //~> 2017-03-12T05:45:10Z
       * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765) //~> 2017-03-12T05:45:10.765Z
       * @return {DateTime}
       */

    }, {
      key: "utc",
      value: function utc(year, month, day, hour, minute, second, millisecond) {
        if (isUndefined(year)) {
          return new DateTime({
            ts: Settings.now(),
            zone: FixedOffsetZone.utcInstance
          });
        } else {
          return quickDT({
            year: year,
            month: month,
            day: day,
            hour: hour,
            minute: minute,
            second: second,
            millisecond: millisecond
          }, FixedOffsetZone.utcInstance);
        }
      }
      /**
       * Create a DateTime from a Javascript Date object. Uses the default zone.
       * @param {Date} date - a Javascript Date object
       * @param {Object} options - configuration options for the DateTime
       * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
       * @return {DateTime}
       */

    }, {
      key: "fromJSDate",
      value: function fromJSDate(date) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var ts = isDate(date) ? date.valueOf() : NaN;

        if (Number.isNaN(ts)) {
          return DateTime.invalid("invalid input");
        }

        var zoneToUse = normalizeZone(options.zone, Settings.defaultZone);

        if (!zoneToUse.isValid) {
          return DateTime.invalid(unsupportedZone(zoneToUse));
        }

        return new DateTime({
          ts: ts,
          zone: zoneToUse,
          loc: Locale.fromObject(options)
        });
      }
      /**
       * Create a DateTime from a number of milliseconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
       * @param {number} milliseconds - a number of milliseconds since 1970 UTC
       * @param {Object} options - configuration options for the DateTime
       * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
       * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
       * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
       * @return {DateTime}
       */

    }, {
      key: "fromMillis",
      value: function fromMillis(milliseconds) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (!isNumber(milliseconds)) {
          throw new InvalidArgumentError("fromMillis requires a numerical input, but received a ".concat(_typeof(milliseconds), " with value ").concat(milliseconds));
        } else if (milliseconds < -MAX_DATE || milliseconds > MAX_DATE) {
          // this isn't perfect because because we can still end up out of range because of additional shifting, but it's a start
          return DateTime.invalid("Timestamp out of range");
        } else {
          return new DateTime({
            ts: milliseconds,
            zone: normalizeZone(options.zone, Settings.defaultZone),
            loc: Locale.fromObject(options)
          });
        }
      }
      /**
       * Create a DateTime from a number of seconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
       * @param {number} seconds - a number of seconds since 1970 UTC
       * @param {Object} options - configuration options for the DateTime
       * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
       * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
       * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
       * @return {DateTime}
       */

    }, {
      key: "fromSeconds",
      value: function fromSeconds(seconds) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (!isNumber(seconds)) {
          throw new InvalidArgumentError("fromSeconds requires a numerical input");
        } else {
          return new DateTime({
            ts: seconds * 1000,
            zone: normalizeZone(options.zone, Settings.defaultZone),
            loc: Locale.fromObject(options)
          });
        }
      }
      /**
       * Create a DateTime from a Javascript object with keys like 'year' and 'hour' with reasonable defaults.
       * @param {Object} obj - the object to create the DateTime from
       * @param {number} obj.year - a year, such as 1987
       * @param {number} obj.month - a month, 1-12
       * @param {number} obj.day - a day of the month, 1-31, depending on the month
       * @param {number} obj.ordinal - day of the year, 1-365 or 366
       * @param {number} obj.weekYear - an ISO week year
       * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year
       * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday
       * @param {number} obj.hour - hour of the day, 0-23
       * @param {number} obj.minute - minute of the hour, 0-59
       * @param {number} obj.second - second of the minute, 0-59
       * @param {number} obj.millisecond - millisecond of the second, 0-999
       * @param {string|Zone} [obj.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()
       * @param {string} [obj.locale='system's locale'] - a locale to set on the resulting DateTime instance
       * @param {string} obj.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @param {string} obj.numberingSystem - the numbering system to set on the resulting DateTime instance
       * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'
       * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01'
       * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06
       * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'utc' }),
       * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'local' })
       * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'America/New_York' })
       * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'
       * @return {DateTime}
       */

    }, {
      key: "fromObject",
      value: function fromObject(obj) {
        var zoneToUse = normalizeZone(obj.zone, Settings.defaultZone);

        if (!zoneToUse.isValid) {
          return DateTime.invalid(unsupportedZone(zoneToUse));
        }

        var tsNow = Settings.now(),
            offsetProvis = zoneToUse.offset(tsNow),
            normalized = normalizeObject(obj, normalizeUnit, ["zone", "locale", "outputCalendar", "numberingSystem"]),
            containsOrdinal = !isUndefined(normalized.ordinal),
            containsGregorYear = !isUndefined(normalized.year),
            containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day),
            containsGregor = containsGregorYear || containsGregorMD,
            definiteWeekDef = normalized.weekYear || normalized.weekNumber,
            loc = Locale.fromObject(obj); // cases:
        // just a weekday -> this week's instance of that weekday, no worries
        // (gregorian data or ordinal) + (weekYear or weekNumber) -> error
        // (gregorian month or day) + ordinal -> error
        // otherwise just use weeks or ordinals or gregorian, depending on what's specified

        if ((containsGregor || containsOrdinal) && definiteWeekDef) {
          throw new ConflictingSpecificationError("Can't mix weekYear/weekNumber units with year/month/day or ordinals");
        }

        if (containsGregorMD && containsOrdinal) {
          throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
        }

        var useWeekData = definiteWeekDef || normalized.weekday && !containsGregor; // configure ourselves to deal with gregorian dates or week stuff

        var units,
            defaultValues,
            objNow = tsToObj(tsNow, offsetProvis);

        if (useWeekData) {
          units = orderedWeekUnits;
          defaultValues = defaultWeekUnitValues;
          objNow = gregorianToWeek(objNow);
        } else if (containsOrdinal) {
          units = orderedOrdinalUnits;
          defaultValues = defaultOrdinalUnitValues;
          objNow = gregorianToOrdinal(objNow);
        } else {
          units = orderedUnits$1;
          defaultValues = defaultUnitValues;
        } // set default values for missing stuff


        var foundFirst = false;

        var _iterator3 = _createForOfIteratorHelper(units),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var u = _step3.value;
            var v = normalized[u];

            if (!isUndefined(v)) {
              foundFirst = true;
            } else if (foundFirst) {
              normalized[u] = defaultValues[u];
            } else {
              normalized[u] = objNow[u];
            }
          } // make sure the values we have are in range

        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        var higherOrderInvalid = useWeekData ? hasInvalidWeekData(normalized) : containsOrdinal ? hasInvalidOrdinalData(normalized) : hasInvalidGregorianData(normalized),
            invalid = higherOrderInvalid || hasInvalidTimeData(normalized);

        if (invalid) {
          return DateTime.invalid(invalid);
        } // compute the actual time


        var gregorian = useWeekData ? weekToGregorian(normalized) : containsOrdinal ? ordinalToGregorian(normalized) : normalized,
            _objToTS7 = objToTS(gregorian, offsetProvis, zoneToUse),
            _objToTS8 = _slicedToArray(_objToTS7, 2),
            tsFinal = _objToTS8[0],
            offsetFinal = _objToTS8[1],
            inst = new DateTime({
          ts: tsFinal,
          zone: zoneToUse,
          o: offsetFinal,
          loc: loc
        }); // gregorian data + weekday serves only to validate


        if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {
          return DateTime.invalid("mismatched weekday", "you can't specify both a weekday of ".concat(normalized.weekday, " and a date of ").concat(inst.toISO()));
        }

        return inst;
      }
      /**
       * Create a DateTime from an ISO 8601 string
       * @param {string} text - the ISO string
       * @param {Object} opts - options to affect the creation
       * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone
       * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
       * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
       * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
       * @example DateTime.fromISO('2016-05-25T09:08:34.123')
       * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')
       * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})
       * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})
       * @example DateTime.fromISO('2016-W05-4')
       * @return {DateTime}
       */

    }, {
      key: "fromISO",
      value: function fromISO(text) {
        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var _parseISODate = parseISODate(text),
            _parseISODate2 = _slicedToArray(_parseISODate, 2),
            vals = _parseISODate2[0],
            parsedZone = _parseISODate2[1];

        return parseDataToDateTime(vals, parsedZone, opts, "ISO 8601", text);
      }
      /**
       * Create a DateTime from an RFC 2822 string
       * @param {string} text - the RFC 2822 string
       * @param {Object} opts - options to affect the creation
       * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
       * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
       * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
       * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
       * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')
       * @example DateTime.fromRFC2822('Fri, 25 Nov 2016 13:23:12 +0600')
       * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')
       * @return {DateTime}
       */

    }, {
      key: "fromRFC2822",
      value: function fromRFC2822(text) {
        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var _parseRFC2822Date = parseRFC2822Date(text),
            _parseRFC2822Date2 = _slicedToArray(_parseRFC2822Date, 2),
            vals = _parseRFC2822Date2[0],
            parsedZone = _parseRFC2822Date2[1];

        return parseDataToDateTime(vals, parsedZone, opts, "RFC 2822", text);
      }
      /**
       * Create a DateTime from an HTTP header date
       * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
       * @param {string} text - the HTTP header date
       * @param {Object} opts - options to affect the creation
       * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
       * @param {boolean} [opts.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.
       * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
       * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
       * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')
       * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')
       * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')
       * @return {DateTime}
       */

    }, {
      key: "fromHTTP",
      value: function fromHTTP(text) {
        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var _parseHTTPDate = parseHTTPDate(text),
            _parseHTTPDate2 = _slicedToArray(_parseHTTPDate, 2),
            vals = _parseHTTPDate2[0],
            parsedZone = _parseHTTPDate2[1];

        return parseDataToDateTime(vals, parsedZone, opts, "HTTP", opts);
      }
      /**
       * Create a DateTime from an input string and format string.
       * Defaults to en-US if no locale has been specified, regardless of the system's locale.
       * @see https://moment.github.io/luxon/docs/manual/parsing.html#table-of-tokens
       * @param {string} text - the string to parse
       * @param {string} fmt - the format the string is expected to be in (see the link below for the formats)
       * @param {Object} opts - options to affect the creation
       * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
       * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
       * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
       * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
       * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @return {DateTime}
       */

    }, {
      key: "fromFormat",
      value: function fromFormat(text, fmt) {
        var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        if (isUndefined(text) || isUndefined(fmt)) {
          throw new InvalidArgumentError("fromFormat requires an input string and a format");
        }

        var _opts$locale = opts.locale,
            locale = _opts$locale === void 0 ? null : _opts$locale,
            _opts$numberingSystem = opts.numberingSystem,
            numberingSystem = _opts$numberingSystem === void 0 ? null : _opts$numberingSystem,
            localeToUse = Locale.fromOpts({
          locale: locale,
          numberingSystem: numberingSystem,
          defaultToEN: true
        }),
            _parseFromTokens = parseFromTokens(localeToUse, text, fmt),
            _parseFromTokens2 = _slicedToArray(_parseFromTokens, 3),
            vals = _parseFromTokens2[0],
            parsedZone = _parseFromTokens2[1],
            invalid = _parseFromTokens2[2];

        if (invalid) {
          return DateTime.invalid(invalid);
        } else {
          return parseDataToDateTime(vals, parsedZone, opts, "format ".concat(fmt), text);
        }
      }
      /**
       * @deprecated use fromFormat instead
       */

    }, {
      key: "fromString",
      value: function fromString(text, fmt) {
        var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        return DateTime.fromFormat(text, fmt, opts);
      }
      /**
       * Create a DateTime from a SQL date, time, or datetime
       * Defaults to en-US if no locale has been specified, regardless of the system's locale
       * @param {string} text - the string to parse
       * @param {Object} opts - options to affect the creation
       * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
       * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
       * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
       * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
       * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @example DateTime.fromSQL('2017-05-15')
       * @example DateTime.fromSQL('2017-05-15 09:12:34')
       * @example DateTime.fromSQL('2017-05-15 09:12:34.342')
       * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')
       * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')
       * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })
       * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })
       * @example DateTime.fromSQL('09:12:34.342')
       * @return {DateTime}
       */

    }, {
      key: "fromSQL",
      value: function fromSQL(text) {
        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var _parseSQL = parseSQL(text),
            _parseSQL2 = _slicedToArray(_parseSQL, 2),
            vals = _parseSQL2[0],
            parsedZone = _parseSQL2[1];

        return parseDataToDateTime(vals, parsedZone, opts, "SQL", text);
      }
      /**
       * Create an invalid DateTime.
       * @param {string} reason - simple string of why this DateTime is invalid. Should not contain parameters or anything else data-dependent
       * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
       * @return {DateTime}
       */

    }, {
      key: "invalid",
      value: function invalid(reason) {
        var explanation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        if (!reason) {
          throw new InvalidArgumentError("need to specify a reason the DateTime is invalid");
        }

        var invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

        if (Settings.throwOnInvalid) {
          throw new InvalidDateTimeError(invalid);
        } else {
          return new DateTime({
            invalid: invalid
          });
        }
      }
      /**
       * Check if an object is a DateTime. Works across context boundaries
       * @param {object} o
       * @return {boolean}
       */

    }, {
      key: "isDateTime",
      value: function isDateTime(o) {
        return o && o.isLuxonDateTime || false;
      }
    }, {
      key: "min",
      value: function min() {
        for (var _len = arguments.length, dateTimes = new Array(_len), _key = 0; _key < _len; _key++) {
          dateTimes[_key] = arguments[_key];
        }

        if (!dateTimes.every(DateTime.isDateTime)) {
          throw new InvalidArgumentError("min requires all arguments be DateTimes");
        }

        return bestBy(dateTimes, function (i) {
          return i.valueOf();
        }, Math.min);
      }
      /**
       * Return the max of several date times
       * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum
       * @return {DateTime} the max DateTime, or undefined if called with no argument
       */

    }, {
      key: "max",
      value: function max() {
        for (var _len2 = arguments.length, dateTimes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          dateTimes[_key2] = arguments[_key2];
        }

        if (!dateTimes.every(DateTime.isDateTime)) {
          throw new InvalidArgumentError("max requires all arguments be DateTimes");
        }

        return bestBy(dateTimes, function (i) {
          return i.valueOf();
        }, Math.max);
      } // MISC

      /**
       * Explain how a string would be parsed by fromFormat()
       * @param {string} text - the string to parse
       * @param {string} fmt - the format the string is expected to be in (see description)
       * @param {Object} options - options taken by fromFormat()
       * @return {Object}
       */

    }, {
      key: "fromFormatExplain",
      value: function fromFormatExplain(text, fmt) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var _options$locale = options.locale,
            locale = _options$locale === void 0 ? null : _options$locale,
            _options$numberingSys = options.numberingSystem,
            numberingSystem = _options$numberingSys === void 0 ? null : _options$numberingSys,
            localeToUse = Locale.fromOpts({
          locale: locale,
          numberingSystem: numberingSystem,
          defaultToEN: true
        });
        return explainFromTokens(localeToUse, text, fmt);
      }
      /**
       * @deprecated use fromFormatExplain instead
       */

    }, {
      key: "fromStringExplain",
      value: function fromStringExplain(text, fmt) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        return DateTime.fromFormatExplain(text, fmt, options);
      } // FORMAT PRESETS

      /**
       * {@link toLocaleString} format like 10/14/1983
       * @type {Object}
       */

    }, {
      key: "DATE_SHORT",
      get: function get() {
        return DATE_SHORT;
      }
      /**
       * {@link toLocaleString} format like 'Oct 14, 1983'
       * @type {Object}
       */

    }, {
      key: "DATE_MED",
      get: function get() {
        return DATE_MED;
      }
      /**
       * {@link toLocaleString} format like 'October 14, 1983'
       * @type {Object}
       */

    }, {
      key: "DATE_FULL",
      get: function get() {
        return DATE_FULL;
      }
      /**
       * {@link toLocaleString} format like 'Tuesday, October 14, 1983'
       * @type {Object}
       */

    }, {
      key: "DATE_HUGE",
      get: function get() {
        return DATE_HUGE;
      }
      /**
       * {@link toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.
       * @type {Object}
       */

    }, {
      key: "TIME_SIMPLE",
      get: function get() {
        return TIME_SIMPLE;
      }
      /**
       * {@link toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.
       * @type {Object}
       */

    }, {
      key: "TIME_WITH_SECONDS",
      get: function get() {
        return TIME_WITH_SECONDS;
      }
      /**
       * {@link toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.
       * @type {Object}
       */

    }, {
      key: "TIME_WITH_SHORT_OFFSET",
      get: function get() {
        return TIME_WITH_SHORT_OFFSET;
      }
      /**
       * {@link toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.
       * @type {Object}
       */

    }, {
      key: "TIME_WITH_LONG_OFFSET",
      get: function get() {
        return TIME_WITH_LONG_OFFSET;
      }
      /**
       * {@link toLocaleString} format like '09:30', always 24-hour.
       * @type {Object}
       */

    }, {
      key: "TIME_24_SIMPLE",
      get: function get() {
        return TIME_24_SIMPLE;
      }
      /**
       * {@link toLocaleString} format like '09:30:23', always 24-hour.
       * @type {Object}
       */

    }, {
      key: "TIME_24_WITH_SECONDS",
      get: function get() {
        return TIME_24_WITH_SECONDS;
      }
      /**
       * {@link toLocaleString} format like '09:30:23 EDT', always 24-hour.
       * @type {Object}
       */

    }, {
      key: "TIME_24_WITH_SHORT_OFFSET",
      get: function get() {
        return TIME_24_WITH_SHORT_OFFSET;
      }
      /**
       * {@link toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.
       * @type {Object}
       */

    }, {
      key: "TIME_24_WITH_LONG_OFFSET",
      get: function get() {
        return TIME_24_WITH_LONG_OFFSET;
      }
      /**
       * {@link toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.
       * @type {Object}
       */

    }, {
      key: "DATETIME_SHORT",
      get: function get() {
        return DATETIME_SHORT;
      }
      /**
       * {@link toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.
       * @type {Object}
       */

    }, {
      key: "DATETIME_SHORT_WITH_SECONDS",
      get: function get() {
        return DATETIME_SHORT_WITH_SECONDS;
      }
      /**
       * {@link toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.
       * @type {Object}
       */

    }, {
      key: "DATETIME_MED",
      get: function get() {
        return DATETIME_MED;
      }
      /**
       * {@link toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.
       * @type {Object}
       */

    }, {
      key: "DATETIME_MED_WITH_SECONDS",
      get: function get() {
        return DATETIME_MED_WITH_SECONDS;
      }
      /**
       * {@link toLocaleString} format like 'Fri, 14 Oct 1983, 9:30 AM'. Only 12-hour if the locale is.
       * @type {Object}
       */

    }, {
      key: "DATETIME_MED_WITH_WEEKDAY",
      get: function get() {
        return DATETIME_MED_WITH_WEEKDAY;
      }
      /**
       * {@link toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.
       * @type {Object}
       */

    }, {
      key: "DATETIME_FULL",
      get: function get() {
        return DATETIME_FULL;
      }
      /**
       * {@link toLocaleString} format like 'October 14, 1983, 9:30:33 AM EDT'. Only 12-hour if the locale is.
       * @type {Object}
       */

    }, {
      key: "DATETIME_FULL_WITH_SECONDS",
      get: function get() {
        return DATETIME_FULL_WITH_SECONDS;
      }
      /**
       * {@link toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.
       * @type {Object}
       */

    }, {
      key: "DATETIME_HUGE",
      get: function get() {
        return DATETIME_HUGE;
      }
      /**
       * {@link toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.
       * @type {Object}
       */

    }, {
      key: "DATETIME_HUGE_WITH_SECONDS",
      get: function get() {
        return DATETIME_HUGE_WITH_SECONDS;
      }
    }]);

    return DateTime;
  }();
  function friendlyDateTime(dateTimeish) {
    if (DateTime.isDateTime(dateTimeish)) {
      return dateTimeish;
    } else if (dateTimeish && dateTimeish.valueOf && isNumber(dateTimeish.valueOf())) {
      return DateTime.fromJSDate(dateTimeish);
    } else if (dateTimeish && _typeof(dateTimeish) === "object") {
      return DateTime.fromObject(dateTimeish);
    } else {
      throw new InvalidArgumentError("Unknown datetime argument: ".concat(dateTimeish, ", of type ").concat(_typeof(dateTimeish)));
    }
  }



  var luxon = /*#__PURE__*/Object.freeze({
  	__proto__: null,
  	DateTime: DateTime,
  	Duration: Duration,
  	Interval: Interval,
  	Info: Info,
  	Zone: Zone,
  	FixedOffsetZone: FixedOffsetZone,
  	IANAZone: IANAZone,
  	InvalidZone: InvalidZone,
  	LocalZone: LocalZone,
  	Settings: Settings
  });

  var rrule = createCommonjsModule(function (module, exports) {
  (function webpackUniversalModuleDefinition(root, factory) {
  	module.exports = factory(luxon);
  })(typeof self !== 'undefined' ? self : commonjsGlobal, function(__WEBPACK_EXTERNAL_MODULE__3__) {
  return /******/ (function(modules) { // webpackBootstrap
  /******/ 	// The module cache
  /******/ 	var installedModules = {};
  /******/
  /******/ 	// The require function
  /******/ 	function __webpack_require__(moduleId) {
  /******/
  /******/ 		// Check if module is in cache
  /******/ 		if(installedModules[moduleId]) {
  /******/ 			return installedModules[moduleId].exports;
  /******/ 		}
  /******/ 		// Create a new module (and put it into the cache)
  /******/ 		var module = installedModules[moduleId] = {
  /******/ 			i: moduleId,
  /******/ 			l: false,
  /******/ 			exports: {}
  /******/ 		};
  /******/
  /******/ 		// Execute the module function
  /******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
  /******/
  /******/ 		// Flag the module as loaded
  /******/ 		module.l = true;
  /******/
  /******/ 		// Return the exports of the module
  /******/ 		return module.exports;
  /******/ 	}
  /******/
  /******/
  /******/ 	// expose the modules object (__webpack_modules__)
  /******/ 	__webpack_require__.m = modules;
  /******/
  /******/ 	// expose the module cache
  /******/ 	__webpack_require__.c = installedModules;
  /******/
  /******/ 	// define getter function for harmony exports
  /******/ 	__webpack_require__.d = function(exports, name, getter) {
  /******/ 		if(!__webpack_require__.o(exports, name)) {
  /******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
  /******/ 		}
  /******/ 	};
  /******/
  /******/ 	// define __esModule on exports
  /******/ 	__webpack_require__.r = function(exports) {
  /******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
  /******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
  /******/ 		}
  /******/ 		Object.defineProperty(exports, '__esModule', { value: true });
  /******/ 	};
  /******/
  /******/ 	// create a fake namespace object
  /******/ 	// mode & 1: value is a module id, require it
  /******/ 	// mode & 2: merge all properties of value into the ns
  /******/ 	// mode & 4: return value when already ns object
  /******/ 	// mode & 8|1: behave like require
  /******/ 	__webpack_require__.t = function(value, mode) {
  /******/ 		if(mode & 1) value = __webpack_require__(value);
  /******/ 		if(mode & 8) return value;
  /******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
  /******/ 		var ns = Object.create(null);
  /******/ 		__webpack_require__.r(ns);
  /******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
  /******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
  /******/ 		return ns;
  /******/ 	};
  /******/
  /******/ 	// getDefaultExport function for compatibility with non-harmony modules
  /******/ 	__webpack_require__.n = function(module) {
  /******/ 		var getter = module && module.__esModule ?
  /******/ 			function getDefault() { return module['default']; } :
  /******/ 			function getModuleExports() { return module; };
  /******/ 		__webpack_require__.d(getter, 'a', getter);
  /******/ 		return getter;
  /******/ 	};
  /******/
  /******/ 	// Object.prototype.hasOwnProperty.call
  /******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
  /******/
  /******/ 	// __webpack_public_path__
  /******/ 	__webpack_require__.p = "";
  /******/
  /******/
  /******/ 	// Load entry module and return exports
  /******/ 	return __webpack_require__(__webpack_require__.s = 1);
  /******/ })
  /************************************************************************/
  /******/ ([
  /* 0 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return isPresent; });
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return isNumber; });
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return isWeekdayStr; });
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return isArray; });
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return range; });
  /* unused harmony export clone */
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return repeat; });
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return toArray; });
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return padStart; });
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return split; });
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return pymod; });
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return divmod; });
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return empty; });
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return notEmpty; });
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return includes; });
  /* harmony import */ var _weekday__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
  // =============================================================================
  // Helper functions
  // =============================================================================

  var isPresent = function (value) {
      return value !== null && value !== undefined;
  };
  var isNumber = function (value) {
      return typeof value === 'number';
  };
  var isWeekdayStr = function (value) {
      return _weekday__WEBPACK_IMPORTED_MODULE_0__[/* ALL_WEEKDAYS */ "a"].indexOf(value) >= 0;
  };
  var isArray = Array.isArray;
  /**
   * Simplified version of python's range()
   */
  var range = function (start, end) {
      if (end === void 0) { end = start; }
      if (arguments.length === 1) {
          end = start;
          start = 0;
      }
      var rang = [];
      for (var i = start; i < end; i++)
          rang.push(i);
      return rang;
  };
  var repeat = function (value, times) {
      var i = 0;
      var array = [];
      if (isArray(value)) {
          for (; i < times; i++)
              array[i] = [].concat(value);
      }
      else {
          for (; i < times; i++)
              array[i] = value;
      }
      return array;
  };
  var toArray = function (item) {
      if (isArray(item)) {
          return item;
      }
      return [item];
  };
  function padStart(item, targetLength, padString) {
      if (padString === void 0) { padString = ' '; }
      var str = String(item);
      targetLength = targetLength >> 0;
      if (str.length > targetLength) {
          return String(str);
      }
      targetLength = targetLength - str.length;
      if (targetLength > padString.length) {
          padString += repeat(padString, targetLength / padString.length);
      }
      return padString.slice(0, targetLength) + String(str);
  }
  /**
   * Python like split
   */
  var split = function (str, sep, num) {
      var splits = str.split(sep);
      return num
          ? splits.slice(0, num).concat([splits.slice(num).join(sep)])
          : splits;
  };
  /**
   * closure/goog/math/math.js:modulo
   * Copyright 2006 The Closure Library Authors.
   * The % operator in JavaScript returns the remainder of a / b, but differs from
   * some other languages in that the result will have the same sign as the
   * dividend. For example, -1 % 8 == -1, whereas in some other languages
   * (such as Python) the result would be 7. This function emulates the more
   * correct modulo behavior, which is useful for certain applications such as
   * calculating an offset index in a circular list.
   *
   * @param {number} a The dividend.
   * @param {number} b The divisor.
   * @return {number} a % b where the result is between 0 and b (either 0 <= x < b
   *     or b < x <= 0, depending on the sign of b).
   */
  var pymod = function (a, b) {
      var r = a % b;
      // If r and b differ in sign, add b to wrap the result to the correct sign.
      return r * b < 0 ? r + b : r;
  };
  /**
   * @see: <http://docs.python.org/library/functions.html#divmod>
   */
  var divmod = function (a, b) {
      return { div: Math.floor(a / b), mod: pymod(a, b) };
  };
  var empty = function (obj) {
      return !isPresent(obj) || obj.length === 0;
  };
  /**
   * Python-like boolean
   * @return {Boolean} value of an object/primitive, taking into account
   * the fact that in Python an empty list's/tuple's
   * boolean value is False, whereas in JS it's true
   */
  var notEmpty = function (obj) {
      return !empty(obj);
  };
  /**
   * Return true if a value is in an array
   */
  var includes = function (arr, val) {
      return notEmpty(arr) && arr.indexOf(val) !== -1;
  };


  /***/ }),
  /* 1 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  __webpack_require__.r(__webpack_exports__);

  // EXTERNAL MODULE: ./src/helpers.ts
  var helpers = __webpack_require__(0);

  // CONCATENATED MODULE: ./src/dateutil.ts

  /**
   * General date-related utilities.
   * Also handles several incompatibilities between JavaScript and Python
   *
   */
  var dateutil_dateutil;
  (function (dateutil) {
      dateutil.MONTH_DAYS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
      /**
       * Number of milliseconds of one day
       */
      dateutil.ONE_DAY = 1000 * 60 * 60 * 24;
      /**
       * @see: <http://docs.python.org/library/datetime.html#datetime.MAXYEAR>
       */
      dateutil.MAXYEAR = 9999;
      /**
       * Python uses 1-Jan-1 as the base for calculating ordinals but we don't
       * want to confuse the JS engine with milliseconds > Number.MAX_NUMBER,
       * therefore we use 1-Jan-1970 instead
       */
      dateutil.ORDINAL_BASE = new Date(Date.UTC(1970, 0, 1));
      /**
       * Python: MO-SU: 0 - 6
       * JS: SU-SAT 0 - 6
       */
      dateutil.PY_WEEKDAYS = [6, 0, 1, 2, 3, 4, 5];
      /**
       * py_date.timetuple()[7]
       */
      dateutil.getYearDay = function (date) {
          var dateNoTime = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
          return (Math.ceil((dateNoTime.valueOf() -
              new Date(date.getUTCFullYear(), 0, 1).valueOf()) /
              dateutil.ONE_DAY) + 1);
      };
      dateutil.isLeapYear = function (year) {
          return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
      };
      dateutil.isDate = function (value) {
          return value instanceof Date;
      };
      dateutil.isValidDate = function (value) {
          return dateutil.isDate(value) && !isNaN(value.getTime());
      };
      /**
       * @return {Number} the date's timezone offset in ms
       */
      dateutil.tzOffset = function (date) {
          return date.getTimezoneOffset() * 60 * 1000;
      };
      /**
       * @see: <http://www.mcfedries.com/JavaScript/DaysBetween.asp>
       */
      dateutil.daysBetween = function (date1, date2) {
          // The number of milliseconds in one day
          // Convert both dates to milliseconds
          var date1ms = date1.getTime() - dateutil.tzOffset(date1);
          var date2ms = date2.getTime() - dateutil.tzOffset(date2);
          // Calculate the difference in milliseconds
          var differencems = date1ms - date2ms;
          // Convert back to days and return
          return Math.round(differencems / dateutil.ONE_DAY);
      };
      /**
       * @see: <http://docs.python.org/library/datetime.html#datetime.date.toordinal>
       */
      dateutil.toOrdinal = function (date) {
          return dateutil.daysBetween(date, dateutil.ORDINAL_BASE);
      };
      /**
       * @see - <http://docs.python.org/library/datetime.html#datetime.date.fromordinal>
       */
      dateutil.fromOrdinal = function (ordinal) {
          return new Date(dateutil.ORDINAL_BASE.getTime() + ordinal * dateutil.ONE_DAY);
      };
      dateutil.getMonthDays = function (date) {
          var month = date.getUTCMonth();
          return month === 1 && dateutil.isLeapYear(date.getUTCFullYear())
              ? 29
              : dateutil.MONTH_DAYS[month];
      };
      /**
       * @return {Number} python-like weekday
       */
      dateutil.getWeekday = function (date) {
          return dateutil.PY_WEEKDAYS[date.getUTCDay()];
      };
      /**
       * @see: <http://docs.python.org/library/calendar.html#calendar.monthrange>
       */
      dateutil.monthRange = function (year, month) {
          var date = new Date(Date.UTC(year, month, 1));
          return [dateutil.getWeekday(date), dateutil.getMonthDays(date)];
      };
      /**
       * @see: <http://docs.python.org/library/datetime.html#datetime.datetime.combine>
       */
      dateutil.combine = function (date, time) {
          time = time || date;
          return new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), time.getHours(), time.getMinutes(), time.getSeconds(), time.getMilliseconds()));
      };
      dateutil.clone = function (date) {
          var dolly = new Date(date.getTime());
          return dolly;
      };
      dateutil.cloneDates = function (dates) {
          var clones = [];
          for (var i = 0; i < dates.length; i++) {
              clones.push(dateutil.clone(dates[i]));
          }
          return clones;
      };
      /**
       * Sorts an array of Date or dateutil.Time objects
       */
      dateutil.sort = function (dates) {
          dates.sort(function (a, b) {
              return a.getTime() - b.getTime();
          });
      };
      dateutil.timeToUntilString = function (time, utc) {
          if (utc === void 0) { utc = true; }
          var date = new Date(time);
          return [
              Object(helpers["i" /* padStart */])(date.getUTCFullYear().toString(), 4, '0'),
              Object(helpers["i" /* padStart */])(date.getUTCMonth() + 1, 2, '0'),
              Object(helpers["i" /* padStart */])(date.getUTCDate(), 2, '0'),
              'T',
              Object(helpers["i" /* padStart */])(date.getUTCHours(), 2, '0'),
              Object(helpers["i" /* padStart */])(date.getUTCMinutes(), 2, '0'),
              Object(helpers["i" /* padStart */])(date.getUTCSeconds(), 2, '0'),
              utc ? 'Z' : ''
          ].join('');
      };
      dateutil.untilStringToDate = function (until) {
          var re = /^(\d{4})(\d{2})(\d{2})(T(\d{2})(\d{2})(\d{2})Z?)?$/;
          var bits = re.exec(until);
          if (!bits)
              throw new Error("Invalid UNTIL value: " + until);
          return new Date(Date.UTC(parseInt(bits[1], 10), parseInt(bits[2], 10) - 1, parseInt(bits[3], 10), parseInt(bits[5], 10) || 0, parseInt(bits[6], 10) || 0, parseInt(bits[7], 10) || 0));
      };
  })(dateutil_dateutil || (dateutil_dateutil = {}));
  /* harmony default export */ var src_dateutil = (dateutil_dateutil);

  // CONCATENATED MODULE: ./src/iterresult.ts
  /**
   * This class helps us to emulate python's generators, sorta.
   */
  var IterResult = /** @class */ (function () {
      function IterResult(method, args) {
          this.minDate = null;
          this.maxDate = null;
          this._result = [];
          this.total = 0;
          this.method = method;
          this.args = args;
          if (method === 'between') {
              this.maxDate = args.inc
                  ? args.before
                  : new Date(args.before.getTime() - 1);
              this.minDate = args.inc ? args.after : new Date(args.after.getTime() + 1);
          }
          else if (method === 'before') {
              this.maxDate = args.inc ? args.dt : new Date(args.dt.getTime() - 1);
          }
          else if (method === 'after') {
              this.minDate = args.inc ? args.dt : new Date(args.dt.getTime() + 1);
          }
      }
      /**
       * Possibly adds a date into the result.
       *
       * @param {Date} date - the date isn't necessarly added to the result
       *                      list (if it is too late/too early)
       * @return {Boolean} true if it makes sense to continue the iteration
       *                   false if we're done.
       */
      IterResult.prototype.accept = function (date) {
          ++this.total;
          var tooEarly = this.minDate && date < this.minDate;
          var tooLate = this.maxDate && date > this.maxDate;
          if (this.method === 'between') {
              if (tooEarly)
                  return true;
              if (tooLate)
                  return false;
          }
          else if (this.method === 'before') {
              if (tooLate)
                  return false;
          }
          else if (this.method === 'after') {
              if (tooEarly)
                  return true;
              this.add(date);
              return false;
          }
          return this.add(date);
      };
      /**
       *
       * @param {Date} date that is part of the result.
       * @return {Boolean} whether we are interested in more values.
       */
      IterResult.prototype.add = function (date) {
          this._result.push(date);
          return true;
      };
      /**
       * 'before' and 'after' return only one date, whereas 'all'
       * and 'between' an array.
       * @return {Date,Array?}
       */
      IterResult.prototype.getValue = function () {
          var res = this._result;
          switch (this.method) {
              case 'all':
              case 'between':
                  return res;
              case 'before':
              case 'after':
              default:
                  return (res.length ? res[res.length - 1] : null);
          }
      };
      IterResult.prototype.clone = function () {
          return new IterResult(this.method, this.args);
      };
      return IterResult;
  }());
  /* harmony default export */ var iterresult = (IterResult);

  // CONCATENATED MODULE: ./node_modules/tslib/tslib.es6.js
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation. All rights reserved.
  Licensed under the Apache License, Version 2.0 (the "License"); you may not use
  this file except in compliance with the License. You may obtain a copy of the
  License at http://www.apache.org/licenses/LICENSE-2.0

  THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
  MERCHANTABLITY OR NON-INFRINGEMENT.

  See the Apache Version 2.0 License for specific language governing permissions
  and limitations under the License.
  ***************************************************************************** */
  /* global Reflect, Promise */

  var extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return extendStatics(d, b);
  };

  function __extends(d, b) {
      extendStatics(d, b);
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }

  var __assign = function() {
      __assign = Object.assign || function __assign(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];
              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
      };
      return __assign.apply(this, arguments);
  };

  function __spreadArrays() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
              r[k] = a[j];
      return r;
  }
  // CONCATENATED MODULE: ./src/callbackiterresult.ts


  /**
   * IterResult subclass that calls a callback function on each add,
   * and stops iterating when the callback returns false.
   */
  var callbackiterresult_CallbackIterResult = /** @class */ (function (_super) {
      __extends(CallbackIterResult, _super);
      function CallbackIterResult(method, args, iterator) {
          var _this = _super.call(this, method, args) || this;
          _this.iterator = iterator;
          return _this;
      }
      CallbackIterResult.prototype.add = function (date) {
          if (this.iterator(date, this._result.length)) {
              this._result.push(date);
              return true;
          }
          return false;
      };
      return CallbackIterResult;
  }(iterresult));
  /* harmony default export */ var callbackiterresult = (callbackiterresult_CallbackIterResult);

  // CONCATENATED MODULE: ./src/types.ts
  var Frequency;
  (function (Frequency) {
      Frequency[Frequency["YEARLY"] = 0] = "YEARLY";
      Frequency[Frequency["MONTHLY"] = 1] = "MONTHLY";
      Frequency[Frequency["WEEKLY"] = 2] = "WEEKLY";
      Frequency[Frequency["DAILY"] = 3] = "DAILY";
      Frequency[Frequency["HOURLY"] = 4] = "HOURLY";
      Frequency[Frequency["MINUTELY"] = 5] = "MINUTELY";
      Frequency[Frequency["SECONDLY"] = 6] = "SECONDLY";
  })(Frequency || (Frequency = {}));
  function freqIsDailyOrGreater(freq) {
      return freq < Frequency.HOURLY;
  }

  // EXTERNAL MODULE: ./src/weekday.ts
  var weekday = __webpack_require__(2);

  // CONCATENATED MODULE: ./src/datetime.ts




  var Time = /** @class */ (function () {
      function Time(hour, minute, second, millisecond) {
          this.hour = hour;
          this.minute = minute;
          this.second = second;
          this.millisecond = millisecond || 0;
      }
      Time.prototype.getHours = function () {
          return this.hour;
      };
      Time.prototype.getMinutes = function () {
          return this.minute;
      };
      Time.prototype.getSeconds = function () {
          return this.second;
      };
      Time.prototype.getMilliseconds = function () {
          return this.millisecond;
      };
      Time.prototype.getTime = function () {
          return ((this.hour * 60 * 60 + this.minute * 60 + this.second) * 1000 +
              this.millisecond);
      };
      return Time;
  }());

  var datetime_DateTime = /** @class */ (function (_super) {
      __extends(DateTime, _super);
      function DateTime(year, month, day, hour, minute, second, millisecond) {
          var _this = _super.call(this, hour, minute, second, millisecond) || this;
          _this.year = year;
          _this.month = month;
          _this.day = day;
          return _this;
      }
      DateTime.fromDate = function (date) {
          return new this(date.getUTCFullYear(), date.getUTCMonth() + 1, date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.valueOf() % 1000);
      };
      DateTime.prototype.getWeekday = function () {
          return dateutil_dateutil.getWeekday(new Date(this.getTime()));
      };
      DateTime.prototype.getTime = function () {
          return new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond)).getTime();
      };
      DateTime.prototype.getDay = function () {
          return this.day;
      };
      DateTime.prototype.getMonth = function () {
          return this.month;
      };
      DateTime.prototype.getYear = function () {
          return this.year;
      };
      DateTime.prototype.addYears = function (years) {
          this.year += years;
      };
      DateTime.prototype.addMonths = function (months) {
          this.month += months;
          if (this.month > 12) {
              var yearDiv = Math.floor(this.month / 12);
              var monthMod = Object(helpers["j" /* pymod */])(this.month, 12);
              this.month = monthMod;
              this.year += yearDiv;
              if (this.month === 0) {
                  this.month = 12;
                  --this.year;
              }
          }
      };
      DateTime.prototype.addWeekly = function (days, wkst) {
          if (wkst > this.getWeekday()) {
              this.day += -(this.getWeekday() + 1 + (6 - wkst)) + days * 7;
          }
          else {
              this.day += -(this.getWeekday() - wkst) + days * 7;
          }
          this.fixDay();
      };
      DateTime.prototype.addDaily = function (days) {
          this.day += days;
          this.fixDay();
      };
      DateTime.prototype.addHours = function (hours, filtered, byhour) {
          if (filtered) {
              // Jump to one iteration before next day
              this.hour += Math.floor((23 - this.hour) / hours) * hours;
          }
          while (true) {
              this.hour += hours;
              var _a = Object(helpers["a" /* divmod */])(this.hour, 24), dayDiv = _a.div, hourMod = _a.mod;
              if (dayDiv) {
                  this.hour = hourMod;
                  this.addDaily(dayDiv);
              }
              if (Object(helpers["b" /* empty */])(byhour) || Object(helpers["c" /* includes */])(byhour, this.hour))
                  break;
          }
      };
      DateTime.prototype.addMinutes = function (minutes, filtered, byhour, byminute) {
          if (filtered) {
              // Jump to one iteration before next day
              this.minute +=
                  Math.floor((1439 - (this.hour * 60 + this.minute)) / minutes) * minutes;
          }
          while (true) {
              this.minute += minutes;
              var _a = Object(helpers["a" /* divmod */])(this.minute, 60), hourDiv = _a.div, minuteMod = _a.mod;
              if (hourDiv) {
                  this.minute = minuteMod;
                  this.addHours(hourDiv, false, byhour);
              }
              if ((Object(helpers["b" /* empty */])(byhour) || Object(helpers["c" /* includes */])(byhour, this.hour)) &&
                  (Object(helpers["b" /* empty */])(byminute) || Object(helpers["c" /* includes */])(byminute, this.minute))) {
                  break;
              }
          }
      };
      DateTime.prototype.addSeconds = function (seconds, filtered, byhour, byminute, bysecond) {
          if (filtered) {
              // Jump to one iteration before next day
              this.second +=
                  Math.floor((86399 - (this.hour * 3600 + this.minute * 60 + this.second)) / seconds) * seconds;
          }
          while (true) {
              this.second += seconds;
              var _a = Object(helpers["a" /* divmod */])(this.second, 60), minuteDiv = _a.div, secondMod = _a.mod;
              if (minuteDiv) {
                  this.second = secondMod;
                  this.addMinutes(minuteDiv, false, byhour, byminute);
              }
              if ((Object(helpers["b" /* empty */])(byhour) || Object(helpers["c" /* includes */])(byhour, this.hour)) &&
                  (Object(helpers["b" /* empty */])(byminute) || Object(helpers["c" /* includes */])(byminute, this.minute)) &&
                  (Object(helpers["b" /* empty */])(bysecond) || Object(helpers["c" /* includes */])(bysecond, this.second))) {
                  break;
              }
          }
      };
      DateTime.prototype.fixDay = function () {
          if (this.day <= 28) {
              return;
          }
          var daysinmonth = dateutil_dateutil.monthRange(this.year, this.month - 1)[1];
          if (this.day <= daysinmonth) {
              return;
          }
          while (this.day > daysinmonth) {
              this.day -= daysinmonth;
              ++this.month;
              if (this.month === 13) {
                  this.month = 1;
                  ++this.year;
                  if (this.year > dateutil_dateutil.MAXYEAR) {
                      return;
                  }
              }
              daysinmonth = dateutil_dateutil.monthRange(this.year, this.month - 1)[1];
          }
      };
      DateTime.prototype.add = function (options, filtered) {
          var freq = options.freq, interval = options.interval, wkst = options.wkst, byhour = options.byhour, byminute = options.byminute, bysecond = options.bysecond;
          switch (freq) {
              case Frequency.YEARLY: return this.addYears(interval);
              case Frequency.MONTHLY: return this.addMonths(interval);
              case Frequency.WEEKLY: return this.addWeekly(interval, wkst);
              case Frequency.DAILY: return this.addDaily(interval);
              case Frequency.HOURLY: return this.addHours(interval, filtered, byhour);
              case Frequency.MINUTELY: return this.addMinutes(interval, filtered, byhour, byminute);
              case Frequency.SECONDLY: return this.addSeconds(interval, filtered, byhour, byminute, bysecond);
          }
      };
      return DateTime;
  }(Time));


  // CONCATENATED MODULE: ./src/parseoptions.ts







  function initializeOptions(options) {
      var invalid = [];
      var keys = Object.keys(options);
      // Shallow copy for options and origOptions and check for invalid
      for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
          var key = keys_1[_i];
          if (!Object(helpers["c" /* includes */])(rrule_defaultKeys, key))
              invalid.push(key);
          if (src_dateutil.isDate(options[key]) && !src_dateutil.isValidDate(options[key]))
              invalid.push(key);
      }
      if (invalid.length) {
          throw new Error('Invalid options: ' + invalid.join(', '));
      }
      return __assign({}, options);
  }
  function parseOptions(options) {
      var opts = __assign(__assign({}, DEFAULT_OPTIONS), initializeOptions(options));
      if (Object(helpers["f" /* isPresent */])(opts.byeaster))
          opts.freq = src_rrule.YEARLY;
      if (!(Object(helpers["f" /* isPresent */])(opts.freq) && src_rrule.FREQUENCIES[opts.freq])) {
          throw new Error("Invalid frequency: " + opts.freq + " " + options.freq);
      }
      if (!opts.dtstart)
          opts.dtstart = new Date(new Date().setMilliseconds(0));
      if (!Object(helpers["f" /* isPresent */])(opts.wkst)) {
          opts.wkst = src_rrule.MO.weekday;
      }
      else if (Object(helpers["e" /* isNumber */])(opts.wkst)) ;
      else {
          opts.wkst = opts.wkst.weekday;
      }
      if (Object(helpers["f" /* isPresent */])(opts.bysetpos)) {
          if (Object(helpers["e" /* isNumber */])(opts.bysetpos))
              opts.bysetpos = [opts.bysetpos];
          for (var i = 0; i < opts.bysetpos.length; i++) {
              var v = opts.bysetpos[i];
              if (v === 0 || !(v >= -366 && v <= 366)) {
                  throw new Error('bysetpos must be between 1 and 366,' + ' or between -366 and -1');
              }
          }
      }
      if (!(Boolean(opts.byweekno) ||
          Object(helpers["h" /* notEmpty */])(opts.byweekno) ||
          Object(helpers["h" /* notEmpty */])(opts.byyearday) ||
          Boolean(opts.bymonthday) ||
          Object(helpers["h" /* notEmpty */])(opts.bymonthday) ||
          Object(helpers["f" /* isPresent */])(opts.byweekday) ||
          Object(helpers["f" /* isPresent */])(opts.byeaster))) {
          switch (opts.freq) {
              case src_rrule.YEARLY:
                  if (!opts.bymonth)
                      opts.bymonth = opts.dtstart.getUTCMonth() + 1;
                  opts.bymonthday = opts.dtstart.getUTCDate();
                  break;
              case src_rrule.MONTHLY:
                  opts.bymonthday = opts.dtstart.getUTCDate();
                  break;
              case src_rrule.WEEKLY:
                  opts.byweekday = [src_dateutil.getWeekday(opts.dtstart)];
                  break;
          }
      }
      // bymonth
      if (Object(helpers["f" /* isPresent */])(opts.bymonth) && !Object(helpers["d" /* isArray */])(opts.bymonth)) {
          opts.bymonth = [opts.bymonth];
      }
      // byyearday
      if (Object(helpers["f" /* isPresent */])(opts.byyearday) &&
          !Object(helpers["d" /* isArray */])(opts.byyearday) &&
          Object(helpers["e" /* isNumber */])(opts.byyearday)) {
          opts.byyearday = [opts.byyearday];
      }
      // bymonthday
      if (!Object(helpers["f" /* isPresent */])(opts.bymonthday)) {
          opts.bymonthday = [];
          opts.bynmonthday = [];
      }
      else if (Object(helpers["d" /* isArray */])(opts.bymonthday)) {
          var bymonthday = [];
          var bynmonthday = [];
          for (var i = 0; i < opts.bymonthday.length; i++) {
              var v = opts.bymonthday[i];
              if (v > 0) {
                  bymonthday.push(v);
              }
              else if (v < 0) {
                  bynmonthday.push(v);
              }
          }
          opts.bymonthday = bymonthday;
          opts.bynmonthday = bynmonthday;
      }
      else if (opts.bymonthday < 0) {
          opts.bynmonthday = [opts.bymonthday];
          opts.bymonthday = [];
      }
      else {
          opts.bynmonthday = [];
          opts.bymonthday = [opts.bymonthday];
      }
      // byweekno
      if (Object(helpers["f" /* isPresent */])(opts.byweekno) && !Object(helpers["d" /* isArray */])(opts.byweekno)) {
          opts.byweekno = [opts.byweekno];
      }
      // byweekday / bynweekday
      if (!Object(helpers["f" /* isPresent */])(opts.byweekday)) {
          opts.bynweekday = null;
      }
      else if (Object(helpers["e" /* isNumber */])(opts.byweekday)) {
          opts.byweekday = [opts.byweekday];
          opts.bynweekday = null;
      }
      else if (Object(helpers["g" /* isWeekdayStr */])(opts.byweekday)) {
          opts.byweekday = [weekday["b" /* Weekday */].fromStr(opts.byweekday).weekday];
          opts.bynweekday = null;
      }
      else if (opts.byweekday instanceof weekday["b" /* Weekday */]) {
          if (!opts.byweekday.n || opts.freq > src_rrule.MONTHLY) {
              opts.byweekday = [opts.byweekday.weekday];
              opts.bynweekday = null;
          }
          else {
              opts.bynweekday = [[opts.byweekday.weekday, opts.byweekday.n]];
              opts.byweekday = null;
          }
      }
      else {
          var byweekday = [];
          var bynweekday = [];
          for (var i = 0; i < opts.byweekday.length; i++) {
              var wday = opts.byweekday[i];
              if (Object(helpers["e" /* isNumber */])(wday)) {
                  byweekday.push(wday);
                  continue;
              }
              else if (Object(helpers["g" /* isWeekdayStr */])(wday)) {
                  byweekday.push(weekday["b" /* Weekday */].fromStr(wday).weekday);
                  continue;
              }
              if (!wday.n || opts.freq > src_rrule.MONTHLY) {
                  byweekday.push(wday.weekday);
              }
              else {
                  bynweekday.push([wday.weekday, wday.n]);
              }
          }
          opts.byweekday = Object(helpers["h" /* notEmpty */])(byweekday) ? byweekday : null;
          opts.bynweekday = Object(helpers["h" /* notEmpty */])(bynweekday) ? bynweekday : null;
      }
      // byhour
      if (!Object(helpers["f" /* isPresent */])(opts.byhour)) {
          opts.byhour =
              opts.freq < src_rrule.HOURLY ? [opts.dtstart.getUTCHours()] : null;
      }
      else if (Object(helpers["e" /* isNumber */])(opts.byhour)) {
          opts.byhour = [opts.byhour];
      }
      // byminute
      if (!Object(helpers["f" /* isPresent */])(opts.byminute)) {
          opts.byminute =
              opts.freq < src_rrule.MINUTELY ? [opts.dtstart.getUTCMinutes()] : null;
      }
      else if (Object(helpers["e" /* isNumber */])(opts.byminute)) {
          opts.byminute = [opts.byminute];
      }
      // bysecond
      if (!Object(helpers["f" /* isPresent */])(opts.bysecond)) {
          opts.bysecond =
              opts.freq < src_rrule.SECONDLY ? [opts.dtstart.getUTCSeconds()] : null;
      }
      else if (Object(helpers["e" /* isNumber */])(opts.bysecond)) {
          opts.bysecond = [opts.bysecond];
      }
      return { parsedOptions: opts };
  }
  function buildTimeset(opts) {
      var millisecondModulo = opts.dtstart.getTime() % 1000;
      if (!freqIsDailyOrGreater(opts.freq)) {
          return [];
      }
      var timeset = [];
      opts.byhour.forEach(function (hour) {
          opts.byminute.forEach(function (minute) {
              opts.bysecond.forEach(function (second) {
                  timeset.push(new Time(hour, minute, second, millisecondModulo));
              });
          });
      });
      return timeset;
  }

  // CONCATENATED MODULE: ./src/parsestring.ts





  function parseString(rfcString) {
      var options = rfcString.split('\n').map(parseLine).filter(function (x) { return x !== null; });
      return __assign(__assign({}, options[0]), options[1]);
  }
  function parseDtstart(line) {
      var options = {};
      var dtstartWithZone = /DTSTART(?:;TZID=([^:=]+?))?(?::|=)([^;\s]+)/i.exec(line);
      if (!dtstartWithZone) {
          return options;
      }
      var _ = dtstartWithZone[0], tzid = dtstartWithZone[1], dtstart = dtstartWithZone[2];
      if (tzid) {
          options.tzid = tzid;
      }
      options.dtstart = src_dateutil.untilStringToDate(dtstart);
      return options;
  }
  function parseLine(rfcString) {
      rfcString = rfcString.replace(/^\s+|\s+$/, '');
      if (!rfcString.length)
          return null;
      var header = /^([A-Z]+?)[:;]/.exec(rfcString.toUpperCase());
      if (!header) {
          return parseRrule(rfcString);
      }
      var _ = header[0], key = header[1];
      switch (key.toUpperCase()) {
          case 'RRULE':
          case 'EXRULE':
              return parseRrule(rfcString);
          case 'DTSTART':
              return parseDtstart(rfcString);
          default:
              throw new Error("Unsupported RFC prop " + key + " in " + rfcString);
      }
  }
  function parseRrule(line) {
      var strippedLine = line.replace(/^RRULE:/i, '');
      var options = parseDtstart(strippedLine);
      var attrs = line.replace(/^(?:RRULE|EXRULE):/i, '').split(';');
      attrs.forEach(function (attr) {
          var _a = attr.split('='), key = _a[0], value = _a[1];
          switch (key.toUpperCase()) {
              case 'FREQ':
                  options.freq = Frequency[value.toUpperCase()];
                  break;
              case 'WKST':
                  options.wkst = Days[value.toUpperCase()];
                  break;
              case 'COUNT':
              case 'INTERVAL':
              case 'BYSETPOS':
              case 'BYMONTH':
              case 'BYMONTHDAY':
              case 'BYYEARDAY':
              case 'BYWEEKNO':
              case 'BYHOUR':
              case 'BYMINUTE':
              case 'BYSECOND':
                  var num = parseNumber(value);
                  var optionKey = key.toLowerCase();
                  // @ts-ignore
                  options[optionKey] = num;
                  break;
              case 'BYWEEKDAY':
              case 'BYDAY':
                  options.byweekday = parseWeekday(value);
                  break;
              case 'DTSTART':
              case 'TZID':
                  // for backwards compatibility
                  var dtstart = parseDtstart(line);
                  options.tzid = dtstart.tzid;
                  options.dtstart = dtstart.dtstart;
                  break;
              case 'UNTIL':
                  options.until = src_dateutil.untilStringToDate(value);
                  break;
              case 'BYEASTER':
                  options.byeaster = Number(value);
                  break;
              default:
                  throw new Error("Unknown RRULE property '" + key + "'");
          }
      });
      return options;
  }
  function parseNumber(value) {
      if (value.indexOf(',') !== -1) {
          var values = value.split(',');
          return values.map(parseIndividualNumber);
      }
      return parseIndividualNumber(value);
  }
  function parseIndividualNumber(value) {
      if (/^[+-]?\d+$/.test(value)) {
          return Number(value);
      }
      return value;
  }
  function parseWeekday(value) {
      var days = value.split(',');
      return days.map(function (day) {
          if (day.length === 2) {
              // MO, TU, ...
              return Days[day]; // wday instanceof Weekday
          }
          // -1MO, +3FR, 1SO, 13TU ...
          var parts = day.match(/^([+-]?\d{1,2})([A-Z]{2})$/);
          var n = Number(parts[1]);
          var wdaypart = parts[2];
          var wday = Days[wdaypart].weekday;
          return new weekday["b" /* Weekday */](wday, n);
      });
  }

  // EXTERNAL MODULE: external "luxon"
  var external_luxon_ = __webpack_require__(3);

  // CONCATENATED MODULE: ./src/datewithzone.ts


  var datewithzone_DateWithZone = /** @class */ (function () {
      function DateWithZone(date, tzid) {
          this.date = date;
          this.tzid = tzid;
      }
      Object.defineProperty(DateWithZone.prototype, "isUTC", {
          get: function () {
              return !this.tzid || this.tzid.toUpperCase() === 'UTC';
          },
          enumerable: true,
          configurable: true
      });
      DateWithZone.prototype.toString = function () {
          var datestr = src_dateutil.timeToUntilString(this.date.getTime(), this.isUTC);
          if (!this.isUTC) {
              return ";TZID=" + this.tzid + ":" + datestr;
          }
          return ":" + datestr;
      };
      DateWithZone.prototype.getTime = function () {
          return this.date.getTime();
      };
      DateWithZone.prototype.rezonedDate = function () {
          if (this.isUTC) {
              return this.date;
          }
          try {
              var datetime = external_luxon_["DateTime"]
                  .fromJSDate(this.date);
              var rezoned = datetime.setZone(this.tzid, { keepLocalTime: true });
              return rezoned.toJSDate();
          }
          catch (e) {
              if (e instanceof TypeError) {
                  console.error('Using TZID without Luxon available is unsupported. Returned times are in UTC, not the requested time zone');
              }
              return this.date;
          }
      };
      return DateWithZone;
  }());


  // CONCATENATED MODULE: ./src/optionstostring.ts





  function optionsToString(options) {
      var rrule = [];
      var dtstart = '';
      var keys = Object.keys(options);
      var defaultKeys = Object.keys(DEFAULT_OPTIONS);
      for (var i = 0; i < keys.length; i++) {
          if (keys[i] === 'tzid')
              continue;
          if (!Object(helpers["c" /* includes */])(defaultKeys, keys[i]))
              continue;
          var key = keys[i].toUpperCase();
          var value = options[keys[i]];
          var outValue = '';
          if (!Object(helpers["f" /* isPresent */])(value) || (Object(helpers["d" /* isArray */])(value) && !value.length))
              continue;
          switch (key) {
              case 'FREQ':
                  outValue = src_rrule.FREQUENCIES[options.freq];
                  break;
              case 'WKST':
                  if (Object(helpers["e" /* isNumber */])(value)) {
                      outValue = new weekday["b" /* Weekday */](value).toString();
                  }
                  else {
                      outValue = value.toString();
                  }
                  break;
              case 'BYWEEKDAY':
                  /*
                  NOTE: BYWEEKDAY is a special case.
                  RRule() deconstructs the rule.options.byweekday array
                  into an array of Weekday arguments.
                  On the other hand, rule.origOptions is an array of Weekdays.
                  We need to handle both cases here.
                  It might be worth change RRule to keep the Weekdays.
        
                  Also, BYWEEKDAY (used by RRule) vs. BYDAY (RFC)
        
                  */
                  key = 'BYDAY';
                  outValue = Object(helpers["n" /* toArray */])(value).map(function (wday) {
                      if (wday instanceof weekday["b" /* Weekday */]) {
                          return wday;
                      }
                      if (Object(helpers["d" /* isArray */])(wday)) {
                          return new weekday["b" /* Weekday */](wday[0], wday[1]);
                      }
                      return new weekday["b" /* Weekday */](wday);
                  }).toString();
                  break;
              case 'DTSTART':
                  dtstart = buildDtstart(value, options.tzid);
                  break;
              case 'UNTIL':
                  outValue = src_dateutil.timeToUntilString(value, !options.tzid);
                  break;
              default:
                  if (Object(helpers["d" /* isArray */])(value)) {
                      var strValues = [];
                      for (var j = 0; j < value.length; j++) {
                          strValues[j] = String(value[j]);
                      }
                      outValue = strValues.toString();
                  }
                  else {
                      outValue = String(value);
                  }
          }
          if (outValue) {
              rrule.push([key, outValue]);
          }
      }
      var rules = rrule.map(function (_a) {
          var key = _a[0], value = _a[1];
          return key + "=" + value.toString();
      }).join(';');
      var ruleString = '';
      if (rules !== '') {
          ruleString = "RRULE:" + rules;
      }
      return [dtstart, ruleString].filter(function (x) { return !!x; }).join('\n');
  }
  function buildDtstart(dtstart, tzid) {
      if (!dtstart) {
          return '';
      }
      return 'DTSTART' + new datewithzone_DateWithZone(new Date(dtstart), tzid).toString();
  }

  // CONCATENATED MODULE: ./src/cache.ts



  var cache_Cache = /** @class */ (function () {
      function Cache() {
          this.all = false;
          this.before = [];
          this.after = [];
          this.between = [];
      }
      /**
       * @param {String} what - all/before/after/between
       * @param {Array,Date} value - an array of dates, one date, or null
       * @param {Object?} args - _iter arguments
       */
      Cache.prototype._cacheAdd = function (what, value, args) {
          if (value) {
              value =
                  value instanceof Date
                      ? src_dateutil.clone(value)
                      : src_dateutil.cloneDates(value);
          }
          if (what === 'all') {
              this.all = value;
          }
          else {
              args._value = value;
              this[what].push(args);
          }
      };
      /**
       * @return false - not in the cache
       *         null  - cached, but zero occurrences (before/after)
       *         Date  - cached (before/after)
       *         []    - cached, but zero occurrences (all/between)
       *         [Date1, DateN] - cached (all/between)
       */
      Cache.prototype._cacheGet = function (what, args) {
          var cached = false;
          var argsKeys = args ? Object.keys(args) : [];
          var findCacheDiff = function (item) {
              for (var i = 0; i < argsKeys.length; i++) {
                  var key = argsKeys[i];
                  if (String(args[key]) !== String(item[key])) {
                      return true;
                  }
              }
              return false;
          };
          var cachedObject = this[what];
          if (what === 'all') {
              cached = this.all;
          }
          else if (Object(helpers["d" /* isArray */])(cachedObject)) {
              // Let's see whether we've already called the
              // 'what' method with the same 'args'
              for (var i = 0; i < cachedObject.length; i++) {
                  var item = cachedObject[i];
                  if (argsKeys.length && findCacheDiff(item))
                      continue;
                  cached = item._value;
                  break;
              }
          }
          if (!cached && this.all) {
              // Not in the cache, but we already know all the occurrences,
              // so we can find the correct dates from the cached ones.
              var iterResult = new iterresult(what, args);
              for (var i = 0; i < this.all.length; i++) {
                  if (!iterResult.accept(this.all[i]))
                      break;
              }
              cached = iterResult.getValue();
              this._cacheAdd(what, cached, args);
          }
          return Object(helpers["d" /* isArray */])(cached)
              ? src_dateutil.cloneDates(cached)
              : cached instanceof Date
                  ? src_dateutil.clone(cached)
                  : cached;
      };
      return Cache;
  }());


  // CONCATENATED MODULE: ./src/masks.ts


  // =============================================================================
  // Date masks
  // =============================================================================
  // Every mask is 7 days longer to handle cross-year weekly periods.
  var M365MASK = __spreadArrays(Object(helpers["l" /* repeat */])(1, 31), Object(helpers["l" /* repeat */])(2, 28), Object(helpers["l" /* repeat */])(3, 31), Object(helpers["l" /* repeat */])(4, 30), Object(helpers["l" /* repeat */])(5, 31), Object(helpers["l" /* repeat */])(6, 30), Object(helpers["l" /* repeat */])(7, 31), Object(helpers["l" /* repeat */])(8, 31), Object(helpers["l" /* repeat */])(9, 30), Object(helpers["l" /* repeat */])(10, 31), Object(helpers["l" /* repeat */])(11, 30), Object(helpers["l" /* repeat */])(12, 31), Object(helpers["l" /* repeat */])(1, 7));
  var M366MASK = __spreadArrays(Object(helpers["l" /* repeat */])(1, 31), Object(helpers["l" /* repeat */])(2, 29), Object(helpers["l" /* repeat */])(3, 31), Object(helpers["l" /* repeat */])(4, 30), Object(helpers["l" /* repeat */])(5, 31), Object(helpers["l" /* repeat */])(6, 30), Object(helpers["l" /* repeat */])(7, 31), Object(helpers["l" /* repeat */])(8, 31), Object(helpers["l" /* repeat */])(9, 30), Object(helpers["l" /* repeat */])(10, 31), Object(helpers["l" /* repeat */])(11, 30), Object(helpers["l" /* repeat */])(12, 31), Object(helpers["l" /* repeat */])(1, 7));
  var M28 = Object(helpers["k" /* range */])(1, 29);
  var M29 = Object(helpers["k" /* range */])(1, 30);
  var M30 = Object(helpers["k" /* range */])(1, 31);
  var M31 = Object(helpers["k" /* range */])(1, 32);
  var MDAY366MASK = __spreadArrays(M31, M29, M31, M30, M31, M30, M31, M31, M30, M31, M30, M31, M31.slice(0, 7));
  var MDAY365MASK = __spreadArrays(M31, M28, M31, M30, M31, M30, M31, M31, M30, M31, M30, M31, M31.slice(0, 7));
  var NM28 = Object(helpers["k" /* range */])(-28, 0);
  var NM29 = Object(helpers["k" /* range */])(-29, 0);
  var NM30 = Object(helpers["k" /* range */])(-30, 0);
  var NM31 = Object(helpers["k" /* range */])(-31, 0);
  var NMDAY366MASK = __spreadArrays(NM31, NM29, NM31, NM30, NM31, NM30, NM31, NM31, NM30, NM31, NM30, NM31, NM31.slice(0, 7));
  var NMDAY365MASK = __spreadArrays(NM31, NM28, NM31, NM30, NM31, NM30, NM31, NM31, NM30, NM31, NM30, NM31, NM31.slice(0, 7));
  var M366RANGE = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366];
  var M365RANGE = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];
  var WDAYMASK = (function () {
      var wdaymask = [];
      for (var i = 0; i < 55; i++)
          wdaymask = wdaymask.concat(Object(helpers["k" /* range */])(7));
      return wdaymask;
  })();


  // CONCATENATED MODULE: ./src/iterinfo/yearinfo.ts




  function rebuildYear(year, options) {
      var firstyday = new Date(Date.UTC(year, 0, 1));
      var yearlen = src_dateutil.isLeapYear(year) ? 366 : 365;
      var nextyearlen = src_dateutil.isLeapYear(year + 1) ? 366 : 365;
      var yearordinal = src_dateutil.toOrdinal(firstyday);
      var yearweekday = src_dateutil.getWeekday(firstyday);
      var result = __assign(__assign({ yearlen: yearlen,
          nextyearlen: nextyearlen,
          yearordinal: yearordinal,
          yearweekday: yearweekday }, baseYearMasks(year)), { wnomask: null });
      if (Object(helpers["b" /* empty */])(options.byweekno)) {
          return result;
      }
      result.wnomask = Object(helpers["l" /* repeat */])(0, yearlen + 7);
      var firstwkst;
      var wyearlen;
      var no1wkst = firstwkst = Object(helpers["j" /* pymod */])(7 - yearweekday + options.wkst, 7);
      if (no1wkst >= 4) {
          no1wkst = 0;
          // Number of days in the year, plus the days we got
          // from last year.
          wyearlen =
              result.yearlen + Object(helpers["j" /* pymod */])(yearweekday - options.wkst, 7);
      }
      else {
          // Number of days in the year, minus the days we
          // left in last year.
          wyearlen = yearlen - no1wkst;
      }
      var div = Math.floor(wyearlen / 7);
      var mod = Object(helpers["j" /* pymod */])(wyearlen, 7);
      var numweeks = Math.floor(div + mod / 4);
      for (var j = 0; j < options.byweekno.length; j++) {
          var n = options.byweekno[j];
          if (n < 0) {
              n += numweeks + 1;
          }
          if (!(n > 0 && n <= numweeks)) {
              continue;
          }
          var i = void 0;
          if (n > 1) {
              i = no1wkst + (n - 1) * 7;
              if (no1wkst !== firstwkst) {
                  i -= 7 - firstwkst;
              }
          }
          else {
              i = no1wkst;
          }
          for (var k = 0; k < 7; k++) {
              result.wnomask[i] = 1;
              i++;
              if (result.wdaymask[i] === options.wkst)
                  break;
          }
      }
      if (Object(helpers["c" /* includes */])(options.byweekno, 1)) {
          // Check week number 1 of next year as well
          // orig-TODO : Check -numweeks for next year.
          var i = no1wkst + numweeks * 7;
          if (no1wkst !== firstwkst)
              i -= 7 - firstwkst;
          if (i < yearlen) {
              // If week starts in next year, we
              // don't care about it.
              for (var j = 0; j < 7; j++) {
                  result.wnomask[i] = 1;
                  i += 1;
                  if (result.wdaymask[i] === options.wkst)
                      break;
              }
          }
      }
      if (no1wkst) {
          // Check last week number of last year as
          // well. If no1wkst is 0, either the year
          // started on week start, or week number 1
          // got days from last year, so there are no
          // days from last year's last week number in
          // this year.
          var lnumweeks = void 0;
          if (!Object(helpers["c" /* includes */])(options.byweekno, -1)) {
              var lyearweekday = src_dateutil.getWeekday(new Date(Date.UTC(year - 1, 0, 1)));
              var lno1wkst = Object(helpers["j" /* pymod */])(7 - lyearweekday.valueOf() + options.wkst, 7);
              var lyearlen = src_dateutil.isLeapYear(year - 1) ? 366 : 365;
              var weekst = void 0;
              if (lno1wkst >= 4) {
                  lno1wkst = 0;
                  weekst = lyearlen + Object(helpers["j" /* pymod */])(lyearweekday - options.wkst, 7);
              }
              else {
                  weekst = yearlen - no1wkst;
              }
              lnumweeks = Math.floor(52 + Object(helpers["j" /* pymod */])(weekst, 7) / 4);
          }
          else {
              lnumweeks = -1;
          }
          if (Object(helpers["c" /* includes */])(options.byweekno, lnumweeks)) {
              for (var i = 0; i < no1wkst; i++)
                  result.wnomask[i] = 1;
          }
      }
      return result;
  }
  function baseYearMasks(year) {
      var yearlen = src_dateutil.isLeapYear(year) ? 366 : 365;
      var firstyday = new Date(Date.UTC(year, 0, 1));
      var wday = src_dateutil.getWeekday(firstyday);
      if (yearlen === 365) {
          return {
              mmask: M365MASK,
              mdaymask: MDAY365MASK,
              nmdaymask: NMDAY365MASK,
              wdaymask: WDAYMASK.slice(wday),
              mrange: M365RANGE
          };
      }
      return {
          mmask: M366MASK,
          mdaymask: MDAY366MASK,
          nmdaymask: NMDAY366MASK,
          wdaymask: WDAYMASK.slice(wday),
          mrange: M366RANGE
      };
  }

  // CONCATENATED MODULE: ./src/iterinfo/monthinfo.ts


  function rebuildMonth(year, month, yearlen, mrange, wdaymask, options) {
      var result = {
          lastyear: year,
          lastmonth: month,
          nwdaymask: []
      };
      var ranges = [];
      if (options.freq === src_rrule.YEARLY) {
          if (Object(helpers["b" /* empty */])(options.bymonth)) {
              ranges = [[0, yearlen]];
          }
          else {
              for (var j = 0; j < options.bymonth.length; j++) {
                  month = options.bymonth[j];
                  ranges.push(mrange.slice(month - 1, month + 1));
              }
          }
      }
      else if (options.freq === src_rrule.MONTHLY) {
          ranges = [mrange.slice(month - 1, month + 1)];
      }
      if (Object(helpers["b" /* empty */])(ranges)) {
          return result;
      }
      // Weekly frequency won't get here, so we may not
      // care about cross-year weekly periods.
      result.nwdaymask = Object(helpers["l" /* repeat */])(0, yearlen);
      for (var j = 0; j < ranges.length; j++) {
          var rang = ranges[j];
          var first = rang[0];
          var last = rang[1] - 1;
          for (var k = 0; k < options.bynweekday.length; k++) {
              var i = void 0;
              var _a = options.bynweekday[k], wday = _a[0], n = _a[1];
              if (n < 0) {
                  i = last + (n + 1) * 7;
                  i -= Object(helpers["j" /* pymod */])(wdaymask[i] - wday, 7);
              }
              else {
                  i = first + (n - 1) * 7;
                  i += Object(helpers["j" /* pymod */])(7 - wdaymask[i] + wday, 7);
              }
              if (first <= i && i <= last)
                  result.nwdaymask[i] = 1;
          }
      }
      return result;
  }

  // CONCATENATED MODULE: ./src/iterinfo/easter.ts
  function easter(y, offset) {
      if (offset === void 0) { offset = 0; }
      var a = y % 19;
      var b = Math.floor(y / 100);
      var c = y % 100;
      var d = Math.floor(b / 4);
      var e = b % 4;
      var f = Math.floor((b + 8) / 25);
      var g = Math.floor((b - f + 1) / 3);
      var h = Math.floor(19 * a + b - d - g + 15) % 30;
      var i = Math.floor(c / 4);
      var k = c % 4;
      var l = Math.floor(32 + 2 * e + 2 * i - h - k) % 7;
      var m = Math.floor((a + 11 * h + 22 * l) / 451);
      var month = Math.floor((h + l - 7 * m + 114) / 31);
      var day = ((h + l - 7 * m + 114) % 31) + 1;
      var date = Date.UTC(y, month - 1, day + offset);
      var yearStart = Date.UTC(y, 0, 1);
      return [Math.ceil((date - yearStart) / (1000 * 60 * 60 * 24))];
  }

  // CONCATENATED MODULE: ./src/iterinfo/index.ts







  // =============================================================================
  // Iterinfo
  // =============================================================================
  var iterinfo_Iterinfo = /** @class */ (function () {
      function Iterinfo(options) {
          this.options = options;
      }
      Iterinfo.prototype.rebuild = function (year, month) {
          var options = this.options;
          if (year !== this.lastyear) {
              this.yearinfo = rebuildYear(year, options);
          }
          if (Object(helpers["h" /* notEmpty */])(options.bynweekday) &&
              (month !== this.lastmonth || year !== this.lastyear)) {
              var _a = this.yearinfo, yearlen = _a.yearlen, mrange = _a.mrange, wdaymask = _a.wdaymask;
              this.monthinfo = rebuildMonth(year, month, yearlen, mrange, wdaymask, options);
          }
          if (Object(helpers["f" /* isPresent */])(options.byeaster)) {
              this.eastermask = easter(year, options.byeaster);
          }
      };
      Object.defineProperty(Iterinfo.prototype, "lastyear", {
          get: function () {
              return this.monthinfo ? this.monthinfo.lastyear : null;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(Iterinfo.prototype, "lastmonth", {
          get: function () {
              return this.monthinfo ? this.monthinfo.lastmonth : null;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(Iterinfo.prototype, "yearlen", {
          get: function () {
              return this.yearinfo.yearlen;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(Iterinfo.prototype, "yearordinal", {
          get: function () {
              return this.yearinfo.yearordinal;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(Iterinfo.prototype, "mrange", {
          get: function () {
              return this.yearinfo.mrange;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(Iterinfo.prototype, "wdaymask", {
          get: function () {
              return this.yearinfo.wdaymask;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(Iterinfo.prototype, "mmask", {
          get: function () {
              return this.yearinfo.mmask;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(Iterinfo.prototype, "wnomask", {
          get: function () {
              return this.yearinfo.wnomask;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(Iterinfo.prototype, "nwdaymask", {
          get: function () {
              return this.monthinfo ? this.monthinfo.nwdaymask : [];
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(Iterinfo.prototype, "nextyearlen", {
          get: function () {
              return this.yearinfo.nextyearlen;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(Iterinfo.prototype, "mdaymask", {
          get: function () {
              return this.yearinfo.mdaymask;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(Iterinfo.prototype, "nmdaymask", {
          get: function () {
              return this.yearinfo.nmdaymask;
          },
          enumerable: true,
          configurable: true
      });
      Iterinfo.prototype.ydayset = function () {
          return [Object(helpers["k" /* range */])(this.yearlen), 0, this.yearlen];
      };
      Iterinfo.prototype.mdayset = function (_, month, __) {
          var start = this.mrange[month - 1];
          var end = this.mrange[month];
          var set = Object(helpers["l" /* repeat */])(null, this.yearlen);
          for (var i = start; i < end; i++)
              set[i] = i;
          return [set, start, end];
      };
      Iterinfo.prototype.wdayset = function (year, month, day) {
          // We need to handle cross-year weeks here.
          var set = Object(helpers["l" /* repeat */])(null, this.yearlen + 7);
          var i = src_dateutil.toOrdinal(new Date(Date.UTC(year, month - 1, day))) -
              this.yearordinal;
          var start = i;
          for (var j = 0; j < 7; j++) {
              set[i] = i;
              ++i;
              if (this.wdaymask[i] === this.options.wkst)
                  break;
          }
          return [set, start, i];
      };
      Iterinfo.prototype.ddayset = function (year, month, day) {
          var set = Object(helpers["l" /* repeat */])(null, this.yearlen);
          var i = src_dateutil.toOrdinal(new Date(Date.UTC(year, month - 1, day))) -
              this.yearordinal;
          set[i] = i;
          return [set, i, i + 1];
      };
      Iterinfo.prototype.htimeset = function (hour, _, second, millisecond) {
          var _this = this;
          var set = [];
          this.options.byminute.forEach(function (minute) {
              set = set.concat(_this.mtimeset(hour, minute, second, millisecond));
          });
          src_dateutil.sort(set);
          return set;
      };
      Iterinfo.prototype.mtimeset = function (hour, minute, _, millisecond) {
          var set = this.options.bysecond.map(function (second) {
              return new Time(hour, minute, second, millisecond);
          });
          src_dateutil.sort(set);
          return set;
      };
      Iterinfo.prototype.stimeset = function (hour, minute, second, millisecond) {
          return [new Time(hour, minute, second, millisecond)];
      };
      Iterinfo.prototype.getdayset = function (freq) {
          switch (freq) {
              case Frequency.YEARLY: return this.ydayset.bind(this);
              case Frequency.MONTHLY: return this.mdayset.bind(this);
              case Frequency.WEEKLY: return this.wdayset.bind(this);
              case Frequency.DAILY: return this.ddayset.bind(this);
              default: return this.ddayset.bind(this);
          }
      };
      Iterinfo.prototype.gettimeset = function (freq) {
          switch (freq) {
              case Frequency.HOURLY: return this.htimeset.bind(this);
              case Frequency.MINUTELY: return this.mtimeset.bind(this);
              case Frequency.SECONDLY: return this.stimeset.bind(this);
          }
      };
      return Iterinfo;
  }());
  /* harmony default export */ var iterinfo = (iterinfo_Iterinfo);

  // CONCATENATED MODULE: ./src/iter/poslist.ts


  function buildPoslist(bysetpos, timeset, start, end, ii, dayset) {
      var poslist = [];
      for (var j = 0; j < bysetpos.length; j++) {
          var daypos = void 0;
          var timepos = void 0;
          var pos = bysetpos[j];
          if (pos < 0) {
              daypos = Math.floor(pos / timeset.length);
              timepos = Object(helpers["j" /* pymod */])(pos, timeset.length);
          }
          else {
              daypos = Math.floor((pos - 1) / timeset.length);
              timepos = Object(helpers["j" /* pymod */])(pos - 1, timeset.length);
          }
          var tmp = [];
          for (var k = start; k < end; k++) {
              var val = dayset[k];
              if (!Object(helpers["f" /* isPresent */])(val))
                  continue;
              tmp.push(val);
          }
          var i = void 0;
          if (daypos < 0) {
              i = tmp.slice(daypos)[0];
          }
          else {
              i = tmp[daypos];
          }
          var time = timeset[timepos];
          var date = src_dateutil.fromOrdinal(ii.yearordinal + i);
          var res = src_dateutil.combine(date, time);
          // XXX: can this ever be in the array?
          // - compare the actual date instead?
          if (!Object(helpers["c" /* includes */])(poslist, res))
              poslist.push(res);
      }
      src_dateutil.sort(poslist);
      return poslist;
  }

  // CONCATENATED MODULE: ./src/iter/index.ts









  function iter(iterResult, options) {
      var dtstart = options.dtstart, freq = options.freq, interval = options.interval, until = options.until, bysetpos = options.bysetpos;
      var count = options.count;
      if (count === 0 || interval === 0) {
          return emitResult(iterResult);
      }
      var counterDate = datetime_DateTime.fromDate(dtstart);
      var ii = new iterinfo(options);
      ii.rebuild(counterDate.year, counterDate.month);
      var timeset = makeTimeset(ii, counterDate, options);
      while (true) {
          var _a = ii.getdayset(freq)(counterDate.year, counterDate.month, counterDate.day), dayset = _a[0], start = _a[1], end = _a[2];
          var filtered = removeFilteredDays(dayset, start, end, ii, options);
          if (Object(helpers["h" /* notEmpty */])(bysetpos)) {
              var poslist = buildPoslist(bysetpos, timeset, start, end, ii, dayset);
              for (var j = 0; j < poslist.length; j++) {
                  var res = poslist[j];
                  if (until && res > until) {
                      return emitResult(iterResult);
                  }
                  if (res >= dtstart) {
                      var rezonedDate = rezoneIfNeeded(res, options);
                      if (!iterResult.accept(rezonedDate)) {
                          return emitResult(iterResult);
                      }
                      if (count) {
                          --count;
                          if (!count) {
                              return emitResult(iterResult);
                          }
                      }
                  }
              }
          }
          else {
              for (var j = start; j < end; j++) {
                  var currentDay = dayset[j];
                  if (!Object(helpers["f" /* isPresent */])(currentDay)) {
                      continue;
                  }
                  var date = src_dateutil.fromOrdinal(ii.yearordinal + currentDay);
                  for (var k = 0; k < timeset.length; k++) {
                      var time = timeset[k];
                      var res = src_dateutil.combine(date, time);
                      if (until && res > until) {
                          return emitResult(iterResult);
                      }
                      if (res >= dtstart) {
                          var rezonedDate = rezoneIfNeeded(res, options);
                          if (!iterResult.accept(rezonedDate)) {
                              return emitResult(iterResult);
                          }
                          if (count) {
                              --count;
                              if (!count) {
                                  return emitResult(iterResult);
                              }
                          }
                      }
                  }
              }
          }
          if (options.interval === 0) {
              return emitResult(iterResult);
          }
          // Handle frequency and interval
          counterDate.add(options, filtered);
          if (counterDate.year > src_dateutil.MAXYEAR) {
              return emitResult(iterResult);
          }
          if (!freqIsDailyOrGreater(freq)) {
              timeset = ii.gettimeset(freq)(counterDate.hour, counterDate.minute, counterDate.second, 0);
          }
          ii.rebuild(counterDate.year, counterDate.month);
      }
  }
  function isFiltered(ii, currentDay, options) {
      var bymonth = options.bymonth, byweekno = options.byweekno, byweekday = options.byweekday, byeaster = options.byeaster, bymonthday = options.bymonthday, bynmonthday = options.bynmonthday, byyearday = options.byyearday;
      return ((Object(helpers["h" /* notEmpty */])(bymonth) && !Object(helpers["c" /* includes */])(bymonth, ii.mmask[currentDay])) ||
          (Object(helpers["h" /* notEmpty */])(byweekno) && !ii.wnomask[currentDay]) ||
          (Object(helpers["h" /* notEmpty */])(byweekday) && !Object(helpers["c" /* includes */])(byweekday, ii.wdaymask[currentDay])) ||
          (Object(helpers["h" /* notEmpty */])(ii.nwdaymask) && !ii.nwdaymask[currentDay]) ||
          (byeaster !== null && !Object(helpers["c" /* includes */])(ii.eastermask, currentDay)) ||
          ((Object(helpers["h" /* notEmpty */])(bymonthday) || Object(helpers["h" /* notEmpty */])(bynmonthday)) &&
              !Object(helpers["c" /* includes */])(bymonthday, ii.mdaymask[currentDay]) &&
              !Object(helpers["c" /* includes */])(bynmonthday, ii.nmdaymask[currentDay])) ||
          (Object(helpers["h" /* notEmpty */])(byyearday) &&
              ((currentDay < ii.yearlen &&
                  !Object(helpers["c" /* includes */])(byyearday, currentDay + 1) &&
                  !Object(helpers["c" /* includes */])(byyearday, -ii.yearlen + currentDay)) ||
                  (currentDay >= ii.yearlen &&
                      !Object(helpers["c" /* includes */])(byyearday, currentDay + 1 - ii.yearlen) &&
                      !Object(helpers["c" /* includes */])(byyearday, -ii.nextyearlen + currentDay - ii.yearlen)))));
  }
  function rezoneIfNeeded(date, options) {
      return new datewithzone_DateWithZone(date, options.tzid).rezonedDate();
  }
  function emitResult(iterResult) {
      return iterResult.getValue();
  }
  function removeFilteredDays(dayset, start, end, ii, options) {
      var filtered = false;
      for (var dayCounter = start; dayCounter < end; dayCounter++) {
          var currentDay = dayset[dayCounter];
          filtered = isFiltered(ii, currentDay, options);
          if (filtered)
              dayset[currentDay] = null;
      }
      return filtered;
  }
  function makeTimeset(ii, counterDate, options) {
      var freq = options.freq, byhour = options.byhour, byminute = options.byminute, bysecond = options.bysecond;
      if (freqIsDailyOrGreater(freq)) {
          return buildTimeset(options);
      }
      if ((freq >= src_rrule.HOURLY &&
          Object(helpers["h" /* notEmpty */])(byhour) &&
          !Object(helpers["c" /* includes */])(byhour, counterDate.hour)) ||
          (freq >= src_rrule.MINUTELY &&
              Object(helpers["h" /* notEmpty */])(byminute) &&
              !Object(helpers["c" /* includes */])(byminute, counterDate.minute)) ||
          (freq >= src_rrule.SECONDLY &&
              Object(helpers["h" /* notEmpty */])(bysecond) &&
              !Object(helpers["c" /* includes */])(bysecond, counterDate.second))) {
          return [];
      }
      return ii.gettimeset(freq)(counterDate.hour, counterDate.minute, counterDate.second, counterDate.millisecond);
  }

  // CONCATENATED MODULE: ./src/rrule.ts










  var getnlp = function () {
      // Lazy, runtime import to avoid circular refs.
      if (!getnlp._nlp) {
          getnlp._nlp = __webpack_require__(4);
      }
      return getnlp._nlp;
  };
  // =============================================================================
  // RRule
  // =============================================================================
  var Days = {
      MO: new weekday["b" /* Weekday */](0),
      TU: new weekday["b" /* Weekday */](1),
      WE: new weekday["b" /* Weekday */](2),
      TH: new weekday["b" /* Weekday */](3),
      FR: new weekday["b" /* Weekday */](4),
      SA: new weekday["b" /* Weekday */](5),
      SU: new weekday["b" /* Weekday */](6)
  };
  var DEFAULT_OPTIONS = {
      freq: Frequency.YEARLY,
      dtstart: null,
      interval: 1,
      wkst: Days.MO,
      count: null,
      until: null,
      tzid: null,
      bysetpos: null,
      bymonth: null,
      bymonthday: null,
      bynmonthday: null,
      byyearday: null,
      byweekno: null,
      byweekday: null,
      bynweekday: null,
      byhour: null,
      byminute: null,
      bysecond: null,
      byeaster: null
  };
  var rrule_defaultKeys = Object.keys(DEFAULT_OPTIONS);
  /**
   *
   * @param {Options?} options - see <http://labix.org/python-dateutil/#head-cf004ee9a75592797e076752b2a889c10f445418>
   *        The only required option is `freq`, one of RRule.YEARLY, RRule.MONTHLY, ...
   * @constructor
   */
  var rrule_RRule = /** @class */ (function () {
      function RRule(options, noCache) {
          if (options === void 0) { options = {}; }
          if (noCache === void 0) { noCache = false; }
          // RFC string
          this._cache = noCache ? null : new cache_Cache();
          // used by toString()
          this.origOptions = initializeOptions(options);
          var parsedOptions = parseOptions(options).parsedOptions;
          this.options = parsedOptions;
      }
      RRule.parseText = function (text, language) {
          return getnlp().parseText(text, language);
      };
      RRule.fromText = function (text, language) {
          return getnlp().fromText(text, language);
      };
      RRule.fromString = function (str) {
          return new RRule(RRule.parseString(str) || undefined);
      };
      RRule.prototype._iter = function (iterResult) {
          return iter(iterResult, this.options);
      };
      RRule.prototype._cacheGet = function (what, args) {
          if (!this._cache)
              return false;
          return this._cache._cacheGet(what, args);
      };
      RRule.prototype._cacheAdd = function (what, value, args) {
          if (!this._cache)
              return;
          return this._cache._cacheAdd(what, value, args);
      };
      /**
       * @param {Function} iterator - optional function that will be called
       *                   on each date that is added. It can return false
       *                   to stop the iteration.
       * @return Array containing all recurrences.
       */
      RRule.prototype.all = function (iterator) {
          if (iterator) {
              return this._iter(new callbackiterresult('all', {}, iterator));
          }
          var result = this._cacheGet('all');
          if (result === false) {
              result = this._iter(new iterresult('all', {}));
              this._cacheAdd('all', result);
          }
          return result;
      };
      /**
       * Returns all the occurrences of the rrule between after and before.
       * The inc keyword defines what happens if after and/or before are
       * themselves occurrences. With inc == True, they will be included in the
       * list, if they are found in the recurrence set.
       * @return Array
       */
      RRule.prototype.between = function (after, before, inc, iterator) {
          if (inc === void 0) { inc = false; }
          if (!src_dateutil.isValidDate(after) || !src_dateutil.isValidDate(before))
              throw new Error('Invalid date passed in to RRule.between');
          var args = {
              before: before,
              after: after,
              inc: inc
          };
          if (iterator) {
              return this._iter(new callbackiterresult('between', args, iterator));
          }
          var result = this._cacheGet('between', args);
          if (result === false) {
              result = this._iter(new iterresult('between', args));
              this._cacheAdd('between', result, args);
          }
          return result;
      };
      /**
       * Returns the last recurrence before the given datetime instance.
       * The inc keyword defines what happens if dt is an occurrence.
       * With inc == True, if dt itself is an occurrence, it will be returned.
       * @return Date or null
       */
      RRule.prototype.before = function (dt, inc) {
          if (inc === void 0) { inc = false; }
          if (!src_dateutil.isValidDate(dt))
              throw new Error('Invalid date passed in to RRule.before');
          var args = { dt: dt, inc: inc };
          var result = this._cacheGet('before', args);
          if (result === false) {
              result = this._iter(new iterresult('before', args));
              this._cacheAdd('before', result, args);
          }
          return result;
      };
      /**
       * Returns the first recurrence after the given datetime instance.
       * The inc keyword defines what happens if dt is an occurrence.
       * With inc == True, if dt itself is an occurrence, it will be returned.
       * @return Date or null
       */
      RRule.prototype.after = function (dt, inc) {
          if (inc === void 0) { inc = false; }
          if (!src_dateutil.isValidDate(dt))
              throw new Error('Invalid date passed in to RRule.after');
          var args = { dt: dt, inc: inc };
          var result = this._cacheGet('after', args);
          if (result === false) {
              result = this._iter(new iterresult('after', args));
              this._cacheAdd('after', result, args);
          }
          return result;
      };
      /**
       * Returns the number of recurrences in this set. It will have go trough
       * the whole recurrence, if this hasn't been done before.
       */
      RRule.prototype.count = function () {
          return this.all().length;
      };
      /**
       * Converts the rrule into its string representation
       * @see <http://www.ietf.org/rfc/rfc2445.txt>
       * @return String
       */
      RRule.prototype.toString = function () {
          return optionsToString(this.origOptions);
      };
      /**
       * Will convert all rules described in nlp:ToText
       * to text.
       */
      RRule.prototype.toText = function (gettext, language, dateFormatter) {
          return getnlp().toText(this, gettext, language, dateFormatter);
      };
      RRule.prototype.isFullyConvertibleToText = function () {
          return getnlp().isFullyConvertible(this);
      };
      /**
       * @return a RRule instance with the same freq and options
       *          as this one (cache is not cloned)
       */
      RRule.prototype.clone = function () {
          return new RRule(this.origOptions);
      };
      // RRule class 'constants'
      RRule.FREQUENCIES = [
          'YEARLY',
          'MONTHLY',
          'WEEKLY',
          'DAILY',
          'HOURLY',
          'MINUTELY',
          'SECONDLY'
      ];
      RRule.YEARLY = Frequency.YEARLY;
      RRule.MONTHLY = Frequency.MONTHLY;
      RRule.WEEKLY = Frequency.WEEKLY;
      RRule.DAILY = Frequency.DAILY;
      RRule.HOURLY = Frequency.HOURLY;
      RRule.MINUTELY = Frequency.MINUTELY;
      RRule.SECONDLY = Frequency.SECONDLY;
      RRule.MO = Days.MO;
      RRule.TU = Days.TU;
      RRule.WE = Days.WE;
      RRule.TH = Days.TH;
      RRule.FR = Days.FR;
      RRule.SA = Days.SA;
      RRule.SU = Days.SU;
      RRule.parseString = parseString;
      RRule.optionsToString = optionsToString;
      return RRule;
  }());
  /* harmony default export */ var src_rrule = (rrule_RRule);

  // CONCATENATED MODULE: ./src/iterset.ts



  function iterSet(iterResult, _rrule, _exrule, _rdate, _exdate, tzid) {
      var _exdateHash = {};
      var _accept = iterResult.accept;
      function evalExdate(after, before) {
          _exrule.forEach(function (rrule) {
              rrule.between(after, before, true).forEach(function (date) {
                  _exdateHash[Number(date)] = true;
              });
          });
      }
      _exdate.forEach(function (date) {
          var zonedDate = new datewithzone_DateWithZone(date, tzid).rezonedDate();
          _exdateHash[Number(zonedDate)] = true;
      });
      iterResult.accept = function (date) {
          var dt = Number(date);
          if (isNaN(dt))
              return _accept.call(this, date);
          if (!_exdateHash[dt]) {
              evalExdate(new Date(dt - 1), new Date(dt + 1));
              if (!_exdateHash[dt]) {
                  _exdateHash[dt] = true;
                  return _accept.call(this, date);
              }
          }
          return true;
      };
      if (iterResult.method === 'between') {
          evalExdate(iterResult.args.after, iterResult.args.before);
          iterResult.accept = function (date) {
              var dt = Number(date);
              if (!_exdateHash[dt]) {
                  _exdateHash[dt] = true;
                  return _accept.call(this, date);
              }
              return true;
          };
      }
      for (var i = 0; i < _rdate.length; i++) {
          var zonedDate = new datewithzone_DateWithZone(_rdate[i], tzid).rezonedDate();
          if (!iterResult.accept(new Date(zonedDate.getTime())))
              break;
      }
      _rrule.forEach(function (rrule) {
          iter(iterResult, rrule.options);
      });
      var res = iterResult._result;
      src_dateutil.sort(res);
      switch (iterResult.method) {
          case 'all':
          case 'between':
              return res;
          case 'before':
              return ((res.length && res[res.length - 1]) || null);
          case 'after':
          default:
              return ((res.length && res[0]) || null);
      }
  }

  // CONCATENATED MODULE: ./src/rrulestr.ts






  /**
   * RRuleStr
   *  To parse a set of rrule strings
   */
  var rrulestr_DEFAULT_OPTIONS = {
      dtstart: null,
      cache: false,
      unfold: false,
      forceset: false,
      compatible: false,
      tzid: null
  };
  function parseInput(s, options) {
      var rrulevals = [];
      var rdatevals = [];
      var exrulevals = [];
      var exdatevals = [];
      var _a = parseDtstart(s), dtstart = _a.dtstart, tzid = _a.tzid;
      var lines = splitIntoLines(s, options.unfold);
      lines.forEach(function (line) {
          if (!line)
              return;
          var _a = breakDownLine(line), name = _a.name, parms = _a.parms, value = _a.value;
          switch (name.toUpperCase()) {
              case 'RRULE':
                  if (parms.length) {
                      throw new Error("unsupported RRULE parm: " + parms.join(','));
                  }
                  rrulevals.push(parseString(line));
                  break;
              case 'RDATE':
                  var _b = /RDATE(?:;TZID=([^:=]+))?/i.exec(line), _ = _b[0], rdateTzid = _b[1];
                  if (rdateTzid && !tzid) {
                      tzid = rdateTzid;
                  }
                  rdatevals = rdatevals.concat(parseRDate(value, parms));
                  break;
              case 'EXRULE':
                  if (parms.length) {
                      throw new Error("unsupported EXRULE parm: " + parms.join(','));
                  }
                  exrulevals.push(parseString(value));
                  break;
              case 'EXDATE':
                  exdatevals = exdatevals.concat(parseRDate(value, parms));
                  break;
              case 'DTSTART':
                  break;
              default:
                  throw new Error('unsupported property: ' + name);
          }
      });
      return {
          dtstart: dtstart,
          tzid: tzid,
          rrulevals: rrulevals,
          rdatevals: rdatevals,
          exrulevals: exrulevals,
          exdatevals: exdatevals
      };
  }
  function buildRule(s, options) {
      var _a = parseInput(s, options), rrulevals = _a.rrulevals, rdatevals = _a.rdatevals, exrulevals = _a.exrulevals, exdatevals = _a.exdatevals, dtstart = _a.dtstart, tzid = _a.tzid;
      var noCache = options.cache === false;
      if (options.compatible) {
          options.forceset = true;
          options.unfold = true;
      }
      if (options.forceset ||
          rrulevals.length > 1 ||
          rdatevals.length ||
          exrulevals.length ||
          exdatevals.length) {
          var rset_1 = new rruleset(noCache);
          rset_1.dtstart(dtstart);
          rset_1.tzid(tzid || undefined);
          rrulevals.forEach(function (val) {
              rset_1.rrule(new src_rrule(groomRruleOptions(val, dtstart, tzid), noCache));
          });
          rdatevals.forEach(function (date) {
              rset_1.rdate(date);
          });
          exrulevals.forEach(function (val) {
              rset_1.exrule(new src_rrule(groomRruleOptions(val, dtstart, tzid), noCache));
          });
          exdatevals.forEach(function (date) {
              rset_1.exdate(date);
          });
          if (options.compatible && options.dtstart)
              rset_1.rdate(dtstart);
          return rset_1;
      }
      var val = rrulevals[0] || {};
      return new src_rrule(groomRruleOptions(val, val.dtstart || options.dtstart || dtstart, val.tzid || options.tzid || tzid), noCache);
  }
  function rrulestr(s, options) {
      if (options === void 0) { options = {}; }
      return buildRule(s, rrulestr_initializeOptions(options));
  }
  function groomRruleOptions(val, dtstart, tzid) {
      return __assign(__assign({}, val), { dtstart: dtstart,
          tzid: tzid });
  }
  function rrulestr_initializeOptions(options) {
      var invalid = [];
      var keys = Object.keys(options);
      var defaultKeys = Object.keys(rrulestr_DEFAULT_OPTIONS);
      keys.forEach(function (key) {
          if (!Object(helpers["c" /* includes */])(defaultKeys, key))
              invalid.push(key);
      });
      if (invalid.length) {
          throw new Error('Invalid options: ' + invalid.join(', '));
      }
      return __assign(__assign({}, rrulestr_DEFAULT_OPTIONS), options);
  }
  function extractName(line) {
      if (line.indexOf(':') === -1) {
          return {
              name: 'RRULE',
              value: line
          };
      }
      var _a = Object(helpers["m" /* split */])(line, ':', 1), name = _a[0], value = _a[1];
      return {
          name: name,
          value: value
      };
  }
  function breakDownLine(line) {
      var _a = extractName(line), name = _a.name, value = _a.value;
      var parms = name.split(';');
      if (!parms)
          throw new Error('empty property name');
      return {
          name: parms[0].toUpperCase(),
          parms: parms.slice(1),
          value: value
      };
  }
  function splitIntoLines(s, unfold) {
      if (unfold === void 0) { unfold = false; }
      s = s && s.trim();
      if (!s)
          throw new Error('Invalid empty string');
      // More info about 'unfold' option
      // Go head to http://www.ietf.org/rfc/rfc2445.txt
      if (!unfold) {
          return s.split(/\s/);
      }
      var lines = s.split('\n');
      var i = 0;
      while (i < lines.length) {
          // TODO
          var line = (lines[i] = lines[i].replace(/\s+$/g, ''));
          if (!line) {
              lines.splice(i, 1);
          }
          else if (i > 0 && line[0] === ' ') {
              lines[i - 1] += line.slice(1);
              lines.splice(i, 1);
          }
          else {
              i += 1;
          }
      }
      return lines;
  }
  function validateDateParm(parms) {
      parms.forEach(function (parm) {
          if (!/(VALUE=DATE(-TIME)?)|(TZID=)/.test(parm)) {
              throw new Error('unsupported RDATE/EXDATE parm: ' + parm);
          }
      });
  }
  function parseRDate(rdateval, parms) {
      validateDateParm(parms);
      return rdateval
          .split(',')
          .map(function (datestr) { return src_dateutil.untilStringToDate(datestr); });
  }

  // CONCATENATED MODULE: ./src/rruleset.ts







  function createGetterSetter(fieldName) {
      var _this = this;
      return function (field) {
          if (field !== undefined) {
              _this["_" + fieldName] = field;
          }
          if (_this["_" + fieldName] !== undefined) {
              return _this["_" + fieldName];
          }
          for (var i = 0; i < _this._rrule.length; i++) {
              var field_1 = _this._rrule[i].origOptions[fieldName];
              if (field_1) {
                  return field_1;
              }
          }
      };
  }
  var rruleset_RRuleSet = /** @class */ (function (_super) {
      __extends(RRuleSet, _super);
      /**
       *
       * @param {Boolean?} noCache
       *  The same stratagy as RRule on cache, default to false
       * @constructor
       */
      function RRuleSet(noCache) {
          if (noCache === void 0) { noCache = false; }
          var _this = _super.call(this, {}, noCache) || this;
          _this.dtstart = createGetterSetter.apply(_this, ['dtstart']);
          _this.tzid = createGetterSetter.apply(_this, ['tzid']);
          _this._rrule = [];
          _this._rdate = [];
          _this._exrule = [];
          _this._exdate = [];
          return _this;
      }
      RRuleSet.prototype._iter = function (iterResult) {
          return iterSet(iterResult, this._rrule, this._exrule, this._rdate, this._exdate, this.tzid());
      };
      /**
       * Adds an RRule to the set
       *
       * @param {RRule}
       */
      RRuleSet.prototype.rrule = function (rrule) {
          _addRule(rrule, this._rrule);
      };
      /**
       * Adds an EXRULE to the set
       *
       * @param {RRule}
       */
      RRuleSet.prototype.exrule = function (rrule) {
          _addRule(rrule, this._exrule);
      };
      /**
       * Adds an RDate to the set
       *
       * @param {Date}
       */
      RRuleSet.prototype.rdate = function (date) {
          _addDate(date, this._rdate);
      };
      /**
       * Adds an EXDATE to the set
       *
       * @param {Date}
       */
      RRuleSet.prototype.exdate = function (date) {
          _addDate(date, this._exdate);
      };
      /**
       * Get list of included rrules in this recurrence set.
       *
       * @return List of rrules
       */
      RRuleSet.prototype.rrules = function () {
          return this._rrule.map(function (e) { return rrulestr(e.toString()); });
      };
      /**
       * Get list of excluded rrules in this recurrence set.
       *
       * @return List of exrules
       */
      RRuleSet.prototype.exrules = function () {
          return this._exrule.map(function (e) { return rrulestr(e.toString()); });
      };
      /**
       * Get list of included datetimes in this recurrence set.
       *
       * @return List of rdates
       */
      RRuleSet.prototype.rdates = function () {
          return this._rdate.map(function (e) { return new Date(e.getTime()); });
      };
      /**
       * Get list of included datetimes in this recurrence set.
       *
       * @return List of exdates
       */
      RRuleSet.prototype.exdates = function () {
          return this._exdate.map(function (e) { return new Date(e.getTime()); });
      };
      RRuleSet.prototype.valueOf = function () {
          var result = [];
          if (!this._rrule.length && this._dtstart) {
              result = result.concat(optionsToString({ dtstart: this._dtstart }));
          }
          this._rrule.forEach(function (rrule) {
              result = result.concat(rrule.toString().split('\n'));
          });
          this._exrule.forEach(function (exrule) {
              result = result.concat(exrule.toString().split('\n')
                  .map(function (line) { return line.replace(/^RRULE:/, 'EXRULE:'); })
                  .filter(function (line) { return !/^DTSTART/.test(line); }));
          });
          if (this._rdate.length) {
              result.push(rdatesToString('RDATE', this._rdate, this.tzid()));
          }
          if (this._exdate.length) {
              result.push(rdatesToString('EXDATE', this._exdate, this.tzid()));
          }
          return result;
      };
      /**
       * to generate recurrence field such as:
       *   DTSTART:19970902T010000Z
       *   RRULE:FREQ=YEARLY;COUNT=2;BYDAY=TU
       *   RRULE:FREQ=YEARLY;COUNT=1;BYDAY=TH
       */
      RRuleSet.prototype.toString = function () {
          return this.valueOf().join('\n');
      };
      /**
       * Create a new RRuleSet Object completely base on current instance
       */
      RRuleSet.prototype.clone = function () {
          var rrs = new RRuleSet(!!this._cache);
          this._rrule.forEach(function (rule) { return rrs.rrule(rule.clone()); });
          this._exrule.forEach(function (rule) { return rrs.exrule(rule.clone()); });
          this._rdate.forEach(function (date) { return rrs.rdate(new Date(date.getTime())); });
          this._exdate.forEach(function (date) { return rrs.exdate(new Date(date.getTime())); });
          return rrs;
      };
      return RRuleSet;
  }(src_rrule));
  /* harmony default export */ var rruleset = (rruleset_RRuleSet);
  function _addRule(rrule, collection) {
      if (!(rrule instanceof src_rrule)) {
          throw new TypeError(String(rrule) + ' is not RRule instance');
      }
      if (!Object(helpers["c" /* includes */])(collection.map(String), String(rrule))) {
          collection.push(rrule);
      }
  }
  function _addDate(date, collection) {
      if (!(date instanceof Date)) {
          throw new TypeError(String(date) + ' is not Date instance');
      }
      if (!Object(helpers["c" /* includes */])(collection.map(Number), Number(date))) {
          collection.push(date);
          src_dateutil.sort(collection);
      }
  }
  function rdatesToString(param, rdates, tzid) {
      var isUTC = !tzid || tzid.toUpperCase() === 'UTC';
      var header = isUTC ? param + ":" : param + ";TZID=" + tzid + ":";
      var dateString = rdates
          .map(function (rdate) { return src_dateutil.timeToUntilString(rdate.valueOf(), isUTC); })
          .join(',');
      return "" + header + dateString;
  }

  // CONCATENATED MODULE: ./src/index.ts
  /* concated harmony reexport Frequency */__webpack_require__.d(__webpack_exports__, "Frequency", function() { return Frequency; });
  /* concated harmony reexport Weekday */__webpack_require__.d(__webpack_exports__, "Weekday", function() { return weekday["b" /* Weekday */]; });
  /* concated harmony reexport RRule */__webpack_require__.d(__webpack_exports__, "RRule", function() { return src_rrule; });
  /* concated harmony reexport RRuleSet */__webpack_require__.d(__webpack_exports__, "RRuleSet", function() { return rruleset; });
  /* concated harmony reexport rrulestr */__webpack_require__.d(__webpack_exports__, "rrulestr", function() { return rrulestr; });
  /*!
   * rrule.js - Library for working with recurrence rules for calendar dates.
   * https://github.com/jakubroztocil/rrule
   *
   * Copyright 2010, Jakub Roztocil and Lars Schoning
   * Licenced under the BSD licence.
   * https://github.com/jakubroztocil/rrule/blob/master/LICENCE
   *
   * Based on:
   * python-dateutil - Extensions to the standard Python datetime module.
   * Copyright (c) 2003-2011 - Gustavo Niemeyer <gustavo@niemeyer.net>
   * Copyright (c) 2012 - Tomi PievilÃ¤inen <tomi.pievilainen@iki.fi>
   * https://github.com/jakubroztocil/rrule/blob/master/LICENCE
   *
   */





  // =============================================================================
  // Export
  // =============================================================================

  /* harmony default export */ var src = __webpack_exports__["default"] = (src_rrule);


  /***/ }),
  /* 2 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ALL_WEEKDAYS; });
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return Weekday; });
  // =============================================================================
  // Weekday
  // =============================================================================
  var ALL_WEEKDAYS = ['MO', 'TU', 'WE', 'TH', 'FR', 'SA', 'SU'];
  var Weekday = /** @class */ (function () {
      function Weekday(weekday, n) {
          if (n === 0)
              throw new Error("Can't create weekday with n == 0");
          this.weekday = weekday;
          this.n = n;
      }
      Weekday.fromStr = function (str) {
          return new Weekday(ALL_WEEKDAYS.indexOf(str));
      };
      // __call__ - Cannot call the object directly, do it through
      // e.g. RRule.TH.nth(-1) instead,
      Weekday.prototype.nth = function (n) {
          return this.n === n ? this : new Weekday(this.weekday, n);
      };
      // __eq__
      Weekday.prototype.equals = function (other) {
          return this.weekday === other.weekday && this.n === other.n;
      };
      // __repr__
      Weekday.prototype.toString = function () {
          var s = ALL_WEEKDAYS[this.weekday];
          if (this.n)
              s = (this.n > 0 ? '+' : '') + String(this.n) + s;
          return s;
      };
      Weekday.prototype.getJsWeekday = function () {
          return this.weekday === 6 ? 0 : this.weekday + 1;
      };
      return Weekday;
  }());



  /***/ }),
  /* 3 */
  /***/ (function(module, exports) {

  module.exports = __WEBPACK_EXTERNAL_MODULE__3__;

  /***/ }),
  /* 4 */
  /***/ (function(module, __webpack_exports__, __webpack_require__) {
  __webpack_require__.r(__webpack_exports__);

  // CONCATENATED MODULE: ./src/nlp/i18n.ts
  // =============================================================================
  // i18n
  // =============================================================================
  var ENGLISH = {
      dayNames: [
          'Sunday', 'Monday', 'Tuesday', 'Wednesday',
          'Thursday', 'Friday', 'Saturday'
      ],
      monthNames: [
          'January', 'February', 'March', 'April', 'May',
          'June', 'July', 'August', 'September', 'October',
          'November', 'December'
      ],
      tokens: {
          'SKIP': /^[ \r\n\t]+|^\.$/,
          'number': /^[1-9][0-9]*/,
          'numberAsText': /^(one|two|three)/i,
          'every': /^every/i,
          'day(s)': /^days?/i,
          'weekday(s)': /^weekdays?/i,
          'week(s)': /^weeks?/i,
          'hour(s)': /^hours?/i,
          'minute(s)': /^minutes?/i,
          'month(s)': /^months?/i,
          'year(s)': /^years?/i,
          'on': /^(on|in)/i,
          'at': /^(at)/i,
          'the': /^the/i,
          'first': /^first/i,
          'second': /^second/i,
          'third': /^third/i,
          'nth': /^([1-9][0-9]*)(\.|th|nd|rd|st)/i,
          'last': /^last/i,
          'for': /^for/i,
          'time(s)': /^times?/i,
          'until': /^(un)?til/i,
          'monday': /^mo(n(day)?)?/i,
          'tuesday': /^tu(e(s(day)?)?)?/i,
          'wednesday': /^we(d(n(esday)?)?)?/i,
          'thursday': /^th(u(r(sday)?)?)?/i,
          'friday': /^fr(i(day)?)?/i,
          'saturday': /^sa(t(urday)?)?/i,
          'sunday': /^su(n(day)?)?/i,
          'january': /^jan(uary)?/i,
          'february': /^feb(ruary)?/i,
          'march': /^mar(ch)?/i,
          'april': /^apr(il)?/i,
          'may': /^may/i,
          'june': /^june?/i,
          'july': /^july?/i,
          'august': /^aug(ust)?/i,
          'september': /^sep(t(ember)?)?/i,
          'october': /^oct(ober)?/i,
          'november': /^nov(ember)?/i,
          'december': /^dec(ember)?/i,
          'comma': /^(,\s*|(and|or)\s*)+/i
      }
  };
  /* harmony default export */ var i18n = (ENGLISH);

  // EXTERNAL MODULE: ./src/index.ts + 22 modules
  var src = __webpack_require__(1);

  // EXTERNAL MODULE: ./src/helpers.ts
  var helpers = __webpack_require__(0);

  // CONCATENATED MODULE: ./src/nlp/totext.ts



  // =============================================================================
  // Helper functions
  // =============================================================================
  /**
   * Return true if a value is in an array
   */
  var contains = function (arr, val) {
      return arr.indexOf(val) !== -1;
  };
  var defaultGetText = function (id) { return id.toString(); };
  var defaultDateFormatter = function (year, month, day) { return month + " " + day + ", " + year; };
  /**
   *
   * @param {RRule} rrule
   * Optional:
   * @param {Function} gettext function
   * @param {Object} language definition
   * @constructor
   */
  var totext_ToText = /** @class */ (function () {
      function ToText(rrule, gettext, language, dateFormatter) {
          if (gettext === void 0) { gettext = defaultGetText; }
          if (language === void 0) { language = i18n; }
          if (dateFormatter === void 0) { dateFormatter = defaultDateFormatter; }
          this.text = [];
          this.language = language || i18n;
          this.gettext = gettext;
          this.dateFormatter = dateFormatter;
          this.rrule = rrule;
          this.options = rrule.options;
          this.origOptions = rrule.origOptions;
          if (this.origOptions.bymonthday) {
              var bymonthday = [].concat(this.options.bymonthday);
              var bynmonthday = [].concat(this.options.bynmonthday);
              bymonthday.sort(function (a, b) { return a - b; });
              bynmonthday.sort(function (a, b) { return b - a; });
              // 1, 2, 3, .., -5, -4, -3, ..
              this.bymonthday = bymonthday.concat(bynmonthday);
              if (!this.bymonthday.length)
                  this.bymonthday = null;
          }
          if (Object(helpers["f" /* isPresent */])(this.origOptions.byweekday)) {
              var byweekday = !Object(helpers["d" /* isArray */])(this.origOptions.byweekday)
                  ? [this.origOptions.byweekday]
                  : this.origOptions.byweekday;
              var days = String(byweekday);
              this.byweekday = {
                  allWeeks: byweekday.filter(function (weekday) {
                      return !weekday.n;
                  }),
                  someWeeks: byweekday.filter(function (weekday) {
                      return Boolean(weekday.n);
                  }),
                  isWeekdays: days.indexOf('MO') !== -1 &&
                      days.indexOf('TU') !== -1 &&
                      days.indexOf('WE') !== -1 &&
                      days.indexOf('TH') !== -1 &&
                      days.indexOf('FR') !== -1 &&
                      days.indexOf('SA') === -1 &&
                      days.indexOf('SU') === -1,
                  isEveryDay: days.indexOf('MO') !== -1 &&
                      days.indexOf('TU') !== -1 &&
                      days.indexOf('WE') !== -1 &&
                      days.indexOf('TH') !== -1 &&
                      days.indexOf('FR') !== -1 &&
                      days.indexOf('SA') !== -1 &&
                      days.indexOf('SU') !== -1
              };
              var sortWeekDays = function (a, b) {
                  return a.weekday - b.weekday;
              };
              this.byweekday.allWeeks.sort(sortWeekDays);
              this.byweekday.someWeeks.sort(sortWeekDays);
              if (!this.byweekday.allWeeks.length)
                  this.byweekday.allWeeks = null;
              if (!this.byweekday.someWeeks.length)
                  this.byweekday.someWeeks = null;
          }
          else {
              this.byweekday = null;
          }
      }
      /**
       * Test whether the rrule can be fully converted to text.
       * @param {RRule} rrule
       * @return {Boolean}
       */
      ToText.isFullyConvertible = function (rrule) {
          var canConvert = true;
          if (!(rrule.options.freq in ToText.IMPLEMENTED))
              return false;
          if (rrule.origOptions.until && rrule.origOptions.count)
              return false;
          for (var key in rrule.origOptions) {
              if (contains(['dtstart', 'wkst', 'freq'], key))
                  return true;
              if (!contains(ToText.IMPLEMENTED[rrule.options.freq], key))
                  return false;
          }
          return canConvert;
      };
      ToText.prototype.isFullyConvertible = function () {
          return ToText.isFullyConvertible(this.rrule);
      };
      /**
       * Perform the conversion. Only some of the frequencies are supported.
       * If some of the rrule's options aren't supported, they'll
       * be omitted from the output an "(~ approximate)" will be appended.
       * @return {*}
       */
      ToText.prototype.toString = function () {
          var gettext = this.gettext;
          if (!(this.options.freq in ToText.IMPLEMENTED)) {
              return gettext('RRule error: Unable to fully convert this rrule to text');
          }
          this.text = [gettext('every')];
          // @ts-ignore
          this[src["default"].FREQUENCIES[this.options.freq]]();
          if (this.options.until) {
              this.add(gettext('until'));
              var until = this.options.until;
              this.add(this.dateFormatter(until.getUTCFullYear(), this.language.monthNames[until.getUTCMonth()], until.getUTCDate()));
          }
          else if (this.options.count) {
              this.add(gettext('for'))
                  .add(this.options.count.toString())
                  .add(this.plural(this.options.count) ? gettext('times') : gettext('time'));
          }
          if (!this.isFullyConvertible())
              this.add(gettext('(~ approximate)'));
          return this.text.join('');
      };
      ToText.prototype.HOURLY = function () {
          var gettext = this.gettext;
          if (this.options.interval !== 1)
              this.add(this.options.interval.toString());
          this.add(this.plural(this.options.interval) ? gettext('hours') : gettext('hour'));
      };
      ToText.prototype.MINUTELY = function () {
          var gettext = this.gettext;
          if (this.options.interval !== 1)
              this.add(this.options.interval.toString());
          this.add(this.plural(this.options.interval)
              ? gettext('minutes')
              : gettext('minutes'));
      };
      ToText.prototype.DAILY = function () {
          var gettext = this.gettext;
          if (this.options.interval !== 1)
              this.add(this.options.interval.toString());
          if (this.byweekday && this.byweekday.isWeekdays) {
              this.add(this.plural(this.options.interval)
                  ? gettext('weekdays')
                  : gettext('weekday'));
          }
          else {
              this.add(this.plural(this.options.interval) ? gettext('days') : gettext('day'));
          }
          if (this.origOptions.bymonth) {
              this.add(gettext('in'));
              this._bymonth();
          }
          if (this.bymonthday) {
              this._bymonthday();
          }
          else if (this.byweekday) {
              this._byweekday();
          }
          else if (this.origOptions.byhour) {
              this._byhour();
          }
      };
      ToText.prototype.WEEKLY = function () {
          var gettext = this.gettext;
          if (this.options.interval !== 1) {
              this.add(this.options.interval.toString()).add(this.plural(this.options.interval) ? gettext('weeks') : gettext('week'));
          }
          if (this.byweekday && this.byweekday.isWeekdays) {
              if (this.options.interval === 1) {
                  this.add(this.plural(this.options.interval)
                      ? gettext('weekdays')
                      : gettext('weekday'));
              }
              else {
                  this.add(gettext('on')).add(gettext('weekdays'));
              }
          }
          else if (this.byweekday && this.byweekday.isEveryDay) {
              this.add(this.plural(this.options.interval) ? gettext('days') : gettext('day'));
          }
          else {
              if (this.options.interval === 1)
                  this.add(gettext('week'));
              if (this.origOptions.bymonth) {
                  this.add(gettext('in'));
                  this._bymonth();
              }
              if (this.bymonthday) {
                  this._bymonthday();
              }
              else if (this.byweekday) {
                  this._byweekday();
              }
          }
      };
      ToText.prototype.MONTHLY = function () {
          var gettext = this.gettext;
          if (this.origOptions.bymonth) {
              if (this.options.interval !== 1) {
                  this.add(this.options.interval.toString()).add(gettext('months'));
                  if (this.plural(this.options.interval))
                      this.add(gettext('in'));
              }
              this._bymonth();
          }
          else {
              if (this.options.interval !== 1)
                  this.add(this.options.interval.toString());
              this.add(this.plural(this.options.interval)
                  ? gettext('months')
                  : gettext('month'));
          }
          if (this.bymonthday) {
              this._bymonthday();
          }
          else if (this.byweekday && this.byweekday.isWeekdays) {
              this.add(gettext('on')).add(gettext('weekdays'));
          }
          else if (this.byweekday) {
              this._byweekday();
          }
      };
      ToText.prototype.YEARLY = function () {
          var gettext = this.gettext;
          if (this.origOptions.bymonth) {
              if (this.options.interval !== 1) {
                  this.add(this.options.interval.toString());
                  this.add(gettext('years'));
              }
              this._bymonth();
          }
          else {
              if (this.options.interval !== 1)
                  this.add(this.options.interval.toString());
              this.add(this.plural(this.options.interval) ? gettext('years') : gettext('year'));
          }
          if (this.bymonthday) {
              this._bymonthday();
          }
          else if (this.byweekday) {
              this._byweekday();
          }
          if (this.options.byyearday) {
              this.add(gettext('on the'))
                  .add(this.list(this.options.byyearday, this.nth, gettext('and')))
                  .add(gettext('day'));
          }
          if (this.options.byweekno) {
              this.add(gettext('in'))
                  .add(this.plural(this.options.byweekno.length)
                  ? gettext('weeks')
                  : gettext('week'))
                  .add(this.list(this.options.byweekno, undefined, gettext('and')));
          }
      };
      ToText.prototype._bymonthday = function () {
          var gettext = this.gettext;
          if (this.byweekday && this.byweekday.allWeeks) {
              this.add(gettext('on'))
                  .add(this.list(this.byweekday.allWeeks, this.weekdaytext, gettext('or')))
                  .add(gettext('the'))
                  .add(this.list(this.bymonthday, this.nth, gettext('or')));
          }
          else {
              this.add(gettext('on the')).add(this.list(this.bymonthday, this.nth, gettext('and')));
          }
          // this.add(gettext('DAY'))
      };
      ToText.prototype._byweekday = function () {
          var gettext = this.gettext;
          if (this.byweekday.allWeeks && !this.byweekday.isWeekdays) {
              this.add(gettext('on')).add(this.list(this.byweekday.allWeeks, this.weekdaytext));
          }
          if (this.byweekday.someWeeks) {
              if (this.byweekday.allWeeks)
                  this.add(gettext('and'));
              this.add(gettext('on the')).add(this.list(this.byweekday.someWeeks, this.weekdaytext, gettext('and')));
          }
      };
      ToText.prototype._byhour = function () {
          var gettext = this.gettext;
          this.add(gettext('at')).add(this.list(this.origOptions.byhour, undefined, gettext('and')));
      };
      ToText.prototype._bymonth = function () {
          this.add(this.list(this.options.bymonth, this.monthtext, this.gettext('and')));
      };
      ToText.prototype.nth = function (n) {
          n = parseInt(n.toString(), 10);
          var nth;
          var npos;
          var gettext = this.gettext;
          if (n === -1)
              return gettext('last');
          npos = Math.abs(n);
          switch (npos) {
              case 1:
              case 21:
              case 31:
                  nth = npos + gettext('st');
                  break;
              case 2:
              case 22:
                  nth = npos + gettext('nd');
                  break;
              case 3:
              case 23:
                  nth = npos + gettext('rd');
                  break;
              default:
                  nth = npos + gettext('th');
          }
          return n < 0 ? nth + ' ' + gettext('last') : nth;
      };
      ToText.prototype.monthtext = function (m) {
          return this.language.monthNames[m - 1];
      };
      ToText.prototype.weekdaytext = function (wday) {
          var weekday = Object(helpers["e" /* isNumber */])(wday) ? (wday + 1) % 7 : wday.getJsWeekday();
          return ((wday.n ? this.nth(wday.n) + ' ' : '') + this.language.dayNames[weekday]);
      };
      ToText.prototype.plural = function (n) {
          return n % 100 !== 1;
      };
      ToText.prototype.add = function (s) {
          this.text.push(' ');
          this.text.push(s);
          return this;
      };
      ToText.prototype.list = function (arr, callback, finalDelim, delim) {
          if (delim === void 0) { delim = ','; }
          if (!Object(helpers["d" /* isArray */])(arr)) {
              arr = [arr];
          }
          var delimJoin = function (array, delimiter, finalDelimiter) {
              var list = '';
              for (var i = 0; i < array.length; i++) {
                  if (i !== 0) {
                      if (i === array.length - 1) {
                          list += ' ' + finalDelimiter + ' ';
                      }
                      else {
                          list += delimiter + ' ';
                      }
                  }
                  list += array[i];
              }
              return list;
          };
          callback =
              callback ||
                  function (o) {
                      return o.toString();
                  };
          var self = this;
          var realCallback = function (arg) {
              return callback && callback.call(self, arg);
          };
          if (finalDelim) {
              return delimJoin(arr.map(realCallback), delim, finalDelim);
          }
          else {
              return arr.map(realCallback).join(delim + ' ');
          }
      };
      return ToText;
  }());
  /* harmony default export */ var totext = (totext_ToText);

  // CONCATENATED MODULE: ./src/nlp/parsetext.ts


  // =============================================================================
  // Parser
  // =============================================================================
  var Parser = /** @class */ (function () {
      function Parser(rules) {
          this.done = true;
          this.rules = rules;
      }
      Parser.prototype.start = function (text) {
          this.text = text;
          this.done = false;
          return this.nextSymbol();
      };
      Parser.prototype.isDone = function () {
          return this.done && this.symbol === null;
      };
      Parser.prototype.nextSymbol = function () {
          var best;
          var bestSymbol;
          var p = this;
          this.symbol = null;
          this.value = null;
          do {
              if (this.done)
                  return false;
              var rule = void 0;
              best = null;
              for (var name_1 in this.rules) {
                  rule = this.rules[name_1];
                  var match = rule.exec(p.text);
                  if (match) {
                      if (best === null || match[0].length > best[0].length) {
                          best = match;
                          bestSymbol = name_1;
                      }
                  }
              }
              if (best != null) {
                  this.text = this.text.substr(best[0].length);
                  if (this.text === '')
                      this.done = true;
              }
              if (best == null) {
                  this.done = true;
                  this.symbol = null;
                  this.value = null;
                  return;
              }
              // @ts-ignore
          } while (bestSymbol === 'SKIP');
          // @ts-ignore
          this.symbol = bestSymbol;
          this.value = best;
          return true;
      };
      Parser.prototype.accept = function (name) {
          if (this.symbol === name) {
              if (this.value) {
                  var v = this.value;
                  this.nextSymbol();
                  return v;
              }
              this.nextSymbol();
              return true;
          }
          return false;
      };
      Parser.prototype.acceptNumber = function () {
          return this.accept('number');
      };
      Parser.prototype.expect = function (name) {
          if (this.accept(name))
              return true;
          throw new Error('expected ' + name + ' but found ' + this.symbol);
      };
      return Parser;
  }());
  function parseText(text, language) {
      if (language === void 0) { language = i18n; }
      var options = {};
      var ttr = new Parser(language.tokens);
      if (!ttr.start(text))
          return null;
      S();
      return options;
      function S() {
          // every [n]
          ttr.expect('every');
          var n = ttr.acceptNumber();
          if (n)
              options.interval = parseInt(n[0], 10);
          if (ttr.isDone())
              throw new Error('Unexpected end');
          switch (ttr.symbol) {
              case 'day(s)':
                  options.freq = src["default"].DAILY;
                  if (ttr.nextSymbol()) {
                      AT();
                      F();
                  }
                  break;
              // FIXME Note: every 2 weekdays != every two weeks on weekdays.
              // DAILY on weekdays is not a valid rule
              case 'weekday(s)':
                  options.freq = src["default"].WEEKLY;
                  options.byweekday = [
                      src["default"].MO,
                      src["default"].TU,
                      src["default"].WE,
                      src["default"].TH,
                      src["default"].FR
                  ];
                  ttr.nextSymbol();
                  F();
                  break;
              case 'week(s)':
                  options.freq = src["default"].WEEKLY;
                  if (ttr.nextSymbol()) {
                      ON();
                      F();
                  }
                  break;
              case 'hour(s)':
                  options.freq = src["default"].HOURLY;
                  if (ttr.nextSymbol()) {
                      ON();
                      F();
                  }
                  break;
              case 'minute(s)':
                  options.freq = src["default"].MINUTELY;
                  if (ttr.nextSymbol()) {
                      ON();
                      F();
                  }
                  break;
              case 'month(s)':
                  options.freq = src["default"].MONTHLY;
                  if (ttr.nextSymbol()) {
                      ON();
                      F();
                  }
                  break;
              case 'year(s)':
                  options.freq = src["default"].YEARLY;
                  if (ttr.nextSymbol()) {
                      ON();
                      F();
                  }
                  break;
              case 'monday':
              case 'tuesday':
              case 'wednesday':
              case 'thursday':
              case 'friday':
              case 'saturday':
              case 'sunday':
                  options.freq = src["default"].WEEKLY;
                  var key = ttr.symbol.substr(0, 2).toUpperCase();
                  options.byweekday = [src["default"][key]];
                  if (!ttr.nextSymbol())
                      return;
                  // TODO check for duplicates
                  while (ttr.accept('comma')) {
                      if (ttr.isDone())
                          throw new Error('Unexpected end');
                      var wkd = decodeWKD();
                      if (!wkd) {
                          throw new Error('Unexpected symbol ' + ttr.symbol + ', expected weekday');
                      }
                      // @ts-ignore
                      options.byweekday.push(src["default"][wkd]);
                      ttr.nextSymbol();
                  }
                  MDAYs();
                  F();
                  break;
              case 'january':
              case 'february':
              case 'march':
              case 'april':
              case 'may':
              case 'june':
              case 'july':
              case 'august':
              case 'september':
              case 'october':
              case 'november':
              case 'december':
                  options.freq = src["default"].YEARLY;
                  options.bymonth = [decodeM()];
                  if (!ttr.nextSymbol())
                      return;
                  // TODO check for duplicates
                  while (ttr.accept('comma')) {
                      if (ttr.isDone())
                          throw new Error('Unexpected end');
                      var m = decodeM();
                      if (!m) {
                          throw new Error('Unexpected symbol ' + ttr.symbol + ', expected month');
                      }
                      options.bymonth.push(m);
                      ttr.nextSymbol();
                  }
                  ON();
                  F();
                  break;
              default:
                  throw new Error('Unknown symbol');
          }
      }
      function ON() {
          var on = ttr.accept('on');
          var the = ttr.accept('the');
          if (!(on || the))
              return;
          do {
              var nth = decodeNTH();
              var wkd = decodeWKD();
              var m = decodeM();
              // nth <weekday> | <weekday>
              if (nth) {
                  // ttr.nextSymbol()
                  if (wkd) {
                      ttr.nextSymbol();
                      if (!options.byweekday)
                          options.byweekday = [];
                      // @ts-ignore
                      options.byweekday.push(src["default"][wkd].nth(nth));
                  }
                  else {
                      if (!options.bymonthday)
                          options.bymonthday = [];
                      // @ts-ignore
                      options.bymonthday.push(nth);
                      ttr.accept('day(s)');
                  }
                  // <weekday>
              }
              else if (wkd) {
                  ttr.nextSymbol();
                  if (!options.byweekday)
                      options.byweekday = [];
                  // @ts-ignore
                  options.byweekday.push(src["default"][wkd]);
              }
              else if (ttr.symbol === 'weekday(s)') {
                  ttr.nextSymbol();
                  if (!options.byweekday) {
                      options.byweekday = [
                          src["default"].MO,
                          src["default"].TU,
                          src["default"].WE,
                          src["default"].TH,
                          src["default"].FR
                      ];
                  }
              }
              else if (ttr.symbol === 'week(s)') {
                  ttr.nextSymbol();
                  var n = ttr.acceptNumber();
                  if (!n) {
                      throw new Error('Unexpected symbol ' + ttr.symbol + ', expected week number');
                  }
                  options.byweekno = [parseInt(n[0], 10)];
                  while (ttr.accept('comma')) {
                      n = ttr.acceptNumber();
                      if (!n) {
                          throw new Error('Unexpected symbol ' + ttr.symbol + '; expected monthday');
                      }
                      options.byweekno.push(parseInt(n[0], 10));
                  }
              }
              else if (m) {
                  ttr.nextSymbol();
                  if (!options.bymonth)
                      options.bymonth = [];
                  // @ts-ignore
                  options.bymonth.push(m);
              }
              else {
                  return;
              }
          } while (ttr.accept('comma') || ttr.accept('the') || ttr.accept('on'));
      }
      function AT() {
          var at = ttr.accept('at');
          if (!at)
              return;
          do {
              var n = ttr.acceptNumber();
              if (!n) {
                  throw new Error('Unexpected symbol ' + ttr.symbol + ', expected hour');
              }
              options.byhour = [parseInt(n[0], 10)];
              while (ttr.accept('comma')) {
                  n = ttr.acceptNumber();
                  if (!n) {
                      throw new Error('Unexpected symbol ' + ttr.symbol + '; expected hour');
                  }
                  options.byhour.push(parseInt(n[0], 10));
              }
          } while (ttr.accept('comma') || ttr.accept('at'));
      }
      function decodeM() {
          switch (ttr.symbol) {
              case 'january':
                  return 1;
              case 'february':
                  return 2;
              case 'march':
                  return 3;
              case 'april':
                  return 4;
              case 'may':
                  return 5;
              case 'june':
                  return 6;
              case 'july':
                  return 7;
              case 'august':
                  return 8;
              case 'september':
                  return 9;
              case 'october':
                  return 10;
              case 'november':
                  return 11;
              case 'december':
                  return 12;
              default:
                  return false;
          }
      }
      function decodeWKD() {
          switch (ttr.symbol) {
              case 'monday':
              case 'tuesday':
              case 'wednesday':
              case 'thursday':
              case 'friday':
              case 'saturday':
              case 'sunday':
                  return ttr.symbol.substr(0, 2).toUpperCase();
              default:
                  return false;
          }
      }
      function decodeNTH() {
          switch (ttr.symbol) {
              case 'last':
                  ttr.nextSymbol();
                  return -1;
              case 'first':
                  ttr.nextSymbol();
                  return 1;
              case 'second':
                  ttr.nextSymbol();
                  return ttr.accept('last') ? -2 : 2;
              case 'third':
                  ttr.nextSymbol();
                  return ttr.accept('last') ? -3 : 3;
              case 'nth':
                  var v = parseInt(ttr.value[1], 10);
                  if (v < -366 || v > 366)
                      throw new Error('Nth out of range: ' + v);
                  ttr.nextSymbol();
                  return ttr.accept('last') ? -v : v;
              default:
                  return false;
          }
      }
      function MDAYs() {
          ttr.accept('on');
          ttr.accept('the');
          var nth = decodeNTH();
          if (!nth)
              return;
          options.bymonthday = [nth];
          ttr.nextSymbol();
          while (ttr.accept('comma')) {
              nth = decodeNTH();
              if (!nth) {
                  throw new Error('Unexpected symbol ' + ttr.symbol + '; expected monthday');
              }
              options.bymonthday.push(nth);
              ttr.nextSymbol();
          }
      }
      function F() {
          if (ttr.symbol === 'until') {
              var date = Date.parse(ttr.text);
              if (!date)
                  throw new Error('Cannot parse until date:' + ttr.text);
              options.until = new Date(date);
          }
          else if (ttr.accept('for')) {
              options.count = parseInt(ttr.value[0], 10);
              ttr.expect('number');
              // ttr.expect('times')
          }
      }
  }

  // CONCATENATED MODULE: ./src/nlp/index.ts
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromText", function() { return fromText; });
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isFullyConvertible", function() { return isFullyConvertible; });
  /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toText", function() { return toText; });
  /* concated harmony reexport parseText */__webpack_require__.d(__webpack_exports__, "parseText", function() { return parseText; });




  /*!
  * rrule.js - Library for working with recurrence rules for calendar dates.
  * https://github.com/jakubroztocil/rrule
  *
  * Copyright 2010, Jakub Roztocil and Lars Schoning
  * Licenced under the BSD licence.
  * https://github.com/jakubroztocil/rrule/blob/master/LICENCE
  *
  */
  /**
   *
   * Implementation of RRule.fromText() and RRule::toText().
   *
   *
   * On the client side, this file needs to be included
   * when those functions are used.
   *
   */
  // =============================================================================
  // fromText
  // =============================================================================
  /**
   * Will be able to convert some of the below described rules from
   * text format to a rule object.
   *
   *
   * RULES
   *
   * Every ([n])
   *       day(s)
   *     | [weekday], ..., (and) [weekday]
   *     | weekday(s)
   *     | week(s)
   *     | month(s)
   *     | [month], ..., (and) [month]
   *     | year(s)
   *
   *
   * Plus 0, 1, or multiple of these:
   *
   * on [weekday], ..., (or) [weekday] the [monthday], [monthday], ... (or) [monthday]
   *
   * on [weekday], ..., (and) [weekday]
   *
   * on the [monthday], [monthday], ... (and) [monthday] (day of the month)
   *
   * on the [nth-weekday], ..., (and) [nth-weekday] (of the month/year)
   *
   *
   * Plus 0 or 1 of these:
   *
   * for [n] time(s)
   *
   * until [date]
   *
   * Plus (.)
   *
   *
   * Definitely no supported for parsing:
   *
   * (for year):
   *     in week(s) [n], ..., (and) [n]
   *
   *     on the [yearday], ..., (and) [n] day of the year
   *     on day [yearday], ..., (and) [n]
   *
   *
   * NON-TERMINALS
   *
   * [n]: 1, 2 ..., one, two, three ..
   * [month]: January, February, March, April, May, ... December
   * [weekday]: Monday, ... Sunday
   * [nth-weekday]: first [weekday], 2nd [weekday], ... last [weekday], ...
   * [monthday]: first, 1., 2., 1st, 2nd, second, ... 31st, last day, 2nd last day, ..
   * [date]:
   *     [month] (0-31(,) ([year])),
   *     (the) 0-31.(1-12.([year])),
   *     (the) 0-31/(1-12/([year])),
   *     [weekday]
   *
   * [year]: 0000, 0001, ... 01, 02, ..
   *
   * Definitely not supported for parsing:
   *
   * [yearday]: first, 1., 2., 1st, 2nd, second, ... 366th, last day, 2nd last day, ..
   *
   * @param {String} text
   * @return {Object, Boolean} the rule, or null.
   */
  var fromText = function (text, language) {
      if (language === void 0) { language = i18n; }
      return new src["default"](parseText(text, language) || undefined);
  };
  var common = [
      'count',
      'until',
      'interval',
      'byweekday',
      'bymonthday',
      'bymonth'
  ];
  totext.IMPLEMENTED = [];
  totext.IMPLEMENTED[src["default"].HOURLY] = common;
  totext.IMPLEMENTED[src["default"].MINUTELY] = common;
  totext.IMPLEMENTED[src["default"].DAILY] = ['byhour'].concat(common);
  totext.IMPLEMENTED[src["default"].WEEKLY] = common;
  totext.IMPLEMENTED[src["default"].MONTHLY] = common;
  totext.IMPLEMENTED[src["default"].YEARLY] = ['byweekno', 'byyearday'].concat(common);
  // =============================================================================
  // Export
  // =============================================================================
  var toText = function (rrule, gettext, language, dateFormatter) {
      return new totext(rrule, gettext, language, dateFormatter).toString();
  };
  var isFullyConvertible = totext.isFullyConvertible;



  /***/ })
  /******/ ]);
  });

  });

  var RRule = unwrapExports(rrule);

  /**
   * Constants module.
   *
   * @module constants
   */
  var DEFAULT_DELAY = 1000;
  var DEFAULT_OPTIONS = {
    center: [0, 0],
    zoom: 4,
    metadata: {
      refreshInterval: 'map',
      tags: []
    },
    sources: {},
    layers: [],
    time: null,
    timeZone: 'Europe/Helsinki',
    timeZoneLabel: '',
    target: 'map',
    resolutions: [2048, 1024, 512, 256, 128, 64],
    delay: DEFAULT_DELAY,
    periodDelay: 2 * DEFAULT_DELAY,
    texts: {
      'Zoom In Label': '+',
      'Zoom Out Label': '-',
      'Zoom In': 'Zoom In',
      'Zoom Out': 'Zoom Out',
      'Layer Switcher': 'Layer Switcher',
      Legend: 'Legend',
      'Fullscreen Label': 'â¤¢',
      'Fullscreen Label Active': 'Ã',
      'Fullscreen Tip Label': 'Fullscreen'
    }
  };
  var NO_SELECT_CLASS = 'noselect';
  var MILLISECONDS_PER_SECOND = 1000;
  var SECONDS_PER_MINUTE = 60;
  var MINUTES_PER_HOUR = 60;
  var HOURS_PER_DAY = 24;
  var SECOND = MILLISECONDS_PER_SECOND;
  var MINUTE = SECOND * SECONDS_PER_MINUTE;
  var HOUR = MINUTE * MINUTES_PER_HOUR;
  var DAY = HOUR * HOURS_PER_DAY;
  var MAX_REFRESH_INTERVAL = 2147483647;
  var FRAME_HISTORY = 'history';
  var FRAME_FUTURE = 'future';
  var STATUS_WORKING = 'working';
  var STATUS_SUCCESS = 'success';
  var PLAYING_CLASS = 'playing';
  var CLICKABLE_CLASS = 'fmi-metoclient-timeslider-clickable-container';
  var PRE_MARGIN_CLASS = 'fmi-metoclient-timeslider-pre-margin';
  var PRE_TOOLS_CLASS = 'fmi-metoclient-timeslider-pre-tools';
  var FRAMES_CONTAINER_CLASS = 'fmi-metoclient-timeslider-frames-container';
  var PLAY_BUTTON_CLASS = 'fmi-metoclient-timeslider-play-button';
  var POST_TOOLS_CLASS = 'fmi-metoclient-timeslider-post-tools';
  var POST_BUTTON_CLASS = 'fmi-metoclient-timeslider-step-button';
  var POST_MARGIN_CLASS = 'fmi-metoclient-timeslider-post-margin';
  var TIMEZONE_LABEL_CLASS = 'fmi-metoclient-timeslider-timezone';
  var FRAME_TICK_CLASS = 'fmi-metoclient-timeslider-frame-tick';
  var FRAME_TEXT_WRAPPER_CLASS = 'fmi-metoclient-timeslider-frame-text-wrapper';
  var FRAME_TEXT_CLASS = 'fmi-metoclient-timeslider-frame-text';
  var DRAG_LISTENER_CLASS = 'fmi-metoclient-timeslider-drag-listener';
  var INTERACTIONS_CLASS = 'fmi-metoclient-timeslider-interactions';
  var POINTER_CLASS = 'fmi-metoclient-timeslider-pointer';
  var POINTER_WRAPPER_CLASS = 'fmi-metoclient-timeslider-pointer-wrapper';
  var POINTER_TEXT_CLASS = 'fmi-metoclient-timeslider-pointer-text';
  var POINTER_HANDLE_CLASS = 'fmi-metoclient-timeslider-handle';
  var POINTER_INFOTIP_CLASS = 'fmi-metoclient-timeslider-pointer-infotip';
  var INDICATOR_CLASS = 'fmi-metoclient-timeslider-indicator';
  var HIDDEN_CLASS = 'fmi-metoclient-timeslider-hidden';
  var POINTER_DRAGGING = 'dragging';
  var DATA_STATUS_ATTRIBUTE = 'data-status';
  var DATA_STATUS_WORKING = 'working';
  var BACKWARDS = -1;
  var FORWARDS = 1;
  var KEYBOARD_ACCESSIBLE_CLASS = 'fmi-metoclient-timeslider-keyboard-accessible';
  var BASE_TAB_INDEX = 100;
  var DEFAULT_REFRESH_INTERVAL = 15 * MINUTE;
  var LONG_CLICK_DELAY = 0.5 * MILLISECONDS_PER_SECOND;
  var LONG_TAP_DELAY = 0.5 * MILLISECONDS_PER_SECOND;
  var DOUBLE_PRESS_DELAY = 0.3 * MILLISECONDS_PER_SECOND;
  var GET_CAPABILITIES_QUERY = 'request=GetCapabilities';
  var DEFAULT_TILESIZE = 1024;
  var PRESENT = 'present';
  var METOCLIENT_PREFIX = 'metoclient:';
  var TIME = 'metoclient:time';
  var PREVIOUS = 'metoclient:previous';
  var NEXT = 'metoclient:next';
  var OPACITY = 'metoclient:opacity';
  var ID = 'metoclient:id';
  var DEFAULT_LEGEND = 'metoclient:defaultLegend';
  var LAYER_SWITCHER_CONTAINER_ID = 'fmi-metoclient-layer-switcher-container';
  var LEGEND_CHOOSER_CONTAINER_ID = 'fmi-metoclient-legend-chooser-container';
  var LEGEND_CHOOSER_LABEL_ID = 'fmi-metoclient-legend-chooser-label';
  var LEGEND_CHOOSER_SELECT_ID = 'fmi-metoclient-legend-chooser-select';
  var LEGEND_CONTAINER_ID = 'fmi-metoclient-legend-container';
  var METEOROLOGICAL_MODE = 'meteorological';
  var SMARTMET_SERVER = 'smartmet server';
  var TAG_MOUSE_WHEEL_INTERACTIONS = 'mouse wheel interactions';
  var TAG_NO_INTERACTIONS = 'no interactions';
  var TAG_NO_LAYER_SWITCHER = 'no layer switcher';
  var TAG_INSTANT_TIMESLIDER = 'instant time slider';
  var TAG_DELAY_LOOP = 'delay loop';
  var TAG_FULL_SCREEN_CONTROL = 'fullscreen control';
  var TAG_RENDER_IMMEDIATELY = 'render immediately';
  var BASE_MAP = 'base';
  var VISIBLE = 'visible';
  var NOT_VISIBLE = 'none';
  var ROTATED = 'rotated';
  var HORIZONTAL = 'horizontal';
  var VERTICAL = 'vertical';

  /**
   * Validate date.
   *
   * @param {Date} d The date to be validated.
   * @returns {boolean} Validation result.
   */

  function isValidDate(d) {
    return d instanceof Date && !Number.isNaN(d.getTime());
  }
  /**
   * Update time array with time points of another array.
   *
   * @param {Array} times Array of time points to be updated.
   * @param {Array} newTimes Array of new time points.
   * @returns {Array} Updated time array.
   */

  function addNewTimes(times, newTimes) {
    var updatedTimes = _toConsumableArray(times);

    newTimes.forEach(function (newTime) {
      if (!updatedTimes.includes(newTime)) {
        updatedTimes.push(newTime);
      }
    });
    return updatedTimes;
  }
  /**
   * Parse time point input.
   *
   * @param {} timeInput
   * @param timeOffset
   * @param timeData
   * @returns {}
   */

  function parseTimes(timeInput, timeOffset) {
    var timeData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var DATE_TYPE = 'date';
    var DURATION_TYPE = 'period';
    var currentTime = Date.now();
    var times = [];

    if (timeInput == null) {
      times = [];
    } else if (Array.isArray(timeInput)) {
      times = timeInput.map(function (date) {
        return new Date(date).getTime();
      });
    } else if (_typeof(timeInput) === 'object') {
      var rule = new RRule(timeInput);
      var ruleTimes = rule.all().map(function (date) {
        return DateTime.fromJSDate(date).toUTC().valueOf();
      });
      times = addNewTimes(times, ruleTimes);
    } else if (timeInput.includes(',')) {
      var dates = timeInput.split(',');
      times = dates.map(function (date) {
        return new Date(date.trim()).getTime();
      });
    } else if (timeInput.includes('/')) {
      var parsedParts = timeInput.split('/').map(function (part) {
        if (part.toLowerCase() === PRESENT) {
          return {
            value: Date.now(),
            type: DATE_TYPE
          };
        }

        var date = new Date(part);

        if (isValidDate(date)) {
          return {
            value: date.getTime(),
            type: DATE_TYPE
          };
        }

        try {
          var duration = Duration.fromISO(part).toObject();
          return {
            value: duration,
            type: DURATION_TYPE
          };
        } catch (e) {
          return {
            value: null,
            type: null
          };
        }
      }); // Todo: if (parsedParts.length === 2) {} else

      if (parsedParts.length === 3 && parsedParts[0].type === DATE_TYPE && parsedParts[1].type === DATE_TYPE && parsedParts[2].type === DURATION_TYPE) {
        var duration = Duration.fromObject(parsedParts[2].value).as('milliseconds');
        var i = 0;
        var moment = parsedParts[0].value;

        while (moment <= parsedParts[1].value) {
          times.push(moment);
          i += 1;
          moment = parsedParts[0].value + i * duration;
        }
      }
    } else {
      var texts = timeInput.toLowerCase().split(' and ');
      texts.map(function (text) {
        return text.trim();
      }).forEach(function (text) {
        var dataSteps = text.startsWith('data');

        if (dataSteps) {
          text = text.replace('data', 'every');
        }

        var rule;
        var parts = text.split(' ');

        if (parts.length >= 2) {
          var numTimes = Number(parts[0]);

          if (!Number.isNaN(numTimes) && parts[1].trim() === 'times') {
            times = times.concat(Array(numTimes).fill(parts.length >= 3 && parts[2] === 'history' ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY));
            return;
          }
        }

        var history = text.includes(' history');
        text = text.replace(' history', '');

        if (dataSteps) {
          text += ' for 2 times';
        }

        try {
          rule = RRule.fromText(text);
        } catch (err) {
          return;
        }

        if (!dataSteps) {
          if (rule.options.freq === RRule.HOURLY) {
            rule.options.byhour = Array.from(Array(24).keys()).filter(function (hour) {
              return hour % rule.options.interval === 0;
            });
            rule.options.byminute = [0];
            rule.options.bysecond = [0];
            rule.options.interval = 1;
          } else if (rule.options.freq === RRule.MINUTELY) {
            rule.options.byminute = Array.from(Array(60).keys()).filter(function (minute) {
              return minute % rule.options.interval === 0;
            });
            rule.options.bysecond = [0];
            rule.options.interval = 1;
          }
        }

        if (timeOffset != null) {
          var start = DateTime.fromJSDate(rule.options.dtstart);

          if (start != null) {
            var offsetDuration = Duration.fromISO(timeOffset);

            if (offsetDuration != null) {
              start = start.plus(offsetDuration);

              if (start != null) {
                rule.options.dtstart = start.toJSDate();
              }
            }
          }
        }

        var ruleTimes = rule.all().map(function (date) {
          return DateTime.fromJSDate(date).toUTC().valueOf();
        });
        var offset;

        if (history) {
          var lastTimeStepIndex = ruleTimes.length - 1;

          if (lastTimeStepIndex === 0) {
            var tmpOptions = _objectSpread2({}, rule.options);

            tmpOptions.count = 2;
            var tmpRule = new RRule(tmpOptions);
            var tmpRuleTimes = tmpRule.all();
            offset = tmpRuleTimes[1] - tmpRuleTimes[0];
          } else {
            offset = (lastTimeStepIndex + 1) * (ruleTimes[lastTimeStepIndex] - ruleTimes[0]) / lastTimeStepIndex;
          }

          ruleTimes = ruleTimes.map(function (time) {
            return time - offset;
          });
        }

        if (dataSteps) {
          timeData.forEach(function (dataTime) {
            if (history && dataTime >= ruleTimes[1] && dataTime <= currentTime || !history && dataTime <= ruleTimes[1] && dataTime >= currentTime) {
              times.push(dataTime);
            }
          });
        } else {
          times = addNewTimes(times, ruleTimes);
        }
      });
    }

    times.sort();
    return times;
  }
  /**
   * @param tiles
   * @param newTime
   */

  function updateSourceTime(tiles, newTime) {
    return tiles.map(function (tile) {
      var url = new url_min(tile);
      var timeKey = 'time';
      Object.keys(url.query).forEach(function (key) {
        if (key.toLocaleLowerCase() === 'time') {
          timeKey = key;
        }
      });

      if (newTime != null) {
        url.query[timeKey] = typeof newTime === 'number' ? new Date(newTime).toISOString() : newTime;
      } else {
        delete url.query[timeKey];
      }

      return url.toString();
    });
  }
  /**
   *
   *
   * @param url
   * @returns {string}
   */

  function getBaseUrl(url) {
    return url.split(/[?#]/)[0];
  }
  /**
   *
   *
   * @param direction
   * @param layer
   * @param layers
   */

  function getAdjacentLayer(direction, layer, layers) {
    var directions = ['previous', 'next'];
    var directionIndex = directions.indexOf(direction);

    if (directionIndex < 0) {
      return null;
    }

    if (layer[direction] != null) {
      return layer[direction];
    }

    var opposite = directions[(directionIndex + 1) % 2];
    var adjacentLayer = layers.find(function (l) {
      return l[opposite] === layer.id;
    });

    if (adjacentLayer == null) {
      return null;
    }

    return adjacentLayer.id;
  }
  /**
   *
   * @param source
   * @returns {string}
   */

  function getSourceCapabilitiesUrl(source) {
    var url = '';

    if (source.capabilities != null && source.capabilities.length > 0) {
      url = source.capabilities;
    } else {
      if (source.tiles == null || source.tiles.length === 0) {
        return url;
      }

      var _source$tiles = _slicedToArray(source.tiles, 1);

      url = _source$tiles[0];
    }

    url = url.split('?')[0];

    if (url.endsWith('/')) {
      url = url.substring(0, url.length - 1);
    }

    return url;
  }
  function getLegendUrl(layerName, layerStyles, capabilities) {
    if (layerName == null || layerName.length === 0 || capabilities == null || capabilities.data == null || capabilities.data.Capability == null || capabilities.data.Capability.Layer == null || capabilities.data.Capability.Layer.Layer == null) {
      return null;
    }

    var layerCapabilities = capabilities.data.Capability.Layer.Layer.find(function (layer) {
      return layer.Name === layerName;
    });

    if (layerCapabilities == null || layerCapabilities.Style == null) {
      return null;
    }

    var layerStyle = layerCapabilities.Style[0];

    if (layerStyles != null && layerStyles.length > 0) {
      var styles = layerStyles.split(',');
      layerStyle = layerCapabilities.Style.find(function (style) {
        return styles.includes(style.Name);
      });
    }

    if (layerStyle == null || layerStyle.LegendURL == null || layerStyle.LegendURL.length === 0) {
      return null;
    }

    return layerStyle.LegendURL[0].OnlineResource;
  }

  var canNamespace = {};

  var supportsNativeSymbols = (function() {
  	var symbolExists = typeof Symbol !== "undefined" && typeof Symbol.for === "function";

  	if (!symbolExists) {
  		return false;
  	}

  	var symbol = Symbol("a symbol for testing symbols");
  	return typeof symbol === "symbol";
  }());

  var CanSymbol;
  if(supportsNativeSymbols) {
  	CanSymbol = Symbol;
  } else {

  	var symbolNum = 0;
  	CanSymbol = function CanSymbolPolyfill(description){
  		var symbolValue = "@@symbol"+(symbolNum++)+(description);

  		var symbol = {}; // make it object type

  		Object.defineProperties(symbol, {
  			toString: {
  				value: function(){
  					return symbolValue;
  				}
  			}
  		});

  		return symbol;
  	};

  	var descriptionToSymbol = {};
  	var symbolToDescription = {};

  	/**
  	 * @function can-symbol.for for
  	 * @parent  can-symbol/methods
  	 * @description  Get a symbol based on a known string identifier, or create it if it doesn't exist.
  	 *
  	 * @signature `canSymbol.for(String)`
  	 *
  	 * @param { String } description  The string value of the symbol
  	 * @return { CanSymbol } The globally unique and consistent symbol with the given string value.
  	 */
  	CanSymbol.for = function(description){
  		var symbol = descriptionToSymbol[description];
  		if(!symbol) {
  			symbol = descriptionToSymbol[description] = CanSymbol(description);
  			symbolToDescription[symbol] = description;
  		}
  		return symbol;
  	};
  	/**
  	 * @function can-symbol.keyFor keyFor
  	 * @parent  can-symbol
  	 * @description  Get the description for a symbol.
  	 *
  	 * @signature `canSymbol.keyFor(CanSymbol)`
  	 *
  	 * @param { String } description  The string value of the symbol
  	 * @return { CanSymbol } The globally unique and consistent symbol with the given string value.
  	 */
  	CanSymbol.keyFor = function(symbol) {
  		return symbolToDescription[symbol];
  	};
  	["hasInstance","isConcatSpreadable",
  		"iterator","match","prototype","replace","search","species","split",
  	"toPrimitive","toStringTag","unscopables"].forEach(function(name){
  		CanSymbol[name] = CanSymbol("Symbol."+name);
  	});
  }

  // Generate can. symbols.
  [
  	// ======= Type detection ==========
  	"isMapLike",
  	"isListLike",
  	"isValueLike",
  	"isFunctionLike",
  	// ======= Shape detection =========
  	"getOwnKeys",
  	"getOwnKeyDescriptor",
  	"proto",
  	// optional
  	"getOwnEnumerableKeys",
  	"hasOwnKey",
  	"hasKey",
  	"size",
  	"getName",
  	"getIdentity",

  	// shape manipulation
  	"assignDeep",
  	"updateDeep",

  	// ======= GET / SET
  	"getValue",
  	"setValue",
  	"getKeyValue",
  	"setKeyValue",
  	"updateValues",
  	"addValue",
  	"removeValues",
  	// ======= Call =========
  	"apply",
  	"new",
  	// ======= Observe =========
  	"onValue",
  	"offValue",
  	"onKeyValue",
  	"offKeyValue",
  	"getKeyDependencies",
  	"getValueDependencies",
  	"keyHasDependencies",
  	"valueHasDependencies",
  	"onKeys",
  	"onKeysAdded",
  	"onKeysRemoved",
  	"onPatches"
  	].forEach(function(name){
  	CanSymbol.for("can."+name);
  });

  var canSymbol = canNamespace.Symbol = CanSymbol;

  var helpers = {
  	makeGetFirstSymbolValue: function(symbolNames){
  		var symbols = symbolNames.map(function(name){
  			return canSymbol.for(name);
  		});
  		var length = symbols.length;

  		return function getFirstSymbol(obj){
  			var index = -1;

  			while (++index < length) {
  				if(obj[symbols[index]] !== undefined) {
  					return obj[symbols[index]];
  				}
  			}
  		};
  	},
  	// The `in` check is from jQueryâs fix for an iOS 8 64-bit JIT object length bug:
  	// https://github.com/jquery/jquery/pull/2185
  	hasLength: function(list){
  		var type = typeof list;
  		if(type === "string" || Array.isArray(list)) {
  			return true;
  		}
  		var length = list && (type !== 'boolean' && type !== 'number' && "length" in list) && list.length;

  		// var length = "length" in obj && obj.length;
  		return typeof list !== "function" &&
  			( length === 0 || typeof length === "number" && length > 0 && ( length - 1 ) in list );
  	}
  };

  var plainFunctionPrototypePropertyNames = Object.getOwnPropertyNames((function(){}).prototype);
  var plainFunctionPrototypeProto = Object.getPrototypeOf( (function(){}).prototype );
  /**
   * @function can-reflect.isConstructorLike isConstructorLike
   * @parent can-reflect/type
   *
   * @description Test if a value looks like a constructor function.
   *
   * @signature `isConstructorLike(func)`
   *
   * Return `true` if `func` is a function and has a non-empty prototype, or implements
   *  [can-symbol/symbols/new `@@@@can.new`]; `false` otherwise.
   *
   * ```js
   * canReflect.isConstructorLike(function() {}); // -> false
   *
   * function Construct() {}
   * Construct.prototype = { foo: "bar" };
   * canReflect.isConstructorLike(Construct); // -> true
   *
   * canReflect.isConstructorLike({}); // -> false
   * !!canReflect.isConstructorLike({ [canSymbol.for("can.new")]: function() {} }); // -> true
   * ```
   *
   * @param  {*}  func maybe a function
   * @return {Boolean} `true` if a constructor; `false` if otherwise.
   */
  function isConstructorLike(func){
  	/* jshint unused: false */
  	// if you can new it ... it's a constructor
  	var value = func[canSymbol.for("can.new")];
  	if(value !== undefined) {
  		return value;
  	}

  	if(typeof func !== "function") {
  		return false;
  	}
  	// If there are any properties on the prototype that don't match
  	// what is normally there, assume it's a constructor
  	var prototype = func.prototype;
  	if(!prototype) {
  		return false;
  	}
  	// Check if the prototype's proto doesn't point to what it normally would.
  	// If it does, it means someone is messing with proto chains
  	if( plainFunctionPrototypeProto !== Object.getPrototypeOf( prototype ) ) {
  		return true;
  	}

  	var propertyNames = Object.getOwnPropertyNames(prototype);
  	if(propertyNames.length === plainFunctionPrototypePropertyNames.length) {
  		for(var i = 0, len = propertyNames.length; i < len; i++) {
  			if(propertyNames[i] !== plainFunctionPrototypePropertyNames[i]) {
  				return true;
  			}
  		}
  		return false;
  	} else {
  		return true;
  	}
  }

  /**
   * @function can-reflect.isFunctionLike isFunctionLike
   * @parent can-reflect/type
   * @description Test if a value looks like a function.
   * @signature `isFunctionLike(obj)`
   *
   *  Return `true` if `func` is a function, or implements
   *  [can-symbol/symbols/new `@@@@can.new`] or [can-symbol/symbols/apply `@@@@can.apply`]; `false` otherwise.
   *
   * ```js
   * canReflect.isFunctionLike(function() {}); // -> true
   * canReflect.isFunctionLike({}); // -> false
   * canReflect.isFunctionLike({ [canSymbol.for("can.apply")]: function() {} }); // -> true
   * ```
   *
   * @param  {*}  obj maybe a function
   * @return {Boolean}
   */
  var getNewOrApply = helpers.makeGetFirstSymbolValue(["can.new","can.apply"]);
  function isFunctionLike(obj){
  	var result,
  		symbolValue = !!obj && obj[canSymbol.for("can.isFunctionLike")];

  	if (symbolValue !== undefined) {
  		return symbolValue;
  	}

  	result = getNewOrApply(obj);
  	if(result !== undefined) {
  		return !!result;
  	}

  	return typeof obj === "function";
  }

  /**
   * @function can-reflect.isPrimitive isPrimitive
   * @parent can-reflect/type
   * @description Test if a value is a JavaScript primitive.
   * @signature `isPrimitive(obj)`
   *
   * Return `true` if `obj` is not a function nor an object via `typeof`, or is null; `false` otherwise.
   *
   * ```js
   * canReflect.isPrimitive(null); // -> true
   * canReflect.isPrimitive({}); // -> false
   * canReflect.isPrimitive(undefined); // -> true
   * canReflect.isPrimitive(1); // -> true
   * canReflect.isPrimitive([]); // -> false
   * canReflect.isPrimitive(function() {}); // -> false
   * canReflect.isPrimitive("foo"); // -> true
   *
   * ```
   *
   * @param  {*}  obj maybe a primitive value
   * @return {Boolean}
   */
  function isPrimitive(obj){
  	var type = typeof obj;
  	if(obj == null || (type !== "function" && type !== "object") ) {
  		return true;
  	}
  	else {
  		return false;
  	}
  }

  var coreHasOwn = Object.prototype.hasOwnProperty;
  var funcToString = Function.prototype.toString;
  var objectCtorString = funcToString.call(Object);

  function isPlainObject(obj) {
  	// Must be an Object.
  	// Because of IE, we also have to check the presence of the constructor property.
  	// Make sure that DOM nodes and window objects don't pass through, as well
  	if (!obj || typeof obj !== 'object' ) {
  		return false;
  	}
  	var proto = Object.getPrototypeOf(obj);
  	if(proto === Object.prototype || proto === null) {
  		return true;
  	}
  	// partially inspired by lodash: https://github.com/lodash/lodash
  	var Constructor = coreHasOwn.call(proto, 'constructor') && proto.constructor;
  	return typeof Constructor === 'function' && Constructor instanceof Constructor &&
      	funcToString.call(Constructor) === objectCtorString;
  }

  /**
   * @function can-reflect.isBuiltIn isBuiltIn
   * @parent can-reflect/type
   * @description Test if a value is a JavaScript built-in type.
   * @signature `isBuiltIn(obj)`
   *
   * Return `true` if `obj` is some type of JavaScript native built-in; `false` otherwise.
   *
   * ```js
   * canReflect.isBuiltIn(null); // -> true
   * canReflect.isBuiltIn({}); // -> true
   * canReflect.isBuiltIn(1); // -> true
   * canReflect.isBuiltIn([]); // -> true
   * canReflect.isBuiltIn(function() {}); // -> true
   * canReflect.isBuiltIn("foo"); // -> true
   * canReflect.isBuiltIn(new Date()); // -> true
   * canReflect.isBuiltIn(/[foo].[bar]/); // -> true
   * canReflect.isBuiltIn(new DefineMap); // -> false
   *
   * ```
   *
   * Not supported in browsers that have implementations of Map/Set where
   * `toString` is not properly implemented to return `[object Map]`/`[object Set]`.
   *
   * @param  {*}  obj maybe a built-in value
   * @return {Boolean}
   */
  function isBuiltIn(obj) {

  	// If primitive, array, or POJO return true. Also check if
  	// it is not a POJO but is some type like [object Date] or
  	// [object Regex] and return true.
  	if (isPrimitive(obj) ||
  		Array.isArray(obj) ||
  		isPlainObject(obj) ||
  		(Object.prototype.toString.call(obj) !== '[object Object]' &&
  			Object.prototype.toString.call(obj).indexOf('[object ') !== -1)) {
  		return true;
  	}
  	else {
  		return false;
  	}
  }

  /**
   * @function can-reflect.isValueLike isValueLike
   * @parent can-reflect/type
   * @description Test if a value represents a single value (as opposed to several values).
   *
   * @signature `isValueLike(obj)`
   *
   * Return `true` if `obj` is a primitive or implements [can-symbol/symbols/getValue `@@can.getValue`],
   * `false` otherwise.
   *
   * ```js
   * canReflect.isValueLike(null); // -> true
   * canReflect.isValueLike({}); // -> false
   * canReflect.isValueLike(function() {}); // -> false
   * canReflect.isValueLike({ [canSymbol.for("can.isValueLike")]: true}); // -> true
   * canReflect.isValueLike({ [canSymbol.for("can.getValue")]: function() {} }); // -> true
   * canReflect.isValueLike(canCompute()); // -> true
   * canReflect.isValueLike(new DefineMap()); // -> false
   *
   * ```
   *
   * @param  {*}  obj maybe a primitive or an object that yields a value
   * @return {Boolean}
   */
  function isValueLike(obj) {
  	var symbolValue;
  	if(isPrimitive(obj)) {
  		return true;
  	}
  	symbolValue = obj[canSymbol.for("can.isValueLike")];
  	if( typeof symbolValue !== "undefined") {
  		return symbolValue;
  	}
  	var value = obj[canSymbol.for("can.getValue")];
  	if(value !== undefined) {
  		return !!value;
  	}
  }

  /**
   * @function can-reflect.isMapLike isMapLike
   * @parent can-reflect/type
   *
   * @description Test if a value represents multiple values.
   *
   * @signature `isMapLike(obj)`
   *
   * Return `true` if `obj` is _not_ a primitive, does _not_ have a falsy value for
   * [can-symbol/symbols/isMapLike `@@@@can.isMapLike`], or alternately implements
   * [can-symbol/symbols/getKeyValue `@@@@can.getKeyValue`]; `false` otherwise.
   *
   * ```js
   * canReflect.isMapLike(null); // -> false
   * canReflect.isMapLike(1); // -> false
   * canReflect.isMapLike("foo"); // -> false
   * canReflect.isMapLike({}); // -> true
   * canReflect.isMapLike(function() {}); // -> true
   * canReflect.isMapLike([]); // -> false
   * canReflect.isMapLike({ [canSymbol.for("can.isMapLike")]: false }); // -> false
   * canReflect.isMapLike({ [canSymbol.for("can.getKeyValue")]: null }); // -> false
   * canReflect.isMapLike(canCompute()); // -> false
   * canReflect.isMapLike(new DefineMap()); // -> true
   *
   * ```
   *
   * @param  {*}  obj maybe a Map-like
   * @return {Boolean}
   */
  function isMapLike(obj) {
  	if(isPrimitive(obj)) {
  		return false;
  	}
  	var isMapLike = obj[canSymbol.for("can.isMapLike")];
  	if(typeof isMapLike !== "undefined") {
  		return !!isMapLike;
  	}
  	var value = obj[canSymbol.for("can.getKeyValue")];
  	if(value !== undefined) {
  		return !!value;
  	}
  	// everything else in JS is MapLike
  	return true;
  }

  /**
   * @function can-reflect.isObservableLike isObservableLike
   * @parent can-reflect/type
   * @description Test if a value (or its keys) can be observed for changes.
   *
   * @signature `isObservableLike(obj)`
   *
   * Return  `true` if `obj` is _not_ a primitive and implements any of
   * [can-symbol/symbols/onValue `@@@@can.onValue`], [can-symbol/symbols/onKeyValue `@@@@can.onKeyValue`], or
   * [can-symbol/symbols/onPatches `@@@@can.onKeys`]; `false` otherwise.
   *
   * ```js
   * canReflect.isObservableLike(null); // -> false
   * canReflect.isObservableLike({}); // -> false
   * canReflect.isObservableLike([]); // -> false
   * canReflect.isObservableLike(function() {}); // -> false
   * canReflect.isObservableLike({ [canSymbol.for("can.onValue")]: function() {} }); // -> true
   * canReflect.isObservableLike({ [canSymbol.for("can.onKeyValue")]: function() {} }); // -> true
   * canReflect.isObservableLike(canCompute())); // -> true
   * canReflect.isObservableLike(new DefineMap())); // -> true
   * ```
   *
   * @param  {*}  obj maybe an observable
   * @return {Boolean}
   */

  // Specially optimized
  var onValueSymbol = canSymbol.for("can.onValue"),
  	onKeyValueSymbol = canSymbol.for("can.onKeyValue"),
  	onPatchesSymbol = canSymbol.for("can.onPatches");
  function isObservableLike( obj ) {
  	if(isPrimitive(obj)) {
  		return false;
  	}
  	return Boolean(obj[onValueSymbol] || obj[onKeyValueSymbol] || obj[onPatchesSymbol]);
  }

  /**
   * @function can-reflect.isListLike isListLike
   * @parent can-reflect/type
   *
   * @description Test if a value looks like a constructor function.
   *
   * @signature `isListLike(list)`
   *
   * Return `true` if `list` is a `String`, <br>OR `list` is _not_ a primitive and implements `@@@@iterator`,
   * <br>OR `list` is _not_ a primitive and returns `true` for `Array.isArray()`, <br>OR `list` is _not_ a primitive and has a
   * numerical length and is either empty (`length === 0`) or has a last element at index `length - 1`; <br>`false` otherwise
   *
   * ```js
   * canReflect.isListLike(null); // -> false
   * canReflect.isListLike({}); // -> false
   * canReflect.isListLike([]); // -> true
   * canReflect.isListLike("foo"); // -> true
   * canReflect.isListLike(1); // -> false
   * canReflect.isListLike({ [canSymbol.for("can.isListLike")]: true }); // -> true
   * canReflect.isListLike({ [canSymbol.iterator]: function() {} }); // -> true
   * canReflect.isListLike({ length: 0 }); // -> true
   * canReflect.isListLike({ length: 3 }); // -> false
   * canReflect.isListLike({ length: 3, "2": true }); // -> true
   * canReflect.isListLike(new DefineMap()); // -> false
   * canReflect.isListLike(new DefineList()); // -> true
   * ```
   *
   * @param  {*}  list maybe a List-like
   * @return {Boolean}
   */
  function isListLike( list ) {
  	var symbolValue,
  		type = typeof list;
  	if(type === "string") {
  		return true;
  	}
  	if( isPrimitive(list) ) {
  		return false;
  	}
  	symbolValue = list[canSymbol.for("can.isListLike")];
  	if( typeof symbolValue !== "undefined") {
  		return symbolValue;
  	}
  	var value = list[canSymbol.iterator];
  	if(value !== undefined) {
  		return !!value;
  	}
  	if(Array.isArray(list)) {
  		return true;
  	}
  	return helpers.hasLength(list);
  }

  /**
   * @function can-reflect.isSymbolLike isSymbolLike
   * @parent can-reflect/type
   *
   * @description Test if a value is a symbol or a [can-symbol].
   *
   * @signature `isSymbolLike(symbol)`
   *
   * Return `true` if `symbol` is a native Symbol, or evaluates to a String with a prefix
   * equal to that of CanJS's symbol polyfill; `false` otherwise.
   *
   * ```js
   * /* ES6 *\/ canReflect.isSymbolLike(Symbol.iterator); // -> true
   * canReflect.isSymbolLike(canSymbol.for("foo")); // -> true
   * canReflect.isSymbolLike("@@symbol.can.isSymbol"); // -> true (due to polyfill for non-ES6)
   * canReflect.isSymbolLike("foo"); // -> false
   * canReflect.isSymbolLike(null); // -> false
   * canReflect.isSymbolLike(1); // -> false
   * canReflect.isSymbolLike({}); // -> false
   * canReflect.isSymbolLike({ toString: function() { return "@@symbol.can.isSymbol"; } }); // -> true
   * ```
   *
   * @param  {*}  symbol maybe a symbol
   * @return {Boolean}
   */

  var supportsNativeSymbols$1 = (function() {
  	var symbolExists = typeof Symbol !== "undefined" && typeof Symbol.for === "function";

  	if (!symbolExists) {
  		return false;
  	}

  	var symbol = Symbol("a symbol for testing symbols");
  	return typeof symbol === "symbol";
  }());

  var isSymbolLike;
  if(supportsNativeSymbols$1) {
  	isSymbolLike = function(symbol) {
  		return typeof symbol === "symbol";
  	};
  } else {
  	var symbolStart = "@@symbol";
  	isSymbolLike = function(symbol) {
  		if(typeof symbol === "object" && !Array.isArray(symbol)){
  			return symbol.toString().substr(0, symbolStart.length) === symbolStart;
  		} else {
  			return false;
  		}
  	};
  }

  var type = {
  	isConstructorLike: isConstructorLike,
  	isFunctionLike: isFunctionLike,
  	isListLike: isListLike,
  	isMapLike: isMapLike,
  	isObservableLike: isObservableLike,
  	isPrimitive: isPrimitive,
  	isBuiltIn: isBuiltIn,
  	isValueLike: isValueLike,
  	isSymbolLike: isSymbolLike,
  	/**
  	 * @function can-reflect.isMoreListLikeThanMapLike isMoreListLikeThanMapLike
  	 * @parent can-reflect/type
  	 *
  	 * @description Test if a value should be treated as a list instead of a map.
  	 *
  	 * @signature `isMoreListLikeThanMapLike(obj)`
  	 *
  	 * Return  `true` if `obj` is an Array, declares itself to be more ListLike with
  	 * `@@@@can.isMoreListLikeThanMapLike`, or self-reports as ListLike but not as MapLike; `false` otherwise.
  	 *
  	 * ```js
  	 * canReflect.isMoreListLikeThanMapLike([]); // -> true
  	 * canReflect.isMoreListLikeThanMapLike(null); // -> false
  	 * canReflect.isMoreListLikeThanMapLike({}); // -> false
  	 * canReflect.isMoreListLikeThanMapLike(new DefineList()); // -> true
  	 * canReflect.isMoreListLikeThanMapLike(new DefineMap()); // -> false
  	 * canReflect.isMoreListLikeThanMapLike(function() {}); // -> false
  	 * ```
  	 *
  	 * @param  {Object}  obj the object to test for ListLike against MapLike traits.
  	 * @return {Boolean}
  	 */
  	isMoreListLikeThanMapLike: function(obj){
  		if(Array.isArray(obj)) {
  			return true;
  		}
  		if(obj instanceof Array) {
  			return true;
  		}
  		if( obj == null ) {
  			return false;
  		}
  		var value = obj[canSymbol.for("can.isMoreListLikeThanMapLike")];
  		if(value !== undefined) {
  			return value;
  		}
  		var isListLike = this.isListLike(obj),
  			isMapLike = this.isMapLike(obj);
  		if(isListLike && !isMapLike) {
  			return true;
  		} else if(!isListLike && isMapLike) {
  			return false;
  		}
  	},
  	/**
  	 * @function can-reflect.isIteratorLike isIteratorLike
  	 * @parent can-reflect/type
  	 * @description Test if a value looks like an iterator.
  	 * @signature `isIteratorLike(obj)`
  	 *
  	 * Return `true` if `obj` has a key `"next"` pointing to a zero-argument function; `false` otherwise
  	 *
  	 * ```js
  	 * canReflect.isIteratorLike([][Symbol.iterator]()); // -> true
  	 * canReflect.isIteratorLike(new DefineList()[canSymbol.iterator]()); // -> true
  	 * canReflect.isIteratorLike(new DefineMap()[canSymbol.iterator]()); // -> true
  	 * canReflect.isIteratorLike(null); // -> false
  	 * canReflect.isIteratorLike({ next: function() {} }); // -> true
  	 * canReflect.isIteratorLike({ next: function(foo) {} }); // -> false (iterator nexts do not take arguments)
  	 * ```
  	 *
  	 * @param  {Object}  obj the object to test for Iterator traits
  	 * @return {Boolean}
  	 */
  	isIteratorLike: function(obj){
  		return obj &&
  			typeof obj === "object" &&
  			typeof obj.next === "function" &&
  			obj.next.length === 0;
  	},
  	/**
  	 * @function can-reflect.isPromise isPromise
  	 * @parent can-reflect/type
  	 * @description Test if a value is a promise.
  	 *
  	 * @signature `isPromise(obj)`
  	 *
  	 * Return `true` if `obj` is an instance of promise or `.toString` returns `"[object Promise]"`.
  	 *
  	 * ```js
  	 * canReflect.isPromise(Promise.resolve()); // -> true
  	 * ```
  	 *
  	 * @param  {*}  obj the object to test for Promise traits.
  	 * @return {Boolean}
  	 */
  	isPromise: function(obj){
  		return (obj instanceof Promise || (Object.prototype.toString.call(obj) === '[object Promise]'));
  	},
  	/**
  	 * @function can-reflect.isPlainObject isPlainObject
  	 * @parent can-reflect/type
  	 * @description Test if a value is an object created with `{}` or `new Object()`.
  	 *
  	 * @signature `isPlainObject(obj)`
  	 *
  	 * Attempts to determine if an object is a plain object like those you would create using the curly braces syntax: `{}`. The following are not plain objects:
  	 *
  	 * 1. Objects with prototypes (created using the `new` keyword).
  	 * 2. Booleans.
  	 * 3. Numbers.
  	 * 4. NaN.
  	 *
  	 * ```js
  	 * var isPlainObject = require("can-reflect").isPlainObject;
  	 *
  	 * // Created with {}
  	 * console.log(isPlainObject({})); // -> true
  	 *
  	 * // new Object
  	 * console.log(isPlainObject(new Object())); // -> true
  	 *
  	 * // Custom object
  	 * var Ctr = function(){};
  	 * var obj = new Ctr();
  	 *
  	 * console.log(isPlainObject(obj)); // -> false
  	 * ```
  	 *
  	 * @param  {Object}  obj the object to test.
  	 * @return {Boolean}
  	 */
  	isPlainObject: isPlainObject
  };

  var call = {
  	/**
  	 * @function {function(...), Object, ...} can-reflect/call.call call
  	 * @parent can-reflect/call
  	 * @description  Call a callable, with a context object and parameters
  	 *
  	 * @signature `call(func, context, ...rest)`
  	 *
  	 * Call the callable `func` as if it were a function, bound to `context` and with any additional parameters
  	 * occurring after `context` set to the positional parameters.
  	 *
  	 * Note that `func` *must* either be natively callable, implement [can-symbol/symbols/apply @@@@can.apply],
  	 * or have a callable `apply` property to work with `canReflect.call`
  	 *
  	 * ```js
  	 * var compute = canCompute("foo");
  	 *
  	 * canReflect.call(compute, null, "bar");
  	 * canReflect.call(compute, null); // -> "bar"
  	 * ```
  	 *
  	 * @param  {function(...)} func the function to call with the supplied arguments
  	 * @param  {Object} context the context object to set as `this` on the function call
  	 * @param  {*} rest any arguments after `context` will be passed to the function call
  	 * @return {*}  return types and values are determined by the call to `func`
  	 */
  	call: function(func, context){
  		var args = [].slice.call(arguments, 2);
  		var apply = func[canSymbol.for("can.apply")];
  		if(apply) {
  			return apply.call(func, context, args);
  		} else {
  			return func.apply(context, args);
  		}
  	},
  	/**
  	 * @function {function(...), Object, ...} can-reflect/call.apply apply
  	 * @parent can-reflect/call
  	 * @description  Call a callable, with a context object and a list of parameters
  	 *
  	 * @signature `apply(func, context, args)`
  	 *
  	 * Call the callable `func` as if it were a function, bound to `context` and with any additional parameters
  	 * contained in the Array-like `args`
  	 *
  	 * Note that `func` *must* either be natively callable, implement [can-symbol/symbols/apply @@@@can.apply],
  	 * or have a callable `apply` property to work with `canReflect.apply`
  	 *
  	 * ```js
  	 * var compute = canCompute("foo");
  	 *
  	 * canReflect.apply(compute, null, ["bar"]);
  	 * canReflect.apply(compute, null, []); // -> "bar"
  	 * ```
  	 *
  	 * @param  {function(...)} func the function to call
  	 * @param  {Object} context the context object to set as `this` on the function call
  	 * @param  {*} args arguments to be passed to the function call
  	 * @return {*}  return types and values are determined by the call to `func`
  	 */
  	apply: function(func, context, args){
  		var apply = func[canSymbol.for("can.apply")];
  		if(apply) {
  			return apply.call(func, context, args);
  		} else {
  			return func.apply(context, args);
  		}
  	},
  	/**
  	 * @function {function(...), ...} can-reflect/call.new new
  	 * @parent can-reflect/call
  	 * @description  Construct a new instance of a callable constructor
  	 *
  	 * @signature `new(func, ...rest)`
  	 *
  	 * Call the callable `func` as if it were a function, bound to a new instance of `func`, and with any additional
  	 * parameters occurring after `func` set to the positional parameters.
  	 *
  	 * Note that `func` *must* either implement [can-symbol/symbols/new @@@@can.new],
  	 * or have a callable `apply` property *and* a prototype to work with `canReflect.new`
  	 *
  	 * ```js
  	 * canReflect.new(DefineList, ["foo"]); // -> ["foo"]<DefineList>
  	 * ```
  	 *
  	 * @param  {function(...)} func a constructor
  	 * @param  {*} rest arguments to be passed to the constructor
  	 * @return {Object}  if `func` returns an Object, that returned Object; otherwise a new instance of `func`
  	 */
  	"new": function(func){
  		var args = [].slice.call(arguments, 1);
  		var makeNew = func[canSymbol.for("can.new")];
  		if(makeNew) {
  			return makeNew.apply(func, args);
  		} else {
  			var context = Object.create(func.prototype);
  			var ret = func.apply(context, args);
  			if(type.isPrimitive(ret)) {
  				return context;
  			} else {
  				return ret;
  			}
  		}
  	}
  };

  var setKeyValueSymbol = canSymbol.for("can.setKeyValue"),
  	getKeyValueSymbol = canSymbol.for("can.getKeyValue"),
  	getValueSymbol = canSymbol.for("can.getValue"),
  	setValueSymbol = canSymbol.for("can.setValue");

  var reflections = {
  	/**
  	 * @function {Object, String, *} can-reflect.setKeyValue setKeyValue
  	 * @parent can-reflect/get-set
  	 * @description Set the value of a named property on a MapLike object.
  	 *
  	 * @signature `setKeyValue(obj, key, value)`
  	 *
  	 * Set the property on Map-like `obj`, identified by the String, Symbol or Object value `key`, to the value `value`.
  	 * The default behavior can be overridden on `obj` by implementing [can-symbol/symbols/setKeyValue @@@@can.setKeyValue],
  	 * otherwise native named property access is used for string keys, and `Object.defineProperty` is used to set symbols.
  	 *
  	 * ```js
  	 * var foo = new DefineMap({ bar: "baz" });
  	 *
  	 * canReflect.setKeyValue(foo, "bar", "quux");
  	 * foo[bar]; // -> "quux"
  	 * ```
  	 * @param  {Object} obj   the object to set on
  	 * @param  {String} key   the key for the property to set
  	 * @param  {*} value      the value to set on the object
  	 */
  	setKeyValue: function(obj, key, value){
  		if( type.isSymbolLike(key) ) {
  			if(typeof key === "symbol") {
  				obj[key] = value;
  			} else {
  				Object.defineProperty(obj, key, {
  					enumerable: false,
  					configurable: true,
  					value: value,
  					writable: true
  				});
  			}
  			return;
  		}
  		var setKeyValue = obj[setKeyValueSymbol];
  		if(setKeyValue !== undefined) {
  			return setKeyValue.call(obj, key, value);
  		} else {
  			obj[key] = value;
  		}
  	},
  	/**
  	 * @function {Object, String} can-reflect.getKeyValue getKeyValue
  	 * @parent can-reflect/get-set
  	 * @description Get the value of a named property on a MapLike object.
  	 *
  	 * @signature `getKeyValue(obj, key)`
  	 *
  	 * Retrieve the property on Map-like `obj` identified by the String or Symbol value `key`.  The default behavior
  	 * can be overridden on `obj` by implementing [can-symbol/symbols/getKeyValue @@@@can.getKeyValue],
  	 * otherwise native named property access is used.
  	 *
  	 * ```js
  	 * var foo = new DefineMap({ bar: "baz" });
  	 *
  	 * canReflect.getKeyValue(foo, "bar"); // -> "baz"
  	 * ```
  	 *
  	 * @param  {Object} obj   the object to get from
  	 * @param  {String} key   the key of the property to get
  	 */
  	getKeyValue: function(obj, key) {
  		var getKeyValue = obj[getKeyValueSymbol];
  		if(getKeyValue) {
  			return getKeyValue.call(obj, key);
  		}
  		return obj[key];
  	},
  	/**
  	 * @function {Object, String} can-reflect.deleteKeyValue deleteKeyValue
  	 * @parent can-reflect/get-set
  	 * @description Delete a named property from a MapLike object.
  	 *
  	 * @signature `deleteKeyValue(obj, key)`
  	 *
  	 * Remove the property identified by the String or Symbol `key` from the Map-like object `obj`, if possible.
  	 * Property definitions may interfere with deleting key values; the behavior on `obj` if `obj[key]` cannot
  	 * be deleted is undefined.  The default use of the native `delete` keyword can be overridden by `obj` if it
  	 * implements [can-symbol/symbols/deleteKeyValue @@@@can.deleteKeyValue].
  	 *
  	 * ```js
  	 * var foo = new DefineMap({ bar: "baz" });
  	 * var quux = new CanMap({ thud: "jeek" });
  	 *
  	 * canReflect.deleteKeyValue(foo, "bar");
  	 * canReflect.deleteKeyValue(quux, "thud");
  	 *
  	 * "bar" in foo; // ->  true  -- DefineMaps use property defs which cannot be un-defined
  	 * foo.bar // -> undefined    --  but set values to undefined when deleting
  	 *
  	 * "thud" in quux; // -> false
  	 * quux.thud; // -> undefined
  	 * ```
  	 *
  	 * @param  {Object} obj   the object to delete on
  	 * @param  {String} key   the key for the property to delete
  	 */
  	deleteKeyValue: function(obj, key) {
  		var deleteKeyValue = obj[canSymbol.for("can.deleteKeyValue")];
  		if(deleteKeyValue) {
  			return deleteKeyValue.call(obj, key);
  		}
  		delete obj[key];
  	},
  	/**
  	 * @function {Object} can-reflect.getValue getValue
  	 * @parent can-reflect/get-set
  	 * @description Get the value of an object with a gettable value
  	 *
  	 * @signature `getValue(obj)`
  	 *
  	 * Return the value of the Value-like object `obj`.  Unless `obj` implements
  	 * [can-symbol/symbols/getValue @@@@can.getValue], the result of `getValue` on
  	 * `obj` will always be `obj`.  Observable Map-like objects may want to implement
  	 * `@@@@can.getValue` to return non-observable or plain representations of themselves.
  	 *
  	 * ```js
  	 * var compute = canCompute("foo");
  	 * var primitive = "bar";
  	 *
  	 * canReflect.getValue(compute); // -> "foo"
  	 * canReflect.getValue(primitive); // -> "bar"
  	 * ```
  	 *
  	 * @param  {Object} obj   the object to get from
  	 * @return {*} the value of the object via `@@can.getValue`, or the value itself.
  	 */
  	getValue: function(value){
  		if(type.isPrimitive(value)) {
  			return value;
  		}
  		var getValue = value[getValueSymbol];
  		if(getValue) {
  			return getValue.call(value);
  		}
  		return value;
  	},
  	/**
  	 * @function {Object, *} can-reflect.setValue setValue
  	 * @parent can-reflect/get-set
  	 * @description Set the value of a mutable object.
  	 *
  	 * @signature `setValue(obj, value)`
  	 *
  	 * Set the value of a Value-like object `obj` to the value `value`.  `obj` *must* implement
  	 * [can-symbol/symbols/setValue @@@@can.setValue] to be used with `canReflect.setValue`.
  	 * Map-like objects may want to implement `@@@@can.setValue` to merge objects of properties
  	 * into themselves.
  	 *
  	 * ```js
  	 * var compute = canCompute("foo");
  	 * var plain = {};
  	 *
  	 * canReflect.setValue(compute, "bar");
  	 * compute(); // -> bar
  	 *
  	 * canReflect.setValue(plain, { quux: "thud" }); // throws "can-reflect.setValue - Can not set value."
  	 * ```
  	 *
  	 * @param  {Object} obj   the object to set on
  	 * @param  {*} value      the value to set for the object
  	 */
  	setValue: function(item, value){
  		var setValue = item && item[setValueSymbol];
  		if(setValue) {
  			return setValue.call(item, value);
  		} else {
  			throw new Error("can-reflect.setValue - Can not set value.");
  		}
  	},

  	splice: function(obj, index, removing, adding){
  		var howMany;
  		if(typeof removing !== "number") {
  			var updateValues = obj[canSymbol.for("can.updateValues")];
  			if(updateValues) {
  				return updateValues.call(obj, index, removing, adding);
  			}
  			howMany = removing.length;
  		} else {
  			howMany = removing;
  		}

  		if(arguments.length <= 3){
  			adding = [];
  		}

  		var splice = obj[canSymbol.for("can.splice")];
  		if(splice) {
  			return splice.call(obj, index, howMany, adding);
  		}
  		return [].splice.apply(obj, [index, howMany].concat(adding) );
  	},
  	addValues: function(obj, adding, index) {
  		var add = obj[canSymbol.for("can.addValues")];
  		if(add) {
  			return add.call(obj, adding, index);
  		}
  		if(Array.isArray(obj) && index === undefined) {
  			return obj.push.apply(obj, adding);
  		}
  		return reflections.splice(obj, index, [], adding);
  	},
  	removeValues: function(obj, removing, index) {
  		var removeValues = obj[canSymbol.for("can.removeValues")];
  		if(removeValues) {
  			return removeValues.call(obj, removing, index);
  		}
  		if(Array.isArray(obj) && index === undefined) {
  			removing.forEach(function(item){
  				var index = obj.indexOf(item);
  				if(index >=0) {
  					obj.splice(index, 1);
  				}
  			});
  			return;
  		}
  		return reflections.splice(obj, index, removing, []);
  	}
  };
  /**
   * @function {Object, String} can-reflect.get get
   * @hide
   * @description an alias for [can-reflect.getKeyValue getKeyValue]
   */
  reflections.get = reflections.getKeyValue;
  /**
   * @function {Object, String} can-reflect.set set
   * @hide
   * @description an alias for [can-reflect.setKeyValue setKeyValue]
   */
  reflections.set = reflections.setKeyValue;
  /**
   * @function {Object, String} can-reflect.delete delete
   * @hide
   * @description an alias for [can-reflect.deleteKeyValue deleteKeyValue]
   */
  reflections["delete"] = reflections.deleteKeyValue;

  var getSet = reflections;

  var slice = [].slice;

  function makeFallback(symbolName, fallbackName) {
  	return function(obj, event, handler, queueName){
  		var method = obj[canSymbol.for(symbolName)];
  		if(method !== undefined) {
  			return method.call(obj, event, handler, queueName);
  		}
  		return this[fallbackName].apply(this, arguments);
  	};
  }

  function makeErrorIfMissing(symbolName, errorMessage){
  	return function(obj){
  		var method = obj[canSymbol.for(symbolName)];
  		if(method !== undefined) {
  			var args = slice.call(arguments, 1);
  			return method.apply(obj, args);
  		}
  		throw new Error(errorMessage);
  	};
  }

  var observe = {
  	// KEY
  	/**
  	 * @function {Object, String, function(*, *), String} can-reflect/observe.onKeyValue onKeyValue
  	 * @parent can-reflect/observe
  	 * @description  Register an event handler on a MapLike object, based on a key change
  	 *
  	 * @signature `onKeyValue(obj, key, handler, [queueName])`
  	 *
  	 * Register a handler on the Map-like object `obj` to trigger when the property key `key` changes.
  	 * `obj` *must* implement [can-symbol/symbols/onKeyValue @@@@can.onKeyValue] to be compatible with
  	 * can-reflect.onKeyValue.  The function passed as `handler` will receive the new value of the property
  	 * as the first argument, and the previous value of the property as the second argument.
  	 *
  	 * ```js
  	 * var obj = new DefineMap({ foo: "bar" });
  	 * canReflect.onKeyValue(obj, "foo", function(newVal, oldVal) {
  	 * 	console.log("foo is now", newVal, ", was", oldVal);
  	 * });
  	 *
  	 * obj.foo = "baz";  // -> logs "foo is now baz , was bar"
  	 * ```
  	 *
  	 * @param {Object} obj an observable MapLike that can listen to changes in named properties.
  	 * @param {String} key  the key to listen to
  	 * @param {function(*, *)} handler a callback function that recieves the new value
  	 * @param {String} [queueName]  the queue to dispatch events to
  	 */
  	onKeyValue: makeFallback("can.onKeyValue", "onEvent"),
  	/**
  	 * @function {Object, String, function(*), String} can-reflect/observe.offKeyValue offKeyValue
  	 * @parent can-reflect/observe
  	 * @description  Unregister an event handler on a MapLike object, based on a key change
  	 *
  	 * @signature `offKeyValue(obj, key, handler, [queueName])`
  	 *
  	 * Unregister a handler from the Map-like object `obj` that had previously been registered with
  	 * [can-reflect/observe.onKeyValue onKeyValue]. The function passed as `handler` will no longer be called
  	 * when the value of `key` on `obj` changes.
  	 *
  	 * ```js
  	 * var obj = new DefineMap({ foo: "bar" });
  	 * var handler = function(newVal, oldVal) {
  	 * 	console.log("foo is now", newVal, ", was", oldVal);
  	 * };
  	 *
  	 * canReflect.onKeyValue(obj, "foo", handler);
  	 * canReflect.offKeyValue(obj, "foo", handler);
  	 *
  	 * obj.foo = "baz";  // -> nothing is logged
  	 * ```
  	 *
  	 * @param {Object} obj an observable MapLike that can listen to changes in named properties.
  	 * @param {String} key  the key to stop listening to
  	 * @param {function(*)} handler the callback function that should be removed from the event handlers for `key`
  	 * @param {String} [queueName]  the queue that the handler was set to receive events from
  	 */
  	offKeyValue: makeFallback("can.offKeyValue","offEvent"),

  	/**
  	 * @function {Object, function(Array)} can-reflect/observe.onKeys onKeys
  	 * @parent can-reflect/observe
  	 * @description  Register an event handler on a MapLike object, triggered on the key set changing
  	 *
  	 * @signature `onKeys(obj, handler)`
  	 *
  	 * Register an event handler on the Map-like object `obj` to trigger when `obj`'s keyset changes.
  	 * `obj` *must* implement [can-symbol/symbols/onKeys @@@@can.onKeys] to be compatible with
  	 * can-reflect.onKeys.  The function passed as `handler` will receive an Array of object diffs (see
  	 * [can-util/js/diff-object/diff-object diffObject] for the format) as its one argument.
  	 *
  	 * ```js
  	 * var obj = new DefineMap({ foo: "bar" });
  	 * canReflect.onKeys(obj, function(diffs) {
  	 * 	console.log(diffs);
  	 * });
  	 *
  	 * obj.set("baz", "quux");  // -> logs '[{"property": "baz", "type": "add", "value": "quux"}]'
  	 * ```
  	 *
  	 * @param {Object} obj an observable MapLike that can listen to changes in named properties.
  	 * @param {function(Array)} handler the callback function to receive the diffs in the key set
  	 */
  	// any key change (diff would normally happen)
  	onKeys: makeErrorIfMissing("can.onKeys","can-reflect: can not observe an onKeys event"),
  	/**
  	 * @function {Object, function(Array)} can-reflect/observe.onKeysAdded onKeysAdded
  	 * @parent can-reflect/observe
  	 * @description  Register an event handler on a MapLike object, triggered on new keys being added.
  	 *
  	 * @signature `onKeysAdded(obj, handler)`
  	 *
  	 * Register an event handler on the Map-like object `obj` to trigger when a new key or keys are set on
  	 * `obj`. `obj` *must* implement [can-symbol/symbols/onKeysAdded @@@@can.onKeysAdded] to be compatible with
  	 * can-reflect.onKeysAdded.  The function passed as `handler` will receive an Array of Strings as its one
  	 * argument.
  	 *
  	 * ```js
  	 * var obj = new DefineMap({ foo: "bar" });
  	 * canReflect.onKeysAded(obj, function(newKeys) {
  	 * 	console.log(newKeys);
  	 * });
  	 *
  	 * foo.set("baz", "quux");  // -> logs '["baz"]'
  	 * ```
  	 *
  	 * @param {Object} obj an observable MapLike that can listen to changes in named properties.
  	 * @param {function(Array)} handler the callback function to receive the array of added keys
  	 */
  	// keys added at a certain point {key: 1}, index
  	onKeysAdded: makeErrorIfMissing("can.onKeysAdded","can-reflect: can not observe an onKeysAdded event"),
  	/**
  	 * @function {Object, function(Array)} can-reflect/observe.onKeysRemoved onKeysRemoved
  	 * @parent can-reflect/observe
  	 * @description  Register an event handler on a MapLike object, triggered on keys being deleted.
  	 *
  	 * @signature `onKeysRemoved(obj, handler)`
  	 *
  	 * Register an event handler on the Map-like object `obj` to trigger when a key or keys are removed from
  	 * `obj`'s keyset. `obj` *must* implement [can-symbol/symbols/onKeysRemoved @@@@can.onKeysRemoved] to be
  	 * compatible with can-reflect.onKeysAdded.  The function passed as `handler` will receive an Array of
  	 * Strings as its one argument.
  	 *
  	 * ```js
  	 * var obj = new CanMap({ foo: "bar" });
  	 * canReflect.onKeys(obj, function(diffs) {
  	 * 	console.log(JSON.stringify(diffs));
  	 * });
  	 *
  	 * foo.removeAttr("foo");  // -> logs '["foo"]'
  	 * ```
  	 *
  	 * @param {Object} obj an observable MapLike that can listen to changes in named properties.
  	 * @param {function(Array)} handler the callback function to receive the array of removed keys
  	 */
  	onKeysRemoved: makeErrorIfMissing("can.onKeysRemoved","can-reflect: can not unobserve an onKeysRemoved event"),

  	/**
  	 * @function {Object, String} can-reflect/observe.getKeyDependencies getKeyDependencies
  	 * @parent can-reflect/observe
  	 * @description  Return the observable objects that compute to the value of a named property on an object
  	 *
  	 * @signature `getKeyDependencies(obj, key)`
  	 *
  	 * Return the observable objects that provide input values to generate the computed value of the
  	 * property `key` on Map-like object `obj`.  If `key` does not have dependencies on `obj`, returns `undefined`.
  	 * Otherwise returns an object with up to two keys: `keyDependencies` is a [can-util/js/cid-map/cid-map CIDMap] that
  	 * maps each Map-like object providing keyed values to an Array of the relevant keys; `valueDependencies` is a
  	 * [can-util/js/cid-set/cid-set CIDSet] that contains all Value-like dependencies providing their own values.
  	 *
  	 * `obj` *must* implement [can-symbol/symbols/getKeyDependencies @@@@can.getKeyDependencies] to work with
  	 * `canReflect.getKeyDependencies`.
  	 *
  	 *
  	 * ```js
  	 * var foo = new DefineMap({ "bar": "baz" })
  	 * var obj = new (DefineMap.extend({
  	 * 	 baz: {
  	 * 	   get: function() {
  	 * 	     return foo.bar;
  	 * 	   }
  	 * 	 }
  	 * }))();
  	 *
  	 * canReflect.getKeyDependencies(obj, "baz");  // -> { valueDependencies: CIDSet }
  	 * ```
  	 *
  	 * @param {Object} obj the object to check for key dependencies
  	 * @param {String} key the key on the object to check
  	 * @return {Object} the observable values that this keyed value depends on
  	 */
  	getKeyDependencies: makeErrorIfMissing("can.getKeyDependencies", "can-reflect: can not determine dependencies"),

  	/**
  	 * @function {Object, String} can-reflect/observe.getWhatIChange getWhatIChange
  	 * @hide
  	 * @parent can-reflect/observe
  	 * @description Return the observable objects that derive their value from the
  	 * obj, passed in.
  	 *
  	 * @signature `getWhatIChange(obj, key)`
  	 *
  	 * `obj` *must* implement `@@@@can.getWhatIChange` to work with
  	 * `canReflect.getWhatIChange`.
  	 *
  	 * @param {Object} obj the object to check for what it changes
  	 * @param {String} [key] the key on the object to check
  	 * @return {Object} the observable values that derive their value from `obj`
  	 */
  	getWhatIChange: makeErrorIfMissing(
  		"can.getWhatIChange",
  		"can-reflect: can not determine dependencies"
  	),

  	/**
  	 * @function {Function} can-reflect/observe.getChangesDependencyRecord getChangesDependencyRecord
  	 * @hide
  	 * @parent can-reflect/observe
  	 * @description Return the observable objects that are mutated by the handler
  	 * passed in as argument.
  	 *
  	 * @signature `getChangesDependencyRecord(handler)`
  	 *
  	 * `handler` *must* implement `@@@@can.getChangesDependencyRecord` to work with
  	 * `canReflect.getChangesDependencyRecord`.
  	 *
  	 * ```js
  	 * var one = new SimpleObservable("one");
  	 * var two = new SimpleObservable("two");
  	 *
  	 * var handler = function() {
  	 *	two.set("2");
  	 * };
  	 *
  	 * canReflect.onValue(one, handler);
  	 * canReflect.getChangesDependencyRecord(handler); // -> { valueDependencies: new Set([two]) }
  	 * ```
  	 *
  	 * @param {Function} handler the event handler to check for what it changes
  	 * @return {Object} the observable values that are mutated by the handler
  	 */
  	getChangesDependencyRecord: function getChangesDependencyRecord(handler) {
  		var fn = handler[canSymbol.for("can.getChangesDependencyRecord")];

  		if (typeof fn === "function") {
  			return fn();
  		}
  	},

  	/**
  	 * @function {Object, String} can-reflect/observe.keyHasDependencies keyHasDependencies
  	 * @parent can-reflect/observe
  	 * @description  Determine whether the value for a named property on an object is bound to other events
  	 *
  	 * @signature `keyHasDependencies(obj, key)`
  	 *
  	 * Returns `true` if the computed value of the property `key` on Map-like object `obj` derives from other values.
  	 * Returns `false` if `key` is computed on `obj` but does not have dependencies on other objects. If `key` is not
  	 * a computed value on `obj`, returns `undefined`.
  	 *
  	 * `obj` *must* implement [can-symbol/symbols/keyHasDependencies @@@@can.keyHasDependencies] to work with
  	 * `canReflect.keyHasDependencies`.
  	 *
  	 * ```js
  	 * var foo = new DefineMap({ "bar": "baz" })
  	 * var obj = new (DefineMap.extend({
  	 * 	 baz: {
  	 * 	   get: function() {
  	 * 	     return foo.bar;
  	 * 	   }
  	 * 	 },
  	 * 	 quux: {
  	 * 	 	 get: function() {
  	 * 	 	   return "thud";
  	 * 	 	 }
  	 * 	 }
  	 * }))();
  	 *
  	 * canReflect.keyHasDependencies(obj, "baz");  // -> true
  	 * canReflect.keyHasDependencies(obj, "quux");  // -> false
  	 * canReflect.keyHasDependencies(foo, "bar");  // -> undefined
  	 * ```
  	 *
  	 * @param {Object} obj the object to check for key dependencies
  	 * @param {String} key the key on the object to check
  	 * @return {Boolean} `true` if there are other objects that may update the keyed value; `false` otherwise
  	 *
  	 */
  	// TODO: use getKeyDeps once we know what that needs to look like
  	keyHasDependencies: makeErrorIfMissing("can.keyHasDependencies","can-reflect: can not determine if this has key dependencies"),

  	// VALUE
  	/**
  	 * @function {Object, function(*)} can-reflect/observe.onValue onValue
  	 * @parent can-reflect/observe
  	 * @description  Register an event handler on an observable ValueLike object, based on a change in its value
  	 *
  	 * @signature `onValue(handler, [queueName])`
  	 *
  	 * Register an event handler on the Value-like object `obj` to trigger when its value changes.
  	 * `obj` *must* implement [can-symbol/symbols/onValue @@@@can.onValue] to be compatible with
  	 * can-reflect.onKeyValue.  The function passed as `handler` will receive the new value of `obj`
  	 * as the first argument, and the previous value of `obj` as the second argument.
  	 *
  	 * ```js
  	 * var obj = canCompute("foo");
  	 * canReflect.onValue(obj, function(newVal, oldVal) {
  	 * 	console.log("compute is now", newVal, ", was", oldVal);
  	 * });
  	 *
  	 * obj("bar");  // -> logs "compute is now bar , was foo"
  	 * ```
  	 *
  	 * @param {*} obj  any object implementing @@can.onValue
  	 * @param {function(*, *)} handler  a callback function that receives the new and old values
  	 */
  	onValue: makeErrorIfMissing("can.onValue","can-reflect: can not observe value change"),
  	/**
  	 * @function {Object, function(*)} can-reflect/observe.offValue offValue
  	 * @parent can-reflect/observe
  	 * @description  Unregister an value change handler from an observable ValueLike object
  	 *
  	 * @signature `offValue(handler, [queueName])`
  	 *
  	 * Unregister an event handler from the Value-like object `obj` that had previously been registered with
  	 * [can-reflect/observe.onValue onValue]. The function passed as `handler` will no longer be called
  	 * when the value of `obj` changes.
  	 *
  	 * ```js
  	 * var obj = canCompute( "foo" );
  	 * var handler = function(newVal, oldVal) {
  	 * 	console.log("compute is now", newVal, ", was", oldVal);
  	 * };
  	 *
  	 * canReflect.onKeyValue(obj, handler);
  	 * canReflect.offKeyValue(obj, handler);
  	 *
  	 * obj("baz");  // -> nothing is logged
  	 * ```
  	 *
  	 * @param {*} obj
  	 * @param {function(*)} handler
  	 */
  	offValue: makeErrorIfMissing("can.offValue","can-reflect: can not unobserve value change"),

  	/**
  	 * @function {Object} can-reflect/observe.getValueDependencies getValueDependencies
  	 * @parent can-reflect/observe
  	 * @description  Return all the events that bind to the value of an observable, Value-like object
  	 *
  	 * @signature `getValueDependencies(obj)`
  	 *
  	 * Return the observable objects that provide input values to generate the computed value of the
  	 * Value-like object `obj`.  If `obj` does not have dependencies, returns `undefined`.
  	 * Otherwise returns an object with up to two keys: `keyDependencies` is a [can-util/js/cid-map/cid-map CIDMap] that
  	 * maps each Map-like object providing keyed values to an Array of the relevant keys; `valueDependencies` is a
  	 * [can-util/js/cid-set/cid-set CIDSet] that contains all Value-like dependencies providing their own values.
  	 *
  	 * `obj` *must* implement [can-symbol/symbols/getValueDependencies @@@@can.getValueDependencies] to work with
  	 * `canReflect.getValueDependencies`.
  	 *
  	 *
  	 * ```js
  	 * var foo = new DefineMap({ "bar": "baz" })
  	 * var obj = canCompute(function() {
  	 * 	 return foo.bar;
  	 * });
  	 *
  	 * canReflect.getValueDependencies(obj);  // -> { valueDependencies: CIDSet } because `obj` is internally backed by
  	 * a [can-observation]
  	 * ```
  	 *
  	 * @param {Object} obj the object to check for value dependencies
  	 * @return {Object} the observable objects that `obj`'s value depends on
  	 *
  	 */
  	getValueDependencies: makeErrorIfMissing("can.getValueDependencies","can-reflect: can not determine dependencies"),

  	/**
  	 * @function {Object} can-reflect/observe.valueHasDependencies valueHasDependencies
  	 * @parent can-reflect/observe
  	 * @description  Determine whether the value of an observable object is bound to other events
  	 *
  	 * @signature `valueHasDependencies(obj)`
  	 *
  	 * Returns `true` if the computed value of the Value-like object `obj` derives from other values.
  	 * Returns `false` if `obj` is computed but does not have dependencies on other objects. If `obj` is not
  	 * a computed value, returns `undefined`.
  	 *
  	 * `obj` *must* implement [can-symbol/symbols/valueHasDependencies @@@@can.valueHasDependencies] to work with
  	 * `canReflect.valueHasDependencies`.
  	 *
  	 * ```js
  	 * var foo = canCompute( "bar" );
  	 * var baz = canCompute(function() {
  	 * 	 return foo();
  	 * });
  	 * var quux = "thud";
  	 * var jeek = canCompute(function(plonk) {
  	 * 	 if(argument.length) {
  	 * 	 	  quux = plonk;
  	 * 	 }
  	 * 	 return quux;
  	 * });
  	 *
  	 * canReflect.valueHasDependencies(baz);  // -> true
  	 * canReflect.valueHasDependencies(jeek);  // -> false
  	 * canReflect.valueHasDependencies(foo);  // -> undefined
  	 * ```
  	 *
  	 * @param {Object} obj the object to check for dependencies
  	 * @return {Boolean} `true` if there are other dependencies that may update the object's value; `false` otherwise
  	 *
  	 */
  	valueHasDependencies: makeErrorIfMissing("can.valueHasDependencies","can-reflect: can not determine if value has dependencies"),

  	// PATCHES
  	/**
  	 * @function {Object, function(*), String} can-reflect/observe.onPatches onPatches
  	 * @parent can-reflect/observe
  	 * @description  Register an handler on an observable that listens to any key changes
  	 *
  	 * @signature `onPatches(obj, handler, [queueName])`
  	 *
  	 * Register an event handler on the object `obj` that fires when anything changes on an object: a key value is added,
  	 * an existing key has is value changed, or a key is deleted from the object.
  	 *
  	 * If object is an array-like and the changed property includes numeric indexes, patch sets will include array-specific
  	 * patches in addition to object-style patches
  	 *
  	 * For more on the patch formats, see [can-util/js/diff-object/diff-object] and [can-util/js/diff-array/diff-array].
  	 *
  	 * ```js
  	 * var obj = new DefineMap({});
  	 * var handler = function(patches) {
  	 * 	console.log(patches);
  	 * };
  	 *
  	 * canReflect.onPatches(obj, handler);
  	 * obj.set("foo", "bar");  // logs [{ type: "add", property: "foo", value: "bar" }]
  	 * obj.set("foo", "baz");  // logs [{ type: "set", property: "foo", value: "baz" }]
  	 *
  	 * var arr = new DefineList([]);
  	 * canReflect.onPatches(arr, handler);
  	 * arr.push("foo");  // logs [{type: "add", property:"0", value: "foo"},
  	 *                            {index: 0, deleteCount: 0, insert: ["foo"]}]
     * arr.pop();  // logs [{type: "remove", property:"0"},
  	 *                            {index: 0, deleteCount: 1, insert: []}]
  	 * ```
  	 *
  	 * @param {*} obj
  	 * @param {function(*)} handler
  	 * @param {String} [queueName] the name of a queue in [can-queues]; dispatches to `handler` will happen on this queue
  	 */
  	onPatches: makeErrorIfMissing("can.onPatches", "can-reflect: can not observe patches on object"),
  	/**
  	 * @function {Object, function(*), String} can-reflect/observe.offPatches offPatches
  	 * @parent can-reflect/observe
  	 * @description  Unregister an object patches handler from an observable object
  	 *
  	 * @signature `offPatches(obj, handler, [queueName])`
  	 *
  	 * Unregister an event handler from the object `obj` that had previously been registered with
  	 * [can-reflect/observe.onPatches onPatches]. The function passed as `handler` will no longer be called
  	 * when `obj` has key or index changes.
  	 *
  	 * ```js
  	 * var obj = new DefineMap({});
  	 * var handler = function(patches) {
  	 * 	console.log(patches);
  	 * };
  	 *
  	 * canReflect.onPatches(obj, handler);
  	 * canReflect.offPatches(obj, handler);
  	 *
  	 * obj.set("foo", "bar");  // nothing is logged
  	 * ```
  	 *
  	 * @param {*} obj
  	 * @param {function(*)} handler
  	 * @param {String} [queueName] the name of the queue in [can-queues] the handler was registered under
  	 */
  	offPatches: makeErrorIfMissing("can.offPatches", "can-reflect: can not unobserve patches on object"),

  	/**
  	 * @function {Object, function(*)} can-reflect/observe.onInstancePatches onInstancePatches
  	 * @parent can-reflect/observe
  	 *
  	 * @description Registers a handler that listens to patch events on any instance
  	 *
  	 * @signature `onInstancePatches(Type, handler(instance, patches))`
  	 *
  	 * Listens to patch changes on any instance of `Type`. This is used by [can-connect]
  	 * to know when a potentially `unbound` instance's `id` changes. If the `id` changes,
  	 * the instance can be moved into the store while it is being saved. E.g:
  	 *
  	 * ```js
  	 * canReflect.onInstancePatches(Map, function onInstancePatches(instance, patches) {
  	 *	patches.forEach(function(patch) {
  	 *		if (
  	 *			(patch.type === "add" || patch.type === "set") &&
  	 *			patch.key === connection.idProp &&
  	 *			canReflect.isBound(instance)
  	 *		) {
  	 *			connection.addInstanceReference(instance);
  	 *		}
  	 *	});
  	 *});
  	 * ```
  	 *
  	 * @param {*} Type
  	 * @param {function(*)} handler
  	 */
  	onInstancePatches: makeErrorIfMissing(
  		"can.onInstancePatches",
  		"can-reflect: can not observe onInstancePatches on Type"
  	),

  	/**
  	 * @function {Object, function(*)} can-reflect/observe.offInstancePatches offInstancePatches
  	 * @parent can-reflect/observe
  	 *
  	 * @description Unregisters a handler registered through [can-reflect/observe.onInstancePatches]
  	 *
  	 * @signature `offInstancePatches(Type, handler(instance, patches))`
  	 *
  	 * ```js
  	 * canReflect.offInstancePatches(Map, onInstancePatches);
  	 * ```
  	 *
  	 * @param {*} Type
  	 * @param {function(*)} handler
  	 */
  	offInstancePatches: makeErrorIfMissing(
  		"can.offInstancePatches",
  		"can-reflect: can not unobserve onInstancePatches on Type"
  	),

  	// HAS BINDINGS VS DOES NOT HAVE BINDINGS
  	/**
  	 * @function {Object, function(*), String} can-reflect/observe.onInstanceBoundChange onInstanceBoundChange
  	 * @parent can-reflect/observe
  	 * @description Listen to when observables of a type are bound and unbound.
  	 *
  	 * @signature `onInstanceBoundChange(Type, handler, [queueName])`
  	 *
  	 * Register an event handler on the object `Type` that fires when instances of the type become bound (the first handler is added)
  	 * or unbound (the last remaining handler is removed). The function passed as `handler` will be called
  	 * with the `instance` as the first argument and `true` as the second argument when `instance` gains its first binding,
  	 * and called with `false` when `instance` loses its
  	 * last binding.
  	 *
  	 * ```js
  	 * Person = DefineMap.extend({ ... });
  	 *
  	 * var person = Person({});
  	 * var handler = function(instance, newVal) {
  	 * 	console.log(instance, "bound state is now", newVal);
  	 * };
  	 * var keyHandler = function() {};
  	 *
  	 * canReflect.onInstanceBoundChange(Person, handler);
  	 * canReflect.onKeyValue(obj, "name", keyHandler);  // logs person Bound state is now true
  	 * canReflect.offKeyValue(obj, "name", keyHandler);  // logs person Bound state is now false
  	 * ```
  	 *
  	 * @param {function} Type A constructor function
  	 * @param {function(*,Boolean)} handler(instance,isBound) A function called with the `instance` whose bound status changed and the state of the bound status.
  	 * @param {String} [queueName] the name of a queue in [can-queues]; dispatches to `handler` will happen on this queue
  	 */
  	onInstanceBoundChange: makeErrorIfMissing("can.onInstanceBoundChange", "can-reflect: can not observe bound state change in instances."),
  	/**
  	 * @function {Object, function(*), String} can-reflect/observe.offInstanceBoundChange offInstanceBoundChange
  	 * @parent can-reflect/observe
  	 * @description Stop listening to when observables of a type are bound and unbound.
  	 *
  	 * @signature `offInstanceBoundChange(Type, handler, [queueName])`
  	 *
  	 * Unregister an event handler from the type `Type` that had previously been registered with
  	 * [can-reflect/observe.onInstanceBoundChange onInstanceBoundChange]. The function passed as `handler` will no longer be called
  	 * when instances of `Type` gains its first or loses its last binding.
  	 *
  	 * ```js
  	 * Person = DefineMap.extend({ ... });
  	 *
  	 * var person = Person({});
  	 * var handler = function(instance, newVal) {
  	 * 	console.log(instance, "bound state is now", newVal);
  	 * };
  	 * var keyHandler = function() {};
  	 *
  	 * canReflect.onInstanceBoundChange(Person, handler);
  	 * canReflect.offInstanceBoundChange(Person, handler);
  	 * canReflect.onKeyValue(obj, "name", keyHandler);  // nothing is logged
  	 * canReflect.offKeyValue(obj, "name", keyHandler); // nothing is logged
  	 * ```
  	 *
  	 * @param {function} Type A constructor function
  	 * @param {function(*,Boolean)} handler(instance,isBound) The `handler` passed to `canReflect.onInstanceBoundChange`.
  	 * @param {String} [queueName] the name of the queue in [can-queues] the handler was registered under
  	 */
  	offInstanceBoundChange: makeErrorIfMissing("can.offInstanceBoundChange", "can-reflect: can not unobserve bound state change"),
  	/**
  	 * @function {Object} can-reflect/observe.isBound isBound
  	 * @parent can-reflect/observe
  	 * @description  Determine whether any listeners are bound to the observable object
  	 *
  	 * @signature `isBound(obj)`
  	 *
  	 * `isBound` queries an observable object to find out whether any listeners have been set on it using
  	 * [can-reflect/observe.onKeyValue onKeyValue] or [can-reflect/observe.onValue onValue]
  	 *
  	 * ```js
  	 * var obj = new DefineMap({});
  	 * var handler = function() {};
  	 * canReflect.isBound(obj); // -> false
  	 * canReflect.onKeyValue(obj, "foo", handler);
  	 * canReflect.isBound(obj); // -> true
  	 * canReflect.offKeyValue(obj, "foo", handler);
  	 * canReflect.isBound(obj); // -> false
  	 * ```
  	 *
  	 * @param {*} obj
  	 * @return {Boolean} `true` if obj has at least one key-value or value listener, `false` otherwise
  	 */
  	isBound: makeErrorIfMissing("can.isBound", "can-reflect: cannot determine if object is bound"),

  	// EVENT
  	/**
  	 * @function {Object, String, function(*)} can-reflect/observe.onEvent onEvent
  	 * @parent can-reflect/observe
  	 * @description  Register a named event handler on an observable object
  	 *
  	 * @signature `onEvent(obj, eventName, callback)`
  	 *
  	 *
  	 * Register an event handler on the object `obj` to trigger when the event `eventName` is dispatched.
  	 * `obj` *must* implement [can-symbol/symbols/onKeyValue @@@@can.onEvent] or `.addEventListener()` to be compatible
  	 * with can-reflect.onKeyValue.  The function passed as `callback` will receive the event descriptor as the first
  	 * argument, and any data passed to the event dispatch as subsequent arguments.
  	 *
  	 * ```js
  	 * var obj = new DefineMap({ foo: "bar" });
  	 * canReflect.onEvent(obj, "foo", function(ev, newVal, oldVal) {
  	 * 	console.log("foo is now", newVal, ", was", oldVal);
  	 * });
  	 *
  	 * canEvent.dispatch.call(obj, "foo", ["baz", "quux"]);  // -> logs "foo is now baz , was quux"
  	 * ```
  	 *
  	 * @param {Object} obj the object to bind a new event handler to
  	 * @param {String} eventName the name of the event to bind the handler to
  	 * @param {function(*)} callback  the handler function to bind to the event
  	 */
  	onEvent: function(obj, eventName, callback, queue){
  		if(obj) {
  			var onEvent = obj[canSymbol.for("can.onEvent")];
  			if(onEvent !== undefined) {
  				return onEvent.call(obj, eventName, callback, queue);
  			} else if(obj.addEventListener) {
  				obj.addEventListener(eventName, callback, queue);
  			}
  		}
  	},
  	/**
  	 * @function {Object, String, function(*)} can-reflect/observe.offValue offEvent
  	 * @parent can-reflect/observe
  	 * @description  Unregister an event handler on a MapLike object, based on a key change
  	 *
  	 * @signature `offEvent(obj, eventName, callback)`
  	 *
  	 * Unregister an event handler from the object `obj` that had previously been registered with
  	 * [can-reflect/observe.onEvent onEvent]. The function passed as `callback` will no longer be called
  	 * when the event named `eventName` is dispatched on `obj`.
  	 *
  	 * ```js
  	 * var obj = new DefineMap({ foo: "bar" });
  	 * var handler = function(ev, newVal, oldVal) {
  	 * 	console.log("foo is now", newVal, ", was", oldVal);
  	 * };
  	 *
  	 * canReflect.onEvent(obj, "foo", handler);
  	 * canReflect.offEvent(obj, "foo", handler);
  	 *
  	 * canEvent.dispatch.call(obj, "foo", ["baz", "quux"]);  // -> nothing is logged
  	 * ```
  	 *
  	 * @param {Object} obj the object to unbind an event handler from
  	 * @param {String} eventName the name of the event to unbind the handler from
  	 * @param {function(*)} callback the handler function to unbind from the event
  	 */
  	offEvent: function(obj, eventName, callback, queue){
  		if(obj) {
  			var offEvent = obj[canSymbol.for("can.offEvent")];
  			if(offEvent !== undefined) {
  				return offEvent.call(obj, eventName, callback, queue);
  			}  else if(obj.removeEventListener) {
  				obj.removeEventListener(eventName, callback, queue);
  			}
  		}

  	},
  	/**
  	 * @function {function} can-reflect/setPriority setPriority
  	 * @parent can-reflect/observe
  	 * @description  Provide a priority for when an observable that derives its
  	 * value should be re-evaluated.
  	 *
  	 * @signature `setPriority(obj, priority)`
  	 *
  	 * Calls an underlying `@@can.setPriority` symbol on `obj` if it exists with `priorty`.
  	 * Returns `true` if a priority was set, `false` if otherwise.
  	 *
  	 * Lower priorities (`0` being the lowest), will be an indication to run earlier than
  	 * higher priorities.
  	 *
  	 * ```js
  	 * var obj = canReflect.assignSymbols({},{
  	 *   "can.setPriority": function(priority){
  	 *     return this.priority = priority;
  	 *   }
  	 * });
  	 *
  	 * canReflect.setPriority(obj, 0) //-> true
  	 * obj.priority //-> 0
  	 *
  	 * canReflect.setPriority({},20) //-> false
  	 * ```
  	 *
  	 * @param {Object} obj An observable that will update its priority.
  	 * @param {Number} priority The priority number.  Lower priorities (`0` being the lowest),
  	 * indicate to run earlier than higher priorities.
  	 * @return {Boolean} `true` if a priority was able to be set, `false` if otherwise.
  	 *
  	 * @body
  	 *
  	 * ## Use
  	 *
  	 * There's often a need to specify the order of re-evaluation for
  	 * __observables__ that derive (or compute) their value from other observables.
  	 *
  	 * This is needed by templates to avoid unnecessary re-evaluation.  Say we had the following template:
  	 *
  	 * ```js
  	 * {{#if value}}
  	 *   {{value}}
  	 * {{/if}}
  	 * ```
  	 *
  	 * If `value` became falsey, we'd want the `{{#if}}` to be aware of it before
  	 * the `{{value}}` magic tags updated. We can do that by setting priorities:
  	 *
  	 * ```js
  	 * canReflect.setPriority(magicIfObservable, 0);
  	 * canReflect.setPriority(magicValueObservable,1);
  	 * ```
  	 *
  	 * Internally, those observables will use that `priority` to register their
  	 * re-evaluation with the `derive` queue in [can-queues].
  	 *
  	 */
  	setPriority: function(obj, priority) {
  		if(obj) {
  			var setPriority =  obj[canSymbol.for("can.setPriority")];
  			if(setPriority !== undefined) {
  				setPriority.call(obj, priority);
  			 	return true;
  			}
  		}
  		return false;
  	},
  	/**
  	 * @function {function} can-reflect/getPriority getPriority
  	 * @parent can-reflect/observe
  	 * @description  Read the priority for an observable that derives its
  	 * value.
  	 *
  	 * @signature `getPriority(obj)`
  	 *
  	 * Calls an underlying `@@can.getPriority` symbol on `obj` if it exists
  	 * and returns its value. Read [can-reflect/setPriority] for more information.
  	 *
  	 *
  	 *
  	 * @param {Object} obj An observable.
  	 * @return {Undefined|Number} Returns the priority number if
  	 * available, undefined if this object does not support the `can.getPriority`
  	 * symbol.
  	 *
  	 * @body
  	 *
  	 */
  	getPriority: function(obj) {
  		if(obj) {
  			var getPriority =  obj[canSymbol.for("can.getPriority")];
  			if(getPriority !== undefined) {
  				return getPriority.call(obj);
  			}
  		}
  		return undefined;
  	}
  };

  // IE-remove-start
  var getPrototypeOfWorksWithPrimitives = true;
  try {
  	Object.getPrototypeOf(1);
  } catch(e) {
  	getPrototypeOfWorksWithPrimitives = false;
  }
  // IE-remove-end

  var ArrayMap;
  if(typeof Map === "function") {
  	ArrayMap = Map;
  } else {
  	// IE-remove-start
  	var isEven = function isEven(num) {
  		return num % 2 === 0;
  	};

  	// A simple map that stores items in an array.
  	// like [key, value]
  	// You can find the value by searching for the key and then +1.
  	ArrayMap = function(){
  		this.contents = [];
  	};

  	ArrayMap.prototype = {
  		/**
  		 * Get an index of a key. Because we store boths keys and values in
  		 * a flat array, we ensure we are getting a key by checking that it is an
  		 * even number index (all keys are even number indexed).
  		 **/
  		_getIndex: function(key) {
  			var idx;
  			do {
  				idx = this.contents.indexOf(key, idx);
  			} while(idx !== -1 && !isEven(idx));
  			return idx;
  		},
  		has: function(key){
  			return this._getIndex(key) !== -1;
  		},
  		get: function(key){
  			var idx = this._getIndex(key);
  			if(idx !== -1) {
  				return this.contents[idx + 1];
  			}
  		},
  		set: function(key, value){
  			var idx = this._getIndex(key);
  			if(idx !== -1) {
  				// Key already exists, replace the value.
  				this.contents[idx + 1] = value;
  			} else {
  				this.contents.push(key);
  				this.contents.push(value);
  			}
  		},
  		"delete": function(key){
  			var idx = this._getIndex(key);
  			if(idx !== -1) {
  				// Key already exists, replace the value.
  				this.contents.splice(idx, 2);
  			}
  		}
  	};
  	// IE-remove-end
  }

  var hasOwnProperty$3 = Object.prototype.hasOwnProperty;

  var shapeReflections;

  var shiftFirstArgumentToThis = function(func){
  	return function(){
  		var args = [this];
  		args.push.apply(args, arguments);
  		return func.apply(null,args);
  	};
  };

  var getKeyValueSymbol$1 = canSymbol.for("can.getKeyValue");
  var shiftedGetKeyValue = shiftFirstArgumentToThis(getSet.getKeyValue);
  var setKeyValueSymbol$1 = canSymbol.for("can.setKeyValue");
  var shiftedSetKeyValue = shiftFirstArgumentToThis(getSet.setKeyValue);

  var sizeSymbol = canSymbol.for("can.size");

  var hasUpdateSymbol = helpers.makeGetFirstSymbolValue(["can.updateDeep","can.assignDeep","can.setKeyValue"]);
  var shouldUpdateOrAssign = function(obj){
  	return type.isPlainObject(obj) || Array.isArray(obj) || !!hasUpdateSymbol(obj);
  };

  // is the value itself its serialized value
  function isSerializedHelper(obj){
  	if (type.isPrimitive(obj)) {
  		return true;
  	}
  	if(hasUpdateSymbol(obj)) {
  		return false;
  	}
  	return type.isBuiltIn(obj) && !type.isPlainObject(obj) && !Array.isArray(obj) && !type.isObservableLike(obj);
  }

  // IE11 doesn't support primitives
  var Object_Keys;
  try{
  	Object.keys(1);
  	Object_Keys = Object.keys;
  } catch(e) {
  	Object_Keys = function(obj){
  		if(type.isPrimitive(obj)) {
  			return [];
  		} else {
  			return Object.keys(obj);
  		}
  	};
  }

  function createSerializeMap(Type) {
  	var MapType = Type || ArrayMap;
  	return {
  		unwrap: new MapType(),
  		serialize: new MapType() ,
  		isSerializing: {
  			unwrap: new MapType(),
  			serialize: new MapType()
  		},
  		circularReferenceIsSerializing: {
  			unwrap: new MapType(),
  			serialize: new MapType()
  		}
  	};
  }

  function makeSerializer(methodName, symbolsToCheck){
  	// A local variable that is shared with all operations that occur withing a single
  	// outer call to serialize()
  	var serializeMap = null;

  	// Holds the value of running serialize(), preserving the same map for all
  	// internal instances.
  	function SerializeOperation(MapType) {
  		this.first = !serializeMap;

  		if(this.first) {
  			serializeMap = createSerializeMap(MapType);
  		}

  		this.map = serializeMap;
  		this.result = null;
  	}

  	SerializeOperation.prototype.end = function(){
  		// If this is the first, outer call, clean up the serializeMap.
  		if(this.first) {
  			serializeMap = null;
  		}
  		return this.result;
  	};

  	return function serializer(value, MapType){
  		if (isSerializedHelper(value)) {
  			return value;
  		}

  		var operation = new SerializeOperation(MapType);

  		if(type.isValueLike(value)) {
  			operation.result = this[methodName](getSet.getValue(value));

  		} else {
  			// Date, RegEx and other Built-ins are handled above
  			// only want to do something if it's intended to be serialized
  			// or do nothing for a POJO

  			var isListLike = type.isIteratorLike(value) || type.isMoreListLikeThanMapLike(value);
  			operation.result = isListLike ? [] : {};

  			// handle maping to what is serialized
  			if( operation.map[methodName].has(value) ) {
  				// if we are in the process of serializing the first time, setup circular reference detection.
  				if(operation.map.isSerializing[methodName].has(value)) {
  					operation.map.circularReferenceIsSerializing[methodName].set(value, true);
  				}
  				return operation.map[methodName].get(value);
  			} else {
  				operation.map[methodName].set(value, operation.result);
  			}

  			for(var i = 0, len = symbolsToCheck.length ; i< len;i++) {
  				var serializer = value[symbolsToCheck[i]];
  				if(serializer) {
  					// mark that we are serializing
  					operation.map.isSerializing[methodName].set(value, true);
  					var oldResult = operation.result;
  					operation.result = serializer.call(value, oldResult);
  					operation.map.isSerializing[methodName].delete(value);

  					// if the result differs, but this was circular, blow up.
  					if(operation.result !== oldResult) {
  						// jshint -W073
  						if(operation.map.circularReferenceIsSerializing[methodName].has(value)) {
  							// Circular references should use a custom serializer
  							// that sets the serialized value on the object
  							// passed to it as the first argument e.g.
  							// function(proto){
  							//   return proto.a = canReflect.serialize(this.a);
  							// }
  							operation.end();
  							throw new Error("Cannot serialize cirular reference!");
  						}
  						operation.map[methodName].set(value, operation.result);
  					}
  					return operation.end();
  				}
  			}

  			if (typeof obj ==='function') {
  				operation.map[methodName].set(value, value);

  				operation.result = value;
  			} else if( isListLike ) {
  				this.eachIndex(value,function(childValue, index){
  					operation.result[index] = this[methodName](childValue);
  				},this);
  			} else {
  				this.eachKey(value,function(childValue, prop){
  					operation.result[prop] = this[methodName](childValue);
  				},this);
  			}
  		}

  		return operation.end();
  	};
  }

  // returns a Map type of the keys mapped to true
  var makeMap;
  if(typeof Map !== "undefined") {
  	makeMap = function(keys) {
  		var map = new Map();
  		shapeReflections.eachIndex(keys, function(key){
  			map.set(key, true);
  		});
  		return map;
  	};
  } else {
  	makeMap = function(keys) {
  		var map = {};
  		keys.forEach(function(key){
  			map[key] = true;
  		});

  		return {
  			get: function(key){
  				return map[key];
  			},
  			set: function(key, value) {
  				map[key] = value;
  			},
  			keys: function(){
  				return keys;
  			}
  		};
  	};
  }

  // creates an optimized hasOwnKey lookup.
  // If the object has hasOwnKey, then we just use that.
  // Otherwise, try to put all keys in a map.
  var fastHasOwnKey = function(obj){
  	var hasOwnKey = obj[canSymbol.for("can.hasOwnKey")];
  	if(hasOwnKey) {
  		return hasOwnKey.bind(obj);
  	} else {
  		var map = makeMap( shapeReflections.getOwnEnumerableKeys(obj) );
  		return function(key) {
  			return map.get(key);
  		};
  	}
  };


  // combines patches if it makes sense
  function addPatch(patches, patch) {
  	var lastPatch = patches[patches.length -1];
  	if(lastPatch) {
  		// same number of deletes and counts as the index is back
  		if(lastPatch.deleteCount === lastPatch.insert.length && (patch.index - lastPatch.index === lastPatch.deleteCount) ) {
  			lastPatch.insert.push.apply(lastPatch.insert, patch.insert);
  			lastPatch.deleteCount += patch.deleteCount;
  			return;
  		}
  	}
  	patches.push(patch);
  }

  function updateDeepList(target, source, isAssign) {
  	var sourceArray = this.toArray(source); // jshint ignore:line

  	var patches = [],
  		lastIndex = -1;
  	this.eachIndex(target, function(curVal, index){ // jshint ignore:line
  		lastIndex = index;
  		// If target has more items than the source.
  		if(index >= sourceArray.length) {
  			if(!isAssign) {
  				// add a patch that removes the last items
  				addPatch(patches, {index: index, deleteCount: target.length - index + 1, insert: []});
  			}
  			return false;
  		}
  		var newVal = sourceArray[index];
  		if( type.isPrimitive(curVal) || type.isPrimitive(newVal) || shouldUpdateOrAssign(curVal) === false ) {
  			addPatch(patches, {index: index, deleteCount: 1, insert: [newVal]});
  		} else {
  			if(isAssign === true) {
  				this.assignDeep(curVal, newVal);
  			} else {
  				this.updateDeep(curVal, newVal);
  			}

  		}
  	}, this); // jshint ignore:line
  	// add items at the end
  	if(sourceArray.length > lastIndex) {
  		addPatch(patches, {index: lastIndex+1, deleteCount: 0, insert: sourceArray.slice(lastIndex+1)});
  	}
  	for(var i = 0, patchLen = patches.length; i < patchLen; i++) {
  		var patch = patches[i];
  		getSet.splice(target, patch.index, patch.deleteCount, patch.insert);
  	}
  	return target;
  }

  shapeReflections = {
  	/**
  	 * @function {Object, function(*), [Object]} can-reflect.each each
  	 * @parent can-reflect/shape
  	 * @description  Iterate a List-like or Map-like, calling `callback` on each keyed or indexed property
  	 *
  	 * @signature `each(obj, callback, context)`
  	 *
  	 * If `obj` is a List-like or an Iterator-like, `each` functions as [can-reflect.eachIndex eachIndex],
  	 * iterating over numeric indexes from 0 to `obj.length - 1` and calling `callback` with each property and
  	 * index, optionally with `context` as `this` (defaulting to `obj`).  If not, `each` functions as
  	 * [can-reflect.eachKey eachKey],
  	 * iterating over every key on `obj` and calling `callback` on each one.
  	 *
  	 * ```js
  	 * var foo = new DefineMap({ bar: "baz" });
  	 * var quux = new DefineList([ "thud", "jeek" ]);
  	 *
  	 * canReflect.each(foo, console.log, console); // -> logs 'baz bar {foo}'
  	 * canReflect.each(quux, console.log, console); // -> logs 'thud 0 {quux}'; logs 'jeek 1 {quux}'
  	 * ```
  	 *
  	 * @param  {Object}   obj     The object to iterate over
  	 * @param  {Function(*, ValueLike)} callback a function that receives each item in the ListLike or MapLike
  	 * @param  {[Object]}   context  an optional `this` context for calling the callback
  	 * @return {Array} the result of calling [can-reflect.eachIndex `eachIndex`] if `obj` is a ListLike,
  	 * or [can-reflect.eachKey `eachKey`] if a MapLike.
  	 */
  	each: function(obj, callback, context){

  		// if something is more "list like" .. use eachIndex
  		if(type.isIteratorLike(obj) || type.isMoreListLikeThanMapLike(obj) ) {
  			return shapeReflections.eachIndex(obj,callback,context);
  		} else {
  			return shapeReflections.eachKey(obj,callback,context);
  		}
  	},

  	/**
  	 * @function {ListLike, function(*), [Object]} can-reflect.eachIndex eachIndex
  	 * @parent can-reflect/shape
  	 * @description  Iterate a ListLike calling `callback` on each numerically indexed element
  	 *
  	 * @signature `eachIndex(list, callback, context)`
  	 *
  	 * For each numeric index from 0 to `list.length - 1`, call `callback`, passing the current
  	 * property value, the current index, and `list`, and optionally setting `this` as `context`
  	 * if specified (otherwise use the current property value).
  	 *
  	 * ```js
  	 * var foo = new DefineList([ "bar", "baz" ]);
  	 *
  	 * canReflect.eachIndex(foo, console.log, console); // -> logs 'bar 0 {foo}'; logs 'baz 1 {foo}'
  	 * ```
  	 *
  	 * @param  {ListLike}   list     The list to iterate over
  	 * @param  {Function(*, Number)} callback a function that receives each item
  	 * @param  {[Object]}   context  an optional `this` context for calling the callback
  	 * @return {ListLike}   the original list
  	 */
  	eachIndex: function(list, callback, context){
  		// each index in something list-like. Uses iterator if it has it.
  		if(Array.isArray(list)) {
  			return shapeReflections.eachListLike(list, callback, context);
  		} else {
  			var iter, iterator = list[canSymbol.iterator];
  			if(type.isIteratorLike(list)) {
  				// we are looping through an iterator
  				iter = list;
  			} else if(iterator) {
  				iter = iterator.call(list);
  			}
  			// fast-path arrays
  			if(iter) {
  				var res, index = 0;

  				while(!(res = iter.next()).done) {
  					if( callback.call(context || list, res.value, index++, list) === false ){
  						break;
  					}
  				}
  			} else {
  				shapeReflections.eachListLike(list, callback, context);
  			}
  		}
  		return list;
  	},
  	eachListLike: function(list, callback, context){
  		var index = -1;
  		var length = list.length;
  		if( length === undefined ) {
  			var size = list[sizeSymbol];
  			if(size) {
  				length = size.call(list);
  			} else {
  				throw new Error("can-reflect: unable to iterate.");
  			}
  		}

  		while (++index < length) {
  			var item = list[index];
  			if (callback.call(context || item, item, index, list) === false) {
  				break;
  			}
  		}

  		return list;
  	},
  	/**
  	 * @function can-reflect.toArray toArray
  	 * @parent can-reflect/shape
  	 * @description  convert the values of any MapLike or ListLike into an array
  	 *
  	 * @signature `toArray(obj)`
  	 *
  	 * Convert the values of any Map-like or List-like into a JavaScript Array.  If a Map-like,
  	 * key data is discarded and only value data is preserved.
  	 *
  	 * ```js
  	 * var foo = new DefineList(["bar", "baz"]);
  	 * var quux = new DefineMap({ thud: "jeek" });
  	 * ```
  	 *
  	 * canReflect.toArray(foo); // -> ["bar", "baz"]
  	 * canReflect.toArray(quux): // -> ["jeek"]
  	 *
  	 * @param  {Object} obj Any object, whether MapLike or ListLike
  	 * @return {Array}  an array of the values of `obj`
  	 */
  	toArray: function(obj){
  		var arr = [];
  		shapeReflections.each(obj, function(value){
  			arr.push(value);
  		});
  		return arr;
  	},
  	/**
  	 * @function can-reflect.eachKey eachKey
  	 * @parent can-reflect/shape
  	 * @description Iterate over a MapLike, calling `callback` on each enumerable property
  	 *
  	 * @signature `eachKey(obj, callback, context)`
  	 *
  	 * Iterate all own enumerable properties on Map-like `obj`
  	 * (using [can-reflect/shape/getOwnEnumerableKeys canReflect.getOwnEnumerableKeys]), and call
  	 * `callback` with the property value, the property key, and `obj`, and optionally setting
  	 * `this` on the callback as `context` if provided, `obj` otherwise.
  	 *
  	 * ```js
  	 * var foo = new DefineMap({ bar: "baz" });
  	 *
  	 * canReflect.eachKey(foo, console.log, console); // logs 'baz bar {foo}'
  	 * ```
  	 *
  	 * @param  {Object}   obj   The object to iterate over
  	 * @param  {Function(*, String)} callback The callback to call on each enumerable property value
  	 * @param  {[Object]}   context  an optional `this` context for calling `callback`
  	 * @return {Array}    the enumerable keys of `obj` as an Array
  	 */
  	eachKey: function(obj, callback, context){
  		// each key in something map like
  		// eachOwnEnumerableKey
  		if(obj) {
  			var enumerableKeys = shapeReflections.getOwnEnumerableKeys(obj);

  			// cache getKeyValue method if we can
  			var getKeyValue = obj[getKeyValueSymbol$1] || shiftedGetKeyValue;

  			return shapeReflections.eachIndex(enumerableKeys, function(key){
  				var value = getKeyValue.call(obj, key);
  				return callback.call(context || obj, value, key, obj);
  			});
  		}
  		return obj;
  	},
  	/**
  	 * @function can-reflect.hasOwnKey hasOwnKey
  	 * @parent can-reflect/shape
  	 * @description  Determine whether an object contains a key on itself, not only on its prototype chain
  	 *
  	 * @signature `hasOwnKey(obj, key)`
  	 *
  	 * Return `true` if an object's own properties include the property key `key`, `false` otherwise.
  	 * An object may implement [can-symbol/symbols/hasOwnKey @@@@can.hasOwnKey] to override default behavior.
  	 * By default, `canReflect.hasOwnKey` will first look for
  	 * [can-symbol/symbols/getOwnKey @@@@can.getOwnKey] on `obj`. If present, it will call `@@@@can.getOwnKey` and
  	 * test `key` against the returned Array of keys.  If absent, `Object.prototype.hasOwnKey()` is used.
  	 *
  	 * ```js
  	 * var foo = new DefineMap({ "bar": "baz" });
  	 *
  	 * canReflect.hasOwnKey(foo, "bar"); // -> true
  	 * canReflect.hasOwnKey(foo, "each"); // -> false
  	 * foo.each // -> function each() {...}
  	 * ```
  	 *
  	 * @param  {Object} obj Any MapLike object
  	 * @param  {String} key The key to look up on `obj`
  	 * @return {Boolean} `true` if `obj`'s key set contains `key`, `false` otherwise
  	 */
  	"hasOwnKey": function(obj, key){
  		// if a key or index
  		// like has own property
  		var hasOwnKey = obj[canSymbol.for("can.hasOwnKey")];
  		if(hasOwnKey) {
  			return hasOwnKey.call(obj, key);
  		}
  		var getOwnKeys = obj[canSymbol.for("can.getOwnKeys")];
  		if( getOwnKeys ) {
  			var found = false;
  			shapeReflections.eachIndex(getOwnKeys.call(obj), function(objKey){
  				if(objKey === key) {
  					found = true;
  					return false;
  				}
  			});
  			return found;
  		}
  		return hasOwnProperty$3.call(obj, key);
  	},
  	/**
  	 * @function can-reflect.getOwnEnumerableKeys getOwnEnumerableKeys
  	 * @parent can-reflect/shape
  	 * @description Return the list of keys which can be iterated over on an object
  	 *
  	 * @signature `getOwnEnumerableKeys(obj)`
  	 *
  	 * Return all keys on `obj` which have been defined as enumerable, either from explicitly setting
  	 * `enumerable` on the property descriptor, or by using `=` to set the value of the property without
  	 * a key descriptor, but excluding properties that only exist on `obj`'s prototype chain.  The
  	 * default behavior can be overridden by implementing
  	 * [can-symbol/symbols/getOwnEnumerableKeys @@@@can.getOwnEnumerableKeys] on `obj`.  By default,
  	 * `canReflect.getOwnEnumerableKeys` will use [can-symbol/symbols/getOwnKeys @@@@can.getOwnKeys] to
  	 * retrieve the set of keys and [can-symbol/symbols/getOwnKeyDescriptor @@@@can.getOwnKeyDescriptor]
  	 * to filter for those which are enumerable.  If either symbol is absent from `obj`, `Object.keys`
  	 * is used.
  	 *
  	 * ```js
  	 * var foo = new DefineMap({ bar: "baz", [canSymbol.for("quux")]: "thud" });
  	 * Object.defineProperty(foo, "jeek", {
  	 *   enumerable: true,
  	 *   value: "plonk"
  	 * });
  	 *
  	 * canReflect.getOwnEnumerableKeys(foo); // -> ["bar", "jeek"]
  	 * ```
  	 *
  	 * @param  {Object} obj Any Map-like object
  	 * @return {Array} the Array of all enumerable keys from the object, either using
  	 * [can-symbol/symbols/getOwnEnumerableKeys `@@@@can.getOwnEnumerableKeys`] from `obj`, or filtering
  	 * `obj`'s own keys for those which are enumerable.
  	 */
  	getOwnEnumerableKeys: function(obj){
  		// own enumerable keys (aliased as keys)
  		var getOwnEnumerableKeys = obj[canSymbol.for("can.getOwnEnumerableKeys")];
  		if(getOwnEnumerableKeys) {
  			return getOwnEnumerableKeys.call(obj);
  		}
  		if( obj[canSymbol.for("can.getOwnKeys")] && obj[canSymbol.for("can.getOwnKeyDescriptor")] ) {
  			var keys = [];
  			shapeReflections.eachIndex(shapeReflections.getOwnKeys(obj), function(key){
  				var descriptor =  shapeReflections.getOwnKeyDescriptor(obj, key);
  				if(descriptor.enumerable) {
  					keys.push(key);
  				}
  			}, this);

  			return keys;
  		} /*else if(obj[canSymbol.iterator]){
  			var iter = obj[canSymbol.iterator](obj);
  			var index = 0;
  			var keys;
  			return {
  				next: function(){
  					var res = iter.next();
  					if(index++)
  				}
  			}
  			while(!().done) {

  				if( callback.call(context || list, res.value, index++, list) === false ){
  					break;
  				}
  			}
  		}*/ else {
  			return Object_Keys(obj);
  		}
  	},
  	/**
  	 * @function can-reflect.getOwnKeys getOwnKeys
  	 * @parent can-reflect/shape
  	 * @description Return the list of keys on an object, whether or not they can be iterated over
  	 *
  	 * @signature `getOwnKeys(obj)`
  	 *
  	 * Return the Array of all String (not Symbol) keys from `obj`, whether they are enumerable or not.  If
  	 * [can-symbol/symbols/getOwnKeys @@@@can.getOwnKeys] exists on `obj`, it is called to return
  	 * the keys; otherwise, `Object.getOwnPropertyNames()` is used.
  	 *
  	 * ```js
  	 * var foo = new DefineMap({ bar: "baz", [canSymbol.for("quux")]: "thud" });
  	 * Object.defineProperty(foo, "jeek", {
  	 *   enumerable: false,
  	 *   value: "plonk"
  	 * });
  	 *
  	 * canReflect.getOwnKeys(foo); // -> ["bar", "jeek"]
  	 * ```
  	 *
  	 * @param  {Object} obj Any MapLike object
  	 * @return {Array} the Array of all String keys from the object.
  	 */
  	getOwnKeys: function(obj){
  		// own enumerable&non-enumerable keys (Object.getOwnPropertyNames)
  		var getOwnKeys = obj[canSymbol.for("can.getOwnKeys")];
  		if(getOwnKeys) {
  			return getOwnKeys.call(obj);
  		} else {
  			return Object.getOwnPropertyNames(obj);
  		}
  	},
  	/**
  	 * @function can-reflect.getOwnKeyDescriptor getOwnKeyDescriptor
  	 * @parent can-reflect/shape
  	 * @description Return a property descriptor for a named property on an object.
  	 *
  	 * @signature `getOwnKeyDescriptor(obj, key)`
  	 *
  	 *	Return the key descriptor for the property key `key` on the Map-like object `obj`. A key descriptor
  	 *	is specified in ECMAScript 5 and contains keys for the property's `configurable` and `enumerable` states,
  	 *	as well as either `value` and `writable` for value properties, or `get` and `set` for getter/setter properties.
  	 *
  	 * The default behavior can be overridden by implementing [can-symbol/symbols/getOwnKeyDescriptor @@@@can.getOwnKeyDescriptor]
  	 * on `obj`; otherwise the default is to call `Object.getOwnKeyDescriptor()`.
  	 *
  	 * ```js
  	 * var foo = new DefineMap({ bar: "baz" });
  	 *
  	 * getOwnKeyDescriptor(foo, "bar"); // -> {configurable: true, writable: true, enumerable: true, value: "baz"}
  	 * ```
  	 *
  	 * @param  {Object} obj Any object with named properties
  	 * @param  {String} key The property name to look up on `obj`
  	 * @return {Object}   A key descriptor object
  	 */
  	getOwnKeyDescriptor: function(obj, key){
  		var getOwnKeyDescriptor = obj[canSymbol.for("can.getOwnKeyDescriptor")];
  		if(getOwnKeyDescriptor) {
  			return getOwnKeyDescriptor.call(obj, key);
  		} else {
  			return Object.getOwnPropertyDescriptor(obj, key);
  		}
  	},
  	/**
  	 * @function can-reflect.unwrap unwrap
  	 * @parent can-reflect/shape
  	 * @description Unwraps a map-like or array-like value into an object or array.
  	 *
  	 *
  	 * @signature `unwrap(obj)`
  	 *
  	 * Recursively unwraps a map-like or list-like object.
  	 *
  	 * ```js
  	 * import canReflect from "can-reflect";
  	 *
  	 * var map = new DefineMap({foo: "bar"});
  	 * canReflect.unwrap(map) //-> {foo: "bar"}
  	 * ```
  	 *
  	 * `unwrap` is similar to [can-reflect.serialize] except it does not try to provide `JSON.stringify()`-safe
  	 * objects.  For example, an object with a `Date` instance property value will not be expected to
  	 * serialize the date instance:
  	 *
  	 * ```js
  	 * var date = new Date();
  	 * var map = new DefineMap({date: date});
  	 * canReflect.unwrap(map) //-> {date: date}
  	 * ```
  	 *
  	 * @param {Object} obj A map-like or array-like object.
  	 * @return {Object} Returns objects and arrays.
  	 */
  	unwrap: makeSerializer("unwrap",[canSymbol.for("can.unwrap")]),
  	/**
  	 * @function can-reflect.serialize serialize
  	 * @parent can-reflect/shape
  	 * @description Serializes an object to a value that can be passed to JSON.stringify.
  	 *
  	 *
  	 * @signature `serialize(obj)`
  	 *
  	 * Recursively serializes a map-like or list-like object.
  	 *
  	 * ```js
  	 * import canReflect from "can-reflect";
  	 * canReflect.serialize({foo: "bar"}) //-> {foo: "bar"}
  	 * ```
  	 *
  	 * It does this by recursively:
  	 *
  	 *  - Checking if `obj` is a primitive, if it is, returns the value.
  	 *  - If `obj` is an object:
  	 *    - calling the `@can.serialize` property on the value if it exists.
  	 *    - If the `@can.serialize` value doesn't exist, walks through every key-value
  	 *      on `obj` and copy to a new object.
  	 *
  	 * @param {Object} obj A map-like or array-like object.
  	 * @return {Object} Returns a plain object or array.
  	 */
  	serialize: makeSerializer("serialize",[canSymbol.for("can.serialize"), canSymbol.for("can.unwrap")]),

  	assignMap: function(target, source) {
  		// read each key and set it on target
  		var hasOwnKey = fastHasOwnKey(target);
  		var getKeyValue = target[getKeyValueSymbol$1] || shiftedGetKeyValue;
  		var setKeyValue = target[setKeyValueSymbol$1] || shiftedSetKeyValue;
  		shapeReflections.eachKey(source,function(value, key){
  			// if the target doesn't have this key or the keys are not the same
  			if(!hasOwnKey(key) || getKeyValue.call(target, key) !==  value) {
  				setKeyValue.call(target, key, value);
  			}
  		});
  		return target;
  	},
  	assignList: function(target, source) {
  		var inserting = shapeReflections.toArray(source);
  		getSet.splice(target, 0, inserting, inserting );
  		return target;
  	},
  	/**
  	 * @function can-reflect.assign assign
  	 * @parent can-reflect/shape
  	 * @description Assign one objects values to another
  	 *
  	 * @signature `.assign(target, source)`
  	 *
  	 * Copies the values (and properties if map-like) from `source` onto `target`.
  	 *
  	 * For map-like objects, every enumerable property on `target` is copied:
  	 *
  	 * ```js
  	 * var target = {};
  	 * var source = {key : "value"};
  	 * var restult = canReflect.assign(target, source);
  	 * result === target //-> true
  	 * target //-> {key : "value"}
  	 * ```
  	 *
  	 * For Arrays, enumerated values are copied over, but the length of the array will not be
  	 * trunkated.  Use [can-reflect.update] for trunkating.
  	 *
  	 * ```js
  	 * var target = ["a","b","c"];
  	 * var source = ["A","B"];
  	 * canReflect.assign(target, source);
  	 * target //-> ["A","B","c"]
  	 * ```
  	 *
  	 * @param  {Object} target The value that will be updated with `source`'s values.
  	 * @param  {Object} source A source of values to copy to `target`.
  	 * @return {Object} The target.
  	 */
  	assign: function(target, source) {
  		if(type.isIteratorLike(source) || type.isMoreListLikeThanMapLike(source) ) {
  			// copy to array and add these keys in place
  			shapeReflections.assignList(target, source);
  		} else {
  			shapeReflections.assignMap(target, source);
  		}
  		return target;
  	},
  	assignDeepMap: function(target, source) {

  		var hasOwnKey = fastHasOwnKey(target);
  		var getKeyValue = target[getKeyValueSymbol$1] || shiftedGetKeyValue;
  		var setKeyValue = target[setKeyValueSymbol$1] || shiftedSetKeyValue;

  		shapeReflections.eachKey(source, function(newVal, key){
  			if(!hasOwnKey(key)) {
  				// set no matter what
  				getSet.setKeyValue(target, key, newVal);
  			} else {
  				var curVal = getKeyValue.call(target, key);

  				// if either was primitive, no recursive update possible
  				if(newVal === curVal) ; else if(type.isPrimitive(curVal) || type.isPrimitive(newVal) || shouldUpdateOrAssign(curVal) === false ) {
  					setKeyValue.call(target, key, newVal);
  				} else {
  					shapeReflections.assignDeep(curVal, newVal);
  				}
  			}
  		}, this);
  		return target;
  	},
  	assignDeepList: function(target, source) {
  		return updateDeepList.call(this, target, source, true);
  	},
  	/**
  	 * @function can-reflect.assignDeep assignDeep
  	 * @parent can-reflect/shape
  	 * @description Assign one objects values to another, and performs the same action for all child values.
  	 *
  	 * @signature `.assignDeep(target, source)`
  	 *
  	 * Copies the values (and properties if map-like) from `source` onto `target` and repeates for all child
  	 * values.
  	 *
  	 * For map-like objects, every enumerable property on `target` is copied:
  	 *
  	 * ```js
  	 * var target = {name: {first: "Justin"}};
  	 * var source = {name: {last: "Meyer"}};
  	 * var restult = canReflect.assignDeep(target, source);
  	 * target //->  {name: {first: "Justin", last: "Meyer"}}
  	 * ```
  	 *
  	 * An object can control the behavior of `assignDeep` using the [can-symbol/symbols/assignDeep] symbol.
  	 *
  	 * @param  {Object} target The value that will be updated with `source`'s values.
  	 * @param  {Object} source A source of values to copy to `target`.
  	 * @return {Object} The target.
  	 */
  	assignDeep: function(target, source){
  		var assignDeep = target[canSymbol.for("can.assignDeep")];
  		if(assignDeep) {
  			assignDeep.call(target, source);
  		} else if( type.isMoreListLikeThanMapLike(source) ) {
  			// list-like
  			shapeReflections.assignDeepList(target, source);
  		} else {
  			// map-like
  			shapeReflections.assignDeepMap(target, source);
  		}
  		return target;
  	},
  	updateMap: function(target, source) {
  		var sourceKeyMap = makeMap( shapeReflections.getOwnEnumerableKeys(source) );

  		var sourceGetKeyValue = source[getKeyValueSymbol$1] || shiftedGetKeyValue;
  		var targetSetKeyValue = target[setKeyValueSymbol$1] || shiftedSetKeyValue;

  		shapeReflections.eachKey(target, function(curVal, key){
  			if(!sourceKeyMap.get(key)) {
  				getSet.deleteKeyValue(target, key);
  				return;
  			}
  			sourceKeyMap.set(key, false);
  			var newVal = sourceGetKeyValue.call(source, key);

  			// if either was primitive, no recursive update possible
  			if(newVal !== curVal) {
  				targetSetKeyValue.call(target, key, newVal);
  			}
  		}, this);

  		shapeReflections.eachIndex(sourceKeyMap.keys(), function(key){
  			if(sourceKeyMap.get(key)) {
  				targetSetKeyValue.call(target, key, sourceGetKeyValue.call(source, key) );
  			}
  		});

  		return target;
  	},
  	updateList: function(target, source) {
  		var inserting = shapeReflections.toArray(source);

  		getSet.splice(target, 0, target, inserting );
  		return target;
  	},
  	/**
  	 * @function can-reflect.update update
  	 * @parent can-reflect/shape
  	 * @description Updates the values of an object match the values of an other object.
  	 *
  	 * @signature `.update(target, source)`
  	 *
  	 * Updates the values (and properties if map-like) of `target` to match the values of `source`.
  	 * Properties of `target` that are not on `source` will be removed. This does
  	 * not recursively update.  For that, use [can-reflect.updateDeep].
  	 *
  	 * For map-like objects, every enumerable property on `target` is copied:
  	 *
  	 * ```js
  	 * var target = {name: {first: "Justin"}, age: 34};
  	 * var source = {name: {last: "Meyer"}};
  	 * var result = canReflect.update(target, source);
  	 * target //->  {name: {last: "Meyer"}}
  	 * ```
  	 *
  	 * With Arrays all items of the source will be replaced with the new items.
  	 *
  	 * ```js
  	 * var target = ["a","b","c"];
  	 * var source = ["A","B"];
  	 * canReflect.update(target, source);
  	 * target //-> ["A","B"]
  	 * ```
  	 *
  	 * @param  {Object} target The value that will be updated with `source`'s values.
  	 * @param  {Object} source A source of values to copy to `target`.
  	 * @return {Object} The target.
  	 */
  	update: function(target, source) {
  		if(type.isIteratorLike(source) || type.isMoreListLikeThanMapLike(source) ) {
  			// copy to array and add these keys in place
  			shapeReflections.updateList(target, source);
  		} else {
  			shapeReflections.updateMap(target, source);
  		}
  		return target;
  	},
  	updateDeepMap: function(target, source) {
  		var sourceKeyMap = makeMap( shapeReflections.getOwnEnumerableKeys(source) );

  		var sourceGetKeyValue = source[getKeyValueSymbol$1] || shiftedGetKeyValue;
  		var targetSetKeyValue = target[setKeyValueSymbol$1] || shiftedSetKeyValue;

  		shapeReflections.eachKey(target, function(curVal, key){

  			if(!sourceKeyMap.get(key)) {
  				getSet.deleteKeyValue(target, key);
  				return;
  			}
  			sourceKeyMap.set(key, false);
  			var newVal = sourceGetKeyValue.call(source, key);

  			// if either was primitive, no recursive update possible
  			if(type.isPrimitive(curVal) || type.isPrimitive(newVal) || shouldUpdateOrAssign(curVal) === false ) {
  				targetSetKeyValue.call(target, key, newVal);
  			} else {
  				shapeReflections.updateDeep(curVal, newVal);
  			}

  		}, this);

  		shapeReflections.eachIndex(sourceKeyMap.keys(), function(key){
  			if(sourceKeyMap.get(key)) {
  				targetSetKeyValue.call(target, key, sourceGetKeyValue.call(source, key) );
  			}
  		});
  		return target;
  	},
  	updateDeepList: function(target, source) {
  		return updateDeepList.call(this,target, source);
  	},
  	/**
  	 * @function can-reflect.updateDeep updateDeep
  	 * @parent can-reflect/shape
  	 * @description Makes the values of an object match the values of an other object including all children values.
  	 *
  	 * @signature `.updateDeep(target, source)`
  	 *
  	 * Updates the values (and properties if map-like) of `target` to match the values of `source`.
  	 * Removes properties from `target` that are not on `source`.
  	 *
  	 * For map-like objects, every enumerable property on `target` is copied:
  	 *
  	 * ```js
  	 * var target = {name: {first: "Justin"}, age: 34};
  	 * var source = {name: {last: "Meyer"}};
  	 * var result = canReflect.updateDeep(target, source);
  	 * target //->  {name: {last: "Meyer"}}
  	 * ```
  	 *
  	 * An object can control the behavior of `updateDeep` using the [can-symbol/symbols/updateDeep] symbol.
  	 *
  	 * For list-like objects, a diff and patch strategy is used.  This attempts to limit the number of changes.
  	 *
  	 * @param  {Object} target The value that will be updated with `source`'s values.
  	 * @param  {Object} source A source of values to copy to `target`.
  	 * @return {Object} The target.
  	 */
  	updateDeep: function(target, source){
  		var updateDeep = target[canSymbol.for("can.updateDeep")];
  		if(updateDeep) {
  			updateDeep.call(target, source);
  		} else if( type.isMoreListLikeThanMapLike(source) ) {
  			// list-like
  			shapeReflections.updateDeepList(target, source);
  		} else {
  			// map-like
  			shapeReflections.updateDeepMap(target, source);
  		}
  		return target;
  	},
  	// walks up the whole prototype chain
  	/**
  	 * @function can-reflect.hasKey hasKey
  	 * @parent can-reflect/shape
  	 * @description Determine whether an object contains a key on itself or its prototype chain
  	 *
  	 * @signature `hasKey(obj, key)`
  	 *
  	 * Return `true` if an object's properties include the property key `key` or an object on its prototype
  	 * chain's properties include the key `key`, `false` otherwise.
  	 * An object may implement [can-symbol/symbols/hasKey @@@@can.hasKey] to override default behavior.
  	 * By default, `canReflect.hasKey` will use [can-reflect.hasOwnKey] and return true if the key is present.
  	 * If `hasOwnKey` returns false, the [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in in Operator] will be used.
  	 *
  	 * ```js
  	 * var foo = new DefineMap({ "bar": "baz" });
  	 *
  	 * canReflect.in(foo, "bar"); // -> true
  	 * canReflect.in(foo, "each"); // -> true
  	 * foo.each // -> function each() {...}
  	 * ```
  	 *
  	 * @param  {Object} obj Any MapLike object
  	 * @param  {String} key The key to look up on `obj`
  	 * @return {Boolean} `true` if `obj`'s key set contains `key` or an object on its prototype chain's key set contains `key`, `false` otherwise
  	 */
  	hasKey: function(obj, key) {
  		if( obj == null ) {
  			return false;
  		}
  		if (type.isPrimitive(obj)) {
  			if (hasOwnProperty$3.call(obj, key)) {
  				return true;
  			} else {
  				var proto;
  				if(getPrototypeOfWorksWithPrimitives) {
  					proto = Object.getPrototypeOf(obj);
  				} else {
  					// IE-remove-start
  					proto = obj.__proto__; // jshint ignore:line
  					// IE-remove-end
  				}
  				if(proto !== undefined) {
  					return key in proto;
  				} else {
  					// IE-remove-start
  					return obj[key] !== undefined;
  					// IE-remove-end
  				}
  			}
  		}
  		var hasKey = obj[canSymbol.for("can.hasKey")];
  		if(hasKey) {
  			return hasKey.call(obj, key);
  		}

  		var found = shapeReflections.hasOwnKey(obj, key);

  		return found || key in obj;
  	},
  	getAllEnumerableKeys: function(){},
  	getAllKeys: function(){},
  	/**
  	 * @function can-reflect.assignSymbols assignSymbols
  	 * @parent can-reflect/shape
  	 * @description Assign well known symbols and values to an object.
  	 *
  	 * @signature `.assignSymbols(target, source)`
  	 *
  	 * Converts each property name on the `source` object to a [can-symbol.for well known symbol]
  	 * and uses that symbol to set the corresponding value on target.
  	 *
  	 * This is used to easily set symbols correctly even when symbol isn't natively supported.
  	 *
  	 * ```js
  	 * canReflect.assignSymbols(Map.prototype, {
  	 *   "can.getKeyValue": Map.prototype.get
  	 * })
  	 * ```
  	 *
  	 * If a `source` property name matches a symbol on `Symbol` (like `iterator` on `Symbol.iterator`),
  	 * that symbol will be used:
  	 *
  	 * ```js
  	 * canReflect.assignSymbols(ArrayLike.prototype, {
  	 *   "iterator": function() { ... }
  	 * })
  	 * ArrayLike.prototype[Symbol.iterator] = function(){ ... }
  	 * ```
  	 *
  	 * @param  {Object} target The value that will be updated with `source`'s symbols and values.
  	 * @param  {Object<name,value>} source A source of symbol names and values to copy to `target`.
  	 * @return {Object} The target.
  	 */
  	assignSymbols: function(target, source){
  		shapeReflections.eachKey(source, function(value, key){
  			var symbol = type.isSymbolLike(canSymbol[key]) ? canSymbol[key] : canSymbol.for(key);
  			getSet.setKeyValue(target, symbol, value);
  		});
  		return target;
  	},
  	isSerialized: isSerializedHelper,
  	/**
  	 * @function can-reflect.size size
  	 * @parent can-reflect/shape
  	 * @description Return the number of items in the collection.
  	 *
  	 * @signature `.size(target)`
  	 *
  	 * Returns the number of items contained in `target`. Target can
  	 * provide the size using the [can-symbol/symbols/size] symbol.
  	 *
  	 * If the `target` has a numeric `length` property that is greater than or equal to 0, that
  	 * `length` will be returned.
  	 *
  	 * ```js
  	 * canReflect.size([1,2,3]) //-> 3
  	 * ```
  	 *
  	 * If the `target` is [can-reflect.isListLike], the values of the list will be counted.
  	 *
  	 * If the `target` is a plain JS object, the number of enumerable properties will be returned.
  	 *
  	 * ```js
  	 * canReflect.size({foo:"bar"}) //-> 1
  	 * ```
  	 *
  	 * If the `target` is anything else, `undefined` is returned.
  	 *
  	 * @param  {Object} target The container object.
  	 * @return {Number} The number of values in the target.
  	 */
  	size: function(obj){
  		if(obj == null) {
  			return 0;
  		}
  		var size = obj[sizeSymbol];
  		var count = 0;
  		if(size) {
  			return size.call(obj);
  		}
  		else if(helpers.hasLength(obj)){
  			return obj.length;
  		}
  		else if(type.isListLike(obj)){

  			shapeReflections.eachIndex(obj, function(){
  				count++;
  			});
  			return count;
  		}
  		else if( obj ) {
  			return shapeReflections.getOwnEnumerableKeys(obj).length;
  		}
  		else {
  			return undefined;
  		}
  	},
  	/**
  	 * @function {Function, String|Symbol, Object} can-reflect.defineInstanceKey defineInstanceKey
  	 * @parent can-reflect/shape
  	 * @description Create a key for all instances of a constructor.
  	 *
  	 * @signature `defineInstanceKey(cls, key, properties)`
  	 *
  	 * Define the property `key` on the prototype of the constructor `cls` using the symbolic
  	 * property [can-symbol/symbols/defineInstanceKey @@can.defineInstanceKey] if it exists; otherwise
  	 * use `Object.defineProperty()` to define the property.  The property definition
  	 *
  	 * @param  {Function} cls  a Constructor function
  	 * @param  {String} key     the String or Symbol key to set.
  	 * @param  {Object} properties a JavaScript property descriptor
  	 */
  	defineInstanceKey: function(cls, key, properties) {
  		var defineInstanceKey = cls[canSymbol.for("can.defineInstanceKey")];
  		if(defineInstanceKey) {
  			return defineInstanceKey.call(cls, key, properties);
  		}
  		var proto = cls.prototype;
  		defineInstanceKey = proto[canSymbol.for("can.defineInstanceKey")];
  		if(defineInstanceKey) {
  			defineInstanceKey.call(proto, key, properties);
  		} else {
  			Object.defineProperty(
  				proto,
  				key,
  				shapeReflections.assign({
  					configurable: true,
  					enumerable: !type.isSymbolLike(key),
  					writable: true
  				}, properties)
  			);
  		}
  	}
  };

  shapeReflections.isSerializable = shapeReflections.isSerialized;
  shapeReflections.keys = shapeReflections.getOwnEnumerableKeys;
  var shape = shapeReflections;

  var getSchemaSymbol = canSymbol.for("can.getSchema"),
      isMemberSymbol = canSymbol.for("can.isMember"),
      newSymbol = canSymbol.for("can.new");

  function comparator(a, b) {
      return a.localeCompare(b);
  }

  function sort(obj) {
      if(type.isPrimitive(obj) || obj instanceof Date) {
          return obj;
      }
      var out;
      if (type.isListLike(obj)) {
          out = [];
          shape.eachKey(obj, function(item){
              out.push(sort(item));
          });
          return out;
      }
      if( type.isMapLike(obj) ) {

          out = {};

          shape.getOwnKeys(obj).sort(comparator).forEach(function (key) {
              out[key] = sort( getSet.getKeyValue(obj, key) );
          });

          return out;
      }


      return obj;
  }

  function isPrimitiveConverter(Type){
      return Type === Number || Type === String || Type === Boolean;
  }

  var schemaReflections =  {
      /**
  	 * @function can-reflect.getSchema getSchema
  	 * @parent can-reflect/shape
  	 * @description Returns the schema for a type or value.
  	 *
  	 * @signature `getSchema(valueOrType)`
  	 *
       * Calls the `@can.getSchema` property on the `valueOrType` argument. If it's not available and
       * `valueOrType` has a `constructor` property, calls the `constructor[@can.getSchema]`
       * and returns the result.
       *
       * ```js
       * import canReflect from "can-reflect";
       *
       * var Type = DefineMap.extend({
       *   name: "string",
       *   id: "number"
       * });
       *
       * canReflect.getSchema( Type ) //-> {
       * //   type: "map",
       * //   keys: {
       * //     name: MaybeString
       * //     id: MaybeNumber
       * //   }
       * // }
       * ```
  	 *
  	 *
  	 * @param  {Object|Function} valueOrType A value, constructor function, or class to get the schema from.
  	 * @return {Object} A schema. A schema for a [can-reflect.isMapLike] looks like:
       *
       *
       * ```js
       * {
       *   type: "map",
       *   identity: ["id"],
       *   keys: {
       *     id: Number,
       *     name: String,
       *     complete: Boolean,
       *     owner: User
       *   }
       * }
       * ```
       *
       * A schema for a list looks like:
       *
       * ```js
       * {
       *   type: "list",
       *   values: String
       *   keys: {
       *     count: Number
       *   }
       * }
       * ```
       *
  	 */
      getSchema: function(type){
          if (type === undefined) {
              return undefined;
          }
          var getSchema = type[getSchemaSymbol];
          if(getSchema === undefined ) {
              type = type.constructor;
              getSchema = type && type[getSchemaSymbol];
          }
          return getSchema !== undefined ? getSchema.call(type) : undefined;
      },
      /**
  	 * @function can-reflect.getIdentity getIdentity
  	 * @parent can-reflect/shape
  	 * @description Get a unique primitive representing an object.
  	 *
  	 * @signature `getIdentity( object [,schema] )`
  	 *
  	 * This uses the object's schema, or the provided schema to return a unique string or number that
       * represents the object.
       *
       * ```js
       * import canReflect from "can-reflect";
       *
       * canReflect.getIdentity({id: 5}, {identity: ["id"]}) //-> 5
       * ```
       *
       * If the schema has multiple identity keys, the identity keys and values
       * are return stringified (and sorted):
       *
       * ```js
       * canReflect.getIdentity(
       *   {z: "Z", a: "A", foo: "bar"},
       *   {identity: ["a","b"]}) //-> '{"a":"A","b":"B"}'
       * ```
  	 *
  	 * @param  {Object|Function} object A map-like object.
       * @param {Object} [schema] A schema object with an `identity` array of the unique
       * keys of the object like:
       *   ```js
       *   {identity: ["id"]}
       *   ```
  	 * @return {Number|String} A value that uniquely represents the object.
  	 */
      getIdentity: function(value, schema){
          schema = schema || schemaReflections.getSchema(value);
          if(schema === undefined) {
              throw new Error("can-reflect.getIdentity - Unable to find a schema for the given value.");
          }

          var identity = schema.identity;
          if(!identity || identity.length === 0) {
              throw new Error("can-reflect.getIdentity - Provided schema lacks an identity property.");
          } else if(identity.length === 1) {
              return getSet.getKeyValue(value, identity[0]);
          } else {
              var id = {};
              identity.forEach(function(key){
                  id[key] = getSet.getKeyValue(value, key);
              });
              return JSON.stringify(schemaReflections.cloneKeySort(id));
          }
      },
      /**
  	 * @function can-reflect.cloneKeySort cloneKeySort
  	 * @parent can-reflect/shape
  	 * @description Copy a value while sorting its keys.
  	 *
  	 * @signature `cloneKeySort(value)`
  	 *
       * `cloneKeySort` returns a copy of `value` with its [can-reflect.isMapLike]
       * key values sorted. If you just want a copy of a value,
       * use [can-reflect.serialize].
       *
       * ```js
       * import canRefect from "can-reflect";
       *
       * canReflect.cloneKeySort({z: "Z", a: "A"}) //-> {a:"A",z:"Z"}
       * ```
       *
       * Nested objects are also sorted.
  	 *
       * This is useful if you need to store a representation of an object that can be used as a
       * key.
  	 *
  	 * @param  {Object} value An object or array.
  	 * @return {Object} A copy of the object with its keys sorted.
  	 */
      cloneKeySort: function(obj) {
          return sort(obj);
      },
      /**
  	 * @function can-reflect.convert convert
  	 * @parent can-reflect/shape
  	 * @description Convert one value to another type.
  	 *
  	 * @signature `convert(value, Type)`
  	 *
       * `convert` attempts to convert `value` to the type specified by `Type`.
       *
       * ```js
       * import canRefect from "can-reflect";
       *
       * canReflect.convert("1", Number) //-> 1
       * ```
       *
       * `convert` works by performing the following logic:
       *
       * 1. If the `Type` is a primitive like `Number`, `String`, `Boolean`, the
       *    `value` will be passed to the `Type` function and the result returned.
       *    ```js
       *    return Type(value);
       *    ```
       * 2. The value will be checked if it is already an instance of the type
       *    by performing the following:
       *    1. If the `Type` has a `can.isMember` symbol value, that value will be used
       *       to determine if the `value` is already an instance.
       *    2. If the `Type` is a [can-reflect.isConstructorLike] function, `instanceof Type`
       *       will be used to check if `value` is already an instance.
       * 3. If `value` is already an instance, `value` will be returned.
       * 4. If `Type` has a `can.new` symbol, `value` will be passed to it and the result
       *    returned.
       * 5. If `Type` is a [can-reflect.isConstructorLike] function, `new Type(value)` will be
       *    called the the result returned.
       * 6. If `Type` is a regular function, `Type(value)` will be called and the result returned.
       * 7. If a value hasn't been returned, an error is thrown.
  	 *
  	 * @param  {Object|Primitive} value A value to be converted.
       * @param  {Object|Function} Type A constructor function or an object that implements the
       * necessary symbols.
  	 * @return {Object} The `value` converted to a member of `Type`.
  	 */
      convert: function(value, Type){
          if(isPrimitiveConverter(Type)) {
              return Type(value);
          }
          // check if value is already a member
          var isMemberTest = Type[isMemberSymbol],
              isMember = false,
              type$1 = typeof Type,
              createNew = Type[newSymbol];
          if(isMemberTest !== undefined) {
              isMember = isMemberTest.call(Type, value);
          } else if(type$1 === "function") {
              if(type.isConstructorLike(Type)) {
                  isMember = (value instanceof Type);
              }
          }
          if(isMember) {
              return value;
          }
          if(createNew !== undefined) {
              return createNew.call(Type, value);
          } else if(type$1 === "function") {
              if(type.isConstructorLike(Type)) {
                  return new Type(value);
              } else {
                  // call it like a normal function
                  return Type(value);
              }
          } else {
              throw new Error("can-reflect: Can not convert values into type. Type must provide `can.new` symbol.");
          }
      }
  };
  var schema = schemaReflections;

  var getNameSymbol = canSymbol.for("can.getName");

  /**
   * @function {Object, String} can-reflect.setName setName
   * @parent can-reflect/shape
   * @description Set a human-readable name of an object.
   *
   * @signature `setName(obj, value)`
   *
   * ```js
   * var f = function() {};
   *
   * canReflect.setName(f, "myFunction")
   * f.name //-> "myFunction"
   * ```
   *
   * @param {Object} obj   the object to set on
   * @param {String} value the value to set for the object
   */
  function setName(obj, nameGetter) {
  	if (typeof nameGetter !== "function") {
  		var value = nameGetter;
  		nameGetter = function() {
  			return value;
  		};
  	}

  	Object.defineProperty(obj, getNameSymbol, {
  		value: nameGetter
  	});
  }

  /**
   * @function {Object} can-reflect.getName getName
   * @parent can-reflect/shape
   * @description Get the name of an object.
   *
   * @signature `getValue(obj)`
   *
   * @body
   *
   * The [@@@can.getName](can-symbol/symbols/getName.html) symbol is used to
   * provide objects human readable names; the main goal of these names is to help
   * users get a glance of what the object does and what it is used for.
   *
   * There are no hard rules to define names but CanJS uses the following convention
   * for consistent names across its observable types:
   *
   * - The name starts with the observable constructor name
   * - The constructor name is decorated with the following characters based on its type:
   *		- `<>`: for [value-like](can-reflect.isValueLike.html) observables, e.g: `SimpleObservable<>`
   *		- `[]`: for [list-like](can-reflect.isListLike.html) observables, e.g: `DefineList[]`
   *		- `{}`: for [map-like](can-reflect.isMapLike.html) observables, e.g: `DefineMap{}`
   * - Any property that makes the instance unique (like ids) are printed inside
   *    the chars mentioned before.
   *
   * The example below shows how to implement [@@@can.getName](can-symbol/symbols/getName.html),
   * in a value-like observable (similar to [can-simple-observable]).
   *
   * ```js
   * var canReflect = require("can-reflect");
   *
   * function MySimpleObservable(value) {
   *		this.value = value;
   * }
   *
   * canReflect.assignSymbols(MySimpleObservable.prototype, {
   *		"can.getName": function() {
   *			//!steal-remove-start
   *			if ("production" !== 'production') {
   *				var value = JSON.stringify(this.value);
   *				return canReflect.getName(this.constructor) + "<" + value + ">";
   *			}
   *			//!steal-remove-end
   *		}
   * });
   * ```
   *
   * With that in place, `MySimpleObservable` can be used like this:
   *
   * ```js
   * var one = new MySimpleObservable(1);
   * canReflect.getName(one); // MySimpleObservable<1>
   * ```
   *
   * @param  {Object} obj The object to get from
   * @return {String} The human-readable name of the object
   */
  var anonymousID = 0;
  function getName(obj) {
  	var type$1 = typeof obj;
  	if(obj === null || (type$1 !== "object" && type$1 !== "function")) {
  		return ""+obj;
  	}
  	var nameGetter = obj[getNameSymbol];
  	if (nameGetter) {
  		return nameGetter.call(obj);
  	}

  	if (type$1 === "function") {
  		if (!("name" in obj)) {
  			// IE doesn't support function.name natively
  			obj.name = "functionIE" + anonymousID++;
  		}
  		return obj.name;
  	}

  	if (obj.constructor && obj !== obj.constructor) {
  		var parent = getName(obj.constructor);
  		if (parent) {
  			if (type.isValueLike(obj)) {
  				return parent + "<>";
  			}

  			if (type.isMoreListLikeThanMapLike(obj)) {
  				return parent + "[]";
  			}

  			if (type.isMapLike(obj)) {
  				return parent + "{}";
  			}
  		}
  	}

  	return undefined;
  }

  var getName_1 = {
  	setName: setName,
  	getName: getName
  };

  function keysPolyfill() {
    var keys = [];
    var currentIndex = 0;

    this.forEach(function(val, key) { // jshint ignore:line
      keys.push(key);
    });

    return {
      next: function() {
        return {
          value: keys[currentIndex],
          done: (currentIndex++ === keys.length)
        };
      }
    };
  }

  if (typeof Map !== "undefined") {
    shape.assignSymbols(Map.prototype, {
      "can.getOwnEnumerableKeys": Map.prototype.keys,
      "can.setKeyValue": Map.prototype.set,
      "can.getKeyValue": Map.prototype.get,
      "can.deleteKeyValue": Map.prototype["delete"],
      "can.hasOwnKey": Map.prototype.has
    });

    if (typeof Map.prototype.keys !== "function") {
      Map.prototype.keys = Map.prototype[canSymbol.for("can.getOwnEnumerableKeys")] = keysPolyfill;
    }
  }

  if (typeof WeakMap !== "undefined") {
    shape.assignSymbols(WeakMap.prototype, {
      "can.getOwnEnumerableKeys": function() {
        throw new Error("can-reflect: WeakMaps do not have enumerable keys.");
      },
      "can.setKeyValue": WeakMap.prototype.set,
      "can.getKeyValue": WeakMap.prototype.get,
      "can.deleteKeyValue": WeakMap.prototype["delete"],
      "can.hasOwnKey": WeakMap.prototype.has
    });
  }

  if (typeof Set !== "undefined") {
    shape.assignSymbols(Set.prototype, {
      "can.isMoreListLikeThanMapLike": true,
      "can.updateValues": function(index, removing, adding) {
        if (removing !== adding) {
          shape.each(
            removing,
            function(value) {
              this.delete(value);
            },
            this
          );
        }
        shape.each(
          adding,
          function(value) {
            this.add(value);
          },
          this
        );
      },
      "can.size": function() {
        return this.size;
      }
    });

    // IE11 doesn't support Set.prototype[@@iterator]
    if (typeof Set.prototype[canSymbol.iterator] !== "function") {
  	  Set.prototype[canSymbol.iterator] = function() {
  		  var arr = [];
  		  var currentIndex = 0;

  		  this.forEach(function(val) {
  			  arr.push(val);
  		  });

  		  return {
  			  next: function() {
  				  return {
  					  value: arr[currentIndex],
  					  done: (currentIndex++ === arr.length)
  				  };
  			  }
  		  };
  	  };
    }
  }
  if (typeof WeakSet !== "undefined") {
    shape.assignSymbols(WeakSet.prototype, {
      "can.isListLike": true,
      "can.isMoreListLikeThanMapLike": true,
      "can.updateValues": function(index, removing, adding) {
        if (removing !== adding) {
          shape.each(
            removing,
            function(value) {
              this.delete(value);
            },
            this
          );
        }
        shape.each(
          adding,
          function(value) {
            this.add(value);
          },
          this
        );
      },
      "can.size": function() {
        throw new Error("can-reflect: WeakSets do not have enumerable keys.");
      }
    });
  }

  var reflect = {};
  [
  	call,
  	getSet,
  	observe,
  	shape,
  	type,
  	getName_1,
  	schema
  ].forEach(function(reflections){
  	for(var prop in reflections) {
  		reflect[prop] = reflections[prop];
  		//!steal-remove-end
  	}
  });




  var canReflect = canNamespace.Reflect = reflect;

  function dispatch(key) {
  	// jshint -W040
  	var handlers = this.eventHandlers[key];
  	if (handlers) {
  		var handlersCopy = handlers.slice();
  		var value = this.getKeyValue(key);
  		for (var i = 0; i < handlersCopy.length; i++) {
  			handlersCopy[i](value);
  		}
  	}
  }

  function Globals() {
  	this.eventHandlers = {};
  	this.properties = {};
  }

  /**
   * @function define 
   * @parent can-globals/methods
   * 
   * Create a new global environment variable.
   * 
   * @signature `globals.define(key, value[, cache])`
   * 
   * Defines a new global called `key`, who's value defaults to `value`.
   * 
   * The following example defines the `global` key's default value to the [`window`](https://developer.mozilla.org/en-US/docs/Web/API/Window) object:
   * ```javascript
   * globals.define('global', window);
   * globals.getKeyValue('window') //-> window
   * ```
   * 
   * If a function is provided and `cache` is falsy, that function is run every time the key value is read:
   * ```javascript
   * globals.define('isBrowserWindow', function() {
   *   console.log('EVALUATING')
   *   return typeof window !== 'undefined' &&
   *     typeof document !== 'undefined' && typeof SimpleDOM === 'undefined'
   * }, false);
   * globals.get('isBrowserWindow') // logs 'EVALUATING'
   *                                // -> true
   * globals.get('isBrowserWindow') // logs 'EVALUATING' again
   *                                // -> true
   * ```
   * 
   * If a function is provided and `cache` is truthy, that function is run only the first time the value is read:
   * ```javascript
   * globals.define('isWebkit', function() {
   *   console.log('EVALUATING')
   *   var div = document.createElement('div')
   *   return 'WebkitTransition' in div.style
   * })
   * globals.getKeyValue('isWebkit') // logs 'EVALUATING'
   * 								   // -> true
   * globals.getKeyValue('isWebkit') // Does NOT log again!
   * 								   // -> true
   * ```
   * 
   * @param {String} key
   * The key value to create.
   * 
   * @param {*} value
   * The default value. If this is a function, its return value will be used.
   * 
   * @param {Boolean} [cache=true]
   * Enable cache. If false the `value` function is run every time the key value is read.
   * 
   * @return {can-globals}
   * Returns the instance of `can-globals` for chaining.
   */
  Globals.prototype.define = function (key, value, enableCache) {
  	if (enableCache === undefined) {
  		enableCache = true;
  	}
  	if (!this.properties[key]) {
  		this.properties[key] = {
  			default: value,
  			value: value,
  			enableCache: enableCache
  		};
  	}
  	return this;
  };

  /**
   * @function getKeyValue 
   * @parent can-globals/methods
   * 
   * Get a global environment variable by name.
   * 
   * @signature `globals.getKeyValue(key)`
   * 
   * Returns the current value at `key`. If no value has been set, it will return the default value (if it is not a function). If the default value is a function, it will return the output of the function. This execution is cached if the cache flag was set on initialization.
   * 
   * ```javascript
   * globals.define('foo', 'bar');
   * globals.getKeyValue('foo'); //-> 'bar'
   * ```
   * 
   * @param {String} key
   * The key value to access.
   * 
   * @return {*}
   * Returns the value of a given key.
   */
  Globals.prototype.getKeyValue = function (key) {
  	var property = this.properties[key];
  	if (property) {
  		if (typeof property.value === 'function') {
  			if (property.cachedValue) {
  				return property.cachedValue;
  			}
  			if (property.enableCache) {
  				property.cachedValue = property.value();
  				return property.cachedValue;
  			} else {
  				return property.value();
  			}
  		}
  		return property.value;
  	}
  };

  Globals.prototype.makeExport = function (key) {
  	return function (value) {
  		if (arguments.length === 0) {
  			return this.getKeyValue(key);
  		}

  		if (typeof value === 'undefined' || value === null) {
  			this.deleteKeyValue(key);
  		} else {
  			if (typeof value === 'function') {
  				this.setKeyValue(key, function () {
  					return value;
  				});
  			} else {
  				this.setKeyValue(key, value);
  			}
  			return value;
  		}
  	}.bind(this);
  };

  /**
   * @function offKeyValue 
   * @parent can-globals/methods
   * 
   * Remove handler from event queue.
   * 
   * @signature `globals.offKeyValue(key, handler)`
   * 
   * Removes `handler` from future change events for `key`.
   * 
   * 
   * ```javascript
   * var handler = (value) => {
   *   value === 'baz' //-> true
   * };
   * globals.define('foo', 'bar');
   * globals.onKeyValue('foo', handler);
   * globals.setKeyValue('foo', 'baz');
   * globals.offKeyValue('foo', handler);
   * ```
   * 
   * @param {String} key
   * The key value to observe.
   * 
   * @param {Function} handler([value])
   * The observer callback.
   * 
   * @return {can-globals}
   * Returns the instance of `can-globals` for chaining.
   */
  Globals.prototype.offKeyValue = function (key, handler) {
  	if (this.properties[key]) {
  		var handlers = this.eventHandlers[key];
  		if (handlers) {
  			var i = handlers.indexOf(handler);
  			handlers.splice(i, 1);
  		}
  	}
  	return this;
  };

  /**
   * @function onKeyValue 
   * @parent can-globals/methods
   * 
   * Add handler to event queue.
   * 
   * @signature `globals.onKeyValue(key, handler)`
   * 
   * Calls `handler` each time the value of `key` is set or reset.
   * 
   * ```javascript
   * globals.define('foo', 'bar');
   * globals.onKeyValue('foo', (value) => {
   *   value === 'baz' //-> true
   * });
   * globals.setKeyValue('foo', 'baz');
   * ```
   * 
   * @param {String} key
   * The key value to observe.
   * 
   * @param {function(*)} handler([value])
   * The observer callback.
   * 
   * @return {can-globals}
   * Returns the instance of `can-globals` for chaining.
   */
  Globals.prototype.onKeyValue = function (key, handler) {
  	if (this.properties[key]) {
  		if (!this.eventHandlers[key]) {
  			this.eventHandlers[key] = [];
  		}
  		this.eventHandlers[key].push(handler);
  	}
  	return this;
  };

  /**
   * @function deleteKeyValue 
   * @parent can-globals/methods
   * 
   * Reset global environment variable.
   * 
   * @signature `globals.deleteKeyValue(key)`
   * 
   * Deletes the current value at `key`. Future `get`s will use the default value.
   * 
   * ```javascript
   * globals.define('global', window);
   * globals.setKeyValue('global', {});
   * globals.deleteKeyValue('global');
   * globals.getKeyValue('global') === window; //-> true
   * ```
   * 
   * @param {String} key
   * The key value to access.
   * 
   * @return {can-globals}
   * Returns the instance of `can-globals` for chaining.
   */
  Globals.prototype.deleteKeyValue = function (key) {
  	var property = this.properties[key];
  	if (property !== undefined) {
  		property.value = property.default;
  		property.cachedValue = undefined;
  		dispatch.call(this, key);
  	}
  	return this;
  };

  /**
   * @function setKeyValue 
   * @parent can-globals/methods
   * 
   * Overwrite an existing global environment variable.
   * 
   * @signature `globals.setKeyValue(key, value)`
   * 
   * ```javascript
   * globals.define('foo', 'bar');
   * globals.setKeyValue('foo', 'baz');
   * globals.getKeyValue('foo'); //-> 'baz'
   * ```
   * 
   * Sets the new value at `key`. Will override previously set values, but preserves the default (see `deleteKeyValue`).
   * 
   * Setting a key which was not previously defined will call `define` with the key and value.
   * 
   * @param {String} key
   * The key value to access.
   * 
   * @param {*} value
   * The new value.
   * 
   * @return {can-globals}
   * Returns the instance of `can-globals` for chaining.
   */
  Globals.prototype.setKeyValue = function (key, value) {
  	if (!this.properties[key]) {
  		return this.define(key, value);
  	}
  	var property = this.properties[key];
  	property.value = value;
  	property.cachedValue = undefined;
  	dispatch.call(this, key);
  	return this;
  };

  /**
   * @function reset 
   * @parent can-globals/methods
   * 
   * Reset all keys to their default value and clear their caches.
   * 
   * @signature `globals.setKeyValue(key, value)`
   * 
   * ```javascript
   * globals.define('foo', 'bar');
   * globals.setKeyValue('foo', 'baz');
   * globals.getKeyValue('foo'); //-> 'baz'
   * globals.reset();
   * globals.getKeyValue('foo'); //-> 'bar'
   * ```
   * 
   * @return {can-globals}
   * Returns the instance of `can-globals` for chaining.
   */
  Globals.prototype.reset = function () {
  	for (var key in this.properties) {
  		if (this.properties.hasOwnProperty(key)) {
  			this.properties[key].value = this.properties[key].default;
  			this.properties[key].cachedValue = undefined;
  			dispatch.call(this, key);
  		}
  	}
  	return this;
  };

  canReflect.assignSymbols(Globals.prototype, {
  	'can.getKeyValue': Globals.prototype.getKeyValue,
  	'can.setKeyValue': Globals.prototype.setKeyValue,
  	'can.deleteKeyValue': Globals.prototype.deleteKeyValue,
  	'can.onKeyValue': Globals.prototype.onKeyValue,
  	'can.offKeyValue': Globals.prototype.offKeyValue
  });

  var canGlobalsProto = Globals;

  var canGlobalsInstance = createCommonjsModule(function (module) {


  var globals = new canGlobalsProto();

  if (canNamespace.globals) {
  	throw new Error("You can't have two versions of can-globals, check your dependencies");
  } else {
  	module.exports = canNamespace.globals = globals;
  }
  });

  /* global self */
  /* global WorkerGlobalScope */



  /**
   * @module {function} can-globals/global/global global
   * @parent can-globals/modules
   * 
   * Get the global object for the current context.
   * 
   * @signature `GLOBAL([newGlobal])`
   *
   * Optionally sets, and returns the global that this environment provides. It will be one of:
   * 
   * ```js
   * var GLOBAL = require('can-globals/global/global');
   * var g = GLOBAL();
   * // In a browser
   * console.log(g === window); // -> true
   * ```
   *
   * - **Browser**: [`window`](https://developer.mozilla.org/en-US/docs/Web/API/window)
   * - **Web Worker**: [`self`](https://developer.mozilla.org/en-US/docs/Web/API/Window/self)
   * - **Node.js**: [`global`](https://nodejs.org/api/globals.html#globals_global)
   * 
   * @param {Object} [newGlobal] An optional global-like object to set as the context's global 
   *
   * @return {Object} The global object for this JavaScript environment.
   */
  canGlobalsInstance.define('global', function(){
  	// Web Worker
  	return (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) ? self :

  		// Node.js
  		typeof process === 'object' &&
  		{}.toString.call(process) === '[object process]' ? commonjsGlobal :

  		// Browser window
  		window;
  });

  var global_1$1 = canGlobalsInstance.makeExport('global');

  /**
   * @module {function} can-parse-uri can-parse-uri
   * @parent can-js-utilities
   * @collection can-infrastructure
   * @package ./package.json
   * @signature `parseURI(url)`
   *
   * Parse a URI into its components.
   *
   * ```js
   * import {parseURI} from "can"
   * parseURI("http://foo:8080/bar.html?query#change")
   * //-> {
   * //  authority: "//foo:8080",
   * //  hash: "#change",
   * //  host: "foo:8080",
   * //  hostname: "foo",
   * //  href: "http://foo:8080/bar.html?query#change",
   * //  pathname: "/bar.html",
   * //  port: "8080",
   * //  protocol: "http:",
   * //  search: "?query"
   * // }
   * ```
   *
   * @param {String} url The URL you want to parse.
   *
   * @return {Object} Returns an object with properties for each part of the URL. `null`
   * is returned if the url can not be parsed.
   */

  var canParseUri = canNamespace.parseURI = function(url){
  		var m = String(url).replace(/^\s+|\s+$/g, '').match(/^([^:\/?#]+:)?(\/\/(?:[^:@]*(?::[^:@]*)?@)?(([^:\/?#]*)(?::(\d*))?))?([^?#]*)(\?[^#]*)?(#[\s\S]*)?/);
  			// authority = '//' + user + ':' + pass '@' + hostname + ':' port
  		return (m ? {
  			href     : m[0] || '',
  			protocol : m[1] || '',
  			authority: m[2] || '',
  			host     : m[3] || '',
  			hostname : m[4] || '',
  			port     : m[5] || '',
  			pathname : m[6] || '',
  			search   : m[7] || '',
  			hash     : m[8] || ''
  		} : null);
  	};

  function buildParam(prefix, obj, add) {
  	if (Array.isArray(obj)) {
  		for (var i = 0, l = obj.length; i < l; ++i) {
  			var inner = obj[i];
  			var shouldIncludeIndex = typeof inner === 'object';
  			var arrayIndex = shouldIncludeIndex ? '[' + i + ']' : '[]';
  			buildParam(prefix + arrayIndex, inner, add);
  		}
  	} else if ( obj && typeof obj === "object" ) {
  		for (var name in obj) {
  			buildParam(prefix + '[' + name + ']', obj[name], add);
  		}
  	} else {
  		add(prefix, obj);
  	}
  }

  var canParam = canNamespace.param = function param(object) {
  	var pairs = [],
  		add = function (key, value) {
  			pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
  		};
  	for (var name in object) {
  		buildParam(name, object[name], add);
  	}
  	return pairs.join('&')
  		.replace(/%20/g, '+');
  };

  var xhrs = [
          function () {
              return new XMLHttpRequest();
          },
          function () {
              return new ActiveXObject('Microsoft.XMLHTTP');
          },
          function () {
              return new ActiveXObject('MSXML2.XMLHTTP.3.0');
          },
          function () {
              return new ActiveXObject('MSXML2.XMLHTTP');
          }
      ], _xhrf = null;
  var originUrl = canParseUri(global_1$1().location.href);
  var globalSettings = {};
  var makeXhr = function () {
      if (_xhrf != null) {
          return _xhrf();
      }
      for (var i = 0, l = xhrs.length; i < l; i++) {
          try {
              var f = xhrs[i], req = f();
              if (req != null) {
                  _xhrf = f;
                  return req;
              }
          } catch (e) {
              continue;
          }
      }
      return function () {
      };
  };
  var contentTypes = {
      json: 'application/json',
      form: 'application/x-www-form-urlencoded'
  };
  var _xhrResp = function (xhr, options) {
      try {
          var type = options.dataType || xhr.getResponseHeader('Content-Type').split(';')[0];
          if (type && (xhr.responseText || xhr.responseXML)) {
              switch (type) {
              case 'text/xml':
              case 'xml':
                  return xhr.responseXML;
              case 'text/json':
              case 'application/json':
              case 'text/javascript':
              case 'application/javascript':
              case 'application/x-javascript':
              case 'json':
                  return xhr.responseText && JSON.parse(xhr.responseText);
              default:
                  return xhr.responseText;
              }
          } else {
              return xhr;
          }
      } catch (e) {
          return xhr;
      }
  };
  function ajax(o) {
      var xhr = makeXhr(), timer, n = 0;
      var deferred = {}, isFormData;
      var promise = new Promise(function (resolve, reject) {
          deferred.resolve = resolve;
          deferred.reject = reject;
      });
      var requestUrl;
      var isAborted = false;
      promise.abort = function () {
          isAborted = true;
          xhr.abort();
      };
      o = [
          {
              userAgent: 'XMLHttpRequest',
              lang: 'en',
              type: 'GET',
              data: null,
              dataType: 'json'
          },
          globalSettings,
          o
      ].reduce(function (a, b, i) {
          return canReflect.assignDeep(a, b);
      });
      var async = o.async !== false;
      if (!o.contentType) {
          o.contentType = o.type.toUpperCase() === 'GET' ? contentTypes.form : contentTypes.json;
      }
      if (o.crossDomain == null) {
          try {
              requestUrl = canParseUri(o.url);
              o.crossDomain = !!(requestUrl.protocol && requestUrl.protocol !== originUrl.protocol || requestUrl.host && requestUrl.host !== originUrl.host);
          } catch (e) {
              o.crossDomain = true;
          }
      }
      if (o.timeout) {
          timer = setTimeout(function () {
              xhr.abort();
              if (o.timeoutFn) {
                  o.timeoutFn(o.url);
              }
          }, o.timeout);
      }
      xhr.onreadystatechange = function () {
          try {
              if (xhr.readyState === 4) {
                  if (timer) {
                      clearTimeout(timer);
                  }
                  if (xhr.status < 300) {
                      if (o.success) {
                          o.success(_xhrResp(xhr, o));
                      }
                  } else if (o.error) {
                      o.error(xhr, xhr.status, xhr.statusText);
                  }
                  if (o.complete) {
                      o.complete(xhr, xhr.statusText);
                  }
                  if (xhr.status >= 200 && xhr.status < 300) {
                      deferred.resolve(_xhrResp(xhr, o));
                  } else {
                      deferred.reject(_xhrResp(xhr, o));
                  }
              } else if (o.progress) {
                  o.progress(++n);
              }
          } catch (e) {
              deferred.reject(e);
          }
      };
      var url = o.url, data = null, type = o.type.toUpperCase();
      var isJsonContentType = o.contentType === contentTypes.json;
      var isPost = type === 'POST' || type === 'PUT';
      if (!isPost && o.data) {
          url += '?' + (isJsonContentType ? JSON.stringify(o.data) : canParam(o.data));
      }
      xhr.open(type, url, async);
      var isSimpleCors = o.crossDomain && [
          'GET',
          'POST',
          'HEAD'
      ].indexOf(type) !== -1;
      isFormData = typeof FormData !== 'undefined' && o.data instanceof FormData;
      if (isPost) {
          if (isFormData) {
              data = o.data;
          } else {
              if (isJsonContentType && !isSimpleCors) {
                  data = typeof o.data === 'object' ? JSON.stringify(o.data) : o.data;
                  xhr.setRequestHeader('Content-Type', 'application/json');
              } else {
                  data = canParam(o.data);
                  xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
              }
          }
      } else {
          xhr.setRequestHeader('Content-Type', o.contentType);
      }
      if (!isSimpleCors) {
          xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
      }
      if (o.xhrFields) {
          for (var f in o.xhrFields) {
              xhr[f] = o.xhrFields[f];
          }
      }
      function send() {
          if (!isAborted) {
              xhr.send(data);
          }
      }
      if (o.beforeSend) {
          var result = o.beforeSend.call(o, xhr, o);
          if (canReflect.isPromise(result)) {
              result.then(send).catch(deferred.reject);
              return promise;
          }
      }
      send();
      return promise;
  }
  var canAjax = canNamespace.ajax = ajax;
  var ajaxSetup = function (o) {
      globalSettings = o || {};
  };
  canAjax.ajaxSetup = ajaxSetup;

  var olLayerswitcher = createCommonjsModule(function (module, exports) {
  (function (global, factory) {
  	 module.exports = factory(Control, Observable) ;
  }(commonjsGlobal, (function (Control,ol_Observable) {
  Control = 'default' in Control ? Control['default'] : Control;

  var classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  var createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();







  var get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;
    var desc = Object.getOwnPropertyDescriptor(object, property);

    if (desc === undefined) {
      var parent = Object.getPrototypeOf(object);

      if (parent === null) {
        return undefined;
      } else {
        return get(parent, property, receiver);
      }
    } else if ("value" in desc) {
      return desc.value;
    } else {
      var getter = desc.get;

      if (getter === undefined) {
        return undefined;
      }

      return getter.call(receiver);
    }
  };

  var inherits = function (subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  };











  var possibleConstructorReturn = function (self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  };

  var CSS_PREFIX = 'layer-switcher-';

  /**
   * OpenLayers Layer Switcher Control.
   * See [the examples](./examples) for usage.
   * @constructor
   * @extends {ol/control/Control~Control}
   * @param {Object} opt_options Control options, extends ol/control/Control~Control#options adding:
   * @param {String} opt_options.activationMode Event to use on the button to collapse or expand the panel.
   *   `'mouseover'` (default) the layerswitcher panel stays expanded while button or panel are hovered. 
   *   `'click'` a click on the button toggles the layerswitcher visibility.
   * @param {String} opt_options.collapseLabel Text label to use for the expanded layerswitcher button. E.g.:
   *   `'Â»'` (default) or `'\u00BB'`, `'-'` or `'\u2212'`. Not visible if activation mode is `'mouseover'`
   * @param {String} opt_options.label Text label to use for the collapsed layerswitcher button. E.g.:
   *   `''` (default), `'Â«'` or `'\u00AB'`, `'+'`.
   * @param {String} opt_options.tipLabel the button tooltip.
   * @param {String} opt_options.groupSelectStyle either `'none'` - groups don't get a checkbox,
   *   `'children'` (default) groups have a checkbox and affect child visibility or
   *   `'group'` groups have a checkbox but do not alter child visibility (like QGIS).
   * @param {boolean} opt_options.reverse Reverse the layer order. Defaults to true.
   */

  var LayerSwitcher = function (_Control) {
      inherits(LayerSwitcher, _Control);

      function LayerSwitcher(opt_options) {
          classCallCheck(this, LayerSwitcher);


          var options = opt_options || {};

          var tipLabel = options.tipLabel ? options.tipLabel : 'Legend';

          var element = document.createElement('div');

          var _this = possibleConstructorReturn(this, (LayerSwitcher.__proto__ || Object.getPrototypeOf(LayerSwitcher)).call(this, { element: element, target: options.target }));

          _this.activationMode = options.activationMode || 'mouseover';

          var collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\xBB';

          var label = options.label !== undefined ? options.label : '';

          _this.groupSelectStyle = LayerSwitcher.getGroupSelectStyle(options.groupSelectStyle);

          _this.reverse = options.reverse !== false;

          _this.mapListeners = [];

          _this.hiddenClassName = 'ol-unselectable ol-control layer-switcher';
          if (LayerSwitcher.isTouchDevice_()) {
              _this.hiddenClassName += ' touch';
          }
          _this.shownClassName = 'shown';

          element.className = _this.hiddenClassName;

          var button = document.createElement('button');
          button.setAttribute('title', tipLabel);
          element.appendChild(button);

          _this.panel = document.createElement('div');
          _this.panel.className = 'panel';
          element.appendChild(_this.panel);
          LayerSwitcher.enableTouchScroll_(_this.panel);

          var this_ = _this;

          button.textContent = label;

          if (_this.activationMode == 'click') {
              element.classList.add('activationModeClick');
              button.onclick = function (e) {
                  e = e || window.event;
                  if (this_.element.classList.contains(this_.shownClassName)) {
                      this_.hidePanel();
                      button.textContent = label;
                  } else {
                      this_.showPanel();
                      button.textContent = collapseLabel;
                  }
                  e.preventDefault();
              };
              return possibleConstructorReturn(_this);
          }

          button.onmouseover = function (e) {
              this_.showPanel();
          };

          button.onclick = function (e) {
              e = e || window.event;
              this_.showPanel();
              e.preventDefault();
          };

          this_.panel.onmouseout = function (e) {
              e = e || window.event;
              if (!this_.panel.contains(e.toElement || e.relatedTarget)) {
                  this_.hidePanel();
              }
          };

          return _this;
      }

      /**
      * Set the map instance the control is associated with.
      * @param {ol/Map~Map} map The map instance.
      */


      createClass(LayerSwitcher, [{
          key: 'setMap',
          value: function setMap(map) {
              // Clean up listeners associated with the previous map
              for (var i = 0; i < this.mapListeners.length; i++) {
                  ol_Observable.unByKey(this.mapListeners[i]);
              }
              this.mapListeners.length = 0;
              // Wire up listeners etc. and store reference to new map
              get(LayerSwitcher.prototype.__proto__ || Object.getPrototypeOf(LayerSwitcher.prototype), 'setMap', this).call(this, map);
              if (map) {
                  this.renderPanel();
                  if (this.activationMode == 'click') return;
                  var this_ = this;
                  this.mapListeners.push(map.on('pointerdown', function () {
                      this_.hidePanel();
                  }));
              }
          }

          /**
          * Show the layer panel.
          */

      }, {
          key: 'showPanel',
          value: function showPanel() {
              if (!this.element.classList.contains(this.shownClassName)) {
                  this.element.classList.add(this.shownClassName);
                  this.renderPanel();
              }
          }

          /**
          * Hide the layer panel.
          */

      }, {
          key: 'hidePanel',
          value: function hidePanel() {
              if (this.element.classList.contains(this.shownClassName)) {
                  this.element.classList.remove(this.shownClassName);
              }
          }

          /**
          * Re-draw the layer panel to represent the current state of the layers.
          */

      }, {
          key: 'renderPanel',
          value: function renderPanel() {
              this.dispatchEvent({ type: 'render' });
              LayerSwitcher.renderPanel(this.getMap(), this.panel, { groupSelectStyle: this.groupSelectStyle, reverse: this.reverse });
              this.dispatchEvent({ type: 'rendercomplete' });
          }

          /**
          * **Static** Re-draw the layer panel to represent the current state of the layers.
          * @param {ol/Map~Map} map The OpenLayers Map instance to render layers for
          * @param {Element} panel The DOM Element into which the layer tree will be rendered
          */

      }], [{
          key: 'renderPanel',
          value: function renderPanel(map, panel, options) {
              // Create the event.
              var render_event = new Event('render');
              // Dispatch the event.
              panel.dispatchEvent(render_event);

              options = options || {};

              options.groupSelectStyle = LayerSwitcher.getGroupSelectStyle(options.groupSelectStyle);

              LayerSwitcher.ensureTopVisibleBaseLayerShown_(map);

              while (panel.firstChild) {
                  panel.removeChild(panel.firstChild);
              }

              // Reset indeterminate state for all layers and groups before
              // applying based on groupSelectStyle
              LayerSwitcher.forEachRecursive(map, function (l, idx, a) {
                  l.set('indeterminate', false);
              });

              if (options.groupSelectStyle === 'children' || options.groupSelectStyle === 'none') {
                  // Set visibile and indeterminate state of groups based on
                  // their children's visibility
                  LayerSwitcher.setGroupVisibility(map);
              } else if (options.groupSelectStyle === 'group') {
                  // Set child indetermiate state based on their parent's visibility
                  LayerSwitcher.setChildVisibility(map);
              }

              var ul = document.createElement('ul');
              panel.appendChild(ul);
              // passing two map arguments instead of lyr as we're passing the map as the root of the layers tree
              LayerSwitcher.renderLayers_(map, map, ul, options, function render(changedLyr) {
                  // console.log('render');
                  LayerSwitcher.renderPanel(map, panel, options);
              });

              // Create the event.
              var rendercomplete_event = new Event('rendercomplete');
              // Dispatch the event.
              panel.dispatchEvent(rendercomplete_event);
          }
      }, {
          key: 'isBaseGroup',
          value: function isBaseGroup(lyr) {
              var lyrs = lyr.getLayers ? lyr.getLayers().getArray() : [];
              return lyrs.length && lyrs[0].get('type') === 'base';
          }
      }, {
          key: 'setGroupVisibility',
          value: function setGroupVisibility(map) {
              // Get a list of groups, with the deepest first
              var groups = LayerSwitcher.getGroupsAndLayers(map, function (l) {
                  return l.getLayers && !l.get('combine') && !LayerSwitcher.isBaseGroup(l);
              }).reverse();
              // console.log(groups.map(g => g.get('title')));
              groups.forEach(function (group) {
                  // TODO Can we use getLayersArray, is it public in the esm build?
                  var descendantVisibility = group.getLayersArray().map(function (l) {
                      var state = l.getVisible();
                      // console.log('>', l.get('title'), state);
                      return state;
                  });
                  // console.log(descendantVisibility);
                  if (descendantVisibility.every(function (v) {
                      return v === true;
                  })) {
                      group.setVisible(true);
                      group.set('indeterminate', false);
                  } else if (descendantVisibility.every(function (v) {
                      return v === false;
                  })) {
                      group.setVisible(false);
                      group.set('indeterminate', false);
                  } else {
                      group.setVisible(true);
                      group.set('indeterminate', true);
                  }
              });
          }
      }, {
          key: 'setChildVisibility',
          value: function setChildVisibility(map) {
              // console.log('setChildVisibility');
              var groups = LayerSwitcher.getGroupsAndLayers(map, function (l) {
                  return l.getLayers && !l.get('combine') && !LayerSwitcher.isBaseGroup(l);
              });
              groups.forEach(function (group) {
                  // console.log(group.get('title'));
                  var groupVisible = group.getVisible();
                  var groupIndeterminate = group.get('indeterminate');
                  group.getLayers().getArray().forEach(function (l) {
                      // console.log('>', l.get('title'));
                      l.set('indeterminate', false);
                      if ((!groupVisible || groupIndeterminate) && l.getVisible()) {
                          l.set('indeterminate', true);
                      }
                  });
              });
          }

          /**
          * **Static** Ensure only the top-most base layer is visible if more than one is visible.
          * @param {ol/Map~Map} map The map instance.
          * @private
          */

      }, {
          key: 'ensureTopVisibleBaseLayerShown_',
          value: function ensureTopVisibleBaseLayerShown_(map) {
              var lastVisibleBaseLyr;
              LayerSwitcher.forEachRecursive(map, function (l, idx, a) {
                  if (l.get('type') === 'base' && l.getVisible()) {
                      lastVisibleBaseLyr = l;
                  }
              });
              if (lastVisibleBaseLyr) LayerSwitcher.setVisible_(map, lastVisibleBaseLyr, true);
          }
      }, {
          key: 'getGroupsAndLayers',
          value: function getGroupsAndLayers(lyr, filterFn) {
              var layers = [];
              filterFn = filterFn || function (l, idx, a) {
                  return true;
              };
              LayerSwitcher.forEachRecursive(lyr, function (l, idx, a) {
                  if (l.get('title')) {
                      if (filterFn(l, idx, a)) {
                          layers.push(l);
                      }
                  }
              });
              return layers;
          }

          /**
          * **Static** Toggle the visible state of a layer.
          * Takes care of hiding other layers in the same exclusive group if the layer
          * is toggle to visible.
          * @private
          * @param {ol/Map~Map} map The map instance.
          * @param {ol/layer/Base~BaseLayer} The layer whose visibility will be toggled.
          */

      }, {
          key: 'setVisible_',
          value: function setVisible_(map, lyr, visible, groupSelectStyle) {
              // console.log(lyr.get('title'), visible, groupSelectStyle);
              lyr.setVisible(visible);
              if (visible && lyr.get('type') === 'base') {
                  // Hide all other base layers regardless of grouping
                  LayerSwitcher.forEachRecursive(map, function (l, idx, a) {
                      if (l != lyr && l.get('type') === 'base') {
                          l.setVisible(false);
                      }
                  });
              }
              if (lyr.getLayers && !lyr.get('combine') && groupSelectStyle === 'children') {
                  lyr.getLayers().forEach(function (l) {
                      LayerSwitcher.setVisible_(map, l, lyr.getVisible(), groupSelectStyle);
                  });
              }
          }

          /**
          * **Static** Render all layers that are children of a group.
          * @private
          * @param {ol/Map~Map} map The map instance.
          * @param {ol/layer/Base~BaseLayer} lyr Layer to be rendered (should have a title property).
          * @param {Number} idx Position in parent group list.
          */

      }, {
          key: 'renderLayer_',
          value: function renderLayer_(map, lyr, idx, options, render) {

              var li = document.createElement('li');

              var lyrTitle = lyr.get('title');

              var checkboxId = LayerSwitcher.uuid();

              var label = document.createElement('label');

              if (lyr.getLayers && !lyr.get('combine')) {

                  var isBaseGroup = LayerSwitcher.isBaseGroup(lyr);

                  li.classList.add('group');
                  if (isBaseGroup) {
                      li.classList.add(CSS_PREFIX + 'base-group');
                  }

                  // Group folding
                  if (lyr.get('fold')) {
                      li.classList.add(CSS_PREFIX + 'fold');
                      li.classList.add(CSS_PREFIX + lyr.get('fold'));
                      var btn = document.createElement('button');
                      btn.onclick = function (e) {
                          e = e || window.event;
                          LayerSwitcher.toggleFold_(lyr, li);
                          e.preventDefault();
                      };
                      li.appendChild(btn);
                  }

                  if (!isBaseGroup && options.groupSelectStyle != 'none') {
                      var _input = document.createElement('input');
                      _input.type = 'checkbox';
                      _input.id = checkboxId;
                      _input.checked = lyr.getVisible();
                      _input.indeterminate = lyr.get('indeterminate');
                      _input.onchange = function (e) {
                          LayerSwitcher.setVisible_(map, lyr, e.target.checked, options.groupSelectStyle);
                          render(lyr);
                      };
                      li.appendChild(_input);
                      label.htmlFor = checkboxId;
                  }

                  label.innerHTML = lyrTitle;
                  li.appendChild(label);
                  var ul = document.createElement('ul');
                  li.appendChild(ul);

                  LayerSwitcher.renderLayers_(map, lyr, ul, options, render);
              } else {

                  li.className = 'layer';
                  var input = document.createElement('input');
                  if (lyr.get('type') === 'base') {
                      input.type = 'radio';
                      input.name = 'base';
                  } else {
                      input.type = 'checkbox';
                  }
                  input.id = checkboxId;
                  input.checked = lyr.get('visible');
                  input.indeterminate = lyr.get('indeterminate');
                  input.onchange = function (e) {
                      LayerSwitcher.setVisible_(map, lyr, e.target.checked, options.groupSelectStyle);
                      render(lyr);
                  };
                  li.appendChild(input);

                  label.htmlFor = checkboxId;
                  label.innerHTML = lyrTitle;

                  var rsl = map.getView().getResolution();
                  if (rsl > lyr.getMaxResolution() || rsl < lyr.getMinResolution()) {
                      label.className += ' disabled';
                  }

                  li.appendChild(label);
              }

              return li;
          }

          /**
          * **Static** Render all layers that are children of a group.
          * @private
          * @param {ol/Map~Map} map The map instance.
          * @param {ol/layer/Group~LayerGroup} lyr Group layer whose children will be rendered.
          * @param {Element} elm DOM element that children will be appended to.
          */

      }, {
          key: 'renderLayers_',
          value: function renderLayers_(map, lyr, elm, options, render) {
              var lyrs = lyr.getLayers().getArray().slice();
              if (options.reverse) lyrs = lyrs.reverse();
              for (var i = 0, l; i < lyrs.length; i++) {
                  l = lyrs[i];
                  if (l.get('title')) {
                      elm.appendChild(LayerSwitcher.renderLayer_(map, l, i, options, render));
                  }
              }
          }

          /**
          * **Static** Call the supplied function for each layer in the passed layer group
          * recursing nested groups.
          * @param {ol/layer/Group~LayerGroup} lyr The layer group to start iterating from.
          * @param {Function} fn Callback which will be called for each `ol/layer/Base~BaseLayer`
          * found under `lyr`. The signature for `fn` is the same as `ol/Collection~Collection#forEach`
          */

      }, {
          key: 'forEachRecursive',
          value: function forEachRecursive(lyr, fn) {
              lyr.getLayers().forEach(function (lyr, idx, a) {
                  fn(lyr, idx, a);
                  if (lyr.getLayers) {
                      LayerSwitcher.forEachRecursive(lyr, fn);
                  }
              });
          }

          /**
          * **Static** Generate a UUID
          * Adapted from http://stackoverflow.com/a/2117523/526860
          * @returns {String} UUID
          */

      }, {
          key: 'uuid',
          value: function uuid() {
              return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                  var r = Math.random() * 16 | 0,
                      v = c == 'x' ? r : r & 0x3 | 0x8;
                  return v.toString(16);
              });
          }

          /**
          * @private
          * @desc Apply workaround to enable scrolling of overflowing content within an
          * element. Adapted from https://gist.github.com/chrismbarr/4107472
          */

      }, {
          key: 'enableTouchScroll_',
          value: function enableTouchScroll_(elm) {
              if (LayerSwitcher.isTouchDevice_()) {
                  var scrollStartPos = 0;
                  elm.addEventListener("touchstart", function (event) {
                      scrollStartPos = this.scrollTop + event.touches[0].pageY;
                  }, false);
                  elm.addEventListener("touchmove", function (event) {
                      this.scrollTop = scrollStartPos - event.touches[0].pageY;
                  }, false);
              }
          }

          /**
          * @private
          * @desc Determine if the current browser supports touch events. Adapted from
          * https://gist.github.com/chrismbarr/4107472
          */

      }, {
          key: 'isTouchDevice_',
          value: function isTouchDevice_() {
              try {
                  document.createEvent("TouchEvent");
                  return true;
              } catch (e) {
                  return false;
              }
          }

          /**
          * Fold/unfold layer group
          * @private
          */

      }, {
          key: 'toggleFold_',
          value: function toggleFold_(lyr, li) {
              li.classList.remove(CSS_PREFIX + lyr.get('fold'));
              lyr.set('fold', lyr.get('fold') === 'open' ? 'close' : 'open');
              li.classList.add(CSS_PREFIX + lyr.get('fold'));
          }

          /**
           * If a valid groupSelectStyle value is not provided then return the default
           * @private
           */

      }, {
          key: 'getGroupSelectStyle',
          value: function getGroupSelectStyle(groupSelectStyle) {
              return ['none', 'children', 'group'].indexOf(groupSelectStyle) >= 0 ? groupSelectStyle : 'children';
          }
      }]);
      return LayerSwitcher;
  }(Control);

  if (window.ol && window.ol.control) {
      window.ol.control.LayerSwitcher = LayerSwitcher;
  }

  return LayerSwitcher;

  })));
  });

  /**
   * @module ol/format/XLink
   */
  /**
   * @const
   * @type {string}
   */
  var NAMESPACE_URI = 'http://www.w3.org/1999/xlink';
  /**
   * @param {Element} node Node.
   * @return {string|undefined} href.
   */
  function readHref(node) {
      return node.getAttributeNS(NAMESPACE_URI, 'href');
  }

  /**
   * @module ol/xml
   */
  /**
   * Recursively grab all text content of child nodes into a single string.
   * @param {Node} node Node.
   * @param {boolean} normalizeWhitespace Normalize whitespace: remove all line
   * breaks.
   * @return {string} All text content.
   * @api
   */
  function getAllTextContent(node, normalizeWhitespace) {
      return getAllTextContent_(node, normalizeWhitespace, []).join('');
  }
  /**
   * Recursively grab all text content of child nodes into a single string.
   * @param {Node} node Node.
   * @param {boolean} normalizeWhitespace Normalize whitespace: remove all line
   * breaks.
   * @param {Array<string>} accumulator Accumulator.
   * @private
   * @return {Array<string>} Accumulator.
   */
  function getAllTextContent_(node, normalizeWhitespace, accumulator) {
      if (node.nodeType == Node.CDATA_SECTION_NODE ||
          node.nodeType == Node.TEXT_NODE) {
          if (normalizeWhitespace) {
              accumulator.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ''));
          }
          else {
              accumulator.push(node.nodeValue);
          }
      }
      else {
          var n = void 0;
          for (n = node.firstChild; n; n = n.nextSibling) {
              getAllTextContent_(n, normalizeWhitespace, accumulator);
          }
      }
      return accumulator;
  }
  /**
   * @param {Object} object Object.
   * @return {boolean} Is a document.
   */
  function isDocument(object) {
      return 'documentElement' in object;
  }
  /**
   * Parse an XML string to an XML Document.
   * @param {string} xml XML.
   * @return {Document} Document.
   * @api
   */
  function parse$1(xml) {
      return new DOMParser().parseFromString(xml, 'application/xml');
  }
  /**
   * Make an array pusher function for pushing to the array at the top of the
   * object stack.
   * @param {function(this: T, Element, Array<*>): *} valueReader Value reader.
   * @param {T=} opt_this The object to use as `this` in `valueReader`.
   * @return {Parser} Parser.
   * @template T
   */
  function makeArrayPusher(valueReader, opt_this) {
      return (
      /**
       * @param {Element} node Node.
       * @param {Array<*>} objectStack Object stack.
       */
      function (node, objectStack) {
          var value = valueReader.call(opt_this !== undefined ? opt_this : this, node, objectStack);
          if (value !== undefined) {
              var array = /** @type {Array<*>} */ (objectStack[objectStack.length - 1]);
              array.push(value);
          }
      });
  }
  /**
   * Make an object property pusher function for adding a property to the
   * object at the top of the stack.
   * @param {function(this: T, Element, Array<*>): *} valueReader Value reader.
   * @param {string=} opt_property Property.
   * @param {T=} opt_this The object to use as `this` in `valueReader`.
   * @return {Parser} Parser.
   * @template T
   */
  function makeObjectPropertyPusher(valueReader, opt_property, opt_this) {
      return (
      /**
       * @param {Element} node Node.
       * @param {Array<*>} objectStack Object stack.
       */
      function (node, objectStack) {
          var value = valueReader.call(opt_this !== undefined ? opt_this : this, node, objectStack);
          if (value !== undefined) {
              var object = /** @type {!Object} */ (objectStack[objectStack.length - 1]);
              var property = opt_property !== undefined ? opt_property : node.localName;
              var array = void 0;
              if (property in object) {
                  array = object[property];
              }
              else {
                  array = [];
                  object[property] = array;
              }
              array.push(value);
          }
      });
  }
  /**
   * Make an object property setter function.
   * @param {function(this: T, Element, Array<*>): *} valueReader Value reader.
   * @param {string=} opt_property Property.
   * @param {T=} opt_this The object to use as `this` in `valueReader`.
   * @return {Parser} Parser.
   * @template T
   */
  function makeObjectPropertySetter(valueReader, opt_property, opt_this) {
      return (
      /**
       * @param {Element} node Node.
       * @param {Array<*>} objectStack Object stack.
       */
      function (node, objectStack) {
          var value = valueReader.call(opt_this !== undefined ? opt_this : this, node, objectStack);
          if (value !== undefined) {
              var object = /** @type {!Object} */ (objectStack[objectStack.length - 1]);
              var property = opt_property !== undefined ? opt_property : node.localName;
              object[property] = value;
          }
      });
  }
  /**
   * Create a namespaced structure, using the same values for each namespace.
   * This can be used as a starting point for versioned parsers, when only a few
   * values are version specific.
   * @param {Array<string>} namespaceURIs Namespace URIs.
   * @param {T} structure Structure.
   * @param {Object<string, T>=} opt_structureNS Namespaced structure to add to.
   * @return {Object<string, T>} Namespaced structure.
   * @template T
   */
  function makeStructureNS(namespaceURIs, structure, opt_structureNS) {
      /**
       * @type {Object<string, T>}
       */
      var structureNS = opt_structureNS !== undefined ? opt_structureNS : {};
      var i, ii;
      for (i = 0, ii = namespaceURIs.length; i < ii; ++i) {
          structureNS[namespaceURIs[i]] = structure;
      }
      return structureNS;
  }
  /**
   * Parse a node using the parsers and object stack.
   * @param {Object<string, Object<string, Parser>>} parsersNS
   *     Parsers by namespace.
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @param {*=} opt_this The object to use as `this`.
   */
  function parseNode(parsersNS, node, objectStack, opt_this) {
      var n;
      for (n = node.firstElementChild; n; n = n.nextElementSibling) {
          var parsers = parsersNS[n.namespaceURI];
          if (parsers !== undefined) {
              var parser = parsers[n.localName];
              if (parser !== undefined) {
                  parser.call(opt_this, n, objectStack);
              }
          }
      }
  }
  /**
   * Push an object on top of the stack, parse and return the popped object.
   * @param {T} object Object.
   * @param {Object<string, Object<string, Parser>>} parsersNS
   *     Parsers by namespace.
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @param {*=} opt_this The object to use as `this`.
   * @return {T} Object.
   * @template T
   */
  function pushParseAndPop(object, parsersNS, node, objectStack, opt_this) {
      objectStack.push(object);
      parseNode(parsersNS, node, objectStack, opt_this);
      return /** @type {T} */ (objectStack.pop());
  }

  /**
   * @module ol/format/XML
   */
  /**
   * @classdesc
   * Generic format for reading non-feature XML data
   *
   * @abstract
   */
  var XML = /** @class */ (function () {
      function XML() {
      }
      /**
       * Read the source document.
       *
       * @param {Document|Element|string} source The XML source.
       * @return {Object} An object representing the source.
       * @api
       */
      XML.prototype.read = function (source) {
          if (!source) {
              return null;
          }
          else if (typeof source === 'string') {
              var doc = parse$1(source);
              return this.readFromDocument(doc);
          }
          else if (isDocument(source)) {
              return this.readFromDocument(/** @type {Document} */ (source));
          }
          else {
              return this.readFromNode(/** @type {Element} */ (source));
          }
      };
      /**
       * @abstract
       * @param {Document} doc Document.
       * @return {Object} Object
       */
      XML.prototype.readFromDocument = function (doc) { };
      /**
       * @abstract
       * @param {Element} node Node.
       * @return {Object} Object
       */
      XML.prototype.readFromNode = function (node) { };
      return XML;
  }());

  /**
   * @module ol/format/xsd
   */
  /**
   * @param {string} string String.
   * @return {boolean|undefined} Boolean.
   */
  function readBooleanString(string) {
      var m = /^\s*(true|1)|(false|0)\s*$/.exec(string);
      if (m) {
          return m[1] !== undefined || false;
      }
      else {
          return undefined;
      }
  }
  /**
   * @param {Node} node Node.
   * @return {number|undefined} Decimal.
   */
  function readDecimal(node) {
      var s = getAllTextContent(node, false);
      return readDecimalString(s);
  }
  /**
   * @param {string} string String.
   * @return {number|undefined} Decimal.
   */
  function readDecimalString(string) {
      // FIXME check spec
      var m = /^\s*([+\-]?\d*\.?\d+(?:e[+\-]?\d+)?)\s*$/i.exec(string);
      if (m) {
          return parseFloat(m[1]);
      }
      else {
          return undefined;
      }
  }
  /**
   * @param {Node} node Node.
   * @return {number|undefined} Non negative integer.
   */
  function readNonNegativeInteger(node) {
      var s = getAllTextContent(node, false);
      return readNonNegativeIntegerString(s);
  }
  /**
   * @param {string} string String.
   * @return {number|undefined} Non negative integer.
   */
  function readNonNegativeIntegerString(string) {
      var m = /^\s*(\d+)\s*$/.exec(string);
      if (m) {
          return parseInt(m[1], 10);
      }
      else {
          return undefined;
      }
  }
  /**
   * @param {Node} node Node.
   * @return {string|undefined} String.
   */
  function readString(node) {
      return getAllTextContent(node, false).trim();
  }

  var __extends$1o =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @const
   * @type {Array<null|string>}
   */
  var NAMESPACE_URIS = [
      null,
      'http://www.opengis.net/wms'
  ];
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var PARSERS = makeStructureNS(NAMESPACE_URIS, {
      'Service': makeObjectPropertySetter(readService),
      'Capability': makeObjectPropertySetter(readCapability)
  });
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var CAPABILITY_PARSERS = makeStructureNS(NAMESPACE_URIS, {
      'Request': makeObjectPropertySetter(readRequest),
      'Exception': makeObjectPropertySetter(readException),
      'Layer': makeObjectPropertySetter(readCapabilityLayer)
  });
  /**
   * @classdesc
   * Format for reading WMS capabilities data
   *
   * @api
   */
  var WMSCapabilities = /** @class */ (function (_super) {
      __extends$1o(WMSCapabilities, _super);
      function WMSCapabilities() {
          var _this = _super.call(this) || this;
          /**
           * @type {string|undefined}
           */
          _this.version = undefined;
          return _this;
      }
      /**
       * @inheritDoc
       */
      WMSCapabilities.prototype.readFromDocument = function (doc) {
          for (var n = doc.firstChild; n; n = n.nextSibling) {
              if (n.nodeType == Node.ELEMENT_NODE) {
                  return this.readFromNode(n);
              }
          }
          return null;
      };
      /**
       * @inheritDoc
       */
      WMSCapabilities.prototype.readFromNode = function (node) {
          this.version = node.getAttribute('version').trim();
          var wmsCapabilityObject = pushParseAndPop({
              'version': this.version
          }, PARSERS, node, []);
          return wmsCapabilityObject ? wmsCapabilityObject : null;
      };
      return WMSCapabilities;
  }(XML));
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var SERVICE_PARSERS = makeStructureNS(NAMESPACE_URIS, {
      'Name': makeObjectPropertySetter(readString),
      'Title': makeObjectPropertySetter(readString),
      'Abstract': makeObjectPropertySetter(readString),
      'KeywordList': makeObjectPropertySetter(readKeywordList),
      'OnlineResource': makeObjectPropertySetter(readHref),
      'ContactInformation': makeObjectPropertySetter(readContactInformation),
      'Fees': makeObjectPropertySetter(readString),
      'AccessConstraints': makeObjectPropertySetter(readString),
      'LayerLimit': makeObjectPropertySetter(readNonNegativeInteger),
      'MaxWidth': makeObjectPropertySetter(readNonNegativeInteger),
      'MaxHeight': makeObjectPropertySetter(readNonNegativeInteger)
  });
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var CONTACT_INFORMATION_PARSERS = makeStructureNS(NAMESPACE_URIS, {
      'ContactPersonPrimary': makeObjectPropertySetter(readContactPersonPrimary),
      'ContactPosition': makeObjectPropertySetter(readString),
      'ContactAddress': makeObjectPropertySetter(readContactAddress),
      'ContactVoiceTelephone': makeObjectPropertySetter(readString),
      'ContactFacsimileTelephone': makeObjectPropertySetter(readString),
      'ContactElectronicMailAddress': makeObjectPropertySetter(readString)
  });
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var CONTACT_PERSON_PARSERS = makeStructureNS(NAMESPACE_URIS, {
      'ContactPerson': makeObjectPropertySetter(readString),
      'ContactOrganization': makeObjectPropertySetter(readString)
  });
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var CONTACT_ADDRESS_PARSERS = makeStructureNS(NAMESPACE_URIS, {
      'AddressType': makeObjectPropertySetter(readString),
      'Address': makeObjectPropertySetter(readString),
      'City': makeObjectPropertySetter(readString),
      'StateOrProvince': makeObjectPropertySetter(readString),
      'PostCode': makeObjectPropertySetter(readString),
      'Country': makeObjectPropertySetter(readString)
  });
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var EXCEPTION_PARSERS = makeStructureNS(NAMESPACE_URIS, {
      'Format': makeArrayPusher(readString)
  });
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var LAYER_PARSERS = makeStructureNS(NAMESPACE_URIS, {
      'Name': makeObjectPropertySetter(readString),
      'Title': makeObjectPropertySetter(readString),
      'Abstract': makeObjectPropertySetter(readString),
      'KeywordList': makeObjectPropertySetter(readKeywordList),
      'CRS': makeObjectPropertyPusher(readString),
      'EX_GeographicBoundingBox': makeObjectPropertySetter(readEXGeographicBoundingBox),
      'BoundingBox': makeObjectPropertyPusher(readBoundingBox),
      'Dimension': makeObjectPropertyPusher(readDimension),
      'Attribution': makeObjectPropertySetter(readAttribution),
      'AuthorityURL': makeObjectPropertyPusher(readAuthorityURL),
      'Identifier': makeObjectPropertyPusher(readString),
      'MetadataURL': makeObjectPropertyPusher(readMetadataURL),
      'DataURL': makeObjectPropertyPusher(readFormatOnlineresource),
      'FeatureListURL': makeObjectPropertyPusher(readFormatOnlineresource),
      'Style': makeObjectPropertyPusher(readStyle),
      'MinScaleDenominator': makeObjectPropertySetter(readDecimal),
      'MaxScaleDenominator': makeObjectPropertySetter(readDecimal),
      'Layer': makeObjectPropertyPusher(readLayer)
  });
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var ATTRIBUTION_PARSERS = makeStructureNS(NAMESPACE_URIS, {
      'Title': makeObjectPropertySetter(readString),
      'OnlineResource': makeObjectPropertySetter(readHref),
      'LogoURL': makeObjectPropertySetter(readSizedFormatOnlineresource)
  });
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var EX_GEOGRAPHIC_BOUNDING_BOX_PARSERS = makeStructureNS(NAMESPACE_URIS, {
      'westBoundLongitude': makeObjectPropertySetter(readDecimal),
      'eastBoundLongitude': makeObjectPropertySetter(readDecimal),
      'southBoundLatitude': makeObjectPropertySetter(readDecimal),
      'northBoundLatitude': makeObjectPropertySetter(readDecimal)
  });
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var REQUEST_PARSERS = makeStructureNS(NAMESPACE_URIS, {
      'GetCapabilities': makeObjectPropertySetter(readOperationType),
      'GetMap': makeObjectPropertySetter(readOperationType),
      'GetFeatureInfo': makeObjectPropertySetter(readOperationType)
  });
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var OPERATIONTYPE_PARSERS = makeStructureNS(NAMESPACE_URIS, {
      'Format': makeObjectPropertyPusher(readString),
      'DCPType': makeObjectPropertyPusher(readDCPType)
  });
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var DCPTYPE_PARSERS = makeStructureNS(NAMESPACE_URIS, {
      'HTTP': makeObjectPropertySetter(readHTTP)
  });
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var HTTP_PARSERS = makeStructureNS(NAMESPACE_URIS, {
      'Get': makeObjectPropertySetter(readFormatOnlineresource),
      'Post': makeObjectPropertySetter(readFormatOnlineresource)
  });
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var STYLE_PARSERS = makeStructureNS(NAMESPACE_URIS, {
      'Name': makeObjectPropertySetter(readString),
      'Title': makeObjectPropertySetter(readString),
      'Abstract': makeObjectPropertySetter(readString),
      'LegendURL': makeObjectPropertyPusher(readSizedFormatOnlineresource),
      'StyleSheetURL': makeObjectPropertySetter(readFormatOnlineresource),
      'StyleURL': makeObjectPropertySetter(readFormatOnlineresource)
  });
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var FORMAT_ONLINERESOURCE_PARSERS = makeStructureNS(NAMESPACE_URIS, {
      'Format': makeObjectPropertySetter(readString),
      'OnlineResource': makeObjectPropertySetter(readHref)
  });
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var KEYWORDLIST_PARSERS = makeStructureNS(NAMESPACE_URIS, {
      'Keyword': makeArrayPusher(readString)
  });
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Attribution object.
   */
  function readAttribution(node, objectStack) {
      return pushParseAndPop({}, ATTRIBUTION_PARSERS, node, objectStack);
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object} Bounding box object.
   */
  function readBoundingBox(node, objectStack) {
      var extent = [
          readDecimalString(node.getAttribute('minx')),
          readDecimalString(node.getAttribute('miny')),
          readDecimalString(node.getAttribute('maxx')),
          readDecimalString(node.getAttribute('maxy'))
      ];
      var resolutions = [
          readDecimalString(node.getAttribute('resx')),
          readDecimalString(node.getAttribute('resy'))
      ];
      return {
          'crs': node.getAttribute('CRS'),
          'extent': extent,
          'res': resolutions
      };
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {import("../extent.js").Extent|undefined} Bounding box object.
   */
  function readEXGeographicBoundingBox(node, objectStack) {
      var geographicBoundingBox = pushParseAndPop({}, EX_GEOGRAPHIC_BOUNDING_BOX_PARSERS, node, objectStack);
      if (!geographicBoundingBox) {
          return undefined;
      }
      var westBoundLongitude = /** @type {number|undefined} */ (geographicBoundingBox['westBoundLongitude']);
      var southBoundLatitude = /** @type {number|undefined} */ (geographicBoundingBox['southBoundLatitude']);
      var eastBoundLongitude = /** @type {number|undefined} */ (geographicBoundingBox['eastBoundLongitude']);
      var northBoundLatitude = /** @type {number|undefined} */ (geographicBoundingBox['northBoundLatitude']);
      if (westBoundLongitude === undefined || southBoundLatitude === undefined ||
          eastBoundLongitude === undefined || northBoundLatitude === undefined) {
          return undefined;
      }
      return [
          westBoundLongitude, southBoundLatitude,
          eastBoundLongitude, northBoundLatitude
      ];
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Capability object.
   */
  function readCapability(node, objectStack) {
      return pushParseAndPop({}, CAPABILITY_PARSERS, node, objectStack);
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Service object.
   */
  function readService(node, objectStack) {
      return pushParseAndPop({}, SERVICE_PARSERS, node, objectStack);
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Contact information object.
   */
  function readContactInformation(node, objectStack) {
      return pushParseAndPop({}, CONTACT_INFORMATION_PARSERS, node, objectStack);
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Contact person object.
   */
  function readContactPersonPrimary(node, objectStack) {
      return pushParseAndPop({}, CONTACT_PERSON_PARSERS, node, objectStack);
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Contact address object.
   */
  function readContactAddress(node, objectStack) {
      return pushParseAndPop({}, CONTACT_ADDRESS_PARSERS, node, objectStack);
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Array<string>|undefined} Format array.
   */
  function readException(node, objectStack) {
      return pushParseAndPop([], EXCEPTION_PARSERS, node, objectStack);
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Layer object.
   */
  function readCapabilityLayer(node, objectStack) {
      return pushParseAndPop({}, LAYER_PARSERS, node, objectStack);
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Layer object.
   */
  function readLayer(node, objectStack) {
      var parentLayerObject = /**  @type {!Object<string,*>} */ (objectStack[objectStack.length - 1]);
      var layerObject = pushParseAndPop({}, LAYER_PARSERS, node, objectStack);
      if (!layerObject) {
          return undefined;
      }
      var queryable = readBooleanString(node.getAttribute('queryable'));
      if (queryable === undefined) {
          queryable = parentLayerObject['queryable'];
      }
      layerObject['queryable'] = queryable !== undefined ? queryable : false;
      var cascaded = readNonNegativeIntegerString(node.getAttribute('cascaded'));
      if (cascaded === undefined) {
          cascaded = parentLayerObject['cascaded'];
      }
      layerObject['cascaded'] = cascaded;
      var opaque = readBooleanString(node.getAttribute('opaque'));
      if (opaque === undefined) {
          opaque = parentLayerObject['opaque'];
      }
      layerObject['opaque'] = opaque !== undefined ? opaque : false;
      var noSubsets = readBooleanString(node.getAttribute('noSubsets'));
      if (noSubsets === undefined) {
          noSubsets = parentLayerObject['noSubsets'];
      }
      layerObject['noSubsets'] = noSubsets !== undefined ? noSubsets : false;
      var fixedWidth = readDecimalString(node.getAttribute('fixedWidth'));
      if (!fixedWidth) {
          fixedWidth = parentLayerObject['fixedWidth'];
      }
      layerObject['fixedWidth'] = fixedWidth;
      var fixedHeight = readDecimalString(node.getAttribute('fixedHeight'));
      if (!fixedHeight) {
          fixedHeight = parentLayerObject['fixedHeight'];
      }
      layerObject['fixedHeight'] = fixedHeight;
      // See 7.2.4.8
      var addKeys = ['Style', 'CRS', 'AuthorityURL'];
      addKeys.forEach(function (key) {
          if (key in parentLayerObject) {
              var childValue = layerObject[key] || [];
              layerObject[key] = childValue.concat(parentLayerObject[key]);
          }
      });
      var replaceKeys = ['EX_GeographicBoundingBox', 'BoundingBox', 'Dimension',
          'Attribution', 'MinScaleDenominator', 'MaxScaleDenominator'];
      replaceKeys.forEach(function (key) {
          if (!(key in layerObject)) {
              var parentValue = parentLayerObject[key];
              layerObject[key] = parentValue;
          }
      });
      return layerObject;
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object} Dimension object.
   */
  function readDimension(node, objectStack) {
      var dimensionObject = {
          'name': node.getAttribute('name'),
          'units': node.getAttribute('units'),
          'unitSymbol': node.getAttribute('unitSymbol'),
          'default': node.getAttribute('default'),
          'multipleValues': readBooleanString(node.getAttribute('multipleValues')),
          'nearestValue': readBooleanString(node.getAttribute('nearestValue')),
          'current': readBooleanString(node.getAttribute('current')),
          'values': readString(node)
      };
      return dimensionObject;
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Online resource object.
   */
  function readFormatOnlineresource(node, objectStack) {
      return pushParseAndPop({}, FORMAT_ONLINERESOURCE_PARSERS, node, objectStack);
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Request object.
   */
  function readRequest(node, objectStack) {
      return pushParseAndPop({}, REQUEST_PARSERS, node, objectStack);
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} DCP type object.
   */
  function readDCPType(node, objectStack) {
      return pushParseAndPop({}, DCPTYPE_PARSERS, node, objectStack);
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} HTTP object.
   */
  function readHTTP(node, objectStack) {
      return pushParseAndPop({}, HTTP_PARSERS, node, objectStack);
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Operation type object.
   */
  function readOperationType(node, objectStack) {
      return pushParseAndPop({}, OPERATIONTYPE_PARSERS, node, objectStack);
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Online resource object.
   */
  function readSizedFormatOnlineresource(node, objectStack) {
      var formatOnlineresource = readFormatOnlineresource(node, objectStack);
      if (formatOnlineresource) {
          var size = [
              readNonNegativeIntegerString(node.getAttribute('width')),
              readNonNegativeIntegerString(node.getAttribute('height'))
          ];
          formatOnlineresource['size'] = size;
          return formatOnlineresource;
      }
      return undefined;
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Authority URL object.
   */
  function readAuthorityURL(node, objectStack) {
      var authorityObject = readFormatOnlineresource(node, objectStack);
      if (authorityObject) {
          authorityObject['name'] = node.getAttribute('name');
          return authorityObject;
      }
      return undefined;
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Metadata URL object.
   */
  function readMetadataURL(node, objectStack) {
      var metadataObject = readFormatOnlineresource(node, objectStack);
      if (metadataObject) {
          metadataObject['type'] = node.getAttribute('type');
          return metadataObject;
      }
      return undefined;
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Style object.
   */
  function readStyle(node, objectStack) {
      return pushParseAndPop({}, STYLE_PARSERS, node, objectStack);
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Array<string>|undefined} Keyword list.
   */
  function readKeywordList(node, objectStack) {
      return pushParseAndPop([], KEYWORDLIST_PARSERS, node, objectStack);
  }

  var __extends$1p =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @const
   * @type {Array<null|string>}
   */
  var NAMESPACE_URIS$1 = [null, 'http://www.opengis.net/ows/1.1'];
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var PARSERS$1 = makeStructureNS(NAMESPACE_URIS$1, {
      'ServiceIdentification': makeObjectPropertySetter(readServiceIdentification),
      'ServiceProvider': makeObjectPropertySetter(readServiceProvider),
      'OperationsMetadata': makeObjectPropertySetter(readOperationsMetadata)
  });
  var OWS = /** @class */ (function (_super) {
      __extends$1p(OWS, _super);
      function OWS() {
          return _super.call(this) || this;
      }
      /**
       * @inheritDoc
       */
      OWS.prototype.readFromDocument = function (doc) {
          for (var n = doc.firstChild; n; n = n.nextSibling) {
              if (n.nodeType == Node.ELEMENT_NODE) {
                  return this.readFromNode(n);
              }
          }
          return null;
      };
      /**
       * @inheritDoc
       */
      OWS.prototype.readFromNode = function (node) {
          var owsObject = pushParseAndPop({}, PARSERS$1, node, []);
          return owsObject ? owsObject : null;
      };
      return OWS;
  }(XML));
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var ADDRESS_PARSERS = makeStructureNS(NAMESPACE_URIS$1, {
      'DeliveryPoint': makeObjectPropertySetter(readString),
      'City': makeObjectPropertySetter(readString),
      'AdministrativeArea': makeObjectPropertySetter(readString),
      'PostalCode': makeObjectPropertySetter(readString),
      'Country': makeObjectPropertySetter(readString),
      'ElectronicMailAddress': makeObjectPropertySetter(readString)
  });
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var ALLOWED_VALUES_PARSERS = makeStructureNS(NAMESPACE_URIS$1, {
      'Value': makeObjectPropertyPusher(readValue)
  });
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var CONSTRAINT_PARSERS = makeStructureNS(NAMESPACE_URIS$1, {
      'AllowedValues': makeObjectPropertySetter(readAllowedValues)
  });
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var CONTACT_INFO_PARSERS = makeStructureNS(NAMESPACE_URIS$1, {
      'Phone': makeObjectPropertySetter(readPhone),
      'Address': makeObjectPropertySetter(readAddress)
  });
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var DCP_PARSERS = makeStructureNS(NAMESPACE_URIS$1, {
      'HTTP': makeObjectPropertySetter(readHttp)
  });
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var HTTP_PARSERS$1 = makeStructureNS(NAMESPACE_URIS$1, {
      'Get': makeObjectPropertyPusher(readGet),
      'Post': undefined // TODO
  });
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var OPERATION_PARSERS = makeStructureNS(NAMESPACE_URIS$1, {
      'DCP': makeObjectPropertySetter(readDcp)
  });
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var OPERATIONS_METADATA_PARSERS = makeStructureNS(NAMESPACE_URIS$1, {
      'Operation': readOperation
  });
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var PHONE_PARSERS = makeStructureNS(NAMESPACE_URIS$1, {
      'Voice': makeObjectPropertySetter(readString),
      'Facsimile': makeObjectPropertySetter(readString)
  });
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var REQUEST_METHOD_PARSERS = makeStructureNS(NAMESPACE_URIS$1, {
      'Constraint': makeObjectPropertyPusher(readConstraint)
  });
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var SERVICE_CONTACT_PARSERS = makeStructureNS(NAMESPACE_URIS$1, {
      'IndividualName': makeObjectPropertySetter(readString),
      'PositionName': makeObjectPropertySetter(readString),
      'ContactInfo': makeObjectPropertySetter(readContactInfo)
  });
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var SERVICE_IDENTIFICATION_PARSERS = makeStructureNS(NAMESPACE_URIS$1, {
      'Abstract': makeObjectPropertySetter(readString),
      'AccessConstraints': makeObjectPropertySetter(readString),
      'Fees': makeObjectPropertySetter(readString),
      'Title': makeObjectPropertySetter(readString),
      'ServiceTypeVersion': makeObjectPropertySetter(readString),
      'ServiceType': makeObjectPropertySetter(readString)
  });
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var SERVICE_PROVIDER_PARSERS = makeStructureNS(NAMESPACE_URIS$1, {
      'ProviderName': makeObjectPropertySetter(readString),
      'ProviderSite': makeObjectPropertySetter(readHref),
      'ServiceContact': makeObjectPropertySetter(readServiceContact)
  });
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The address.
   */
  function readAddress(node, objectStack) {
      return pushParseAndPop({}, ADDRESS_PARSERS, node, objectStack);
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The values.
   */
  function readAllowedValues(node, objectStack) {
      return pushParseAndPop({}, ALLOWED_VALUES_PARSERS, node, objectStack);
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The constraint.
   */
  function readConstraint(node, objectStack) {
      var name = node.getAttribute('name');
      if (!name) {
          return undefined;
      }
      return pushParseAndPop({ 'name': name }, CONSTRAINT_PARSERS, node, objectStack);
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The contact info.
   */
  function readContactInfo(node, objectStack) {
      return pushParseAndPop({}, CONTACT_INFO_PARSERS, node, objectStack);
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The DCP.
   */
  function readDcp(node, objectStack) {
      return pushParseAndPop({}, DCP_PARSERS, node, objectStack);
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The GET object.
   */
  function readGet(node, objectStack) {
      var href = readHref(node);
      if (!href) {
          return undefined;
      }
      return pushParseAndPop({ 'href': href }, REQUEST_METHOD_PARSERS, node, objectStack);
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The HTTP object.
   */
  function readHttp(node, objectStack) {
      return pushParseAndPop({}, HTTP_PARSERS$1, node, objectStack);
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The operation.
   */
  function readOperation(node, objectStack) {
      var name = node.getAttribute('name');
      var value = pushParseAndPop({}, OPERATION_PARSERS, node, objectStack);
      if (!value) {
          return undefined;
      }
      var object = /** @type {Object} */ (objectStack[objectStack.length - 1]);
      object[name] = value;
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The operations metadata.
   */
  function readOperationsMetadata(node, objectStack) {
      return pushParseAndPop({}, OPERATIONS_METADATA_PARSERS, node, objectStack);
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The phone.
   */
  function readPhone(node, objectStack) {
      return pushParseAndPop({}, PHONE_PARSERS, node, objectStack);
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The service identification.
   */
  function readServiceIdentification(node, objectStack) {
      return pushParseAndPop({}, SERVICE_IDENTIFICATION_PARSERS, node, objectStack);
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The service contact.
   */
  function readServiceContact(node, objectStack) {
      return pushParseAndPop({}, SERVICE_CONTACT_PARSERS, node, objectStack);
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} The service provider.
   */
  function readServiceProvider(node, objectStack) {
      return pushParseAndPop({}, SERVICE_PROVIDER_PARSERS, node, objectStack);
  }
  /**
   * @param {Node} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {string|undefined} The value.
   */
  function readValue(node, objectStack) {
      return readString(node);
  }

  var __extends$1q =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @const
   * @type {Array<null|string>}
   */
  var NAMESPACE_URIS$2 = [
      null,
      'http://www.opengis.net/wmts/1.0'
  ];
  /**
   * @const
   * @type {Array<null|string>}
   */
  var OWS_NAMESPACE_URIS = [
      null,
      'http://www.opengis.net/ows/1.1'
  ];
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var PARSERS$2 = makeStructureNS(NAMESPACE_URIS$2, {
      'Contents': makeObjectPropertySetter(readContents)
  });
  /**
   * @classdesc
   * Format for reading WMTS capabilities data.
   *
   * @api
   */
  var WMTSCapabilities = /** @class */ (function (_super) {
      __extends$1q(WMTSCapabilities, _super);
      function WMTSCapabilities() {
          var _this = _super.call(this) || this;
          /**
           * @type {OWS}
           * @private
           */
          _this.owsParser_ = new OWS();
          return _this;
      }
      /**
       * @inheritDoc
       */
      WMTSCapabilities.prototype.readFromDocument = function (doc) {
          for (var n = doc.firstChild; n; n = n.nextSibling) {
              if (n.nodeType == Node.ELEMENT_NODE) {
                  return this.readFromNode(n);
              }
          }
          return null;
      };
      /**
       * @inheritDoc
       */
      WMTSCapabilities.prototype.readFromNode = function (node) {
          var version = node.getAttribute('version');
          if (version) {
              version = version.trim();
          }
          var WMTSCapabilityObject = this.owsParser_.readFromNode(node);
          if (!WMTSCapabilityObject) {
              return null;
          }
          WMTSCapabilityObject['version'] = version;
          WMTSCapabilityObject = pushParseAndPop(WMTSCapabilityObject, PARSERS$2, node, []);
          return WMTSCapabilityObject ? WMTSCapabilityObject : null;
      };
      return WMTSCapabilities;
  }(XML));
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var CONTENTS_PARSERS = makeStructureNS(NAMESPACE_URIS$2, {
      'Layer': makeObjectPropertyPusher(readLayer$1),
      'TileMatrixSet': makeObjectPropertyPusher(readTileMatrixSet)
  });
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var LAYER_PARSERS$1 = makeStructureNS(NAMESPACE_URIS$2, {
      'Style': makeObjectPropertyPusher(readStyle$1),
      'Format': makeObjectPropertyPusher(readString),
      'TileMatrixSetLink': makeObjectPropertyPusher(readTileMatrixSetLink),
      'Dimension': makeObjectPropertyPusher(readDimensions),
      'ResourceURL': makeObjectPropertyPusher(readResourceUrl)
  }, makeStructureNS(OWS_NAMESPACE_URIS, {
      'Title': makeObjectPropertySetter(readString),
      'Abstract': makeObjectPropertySetter(readString),
      'WGS84BoundingBox': makeObjectPropertySetter(readWgs84BoundingBox),
      'Identifier': makeObjectPropertySetter(readString)
  }));
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var STYLE_PARSERS$1 = makeStructureNS(NAMESPACE_URIS$2, {
      'LegendURL': makeObjectPropertyPusher(readLegendUrl)
  }, makeStructureNS(OWS_NAMESPACE_URIS, {
      'Title': makeObjectPropertySetter(readString),
      'Identifier': makeObjectPropertySetter(readString)
  }));
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var TMS_LINKS_PARSERS = makeStructureNS(NAMESPACE_URIS$2, {
      'TileMatrixSet': makeObjectPropertySetter(readString),
      'TileMatrixSetLimits': makeObjectPropertySetter(readTileMatrixLimitsList)
  });
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var TMS_LIMITS_LIST_PARSERS = makeStructureNS(NAMESPACE_URIS$2, {
      'TileMatrixLimits': makeArrayPusher(readTileMatrixLimits)
  });
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var TMS_LIMITS_PARSERS = makeStructureNS(NAMESPACE_URIS$2, {
      'TileMatrix': makeObjectPropertySetter(readString),
      'MinTileRow': makeObjectPropertySetter(readNonNegativeInteger),
      'MaxTileRow': makeObjectPropertySetter(readNonNegativeInteger),
      'MinTileCol': makeObjectPropertySetter(readNonNegativeInteger),
      'MaxTileCol': makeObjectPropertySetter(readNonNegativeInteger)
  });
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var DIMENSION_PARSERS = makeStructureNS(NAMESPACE_URIS$2, {
      'Default': makeObjectPropertySetter(readString),
      'Value': makeObjectPropertyPusher(readString)
  }, makeStructureNS(OWS_NAMESPACE_URIS, {
      'Identifier': makeObjectPropertySetter(readString)
  }));
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var WGS84_BBOX_READERS = makeStructureNS(OWS_NAMESPACE_URIS, {
      'LowerCorner': makeArrayPusher(readCoordinates),
      'UpperCorner': makeArrayPusher(readCoordinates)
  });
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var TMS_PARSERS = makeStructureNS(NAMESPACE_URIS$2, {
      'WellKnownScaleSet': makeObjectPropertySetter(readString),
      'TileMatrix': makeObjectPropertyPusher(readTileMatrix)
  }, makeStructureNS(OWS_NAMESPACE_URIS, {
      'SupportedCRS': makeObjectPropertySetter(readString),
      'Identifier': makeObjectPropertySetter(readString)
  }));
  /**
   * @const
   * @type {Object<string, Object<string, import("../xml.js").Parser>>}
   */
  // @ts-ignore
  var TM_PARSERS = makeStructureNS(NAMESPACE_URIS$2, {
      'TopLeftCorner': makeObjectPropertySetter(readCoordinates),
      'ScaleDenominator': makeObjectPropertySetter(readDecimal),
      'TileWidth': makeObjectPropertySetter(readNonNegativeInteger),
      'TileHeight': makeObjectPropertySetter(readNonNegativeInteger),
      'MatrixWidth': makeObjectPropertySetter(readNonNegativeInteger),
      'MatrixHeight': makeObjectPropertySetter(readNonNegativeInteger)
  }, makeStructureNS(OWS_NAMESPACE_URIS, {
      'Identifier': makeObjectPropertySetter(readString)
  }));
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Attribution object.
   */
  function readContents(node, objectStack) {
      return pushParseAndPop({}, CONTENTS_PARSERS, node, objectStack);
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Layers object.
   */
  function readLayer$1(node, objectStack) {
      return pushParseAndPop({}, LAYER_PARSERS$1, node, objectStack);
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Tile Matrix Set object.
   */
  function readTileMatrixSet(node, objectStack) {
      return pushParseAndPop({}, TMS_PARSERS, node, objectStack);
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Style object.
   */
  function readStyle$1(node, objectStack) {
      var style = pushParseAndPop({}, STYLE_PARSERS$1, node, objectStack);
      if (!style) {
          return undefined;
      }
      var isDefault = node.getAttribute('isDefault') === 'true';
      style['isDefault'] = isDefault;
      return style;
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Tile Matrix Set Link object.
   */
  function readTileMatrixSetLink(node, objectStack) {
      return pushParseAndPop({}, TMS_LINKS_PARSERS, node, objectStack);
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Dimension object.
   */
  function readDimensions(node, objectStack) {
      return pushParseAndPop({}, DIMENSION_PARSERS, node, objectStack);
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Resource URL object.
   */
  function readResourceUrl(node, objectStack) {
      var format = node.getAttribute('format');
      var template = node.getAttribute('template');
      var resourceType = node.getAttribute('resourceType');
      var resource = {};
      if (format) {
          resource['format'] = format;
      }
      if (template) {
          resource['template'] = template;
      }
      if (resourceType) {
          resource['resourceType'] = resourceType;
      }
      return resource;
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} WGS84 BBox object.
   */
  function readWgs84BoundingBox(node, objectStack) {
      var coordinates = pushParseAndPop([], WGS84_BBOX_READERS, node, objectStack);
      if (coordinates.length != 2) {
          return undefined;
      }
      return boundingExtent(coordinates);
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Legend object.
   */
  function readLegendUrl(node, objectStack) {
      var legend = {};
      legend['format'] = node.getAttribute('format');
      legend['href'] = readHref(node);
      return legend;
  }
  /**
   * @param {Node} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} Coordinates object.
   */
  function readCoordinates(node, objectStack) {
      var coordinates = readString(node).split(/\s+/);
      if (!coordinates || coordinates.length != 2) {
          return undefined;
      }
      var x = +coordinates[0];
      var y = +coordinates[1];
      if (isNaN(x) || isNaN(y)) {
          return undefined;
      }
      return [x, y];
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} TileMatrix object.
   */
  function readTileMatrix(node, objectStack) {
      return pushParseAndPop({}, TM_PARSERS, node, objectStack);
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} TileMatrixSetLimits Object.
   */
  function readTileMatrixLimitsList(node, objectStack) {
      return pushParseAndPop([], TMS_LIMITS_LIST_PARSERS, node, objectStack);
  }
  /**
   * @param {Element} node Node.
   * @param {Array<*>} objectStack Object stack.
   * @return {Object|undefined} TileMatrixLimits Array.
   */
  function readTileMatrixLimits(node, objectStack) {
      return pushParseAndPop({}, TMS_LIMITS_PARSERS, node, objectStack);
  }

  /**
   * Class abstracting capabilities readers for different protocols.
   */

  var CapabilitiesReader = /*#__PURE__*/function () {
    function CapabilitiesReader() {
      _classCallCheck(this, CapabilitiesReader);
    }

    _createClass(CapabilitiesReader, null, [{
      key: "wms",

      /**
       * Create a WMS capabilities reader.
       *
       * @param {Document | Element | string} text The XML source.
       * @returns {null | object} Capabilities data.
       */
      value: function wms(text) {
        return new WMSCapabilities().read(text);
      }
      /**
       * Create a WMS capabilities reader.
       *
       * @param {Document | Element | string} text The XML source.
       * @returns {null | object} Capabilities data.
       */

    }, {
      key: "wmts",
      value: function wmts(text) {
        return new WMTSCapabilities().read(text);
      }
    }]);

    return CapabilitiesReader;
  }();

  /**
   *
   */
  var SourceUpdater = /*#__PURE__*/function () {
    function SourceUpdater() {
      _classCallCheck(this, SourceUpdater);
    }

    _createClass(SourceUpdater, null, [{
      key: "TileWMS",

      /**
       *
       * @param source
       * @param time
       * @constructor
       */
      value: function TileWMS(source, time) {
        if (time == null) {
          return;
        }

        var timeFormatted = new Date(time).toISOString();
        source.set('metoclient:time', time);
        source.updateParams({
          TIME: timeFormatted
        });
        source.refresh();
      }
      /**
       *
       * @param source
       * @param time
       * @constructor
       */

    }, {
      key: "WMTS",
      value: function WMTS(source, time) {
        // Use same time formatter in TileWMS and WMTS
        if (time == null) {
          return;
        }

        var timeFormatted = new Date(time).toISOString();
        source.set('metoclient:time', time);
        source.setTileLoadFunction(function (imageTile, src) {
          imageTile.getImage().src = "".concat(src, "&Time=").concat(timeFormatted);
        });
      }
    }]);

    return SourceUpdater;
  }();

  var __extends$1r =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {Object} Options
   * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
   * @property {number} [opacity=1] Opacity (0, 1).
   * @property {boolean} [visible=true] Visibility.
   * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
   * rendered outside of this extent.
   * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
   * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
   * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
   * method was used.
   * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
   * visible.
   * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
   * be visible.
   * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
   * visible.
   * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
   * be visible.
   * @property {import("../PluggableMap.js").default} [map] Sets the layer as overlay on a map. The map will not manage
   * this layer in its layers collection, and the layer will be rendered on top. This is useful for
   * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
   * use {@link module:ol/Map#addLayer}.
   * @property {import("../source/Image.js").default} [source] Source for this layer.
   */
  /**
   * @classdesc
   * Server-rendered images that are available for arbitrary extents and
   * resolutions.
   * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
   * property on the layer object; for example, setting `title: 'My Title'` in the
   * options means that `title` is observable, and has get/set accessors.
   *
   * @extends {Layer<import("../source/Image.js").default>}
   * @api
   */
  var BaseImageLayer = /** @class */ (function (_super) {
      __extends$1r(BaseImageLayer, _super);
      /**
       * @param {Options=} opt_options Layer options.
       */
      function BaseImageLayer(opt_options) {
          var _this = this;
          var options = opt_options ? opt_options : {};
          _this = _super.call(this, options) || this;
          return _this;
      }
      return BaseImageLayer;
  }(Layer));

  var __extends$1s =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @classdesc
   * Canvas renderer for image layers.
   * @api
   */
  var CanvasImageLayerRenderer = /** @class */ (function (_super) {
      __extends$1s(CanvasImageLayerRenderer, _super);
      /**
       * @param {import("../../layer/Image.js").default} imageLayer Image layer.
       */
      function CanvasImageLayerRenderer(imageLayer) {
          var _this = _super.call(this, imageLayer) || this;
          /**
           * @protected
           * @type {?import("../../ImageBase.js").default}
           */
          _this.image_ = null;
          return _this;
      }
      /**
       * @inheritDoc
       */
      CanvasImageLayerRenderer.prototype.getImage = function () {
          return !this.image_ ? null : this.image_.getImage();
      };
      /**
       * @inheritDoc
       */
      CanvasImageLayerRenderer.prototype.prepareFrame = function (frameState) {
          var layerState = frameState.layerStatesArray[frameState.layerIndex];
          var pixelRatio = frameState.pixelRatio;
          var viewState = frameState.viewState;
          var viewResolution = viewState.resolution;
          var imageSource = this.getLayer().getSource();
          var hints = frameState.viewHints;
          var renderedExtent = frameState.extent;
          if (layerState.extent !== undefined) {
              renderedExtent = getIntersection(renderedExtent, fromUserExtent(layerState.extent, viewState.projection));
          }
          if (!hints[ViewHint.ANIMATING] && !hints[ViewHint.INTERACTING] && !isEmpty$1(renderedExtent)) {
              if (imageSource) {
                  var projection = viewState.projection;
                  var image = imageSource.getImage(renderedExtent, viewResolution, pixelRatio, projection);
                  if (image && this.loadImage(image)) {
                      this.image_ = image;
                  }
              }
              else {
                  this.image_ = null;
              }
          }
          return !!this.image_;
      };
      /**
       * @inheritDoc
       */
      CanvasImageLayerRenderer.prototype.renderFrame = function (frameState, target) {
          var image = this.image_;
          var imageExtent = image.getExtent();
          var imageResolution = image.getResolution();
          var imagePixelRatio = image.getPixelRatio();
          var layerState = frameState.layerStatesArray[frameState.layerIndex];
          var pixelRatio = frameState.pixelRatio;
          var viewState = frameState.viewState;
          var viewCenter = viewState.center;
          var viewResolution = viewState.resolution;
          var size = frameState.size;
          var scale = pixelRatio * imageResolution / (viewResolution * imagePixelRatio);
          var width = Math.round(size[0] * pixelRatio);
          var height = Math.round(size[1] * pixelRatio);
          var rotation = viewState.rotation;
          if (rotation) {
              var size_1 = Math.round(Math.sqrt(width * width + height * height));
              width = size_1;
              height = size_1;
          }
          // set forward and inverse pixel transforms
          compose(this.pixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / pixelRatio, 1 / pixelRatio, rotation, -width / 2, -height / 2);
          makeInverse(this.inversePixelTransform, this.pixelTransform);
          var canvasTransform = createTransformString(this.pixelTransform);
          this.useContainer(target, canvasTransform, layerState.opacity);
          var context = this.context;
          var canvas = context.canvas;
          if (canvas.width != width || canvas.height != height) {
              canvas.width = width;
              canvas.height = height;
          }
          else if (!this.containerReused) {
              context.clearRect(0, 0, width, height);
          }
          // clipped rendering if layer extent is set
          var clipped = false;
          if (layerState.extent) {
              var layerExtent = fromUserExtent(layerState.extent, viewState.projection);
              clipped = !containsExtent(layerExtent, frameState.extent) && intersects(layerExtent, frameState.extent);
              if (clipped) {
                  this.clipUnrotated(context, frameState, layerExtent);
              }
          }
          var img = image.getImage();
          var transform = compose(this.tempTransform_, width / 2, height / 2, scale, scale, 0, imagePixelRatio * (imageExtent[0] - viewCenter[0]) / imageResolution, imagePixelRatio * (viewCenter[1] - imageExtent[3]) / imageResolution);
          this.renderedResolution = imageResolution * pixelRatio / imagePixelRatio;
          var dx = transform[4];
          var dy = transform[5];
          var dw = img.width * transform[0];
          var dh = img.height * transform[3];
          this.preRender(context, frameState);
          if (dw >= 0.5 && dh >= 0.5) {
              var opacity = layerState.opacity;
              var previousAlpha = void 0;
              if (opacity !== 1) {
                  previousAlpha = this.context.globalAlpha;
                  this.context.globalAlpha = opacity;
              }
              this.context.drawImage(img, 0, 0, +img.width, +img.height, Math.round(dx), Math.round(dy), Math.round(dw), Math.round(dh));
              if (opacity !== 1) {
                  this.context.globalAlpha = previousAlpha;
              }
          }
          this.postRender(context, frameState);
          if (clipped) {
              context.restore();
          }
          if (canvasTransform !== canvas.style.transform) {
              canvas.style.transform = canvasTransform;
          }
          return this.container;
      };
      return CanvasImageLayerRenderer;
  }(CanvasLayerRenderer));

  var __extends$1t =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @classdesc
   * Server-rendered images that are available for arbitrary extents and
   * resolutions.
   * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
   * property on the layer object; for example, setting `title: 'My Title'` in the
   * options means that `title` is observable, and has get/set accessors.
   *
   * @api
   */
  var ImageLayer = /** @class */ (function (_super) {
      __extends$1t(ImageLayer, _super);
      /**
       * @param {import("./BaseImage.js").Options=} opt_options Layer options.
       */
      function ImageLayer(opt_options) {
          return _super.call(this, opt_options) || this;
      }
      /**
       * Create a renderer for this layer.
       * @return {import("../renderer/Layer.js").default} A layer renderer.
       * @protected
       */
      ImageLayer.prototype.createRenderer = function () {
          return new CanvasImageLayerRenderer(this);
      };
      return ImageLayer;
  }(BaseImageLayer));

  /**
   * @module ol/source/common
   */
  /**
   * Default WMS version.
   * @type {string}
   */
  var DEFAULT_WMS_VERSION = '1.3.0';

  var __extends$1u =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {function(import("../extent.js").Extent, number, number) : import("../ImageBase.js").default} FunctionType
   */
  /**
   * @classdesc
   * Class encapsulating single reprojected image.
   * See {@link module:ol/source/Image~ImageSource}.
   */
  var ReprojImage = /** @class */ (function (_super) {
      __extends$1u(ReprojImage, _super);
      /**
       * @param {import("../proj/Projection.js").default} sourceProj Source projection (of the data).
       * @param {import("../proj/Projection.js").default} targetProj Target projection.
       * @param {import("../extent.js").Extent} targetExtent Target extent.
       * @param {number} targetResolution Target resolution.
       * @param {number} pixelRatio Pixel ratio.
       * @param {FunctionType} getImageFunction
       *     Function returning source images (extent, resolution, pixelRatio).
       */
      function ReprojImage(sourceProj, targetProj, targetExtent, targetResolution, pixelRatio, getImageFunction) {
          var _this = this;
          var maxSourceExtent = sourceProj.getExtent();
          var maxTargetExtent = targetProj.getExtent();
          var limitedTargetExtent = maxTargetExtent ?
              getIntersection(targetExtent, maxTargetExtent) : targetExtent;
          var targetCenter = getCenter(limitedTargetExtent);
          var sourceResolution = calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution);
          var errorThresholdInPixels = ERROR_THRESHOLD;
          var triangulation = new Triangulation(sourceProj, targetProj, limitedTargetExtent, maxSourceExtent, sourceResolution * errorThresholdInPixels, targetResolution);
          var sourceExtent = triangulation.calculateSourceExtent();
          var sourceImage = getImageFunction(sourceExtent, sourceResolution, pixelRatio);
          var state = sourceImage ? ImageState.IDLE : ImageState.EMPTY;
          var sourcePixelRatio = sourceImage ? sourceImage.getPixelRatio() : 1;
          _this = _super.call(this, targetExtent, targetResolution, sourcePixelRatio, state) || this;
          /**
           * @private
           * @type {import("../proj/Projection.js").default}
           */
          _this.targetProj_ = targetProj;
          /**
           * @private
           * @type {import("../extent.js").Extent}
           */
          _this.maxSourceExtent_ = maxSourceExtent;
          /**
           * @private
           * @type {!import("./Triangulation.js").default}
           */
          _this.triangulation_ = triangulation;
          /**
           * @private
           * @type {number}
           */
          _this.targetResolution_ = targetResolution;
          /**
           * @private
           * @type {import("../extent.js").Extent}
           */
          _this.targetExtent_ = targetExtent;
          /**
           * @private
           * @type {import("../ImageBase.js").default}
           */
          _this.sourceImage_ = sourceImage;
          /**
           * @private
           * @type {number}
           */
          _this.sourcePixelRatio_ = sourcePixelRatio;
          /**
           * @private
           * @type {HTMLCanvasElement}
           */
          _this.canvas_ = null;
          /**
           * @private
           * @type {?import("../events.js").EventsKey}
           */
          _this.sourceListenerKey_ = null;
          return _this;
      }
      /**
       * @inheritDoc
       */
      ReprojImage.prototype.disposeInternal = function () {
          if (this.state == ImageState.LOADING) {
              this.unlistenSource_();
          }
          _super.prototype.disposeInternal.call(this);
      };
      /**
       * @inheritDoc
       */
      ReprojImage.prototype.getImage = function () {
          return this.canvas_;
      };
      /**
       * @return {import("../proj/Projection.js").default} Projection.
       */
      ReprojImage.prototype.getProjection = function () {
          return this.targetProj_;
      };
      /**
       * @private
       */
      ReprojImage.prototype.reproject_ = function () {
          var sourceState = this.sourceImage_.getState();
          if (sourceState == ImageState.LOADED) {
              var width = getWidth(this.targetExtent_) / this.targetResolution_;
              var height = getHeight(this.targetExtent_) / this.targetResolution_;
              this.canvas_ = render$2(width, height, this.sourcePixelRatio_, this.sourceImage_.getResolution(), this.maxSourceExtent_, this.targetResolution_, this.targetExtent_, this.triangulation_, [{
                      extent: this.sourceImage_.getExtent(),
                      image: this.sourceImage_.getImage()
                  }], 0);
          }
          this.state = sourceState;
          this.changed();
      };
      /**
       * @inheritDoc
       */
      ReprojImage.prototype.load = function () {
          if (this.state == ImageState.IDLE) {
              this.state = ImageState.LOADING;
              this.changed();
              var sourceState = this.sourceImage_.getState();
              if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {
                  this.reproject_();
              }
              else {
                  this.sourceListenerKey_ = listen(this.sourceImage_, EventType.CHANGE, function (e) {
                      var sourceState = this.sourceImage_.getState();
                      if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {
                          this.unlistenSource_();
                          this.reproject_();
                      }
                  }, this);
                  this.sourceImage_.load();
              }
          }
      };
      /**
       * @private
       */
      ReprojImage.prototype.unlistenSource_ = function () {
          unlistenByKey(/** @type {!import("../events.js").EventsKey} */ (this.sourceListenerKey_));
          this.sourceListenerKey_ = null;
      };
      return ReprojImage;
  }(ImageBase));

  var __extends$1v =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @enum {string}
   */
  var ImageSourceEventType = {
      /**
       * Triggered when an image starts loading.
       * @event module:ol/source/Image.ImageSourceEvent#imageloadstart
       * @api
       */
      IMAGELOADSTART: 'imageloadstart',
      /**
       * Triggered when an image finishes loading.
       * @event module:ol/source/Image.ImageSourceEvent#imageloadend
       * @api
       */
      IMAGELOADEND: 'imageloadend',
      /**
       * Triggered if image loading results in an error.
       * @event module:ol/source/Image.ImageSourceEvent#imageloaderror
       * @api
       */
      IMAGELOADERROR: 'imageloaderror'
  };
  /**
   * @classdesc
   * Events emitted by {@link module:ol/source/Image~ImageSource} instances are instances of this
   * type.
   */
  var ImageSourceEvent = /** @class */ (function (_super) {
      __extends$1v(ImageSourceEvent, _super);
      /**
       * @param {string} type Type.
       * @param {import("../Image.js").default} image The image.
       */
      function ImageSourceEvent(type, image) {
          var _this = _super.call(this, type) || this;
          /**
           * The image related to the event.
           * @type {import("../Image.js").default}
           * @api
           */
          _this.image = image;
          return _this;
      }
      return ImageSourceEvent;
  }(BaseEvent));
  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions]
   * @property {import("../proj.js").ProjectionLike} [projection]
   * @property {Array<number>} [resolutions]
   * @property {import("./State.js").default} [state]
   */
  /**
   * @classdesc
   * Abstract base class; normally only used for creating subclasses and not
   * instantiated in apps.
   * Base class for sources providing a single image.
   * @abstract
   * @fires module:ol/source/Image.ImageSourceEvent
   * @api
   */
  var ImageSource = /** @class */ (function (_super) {
      __extends$1v(ImageSource, _super);
      /**
       * @param {Options} options Single image source options.
       */
      function ImageSource(options) {
          var _this = _super.call(this, {
              attributions: options.attributions,
              projection: options.projection,
              state: options.state
          }) || this;
          /**
           * @private
           * @type {Array<number>}
           */
          _this.resolutions_ = options.resolutions !== undefined ?
              options.resolutions : null;
          /**
           * @private
           * @type {import("../reproj/Image.js").default}
           */
          _this.reprojectedImage_ = null;
          /**
           * @private
           * @type {number}
           */
          _this.reprojectedRevision_ = 0;
          return _this;
      }
      /**
       * @return {Array<number>} Resolutions.
       * @override
       */
      ImageSource.prototype.getResolutions = function () {
          return this.resolutions_;
      };
      /**
       * @protected
       * @param {number} resolution Resolution.
       * @return {number} Resolution.
       */
      ImageSource.prototype.findNearestResolution = function (resolution) {
          if (this.resolutions_) {
              var idx = linearFindNearest(this.resolutions_, resolution, 0);
              resolution = this.resolutions_[idx];
          }
          return resolution;
      };
      /**
       * @param {import("../extent.js").Extent} extent Extent.
       * @param {number} resolution Resolution.
       * @param {number} pixelRatio Pixel ratio.
       * @param {import("../proj/Projection.js").default} projection Projection.
       * @return {import("../ImageBase.js").default} Single image.
       */
      ImageSource.prototype.getImage = function (extent, resolution, pixelRatio, projection) {
          var sourceProjection = this.getProjection();
          if (
              !sourceProjection ||
              !projection ||
              equivalent(sourceProjection, projection)) {
              if (sourceProjection) {
                  projection = sourceProjection;
              }
              return this.getImageInternal(extent, resolution, pixelRatio, projection);
          }
          else {
              if (this.reprojectedImage_) {
                  if (this.reprojectedRevision_ == this.getRevision() &&
                      equivalent(this.reprojectedImage_.getProjection(), projection) &&
                      this.reprojectedImage_.getResolution() == resolution &&
                      equals(this.reprojectedImage_.getExtent(), extent)) {
                      return this.reprojectedImage_;
                  }
                  this.reprojectedImage_.dispose();
                  this.reprojectedImage_ = null;
              }
              this.reprojectedImage_ = new ReprojImage(sourceProjection, projection, extent, resolution, pixelRatio, function (extent, resolution, pixelRatio) {
                  return this.getImageInternal(extent, resolution, pixelRatio, sourceProjection);
              }.bind(this));
              this.reprojectedRevision_ = this.getRevision();
              return this.reprojectedImage_;
          }
      };
      /**
       * @abstract
       * @param {import("../extent.js").Extent} extent Extent.
       * @param {number} resolution Resolution.
       * @param {number} pixelRatio Pixel ratio.
       * @param {import("../proj/Projection.js").default} projection Projection.
       * @return {import("../ImageBase.js").default} Single image.
       * @protected
       */
      ImageSource.prototype.getImageInternal = function (extent, resolution, pixelRatio, projection) {
          return abstract();
      };
      /**
       * Handle image change events.
       * @param {import("../events/Event.js").default} event Event.
       * @protected
       */
      ImageSource.prototype.handleImageChange = function (event) {
          var image = /** @type {import("../Image.js").default} */ (event.target);
          switch (image.getState()) {
              case ImageState.LOADING:
                  this.loading = true;
                  this.dispatchEvent(new ImageSourceEvent(ImageSourceEventType.IMAGELOADSTART, image));
                  break;
              case ImageState.LOADED:
                  this.loading = false;
                  this.dispatchEvent(new ImageSourceEvent(ImageSourceEventType.IMAGELOADEND, image));
                  break;
              case ImageState.ERROR:
                  this.loading = false;
                  this.dispatchEvent(new ImageSourceEvent(ImageSourceEventType.IMAGELOADERROR, image));
                  break;
              // pass
          }
      };
      return ImageSource;
  }(Source));
  /**
   * Default image load function for image sources that use import("../Image.js").Image image
   * instances.
   * @param {import("../Image.js").default} image Image.
   * @param {string} src Source.
   */
  function defaultImageLoadFunction(image, src) {
      /** @type {HTMLImageElement|HTMLVideoElement} */ (image.getImage()).src = src;
  }

  /**
   * @module ol/source/WMSServerType
   */
  /**
   * Available server types: `'carmentaserver'`, `'geoserver'`, `'mapserver'`,
   *     `'qgis'`. These are servers that have vendor parameters beyond the WMS
   *     specification that OpenLayers can make use of.
   * @enum {string}
   */
  var WMSServerType = {
      /**
       * HiDPI support for [Carmenta Server](https://www.carmenta.com/en/products/carmenta-server)
       * @api
       */
      CARMENTA_SERVER: 'carmentaserver',
      /**
       * HiDPI support for [GeoServer](https://geoserver.org/)
       * @api
       */
      GEOSERVER: 'geoserver',
      /**
       * HiDPI support for [MapServer](https://mapserver.org/)
       * @api
       */
      MAPSERVER: 'mapserver',
      /**
       * HiDPI support for [QGIS](https://qgis.org/)
       * @api
       */
      QGIS: 'qgis'
  };

  /**
   * @module ol/uri
   */
  /**
   * Appends query parameters to a URI.
   *
   * @param {string} uri The original URI, which may already have query data.
   * @param {!Object} params An object where keys are URI-encoded parameter keys,
   *     and the values are arbitrary types or arrays.
   * @return {string} The new URI.
   */
  function appendParams(uri, params) {
      var keyParams = [];
      // Skip any null or undefined parameter values
      Object.keys(params).forEach(function (k) {
          if (params[k] !== null && params[k] !== undefined) {
              keyParams.push(k + '=' + encodeURIComponent(params[k]));
          }
      });
      var qs = keyParams.join('&');
      // remove any trailing ? or &
      uri = uri.replace(/[?&]$/, '');
      // append ? or & depending on whether uri has existing parameters
      uri = uri.indexOf('?') === -1 ? uri + '?' : uri + '&';
      return uri + qs;
  }

  /**
   * @module ol/source/ImageWMS
   */
  var __extends$1w =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @const
   * @type {import("../size.js").Size}
   */
  var GETFEATUREINFO_IMAGE_SIZE = [101, 101];
  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting
   * the image from the remote server.
   * @property {import("./WMSServerType.js").default|string} [serverType] The type of
   * the remote WMS server: `mapserver`, `geoserver` or `qgis`. Only needed if `hidpi` is `true`.
   * @property {import("../Image.js").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.
   * @property {Object<string,*>} params WMS request parameters.
   * At least a `LAYERS` param is required. `STYLES` is
   * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`
   * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
   * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport, `2` means
   * twice the width and height of the map viewport, and so on. Must be `1` or
   * higher.
   * @property {Array<number>} [resolutions] Resolutions.
   * If specified, requests will be made for these resolutions only.
   * @property {string} url WMS service URL.
   */
  /**
   * @classdesc
   * Source for WMS servers providing single, untiled images.
   *
   * @fires module:ol/source/Image.ImageSourceEvent
   * @api
   */
  var ImageWMS = /** @class */ (function (_super) {
      __extends$1w(ImageWMS, _super);
      /**
       * @param {Options=} [opt_options] ImageWMS options.
       */
      function ImageWMS(opt_options) {
          var _this = this;
          var options = opt_options ? opt_options : {};
          _this = _super.call(this, {
              attributions: options.attributions,
              projection: options.projection,
              resolutions: options.resolutions
          }) || this;
          /**
           * @private
           * @type {?string}
           */
          _this.crossOrigin_ =
              options.crossOrigin !== undefined ? options.crossOrigin : null;
          /**
           * @private
           * @type {string|undefined}
           */
          _this.url_ = options.url;
          /**
           * @private
           * @type {import("../Image.js").LoadFunction}
           */
          _this.imageLoadFunction_ = options.imageLoadFunction !== undefined ?
              options.imageLoadFunction : defaultImageLoadFunction;
          /**
           * @private
           * @type {!Object}
           */
          _this.params_ = options.params || {};
          /**
           * @private
           * @type {boolean}
           */
          _this.v13_ = true;
          _this.updateV13_();
          /**
           * @private
           * @type {import("./WMSServerType.js").default|undefined}
           */
          _this.serverType_ = /** @type {import("./WMSServerType.js").default|undefined} */ (options.serverType);
          /**
           * @private
           * @type {boolean}
           */
          _this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;
          /**
           * @private
           * @type {import("../Image.js").default}
           */
          _this.image_ = null;
          /**
           * @private
           * @type {import("../size.js").Size}
           */
          _this.imageSize_ = [0, 0];
          /**
           * @private
           * @type {number}
           */
          _this.renderedRevision_ = 0;
          /**
           * @private
           * @type {number}
           */
          _this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;
          return _this;
      }
      /**
       * Return the GetFeatureInfo URL for the passed coordinate, resolution, and
       * projection. Return `undefined` if the GetFeatureInfo URL cannot be
       * constructed.
       * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
       * @param {number} resolution Resolution.
       * @param {import("../proj.js").ProjectionLike} projection Projection.
       * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should
       *     be provided. If `QUERY_LAYERS` is not provided then the layers specified
       *     in the `LAYERS` parameter will be used. `VERSION` should not be
       *     specified here.
       * @return {string|undefined} GetFeatureInfo URL.
       * @api
       */
      ImageWMS.prototype.getFeatureInfoUrl = function (coordinate, resolution, projection, params) {
          if (this.url_ === undefined) {
              return undefined;
          }
          var projectionObj = get$4(projection);
          var sourceProjectionObj = this.getProjection();
          if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {
              resolution = calculateSourceResolution(sourceProjectionObj, projectionObj, coordinate, resolution);
              coordinate = transform(coordinate, projectionObj, sourceProjectionObj);
          }
          var extent = getForViewAndSize(coordinate, resolution, 0, GETFEATUREINFO_IMAGE_SIZE);
          var baseParams = {
              'SERVICE': 'WMS',
              'VERSION': DEFAULT_WMS_VERSION,
              'REQUEST': 'GetFeatureInfo',
              'FORMAT': 'image/png',
              'TRANSPARENT': true,
              'QUERY_LAYERS': this.params_['LAYERS']
          };
          assign(baseParams, this.params_, params);
          var x = Math.floor((coordinate[0] - extent[0]) / resolution);
          var y = Math.floor((extent[3] - coordinate[1]) / resolution);
          baseParams[this.v13_ ? 'I' : 'X'] = x;
          baseParams[this.v13_ ? 'J' : 'Y'] = y;
          return this.getRequestUrl_(extent, GETFEATUREINFO_IMAGE_SIZE, 1, sourceProjectionObj || projectionObj, baseParams);
      };
      /**
       * Return the GetLegendGraphic URL, optionally optimized for the passed
       * resolution and possibly including any passed specific parameters. Returns
       * `undefined` if the GetLegendGraphic URL cannot be constructed.
       *
       * @param {number} [resolution] Resolution. If set to undefined, `SCALE`
       *     will not be calculated and included in URL.
       * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the
       *     request is generated for this wms layer, else it will try to use the
       *     configured wms layer. Default `FORMAT` is `image/png`.
       *     `VERSION` should not be specified here.
       * @return {string|undefined} GetLegendGraphic URL.
       * @api
       */
      ImageWMS.prototype.getLegendUrl = function (resolution, params) {
          if (this.url_ === undefined) {
              return undefined;
          }
          var baseParams = {
              'SERVICE': 'WMS',
              'VERSION': DEFAULT_WMS_VERSION,
              'REQUEST': 'GetLegendGraphic',
              'FORMAT': 'image/png'
          };
          if (params === undefined || params['LAYER'] === undefined) {
              var layers = this.params_.LAYERS;
              var isSingleLayer = !Array.isArray(layers) || layers.length === 1;
              if (!isSingleLayer) {
                  return undefined;
              }
              baseParams['LAYER'] = layers;
          }
          if (resolution !== undefined) {
              var mpu = this.getProjection() ? this.getProjection().getMetersPerUnit() : 1;
              var dpi = 25.4 / 0.28;
              var inchesPerMeter = 39.37;
              baseParams['SCALE'] = resolution * mpu * inchesPerMeter * dpi;
          }
          assign(baseParams, params);
          return appendParams(/** @type {string} */ (this.url_), baseParams);
      };
      /**
       * Get the user-provided params, i.e. those passed to the constructor through
       * the "params" option, and possibly updated using the updateParams method.
       * @return {Object} Params.
       * @api
       */
      ImageWMS.prototype.getParams = function () {
          return this.params_;
      };
      /**
       * @inheritDoc
       */
      ImageWMS.prototype.getImageInternal = function (extent, resolution, pixelRatio, projection) {
          if (this.url_ === undefined) {
              return null;
          }
          resolution = this.findNearestResolution(resolution);
          if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {
              pixelRatio = 1;
          }
          var imageResolution = resolution / pixelRatio;
          var center = getCenter(extent);
          var viewWidth = Math.ceil(getWidth(extent) / imageResolution);
          var viewHeight = Math.ceil(getHeight(extent) / imageResolution);
          var viewExtent = getForViewAndSize(center, imageResolution, 0, [viewWidth, viewHeight]);
          var requestWidth = Math.ceil(this.ratio_ * getWidth(extent) / imageResolution);
          var requestHeight = Math.ceil(this.ratio_ * getHeight(extent) / imageResolution);
          var requestExtent = getForViewAndSize(center, imageResolution, 0, [requestWidth, requestHeight]);
          var image = this.image_;
          if (image &&
              this.renderedRevision_ == this.getRevision() &&
              image.getResolution() == resolution &&
              image.getPixelRatio() == pixelRatio &&
              containsExtent(image.getExtent(), viewExtent)) {
              return image;
          }
          var params = {
              'SERVICE': 'WMS',
              'VERSION': DEFAULT_WMS_VERSION,
              'REQUEST': 'GetMap',
              'FORMAT': 'image/png',
              'TRANSPARENT': true
          };
          assign(params, this.params_);
          this.imageSize_[0] = Math.round(getWidth(requestExtent) / imageResolution);
          this.imageSize_[1] = Math.round(getHeight(requestExtent) / imageResolution);
          var url = this.getRequestUrl_(requestExtent, this.imageSize_, pixelRatio, projection, params);
          this.image_ = new ImageWrapper(requestExtent, resolution, pixelRatio, url, this.crossOrigin_, this.imageLoadFunction_);
          this.renderedRevision_ = this.getRevision();
          this.image_.addEventListener(EventType.CHANGE, this.handleImageChange.bind(this));
          return this.image_;
      };
      /**
       * Return the image load function of the source.
       * @return {import("../Image.js").LoadFunction} The image load function.
       * @api
       */
      ImageWMS.prototype.getImageLoadFunction = function () {
          return this.imageLoadFunction_;
      };
      /**
       * @param {import("../extent.js").Extent} extent Extent.
       * @param {import("../size.js").Size} size Size.
       * @param {number} pixelRatio Pixel ratio.
       * @param {import("../proj/Projection.js").default} projection Projection.
       * @param {Object} params Params.
       * @return {string} Request URL.
       * @private
       */
      ImageWMS.prototype.getRequestUrl_ = function (extent, size, pixelRatio, projection, params) {
          assert(this.url_ !== undefined, 9); // `url` must be configured or set using `#setUrl()`
          params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();
          if (!('STYLES' in this.params_)) {
              params['STYLES'] = '';
          }
          if (pixelRatio != 1) {
              switch (this.serverType_) {
                  case WMSServerType.GEOSERVER:
                      var dpi = (90 * pixelRatio + 0.5) | 0;
                      if ('FORMAT_OPTIONS' in params) {
                          params['FORMAT_OPTIONS'] += ';dpi:' + dpi;
                      }
                      else {
                          params['FORMAT_OPTIONS'] = 'dpi:' + dpi;
                      }
                      break;
                  case WMSServerType.MAPSERVER:
                      params['MAP_RESOLUTION'] = 90 * pixelRatio;
                      break;
                  case WMSServerType.CARMENTA_SERVER:
                  case WMSServerType.QGIS:
                      params['DPI'] = 90 * pixelRatio;
                      break;
                  default:
                      assert(false, 8); // Unknown `serverType` configured
                      break;
              }
          }
          params['WIDTH'] = size[0];
          params['HEIGHT'] = size[1];
          var axisOrientation = projection.getAxisOrientation();
          var bbox;
          if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {
              bbox = [extent[1], extent[0], extent[3], extent[2]];
          }
          else {
              bbox = extent;
          }
          params['BBOX'] = bbox.join(',');
          return appendParams(/** @type {string} */ (this.url_), params);
      };
      /**
       * Return the URL used for this WMS source.
       * @return {string|undefined} URL.
       * @api
       */
      ImageWMS.prototype.getUrl = function () {
          return this.url_;
      };
      /**
       * Set the image load function of the source.
       * @param {import("../Image.js").LoadFunction} imageLoadFunction Image load function.
       * @api
       */
      ImageWMS.prototype.setImageLoadFunction = function (imageLoadFunction) {
          this.image_ = null;
          this.imageLoadFunction_ = imageLoadFunction;
          this.changed();
      };
      /**
       * Set the URL to use for requests.
       * @param {string|undefined} url URL.
       * @api
       */
      ImageWMS.prototype.setUrl = function (url) {
          if (url != this.url_) {
              this.url_ = url;
              this.image_ = null;
              this.changed();
          }
      };
      /**
       * Update the user-provided params.
       * @param {Object} params Params.
       * @api
       */
      ImageWMS.prototype.updateParams = function (params) {
          assign(this.params_, params);
          this.updateV13_();
          this.image_ = null;
          this.changed();
      };
      /**
       * @private
       */
      ImageWMS.prototype.updateV13_ = function () {
          var version = this.params_['VERSION'] || DEFAULT_WMS_VERSION;
          this.v13_ = compareVersions(version, '1.3') >= 0;
      };
      return ImageWMS;
  }(ImageSource));

  /**
   * @module ol/source/TileWMS
   */
  var __extends$1x =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {number} [cacheSize] Tile cache size. The default depends on the screen size. Will be ignored if too small.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {Object<string,*>} params WMS request parameters.
   * At least a `LAYERS` param is required. `STYLES` is
   * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`
   * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.
   * @property {number} [gutter=0]
   * The size in pixels of the gutter around image tiles to ignore. By setting
   * this property to a non-zero value, images will be requested that are wider
   * and taller than the tile size by a value of `2 x gutter`.
   * Using a non-zero value allows artifacts of rendering at tile edges to be
   * ignored. If you control the WMS service it is recommended to address
   * "artifacts at tile edges" issues by properly configuring the WMS service. For
   * example, MapServer has a `tile_map_edge_buffer` configuration parameter for
   * this. See http://mapserver.org/output/tile_mode.html.
   * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting
   * the image from the remote server.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
   * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
   * Higher values can increase reprojection performance, but decrease precision.
   * @property {typeof import("../ImageTile.js").default} [tileClass] Class used to instantiate image tiles.
   * Default is {@link module:ol/ImageTile~ImageTile}.
   * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] Tile grid. Base this on the resolutions,
   * tilesize and extent supported by the server.
   * If this is not defined, a default grid will be used: if there is a projection
   * extent, the grid will be based on that; if not, a grid based on a global
   * extent with origin at 0,0 will be used..
   * @property {import("./WMSServerType.js").default|string} [serverType]
   * The type of the remote WMS server. Currently only used when `hidpi` is
   * `true`.
   * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
   * ```js
   * function(imageTile, src) {
   *   imageTile.getImage().src = src;
   * };
   * ```
   * @property {string} [url] WMS service URL.
   * @property {Array<string>} [urls] WMS service urls.
   * Use this instead of `url` when the WMS supports multiple urls for GetMap requests.
   * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
   * When set to `false`, only one world
   * will be rendered. When `true`, tiles will be requested for one world only,
   * but they will be wrapped horizontally to render multiple worlds.
   * @property {number} [transition] Duration of the opacity transition for rendering.
   * To disable the opacity transition, pass `transition: 0`.
   */
  /**
   * @classdesc
   * Layer source for tile data from WMS servers.
   * @api
   */
  var TileWMS = /** @class */ (function (_super) {
      __extends$1x(TileWMS, _super);
      /**
       * @param {Options=} [opt_options] Tile WMS options.
       */
      function TileWMS(opt_options) {
          var _this = this;
          var options = opt_options ? opt_options : /** @type {Options} */ ({});
          var params = options.params || {};
          var transparent = 'TRANSPARENT' in params ? params['TRANSPARENT'] : true;
          _this = _super.call(this, {
              attributions: options.attributions,
              cacheSize: options.cacheSize,
              crossOrigin: options.crossOrigin,
              opaque: !transparent,
              projection: options.projection,
              reprojectionErrorThreshold: options.reprojectionErrorThreshold,
              tileClass: options.tileClass,
              tileGrid: options.tileGrid,
              tileLoadFunction: options.tileLoadFunction,
              tileUrlFunction: tileUrlFunction,
              url: options.url,
              urls: options.urls,
              wrapX: options.wrapX !== undefined ? options.wrapX : true,
              transition: options.transition
          }) || this;
          /**
           * @private
           * @type {number}
           */
          _this.gutter_ = options.gutter !== undefined ? options.gutter : 0;
          /**
           * @private
           * @type {!Object}
           */
          _this.params_ = params;
          /**
           * @private
           * @type {boolean}
           */
          _this.v13_ = true;
          /**
           * @private
           * @type {import("./WMSServerType.js").default|undefined}
           */
          _this.serverType_ = /** @type {import("./WMSServerType.js").default|undefined} */ (options.serverType);
          /**
           * @private
           * @type {boolean}
           */
          _this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;
          /**
           * @private
           * @type {import("../extent.js").Extent}
           */
          _this.tmpExtent_ = createEmpty();
          _this.updateV13_();
          _this.setKey(_this.getKeyForParams_());
          return _this;
      }
      /**
       * Return the GetFeatureInfo URL for the passed coordinate, resolution, and
       * projection. Return `undefined` if the GetFeatureInfo URL cannot be
       * constructed.
       * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
       * @param {number} resolution Resolution.
       * @param {import("../proj.js").ProjectionLike} projection Projection.
       * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should
       *     be provided. If `QUERY_LAYERS` is not provided then the layers specified
       *     in the `LAYERS` parameter will be used. `VERSION` should not be
       *     specified here.
       * @return {string|undefined} GetFeatureInfo URL.
       * @api
       */
      TileWMS.prototype.getFeatureInfoUrl = function (coordinate, resolution, projection, params) {
          var projectionObj = get$4(projection);
          var sourceProjectionObj = this.getProjection();
          var tileGrid = this.getTileGrid();
          if (!tileGrid) {
              tileGrid = this.getTileGridForProjection(projectionObj);
          }
          var z = tileGrid.getZForResolution(resolution, this.zDirection);
          var tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);
          if (tileGrid.getResolutions().length <= tileCoord[0]) {
              return undefined;
          }
          var tileResolution = tileGrid.getResolution(tileCoord[0]);
          var tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);
          var tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);
          var gutter = this.gutter_;
          if (gutter !== 0) {
              tileSize = buffer$1(tileSize, gutter, this.tmpSize);
              tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);
          }
          if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {
              tileResolution = calculateSourceResolution(sourceProjectionObj, projectionObj, coordinate, tileResolution);
              tileExtent = transformExtent(tileExtent, projectionObj, sourceProjectionObj);
              coordinate = transform(coordinate, projectionObj, sourceProjectionObj);
          }
          var baseParams = {
              'SERVICE': 'WMS',
              'VERSION': DEFAULT_WMS_VERSION,
              'REQUEST': 'GetFeatureInfo',
              'FORMAT': 'image/png',
              'TRANSPARENT': true,
              'QUERY_LAYERS': this.params_['LAYERS']
          };
          assign(baseParams, this.params_, params);
          var x = Math.floor((coordinate[0] - tileExtent[0]) / tileResolution);
          var y = Math.floor((tileExtent[3] - coordinate[1]) / tileResolution);
          baseParams[this.v13_ ? 'I' : 'X'] = x;
          baseParams[this.v13_ ? 'J' : 'Y'] = y;
          return this.getRequestUrl_(tileCoord, tileSize, tileExtent, 1, sourceProjectionObj || projectionObj, baseParams);
      };
      /**
       * Return the GetLegendGraphic URL, optionally optimized for the passed
       * resolution and possibly including any passed specific parameters. Returns
       * `undefined` if the GetLegendGraphic URL cannot be constructed.
       *
       * @param {number} [resolution] Resolution. If set to undefined, `SCALE`
       *     will not be calculated and included in URL.
       * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the
       *     request is generated for this wms layer, else it will try to use the
       *     configured wms layer. Default `FORMAT` is `image/png`.
       *     `VERSION` should not be specified here.
       * @return {string|undefined} GetLegendGraphic URL.
       * @api
       */
      TileWMS.prototype.getLegendUrl = function (resolution, params) {
          if (this.urls[0] === undefined) {
              return undefined;
          }
          var baseParams = {
              'SERVICE': 'WMS',
              'VERSION': DEFAULT_WMS_VERSION,
              'REQUEST': 'GetLegendGraphic',
              'FORMAT': 'image/png'
          };
          if (params === undefined || params['LAYER'] === undefined) {
              var layers = this.params_.LAYERS;
              var isSingleLayer = !Array.isArray(layers) || layers.length === 1;
              if (!isSingleLayer) {
                  return undefined;
              }
              baseParams['LAYER'] = layers;
          }
          if (resolution !== undefined) {
              var mpu = this.getProjection() ? this.getProjection().getMetersPerUnit() : 1;
              var dpi = 25.4 / 0.28;
              var inchesPerMeter = 39.37;
              baseParams['SCALE'] = resolution * mpu * inchesPerMeter * dpi;
          }
          assign(baseParams, params);
          return appendParams(/** @type {string} */ (this.urls[0]), baseParams);
      };
      /**
       * @inheritDoc
       */
      TileWMS.prototype.getGutter = function () {
          return this.gutter_;
      };
      /**
       * Get the user-provided params, i.e. those passed to the constructor through
       * the "params" option, and possibly updated using the updateParams method.
       * @return {Object} Params.
       * @api
       */
      TileWMS.prototype.getParams = function () {
          return this.params_;
      };
      /**
       * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
       * @param {import("../size.js").Size} tileSize Tile size.
       * @param {import("../extent.js").Extent} tileExtent Tile extent.
       * @param {number} pixelRatio Pixel ratio.
       * @param {import("../proj/Projection.js").default} projection Projection.
       * @param {Object} params Params.
       * @return {string|undefined} Request URL.
       * @private
       */
      TileWMS.prototype.getRequestUrl_ = function (tileCoord, tileSize, tileExtent, pixelRatio, projection, params) {
          var urls = this.urls;
          if (!urls) {
              return undefined;
          }
          params['WIDTH'] = tileSize[0];
          params['HEIGHT'] = tileSize[1];
          params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();
          if (!('STYLES' in this.params_)) {
              params['STYLES'] = '';
          }
          if (pixelRatio != 1) {
              switch (this.serverType_) {
                  case WMSServerType.GEOSERVER:
                      var dpi = (90 * pixelRatio + 0.5) | 0;
                      if ('FORMAT_OPTIONS' in params) {
                          params['FORMAT_OPTIONS'] += ';dpi:' + dpi;
                      }
                      else {
                          params['FORMAT_OPTIONS'] = 'dpi:' + dpi;
                      }
                      break;
                  case WMSServerType.MAPSERVER:
                      params['MAP_RESOLUTION'] = 90 * pixelRatio;
                      break;
                  case WMSServerType.CARMENTA_SERVER:
                  case WMSServerType.QGIS:
                      params['DPI'] = 90 * pixelRatio;
                      break;
                  default:
                      assert(false, 52); // Unknown `serverType` configured
                      break;
              }
          }
          var axisOrientation = projection.getAxisOrientation();
          var bbox = tileExtent;
          if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {
              var tmp = void 0;
              tmp = tileExtent[0];
              bbox[0] = tileExtent[1];
              bbox[1] = tmp;
              tmp = tileExtent[2];
              bbox[2] = tileExtent[3];
              bbox[3] = tmp;
          }
          params['BBOX'] = bbox.join(',');
          var url;
          if (urls.length == 1) {
              url = urls[0];
          }
          else {
              var index = modulo(hash(tileCoord), urls.length);
              url = urls[index];
          }
          return appendParams(url, params);
      };
      /**
       * @inheritDoc
       */
      TileWMS.prototype.getTilePixelRatio = function (pixelRatio) {
          return (!this.hidpi_ || this.serverType_ === undefined) ? 1 :
              /** @type {number} */ (pixelRatio);
      };
      /**
       * @private
       * @return {string} The key for the current params.
       */
      TileWMS.prototype.getKeyForParams_ = function () {
          var i = 0;
          var res = [];
          for (var key in this.params_) {
              res[i++] = key + '-' + this.params_[key];
          }
          return res.join('/');
      };
      /**
       * Update the user-provided params.
       * @param {Object} params Params.
       * @api
       */
      TileWMS.prototype.updateParams = function (params) {
          assign(this.params_, params);
          this.updateV13_();
          this.setKey(this.getKeyForParams_());
      };
      /**
       * @private
       */
      TileWMS.prototype.updateV13_ = function () {
          var version = this.params_['VERSION'] || DEFAULT_WMS_VERSION;
          this.v13_ = compareVersions(version, '1.3') >= 0;
      };
      return TileWMS;
  }(TileImage));
  /**
   * @param {import("../tilecoord.js").TileCoord} tileCoord The tile coordinate
   * @param {number} pixelRatio The pixel ratio
   * @param {import("../proj/Projection.js").default} projection The projection
   * @return {string|undefined} The tile URL
   * @this {TileWMS}
   */
  function tileUrlFunction(tileCoord, pixelRatio, projection) {
      var tileGrid = this.getTileGrid();
      if (!tileGrid) {
          tileGrid = this.getTileGridForProjection(projection);
      }
      if (tileGrid.getResolutions().length <= tileCoord[0]) {
          return undefined;
      }
      if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {
          pixelRatio = 1;
      }
      var tileResolution = tileGrid.getResolution(tileCoord[0]);
      var tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);
      var tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);
      var gutter = this.gutter_;
      if (gutter !== 0) {
          tileSize = buffer$1(tileSize, gutter, this.tmpSize);
          tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);
      }
      if (pixelRatio != 1) {
          tileSize = scale$2(tileSize, pixelRatio, this.tmpSize);
      }
      var baseParams = {
          'SERVICE': 'WMS',
          'VERSION': DEFAULT_WMS_VERSION,
          'REQUEST': 'GetMap',
          'FORMAT': 'image/png',
          'TRANSPARENT': true
      };
      assign(baseParams, this.params_);
      return this.getRequestUrl_(tileCoord, tileSize, tileExtent, pixelRatio, projection, baseParams);
  }

  /**
   * @module ol/source/WMTSRequestEncoding
   */
  /**
   * Request encoding. One of 'KVP', 'REST'.
   * @enum {string}
   */
  var WMTSRequestEncoding = {
      KVP: 'KVP',
      REST: 'REST' // see spec Â§10
  };

  /**
   * @module ol/tilegrid/WMTS
   */
  var __extends$1y =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {Object} Options
   * @property {import("../extent.js").Extent} [extent] Extent for the tile grid. No tiles
   * outside this extent will be requested by {@link module:ol/source/Tile} sources.
   * When no `origin` or `origins` are configured, the `origin` will be set to the
   * top-left corner of the extent.
   * @property {import("../coordinate.js").Coordinate} [origin] The tile grid origin, i.e.
   * where the `x` and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left
   * to right and downwards. If not specified, `extent` or `origins` must be provided.
   * @property {Array<import("../coordinate.js").Coordinate>} [origins] Tile grid origins,
   * i.e. where the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If
   * given, the array length should match the length of the `resolutions` array, i.e.
   * each resolution can have a different origin. Tile coordinates increase left to
   * right and downwards. If not specified, `extent` or `origin` must be provided.
   * @property {!Array<number>} resolutions Resolutions. The array index of each
   * resolution needs to match the zoom level. This means that even if a `minZoom`
   * is configured, the resolutions array will have a length of `maxZoom + 1`
   * @property {!Array<string>} matrixIds matrix IDs. The length of this array needs
   * to match the length of the `resolutions` array.
   * @property {Array<import("../size.js").Size>} [sizes] Number of tile rows and columns
   * of the grid for each zoom level. The values here are the `TileMatrixWidth` and
   * `TileMatrixHeight` advertised in the GetCapabilities response of the WMTS, and
   * define each zoom level's extent together with the `origin` or `origins`.
   * A grid `extent` can be configured in addition, and will further limit the extent for
   * which tile requests are made by sources. If the bottom-left corner of
   * an extent is used as `origin` or `origins`, then the `y` value must be
   * negative because OpenLayers tile coordinates use the top left as the origin.
   * @property {number|import("../size.js").Size} [tileSize] Tile size.
   * @property {Array<import("../size.js").Size>} [tileSizes] Tile sizes. The length of
   * this array needs to match the length of the `resolutions` array.
   */
  /**
   * @classdesc
   * Set the grid pattern for sources accessing WMTS tiled-image servers.
   * @api
   */
  var WMTSTileGrid = /** @class */ (function (_super) {
      __extends$1y(WMTSTileGrid, _super);
      /**
       * @param {Options} options WMTS options.
       */
      function WMTSTileGrid(options) {
          var _this = _super.call(this, {
              extent: options.extent,
              origin: options.origin,
              origins: options.origins,
              resolutions: options.resolutions,
              tileSize: options.tileSize,
              tileSizes: options.tileSizes,
              sizes: options.sizes
          }) || this;
          /**
           * @private
           * @type {!Array<string>}
           */
          _this.matrixIds_ = options.matrixIds;
          return _this;
      }
      /**
       * @param {number} z Z.
       * @return {string} MatrixId..
       */
      WMTSTileGrid.prototype.getMatrixId = function (z) {
          return this.matrixIds_[z];
      };
      /**
       * Get the list of matrix identifiers.
       * @return {Array<string>} MatrixIds.
       * @api
       */
      WMTSTileGrid.prototype.getMatrixIds = function () {
          return this.matrixIds_;
      };
      return WMTSTileGrid;
  }(TileGrid));
  /**
   * Create a tile grid from a WMTS capabilities matrix set and an
   * optional TileMatrixSetLimits.
   * @param {Object} matrixSet An object representing a matrixSet in the
   *     capabilities document.
   * @param {import("../extent.js").Extent=} opt_extent An optional extent to restrict the tile
   *     ranges the server provides.
   * @param {Array<Object>=} opt_matrixLimits An optional object representing
   *     the available matrices for tileGrid.
   * @return {WMTSTileGrid} WMTS tileGrid instance.
   * @api
   */
  function createFromCapabilitiesMatrixSet(matrixSet, opt_extent, opt_matrixLimits) {
      /** @type {!Array<number>} */
      var resolutions = [];
      /** @type {!Array<string>} */
      var matrixIds = [];
      /** @type {!Array<import("../coordinate.js").Coordinate>} */
      var origins = [];
      /** @type {!Array<import("../size.js").Size>} */
      var tileSizes = [];
      /** @type {!Array<import("../size.js").Size>} */
      var sizes = [];
      var matrixLimits = opt_matrixLimits !== undefined ? opt_matrixLimits : [];
      var supportedCRSPropName = 'SupportedCRS';
      var matrixIdsPropName = 'TileMatrix';
      var identifierPropName = 'Identifier';
      var scaleDenominatorPropName = 'ScaleDenominator';
      var topLeftCornerPropName = 'TopLeftCorner';
      var tileWidthPropName = 'TileWidth';
      var tileHeightPropName = 'TileHeight';
      var code = matrixSet[supportedCRSPropName];
      var projection = get$4(code.replace(/urn:ogc:def:crs:(\w+):(.*:)?(\w+)$/, '$1:$3')) ||
          get$4(code);
      var metersPerUnit = projection.getMetersPerUnit();
      // swap origin x and y coordinates if axis orientation is lat/long
      var switchOriginXY = projection.getAxisOrientation().substr(0, 2) == 'ne';
      matrixSet[matrixIdsPropName].sort(function (a, b) {
          return b[scaleDenominatorPropName] - a[scaleDenominatorPropName];
      });
      matrixSet[matrixIdsPropName].forEach(function (elt) {
          var matrixAvailable;
          // use of matrixLimits to filter TileMatrices from GetCapabilities
          // TileMatrixSet from unavailable matrix levels.
          if (matrixLimits.length > 0) {
              matrixAvailable = find(matrixLimits, function (elt_ml) {
                  if (elt[identifierPropName] == elt_ml[matrixIdsPropName]) {
                      return true;
                  }
                  // Fallback for tileMatrix identifiers that don't get prefixed
                  // by their tileMatrixSet identifiers.
                  if (elt[identifierPropName].indexOf(':') === -1) {
                      return matrixSet[identifierPropName] + ':' + elt[identifierPropName] === elt_ml[matrixIdsPropName];
                  }
                  return false;
              });
          }
          else {
              matrixAvailable = true;
          }
          if (matrixAvailable) {
              matrixIds.push(elt[identifierPropName]);
              var resolution = elt[scaleDenominatorPropName] * 0.28E-3 / metersPerUnit;
              var tileWidth = elt[tileWidthPropName];
              var tileHeight = elt[tileHeightPropName];
              if (switchOriginXY) {
                  origins.push([elt[topLeftCornerPropName][1],
                      elt[topLeftCornerPropName][0]]);
              }
              else {
                  origins.push(elt[topLeftCornerPropName]);
              }
              resolutions.push(resolution);
              tileSizes.push(tileWidth == tileHeight ?
                  tileWidth : [tileWidth, tileHeight]);
              sizes.push([elt['MatrixWidth'], elt['MatrixHeight']]);
          }
      });
      return new WMTSTileGrid({
          extent: opt_extent,
          origins: origins,
          resolutions: resolutions,
          matrixIds: matrixIds,
          tileSizes: tileSizes,
          sizes: sizes
      });
  }

  /**
   * @module ol/source/WMTS
   */
  var __extends$1z =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {number} [cacheSize] Tile cache size. The default depends on the screen size. Will be ignored if too small.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {import("../tilegrid/WMTS.js").default} tileGrid Tile grid.
   * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
   * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
   * Higher values can increase reprojection performance, but decrease precision.
   * @property {import("./WMTSRequestEncoding.js").default|string} [requestEncoding='KVP'] Request encoding.
   * @property {string} layer Layer name as advertised in the WMTS capabilities.
   * @property {string} style Style name as advertised in the WMTS capabilities.
   * @property {typeof import("../ImageTile.js").default} [tileClass]  Class used to instantiate image tiles. Default is {@link module:ol/ImageTile~ImageTile}.
   * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.
   * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px
   * by 512px images (for retina/hidpi devices) then `tilePixelRatio`
   * should be set to `2`.
   * @property {string} [format='image/jpeg'] Image format. Only used when `requestEncoding` is `'KVP'`.
   * @property {string} [version='1.0.0'] WMTS version.
   * @property {string} matrixSet Matrix set.
   * @property {!Object} [dimensions] Additional "dimensions" for tile requests.
   * This is an object with properties named like the advertised WMTS dimensions.
   * @property {string} [url]  A URL for the service.
   * For the RESTful request encoding, this is a URL
   * template.  For KVP encoding, it is normal URL. A `{?-?}` template pattern,
   * for example `subdomain{a-f}.domain.com`, may be used instead of defining
   * each one separately in the `urls` option.
   * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
   * ```js
   * function(imageTile, src) {
   *   imageTile.getImage().src = src;
   * };
   * ```
   * @property {Array<string>} [urls] An array of URLs.
   * Requests will be distributed among the URLs in this array.
   * @property {boolean} [wrapX=false] Whether to wrap the world horizontally.
   * @property {number} [transition] Duration of the opacity transition for rendering.
   * To disable the opacity transition, pass `transition: 0`.
   */
  /**
   * @classdesc
   * Layer source for tile data from WMTS servers.
   * @api
   */
  var WMTS = /** @class */ (function (_super) {
      __extends$1z(WMTS, _super);
      /**
       * @param {Options} options WMTS options.
       */
      function WMTS(options) {
          // TODO: add support for TileMatrixLimits
          var _this = this;
          var requestEncoding = options.requestEncoding !== undefined ?
              /** @type {import("./WMTSRequestEncoding.js").default} */ (options.requestEncoding) :
              WMTSRequestEncoding.KVP;
          // FIXME: should we create a default tileGrid?
          // we could issue a getCapabilities xhr to retrieve missing configuration
          var tileGrid = options.tileGrid;
          var urls = options.urls;
          if (urls === undefined && options.url !== undefined) {
              urls = expandUrl(options.url);
          }
          _this = _super.call(this, {
              attributions: options.attributions,
              cacheSize: options.cacheSize,
              crossOrigin: options.crossOrigin,
              projection: options.projection,
              reprojectionErrorThreshold: options.reprojectionErrorThreshold,
              tileClass: options.tileClass,
              tileGrid: tileGrid,
              tileLoadFunction: options.tileLoadFunction,
              tilePixelRatio: options.tilePixelRatio,
              tileUrlFunction: nullTileUrlFunction,
              urls: urls,
              wrapX: options.wrapX !== undefined ? options.wrapX : false,
              transition: options.transition
          }) || this;
          /**
           * @private
           * @type {string}
           */
          _this.version_ = options.version !== undefined ? options.version : '1.0.0';
          /**
           * @private
           * @type {string}
           */
          _this.format_ = options.format !== undefined ? options.format : 'image/jpeg';
          /**
           * @private
           * @type {!Object}
           */
          _this.dimensions_ = options.dimensions !== undefined ? options.dimensions : {};
          /**
           * @private
           * @type {string}
           */
          _this.layer_ = options.layer;
          /**
           * @private
           * @type {string}
           */
          _this.matrixSet_ = options.matrixSet;
          /**
           * @private
           * @type {string}
           */
          _this.style_ = options.style;
          // FIXME: should we guess this requestEncoding from options.url(s)
          //        structure? that would mean KVP only if a template is not provided.
          /**
           * @private
           * @type {import("./WMTSRequestEncoding.js").default}
           */
          _this.requestEncoding_ = requestEncoding;
          _this.setKey(_this.getKeyForDimensions_());
          if (urls && urls.length > 0) {
              _this.tileUrlFunction = createFromTileUrlFunctions(urls.map(createFromWMTSTemplate.bind(_this)));
          }
          return _this;
      }
      /**
       * Set the URLs to use for requests.
       * URLs may contain OGC conform URL Template Variables: {TileMatrix}, {TileRow}, {TileCol}.
       * @override
       */
      WMTS.prototype.setUrls = function (urls) {
          this.urls = urls;
          var key = urls.join('\n');
          this.setTileUrlFunction(createFromTileUrlFunctions(urls.map(createFromWMTSTemplate.bind(this))), key);
      };
      /**
       * Get the dimensions, i.e. those passed to the constructor through the
       * "dimensions" option, and possibly updated using the updateDimensions
       * method.
       * @return {!Object} Dimensions.
       * @api
       */
      WMTS.prototype.getDimensions = function () {
          return this.dimensions_;
      };
      /**
       * Return the image format of the WMTS source.
       * @return {string} Format.
       * @api
       */
      WMTS.prototype.getFormat = function () {
          return this.format_;
      };
      /**
       * Return the layer of the WMTS source.
       * @return {string} Layer.
       * @api
       */
      WMTS.prototype.getLayer = function () {
          return this.layer_;
      };
      /**
       * Return the matrix set of the WMTS source.
       * @return {string} MatrixSet.
       * @api
       */
      WMTS.prototype.getMatrixSet = function () {
          return this.matrixSet_;
      };
      /**
       * Return the request encoding, either "KVP" or "REST".
       * @return {import("./WMTSRequestEncoding.js").default} Request encoding.
       * @api
       */
      WMTS.prototype.getRequestEncoding = function () {
          return this.requestEncoding_;
      };
      /**
       * Return the style of the WMTS source.
       * @return {string} Style.
       * @api
       */
      WMTS.prototype.getStyle = function () {
          return this.style_;
      };
      /**
       * Return the version of the WMTS source.
       * @return {string} Version.
       * @api
       */
      WMTS.prototype.getVersion = function () {
          return this.version_;
      };
      /**
       * @private
       * @return {string} The key for the current dimensions.
       */
      WMTS.prototype.getKeyForDimensions_ = function () {
          var i = 0;
          var res = [];
          for (var key in this.dimensions_) {
              res[i++] = key + '-' + this.dimensions_[key];
          }
          return res.join('/');
      };
      /**
       * Update the dimensions.
       * @param {Object} dimensions Dimensions.
       * @api
       */
      WMTS.prototype.updateDimensions = function (dimensions) {
          assign(this.dimensions_, dimensions);
          this.setKey(this.getKeyForDimensions_());
      };
      return WMTS;
  }(TileImage));
  /**
   * Generate source options from a capabilities object.
   * @param {Object} wmtsCap An object representing the capabilities document.
   * @param {!Object} config Configuration properties for the layer.  Defaults for
   *                  the layer will apply if not provided.
   *
   * Required config properties:
   *  - layer - {string} The layer identifier.
   *
   * Optional config properties:
   *  - matrixSet - {string} The matrix set identifier, required if there is
   *       more than one matrix set in the layer capabilities.
   *  - projection - {string} The desired CRS when no matrixSet is specified.
   *       eg: "EPSG:3857". If the desired projection is not available,
   *       an error is thrown.
   *  - requestEncoding - {string} url encoding format for the layer. Default is
   *       the first tile url format found in the GetCapabilities response.
   *  - style - {string} The name of the style
   *  - format - {string} Image format for the layer. Default is the first
   *       format returned in the GetCapabilities response.
   *  - crossOrigin - {string|null|undefined} Cross origin. Default is `undefined`.
   * @return {?Options} WMTS source options object or `null` if the layer was not found.
   * @api
   */
  function optionsFromCapabilities(wmtsCap, config) {
      var layers = wmtsCap['Contents']['Layer'];
      var l = find(layers, function (elt, index, array) {
          return elt['Identifier'] == config['layer'];
      });
      if (l === null) {
          return null;
      }
      var tileMatrixSets = wmtsCap['Contents']['TileMatrixSet'];
      var idx;
      if (l['TileMatrixSetLink'].length > 1) {
          if ('projection' in config) {
              idx = findIndex(l['TileMatrixSetLink'], function (elt, index, array) {
                  var tileMatrixSet = find(tileMatrixSets, function (el) {
                      return el['Identifier'] == elt['TileMatrixSet'];
                  });
                  var supportedCRS = tileMatrixSet['SupportedCRS'];
                  var proj1 = get$4(supportedCRS.replace(/urn:ogc:def:crs:(\w+):(.*:)?(\w+)$/, '$1:$3')) ||
                      get$4(supportedCRS);
                  var proj2 = get$4(config['projection']);
                  if (proj1 && proj2) {
                      return equivalent(proj1, proj2);
                  }
                  else {
                      return supportedCRS == config['projection'];
                  }
              });
          }
          else {
              idx = findIndex(l['TileMatrixSetLink'], function (elt, index, array) {
                  return elt['TileMatrixSet'] == config['matrixSet'];
              });
          }
      }
      else {
          idx = 0;
      }
      if (idx < 0) {
          idx = 0;
      }
      var matrixSet = /** @type {string} */ (l['TileMatrixSetLink'][idx]['TileMatrixSet']);
      var matrixLimits = /** @type {Array<Object>} */ (l['TileMatrixSetLink'][idx]['TileMatrixSetLimits']);
      var format = /** @type {string} */ (l['Format'][0]);
      if ('format' in config) {
          format = config['format'];
      }
      idx = findIndex(l['Style'], function (elt, index, array) {
          if ('style' in config) {
              return elt['Title'] == config['style'];
          }
          else {
              return elt['isDefault'];
          }
      });
      if (idx < 0) {
          idx = 0;
      }
      var style = /** @type {string} */ (l['Style'][idx]['Identifier']);
      var dimensions = {};
      if ('Dimension' in l) {
          l['Dimension'].forEach(function (elt, index, array) {
              var key = elt['Identifier'];
              var value = elt['Default'];
              if (value === undefined) {
                  value = elt['Value'][0];
              }
              dimensions[key] = value;
          });
      }
      var matrixSets = wmtsCap['Contents']['TileMatrixSet'];
      var matrixSetObj = find(matrixSets, function (elt, index, array) {
          return elt['Identifier'] == matrixSet;
      });
      var projection;
      var code = matrixSetObj['SupportedCRS'];
      if (code) {
          projection = get$4(code.replace(/urn:ogc:def:crs:(\w+):(.*:)?(\w+)$/, '$1:$3')) ||
              get$4(code);
      }
      if ('projection' in config) {
          var projConfig = get$4(config['projection']);
          if (projConfig) {
              if (!projection || equivalent(projConfig, projection)) {
                  projection = projConfig;
              }
          }
      }
      var wrapX = false;
      var matrix0 = matrixSetObj.TileMatrix[0];
      var resolution = matrix0.ScaleDenominator * 0.00028; // WMTS 1.0.0: standardized rendering pixel size
      var origin = projection === get$4('EPSG:4326')
          ? [matrix0.TopLeftCorner[1], matrix0.TopLeftCorner[0]]
          : matrix0.TopLeftCorner;
      var tileSpanX = matrix0.TileWidth * resolution;
      var tileSpanY = matrix0.TileHeight * resolution;
      var extent = [
          origin[0],
          origin[1] - tileSpanY * matrix0.MatrixHeight,
          origin[0] + tileSpanX * matrix0.MatrixWidth,
          origin[1]
      ];
      if (projection.getExtent() === null) {
          projection.setExtent(extent);
      }
      var tileGrid = createFromCapabilitiesMatrixSet(matrixSetObj, extent, matrixLimits);
      /** @type {!Array<string>} */
      var urls = [];
      var requestEncoding = config['requestEncoding'];
      requestEncoding = requestEncoding !== undefined ? requestEncoding : '';
      if ('OperationsMetadata' in wmtsCap && 'GetTile' in wmtsCap['OperationsMetadata']) {
          var gets = wmtsCap['OperationsMetadata']['GetTile']['DCP']['HTTP']['Get'];
          for (var i = 0, ii = gets.length; i < ii; ++i) {
              if (gets[i]['Constraint']) {
                  var constraint = find(gets[i]['Constraint'], function (element) {
                      return element['name'] == 'GetEncoding';
                  });
                  var encodings = constraint['AllowedValues']['Value'];
                  if (requestEncoding === '') {
                      // requestEncoding not provided, use the first encoding from the list
                      requestEncoding = encodings[0];
                  }
                  if (requestEncoding === WMTSRequestEncoding.KVP) {
                      if (includes(encodings, WMTSRequestEncoding.KVP)) {
                          urls.push(/** @type {string} */ (gets[i]['href']));
                      }
                  }
                  else {
                      break;
                  }
              }
              else if (gets[i]['href']) {
                  requestEncoding = WMTSRequestEncoding.KVP;
                  urls.push(/** @type {string} */ (gets[i]['href']));
              }
          }
      }
      if (urls.length === 0) {
          requestEncoding = WMTSRequestEncoding.REST;
          l['ResourceURL'].forEach(function (element) {
              if (element['resourceType'] === 'tile') {
                  format = element['format'];
                  urls.push(/** @type {string} */ (element['template']));
              }
          });
      }
      return {
          urls: urls,
          layer: config['layer'],
          matrixSet: matrixSet,
          format: format,
          projection: projection,
          requestEncoding: requestEncoding,
          tileGrid: tileGrid,
          style: style,
          dimensions: dimensions,
          wrapX: wrapX,
          crossOrigin: config['crossOrigin']
      };
  }
  /**
   * @param {string} template Template.
   * @return {import("../Tile.js").UrlFunction} Tile URL function.
   * @this {WMTS}
   */
  function createFromWMTSTemplate(template) {
      var requestEncoding = this.requestEncoding_;
      // context property names are lower case to allow for a case insensitive
      // replacement as some services use different naming conventions
      var context = {
          'layer': this.layer_,
          'style': this.style_,
          'tilematrixset': this.matrixSet_
      };
      if (requestEncoding == WMTSRequestEncoding.KVP) {
          assign(context, {
              'Service': 'WMTS',
              'Request': 'GetTile',
              'Version': this.version_,
              'Format': this.format_
          });
      }
      // TODO: we may want to create our own appendParams function so that params
      // order conforms to wmts spec guidance, and so that we can avoid to escape
      // special template params
      template = (requestEncoding == WMTSRequestEncoding.KVP) ?
          appendParams(template, context) :
          template.replace(/\{(\w+?)\}/g, function (m, p) {
              return (p.toLowerCase() in context) ? context[p.toLowerCase()] : m;
          });
      var tileGrid = /** @type {import("../tilegrid/WMTS.js").default} */ (this.tileGrid);
      var dimensions = this.dimensions_;
      return (
      /**
       * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
       * @param {number} pixelRatio Pixel ratio.
       * @param {import("../proj/Projection.js").default} projection Projection.
       * @return {string|undefined} Tile URL.
       */
      function (tileCoord, pixelRatio, projection) {
          if (!tileCoord) {
              return undefined;
          }
          else {
              var localContext_1 = {
                  'TileMatrix': tileGrid.getMatrixId(tileCoord[0]),
                  'TileCol': tileCoord[1],
                  'TileRow': tileCoord[2]
              };
              assign(localContext_1, dimensions);
              var url = template;
              if (requestEncoding == WMTSRequestEncoding.KVP) {
                  url = appendParams(url, localContext_1);
              }
              else {
                  url = url.replace(/\{(\w+?)\}/g, function (m, p) {
                      return localContext_1[p];
                  });
              }
              return url;
          }
      });
  }

  /**
   * @module ol/source/XYZ
   */
  var __extends$1A =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
   * @property {number} [cacheSize] Tile cache size. The default depends on the screen size. Will be ignored if too small.
   * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {boolean} [opaque=true] Whether the layer is opaque.
   * @property {import("../proj.js").ProjectionLike} [projection='EPSG:3857'] Projection.
   * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
   * Higher values can increase reprojection performance, but decrease precision.
   * @property {number} [maxZoom=42] Optional max zoom level. Not used if `tileGrid` is provided.
   * @property {number} [minZoom=0] Optional min zoom level. Not used if `tileGrid` is provided.
   * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.
   * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] Tile grid.
   * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
   * ```js
   * function(imageTile, src) {
   *   imageTile.getImage().src = src;
   * };
   * ```
   * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.
   * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px
   * by 512px images (for retina/hidpi devices) then `tilePixelRatio`
   * should be set to `2`.
   * @property {number|import("../size.js").Size} [tileSize=[256, 256]] The tile size used by the tile service.
   * Not used if `tileGrid` is provided.
   * @property {import("../Tile.js").UrlFunction} [tileUrlFunction] Optional function to get
   * tile URL given a tile coordinate and the projection.
   * Required if `url` or `urls` are not provided.
   * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`,
   * and `{z}` placeholders. A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`,
   * may be used instead of defining each one separately in the `urls` option.
   * @property {Array<string>} [urls] An array of URL templates.
   * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
   * @property {number} [transition] Duration of the opacity transition for rendering.
   * To disable the opacity transition, pass `transition: 0`.
   * @property {number} [zDirection=0] Indicate which resolution should be used
   * by a renderer if the view resolution does not match any resolution of the tile source.
   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
   * will be used. If -1, the nearest higher resolution will be used.
   */
  /**
   * @classdesc
   * Layer source for tile data with URLs in a set XYZ format that are
   * defined in a URL template. By default, this follows the widely-used
   * Google grid where `x` 0 and `y` 0 are in the top left. Grids like
   * TMS where `x` 0 and `y` 0 are in the bottom left can be used by
   * using the `{-y}` placeholder in the URL template, so long as the
   * source does not have a custom tile grid. In this case,
   * {@link module:ol/source/TileImage} can be used with a `tileUrlFunction`
   * such as:
   *
   *  tileUrlFunction: function(coordinate) {
   *    return 'http://mapserver.com/' + coordinate[0] + '/' +
   *        coordinate[1] + '/' + coordinate[2] + '.png';
   *    }
   *
   * @api
   */
  var XYZ = /** @class */ (function (_super) {
      __extends$1A(XYZ, _super);
      /**
       * @param {Options=} opt_options XYZ options.
       */
      function XYZ(opt_options) {
          var _this = this;
          var options = opt_options || {};
          var projection = options.projection !== undefined ?
              options.projection : 'EPSG:3857';
          var tileGrid = options.tileGrid !== undefined ? options.tileGrid :
              createXYZ({
                  extent: extentFromProjection(projection),
                  maxResolution: options.maxResolution,
                  maxZoom: options.maxZoom,
                  minZoom: options.minZoom,
                  tileSize: options.tileSize
              });
          _this = _super.call(this, {
              attributions: options.attributions,
              cacheSize: options.cacheSize,
              crossOrigin: options.crossOrigin,
              opaque: options.opaque,
              projection: projection,
              reprojectionErrorThreshold: options.reprojectionErrorThreshold,
              tileGrid: tileGrid,
              tileLoadFunction: options.tileLoadFunction,
              tilePixelRatio: options.tilePixelRatio,
              tileUrlFunction: options.tileUrlFunction,
              url: options.url,
              urls: options.urls,
              wrapX: options.wrapX !== undefined ? options.wrapX : true,
              transition: options.transition,
              attributionsCollapsible: options.attributionsCollapsible,
              zDirection: options.zDirection
          }) || this;
          return _this;
      }
      return XYZ;
  }(TileImage));

  /**
   * @module ol/source/OSM
   */
  var __extends$1B =  (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  /**
   * The attribution containing a link to the OpenStreetMap Copyright and License
   * page.
   * @const
   * @type {string}
   * @api
   */
  var ATTRIBUTION = '&#169; ' +
      '<a href="https://www.openstreetmap.org/copyright" target="_blank">OpenStreetMap</a> ' +
      'contributors.';
  /**
   * @typedef {Object} Options
   * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
   * @property {number} [cacheSize] Tile cache size. The default depends on the screen size. Will be ignored if too small.
   * @property {null|string} [crossOrigin='anonymous'] The `crossOrigin` attribute for loaded images.  Note that
   * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
   * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
   * @property {number} [maxZoom=19] Max zoom.
   * @property {boolean} [opaque=true] Whether the layer is opaque.
   * @property {number} [reprojectionErrorThreshold=1.5] Maximum allowed reprojection error (in pixels).
   * Higher values can increase reprojection performance, but decrease precision.
   * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
   * ```js
   * function(imageTile, src) {
   *   imageTile.getImage().src = src;
   * };
   * ```
   * @property {string} [url='https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png'] URL template.
   * Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
   * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
   */
  /**
   * @classdesc
   * Layer source for the OpenStreetMap tile server.
   * @api
   */
  var OSM = /** @class */ (function (_super) {
      __extends$1B(OSM, _super);
      /**
       * @param {Options=} [opt_options] Open Street Map options.
       */
      function OSM(opt_options) {
          var _this = this;
          var options = opt_options || {};
          var attributions;
          if (options.attributions !== undefined) {
              attributions = options.attributions;
          }
          else {
              attributions = [ATTRIBUTION];
          }
          var crossOrigin = options.crossOrigin !== undefined ?
              options.crossOrigin : 'anonymous';
          var url = options.url !== undefined ?
              options.url : 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png';
          _this = _super.call(this, {
              attributions: attributions,
              cacheSize: options.cacheSize,
              crossOrigin: crossOrigin,
              opaque: options.opaque !== undefined ? options.opaque : true,
              maxZoom: options.maxZoom !== undefined ? options.maxZoom : 19,
              reprojectionErrorThreshold: options.reprojectionErrorThreshold,
              tileLoadFunction: options.tileLoadFunction,
              url: url,
              wrapX: options.wrapX,
              attributionsCollapsible: false
          }) || this;
          return _this;
      }
      return OSM;
  }(XYZ));

  /**
   *
   */

  var SourceCreator = /*#__PURE__*/function () {
    function SourceCreator() {
      _classCallCheck(this, SourceCreator);
    }

    _createClass(SourceCreator, null, [{
      key: "wms",

      /**
       *
       * @param options
       * @param layer
       * @returns {TileWMS|null}
       */
      value: function wms(layer, options) {
        var source = options.sources[layer.source];

        if (source == null) {
          return null;
        } // Todo: handle also non-zero indexes


        var url = source.tiles[0];
        var queryUrl = new url_min(url);
        var params = Object.keys(queryUrl.query).reduce(function (upperCased, key) {
          upperCased[typeof key === 'string' ? key.toUpperCase() : key] = queryUrl.query[key];
          return upperCased;
        }, {});
        Object.keys(layer.url).forEach(function (key) {
          params[key.toUpperCase()] = layer.url[key].toString();
        });
        var timeDefined = layer.time != null && layer.time.data != null && layer.time.data.includes(options.time);

        if (timeDefined) {
          params.TIME = new Date(options.time).toISOString();
        }

        var olSource = new TileWMS({
          url: getBaseUrl(url),
          params: params,
          tileGrid: new TileGrid({
            extent: source.bounds != null ? source.bounds : get(options.projection).getExtent(),
            resolutions: options.resolutions,
            tileSize: source.tileSize != null ? source.tileSize : DEFAULT_TILESIZE
          }),
          transition: 0
        });
        olSource.set('metoclient:olClassName', 'TileWMS');

        if (timeDefined) {
          olSource.set('metoclient:time', options.time);
        }

        return olSource;
      }
      /**
       *
       * @param options
       * @param layer
       * @param capabilities
       * @returns {null|WMTS}
       */

    }, {
      key: "wmts",
      value: function wmts(layer, options, capabilities) {
        var source = options.sources[layer.source];

        if (source == null || capabilities.type !== 'wmts') {
          return null;
        }

        var sourceOptions = optionsFromCapabilities(capabilities.data, {
          // Todo: support all config options
          layer: layer.url.layer,
          matrixSet: layer.url.tilematrixset
        });

        if (sourceOptions == null) {
          return null;
        }

        var timeDefined = layer.time != null && layer.time.data.includes(options.time);

        if (timeDefined) {
          sourceOptions.tileLoadFunction = function (imageTile, src) {
            imageTile.getImage().src = "".concat(src, "&Time=").concat(new Date(options.time).toISOString());
          };
        }

        sourceOptions.transition = 0;
        var olSource = new WMTS(sourceOptions);
        olSource.set('metoclient:olClassName', 'WMTS');

        if (timeDefined != null) {
          olSource.set('metoclient:time', options.time);
        }

        return olSource;
      }
      /**
       *
       * @param options
       * @returns {OSM}
       */

    }, {
      key: "osm",
      value: function osm(options) {
        return new OSM(options);
      }
    }]);

    return SourceCreator;
  }();

  /**
   * Class abstracting layer creators for different layer types.
   */

  var LayerCreator = /*#__PURE__*/function () {
    function LayerCreator() {
      _classCallCheck(this, LayerCreator);
    }

    _createClass(LayerCreator, null, [{
      key: "tiled",

      /**
       * Create a tiled layer based on given configurations.
       *
       * @param {object} layer Layer configuration.
       * @param {object} options General options.
       * @param {object} capabilities Capabilities data.
       * @returns {null | object} Layer.
       */
      value: function tiled(layer, options, capabilities) {
        if (layer == null) {
          return null;
        }

        var sourceOptions = options.sources[layer.source];

        if (sourceOptions == null) {
          return null;
        }

        var service;
        var serviceAvailable = false;

        if (sourceOptions.type != null) {
          service = sourceOptions.type.toLowerCase();
          serviceAvailable = typeof SourceCreator[service] === 'function';
        }

        if (!serviceAvailable && layer.url != null && layer.url.service) {
          service = layer.url.service.toLowerCase();
          serviceAvailable = typeof SourceCreator[service] === 'function';
        }

        if (!serviceAvailable) {
          return null;
        }

        var source = SourceCreator[service](layer, options, capabilities);

        if (source == null) {
          return null;
        }

        return new TileLayer({
          source: source,
          extent: source.bounds,
          preload: 0,
          visible: layer.visibility !== NOT_VISIBLE,
          opacity: 0,
          type: layer.metadata && layer.metadata.type ? layer.metadata.type : '',
          title: layer.metadata && layer.metadata.title ? layer.metadata.title : '',
          previous: getAdjacentLayer('previous', layer, options.layers),
          next: getAdjacentLayer('next', layer, options.layers),
          legendTitle: layer.legendTitle,
          id: layer.id,
          legendUrl: layer.url != null ? getLegendUrl(layer.url.layers, layer.url.styles, capabilities) : null
        });
      }
      /**
       * Create an image layer based on given configurations.
       *
       * @param {object} layer Layer configuration.
       * @param {object} options General options.
       * @returns {null | object} Layer.
       */

    }, {
      key: "image",
      value: function image(layer, options, capabilities) {
        var source = options.sources[layer.source];

        if (source == null || source.tiles[0] == null || source.tiles[0].length === 0) {
          return null;
        } // Todo: handle also non-zero indexes
        // Todo: add more options


        var url = getBaseUrl(source.tiles[0]);
        var timeDefined = layer.time != null && layer.time.data.includes(options.time);

        var layerUrl = _objectSpread2({}, layer.url);

        if (timeDefined) {
          var timeFormatted = new Date(options.time).toISOString();
          layerUrl.TIME = timeFormatted;
        }

        var olSource = new ImageWMS({
          url: url,
          params: layerUrl
        });

        if (timeDefined) {
          olSource.set('metoclient:time', options.time);
        }

        return new ImageLayer({
          source: olSource,
          extent: source.bounds,
          // Todo: use same code with tiled and image layer options
          preload: 0,
          visible: layer.visibility !== NOT_VISIBLE,
          opacity: 0,
          type: layer.metadata && layer.metadata.type ? layer.metadata.type : '',
          title: layer.metadata && layer.metadata.title ? layer.metadata.title : '',
          previous: getAdjacentLayer('previous', layer, options.layers),
          next: getAdjacentLayer('next', layer, options.layers),
          legendTitle: layer.legendTitle,
          id: layer.id,
          legendUrl: getLegendUrl(layer.url.layer, layer.url.style, capabilities)
        });
      }
    }]);

    return LayerCreator;
  }();

  var trim$1 = stringTrim.trim;


  var $parseInt = global_1.parseInt;
  var hex = /^[+-]?0[Xx]/;
  var FORCED$4 = $parseInt(whitespaces + '08') !== 8 || $parseInt(whitespaces + '0x16') !== 22;

  // `parseInt` method
  // https://tc39.github.io/ecma262/#sec-parseint-string-radix
  var numberParseInt = FORCED$4 ? function parseInt(string, radix) {
    var S = trim$1(String(string));
    return $parseInt(S, (radix >>> 0) || (hex.test(S) ? 16 : 10));
  } : $parseInt;

  // `Number.parseInt` method
  // https://tc39.github.io/ecma262/#sec-number.parseint
  _export({ target: 'Number', stat: true, forced: Number.parseInt != numberParseInt }, {
    parseInt: numberParseInt
  });

  var is = createCommonjsModule(function (module, exports) {
  /**
   * Check if argument is a HTML element.
   *
   * @param {Object} value
   * @return {Boolean}
   */
  exports.node = function(value) {
      return value !== undefined
          && value instanceof HTMLElement
          && value.nodeType === 1;
  };

  /**
   * Check if argument is a list of HTML elements.
   *
   * @param {Object} value
   * @return {Boolean}
   */
  exports.nodeList = function(value) {
      var type = Object.prototype.toString.call(value);

      return value !== undefined
          && (type === '[object NodeList]' || type === '[object HTMLCollection]')
          && ('length' in value)
          && (value.length === 0 || exports.node(value[0]));
  };

  /**
   * Check if argument is a string.
   *
   * @param {Object} value
   * @return {Boolean}
   */
  exports.string = function(value) {
      return typeof value === 'string'
          || value instanceof String;
  };

  /**
   * Check if argument is a function.
   *
   * @param {Object} value
   * @return {Boolean}
   */
  exports.fn = function(value) {
      var type = Object.prototype.toString.call(value);

      return type === '[object Function]';
  };
  });
  var is_1 = is.node;
  var is_2 = is.nodeList;
  var is_3 = is.string;
  var is_4 = is.fn;

  var DOCUMENT_NODE_TYPE = 9;

  /**
   * A polyfill for Element.matches()
   */
  if (typeof Element !== 'undefined' && !Element.prototype.matches) {
      var proto = Element.prototype;

      proto.matches = proto.matchesSelector ||
                      proto.mozMatchesSelector ||
                      proto.msMatchesSelector ||
                      proto.oMatchesSelector ||
                      proto.webkitMatchesSelector;
  }

  /**
   * Finds the closest parent that matches a selector.
   *
   * @param {Element} element
   * @param {String} selector
   * @return {Function}
   */
  function closest (element, selector) {
      while (element && element.nodeType !== DOCUMENT_NODE_TYPE) {
          if (typeof element.matches === 'function' &&
              element.matches(selector)) {
            return element;
          }
          element = element.parentNode;
      }
  }

  var closest_1 = closest;

  /**
   * Delegates event to a selector.
   *
   * @param {Element} element
   * @param {String} selector
   * @param {String} type
   * @param {Function} callback
   * @param {Boolean} useCapture
   * @return {Object}
   */
  function _delegate(element, selector, type, callback, useCapture) {
      var listenerFn = listener$1.apply(this, arguments);

      element.addEventListener(type, listenerFn, useCapture);

      return {
          destroy: function() {
              element.removeEventListener(type, listenerFn, useCapture);
          }
      }
  }

  /**
   * Delegates event to a selector.
   *
   * @param {Element|String|Array} [elements]
   * @param {String} selector
   * @param {String} type
   * @param {Function} callback
   * @param {Boolean} useCapture
   * @return {Object}
   */
  function delegate(elements, selector, type, callback, useCapture) {
      // Handle the regular Element usage
      if (typeof elements.addEventListener === 'function') {
          return _delegate.apply(null, arguments);
      }

      // Handle Element-less usage, it defaults to global delegation
      if (typeof type === 'function') {
          // Use `document` as the first parameter, then apply arguments
          // This is a short way to .unshift `arguments` without running into deoptimizations
          return _delegate.bind(null, document).apply(null, arguments);
      }

      // Handle Selector-based usage
      if (typeof elements === 'string') {
          elements = document.querySelectorAll(elements);
      }

      // Handle Array-like based usage
      return Array.prototype.map.call(elements, function (element) {
          return _delegate(element, selector, type, callback, useCapture);
      });
  }

  /**
   * Finds closest match and invokes callback.
   *
   * @param {Element} element
   * @param {String} selector
   * @param {String} type
   * @param {Function} callback
   * @return {Function}
   */
  function listener$1(element, selector, type, callback) {
      return function(e) {
          e.delegateTarget = closest_1(e.target, selector);

          if (e.delegateTarget) {
              callback.call(element, e);
          }
      }
  }

  var delegate_1 = delegate;

  /**
   * Validates all params and calls the right
   * listener function based on its target type.
   *
   * @param {String|HTMLElement|HTMLCollection|NodeList} target
   * @param {String} type
   * @param {Function} callback
   * @return {Object}
   */
  function listen$1(target, type, callback) {
      if (!target && !type && !callback) {
          throw new Error('Missing required arguments');
      }

      if (!is.string(type)) {
          throw new TypeError('Second argument must be a String');
      }

      if (!is.fn(callback)) {
          throw new TypeError('Third argument must be a Function');
      }

      if (is.node(target)) {
          return listenNode(target, type, callback);
      }
      else if (is.nodeList(target)) {
          return listenNodeList(target, type, callback);
      }
      else if (is.string(target)) {
          return listenSelector(target, type, callback);
      }
      else {
          throw new TypeError('First argument must be a String, HTMLElement, HTMLCollection, or NodeList');
      }
  }

  /**
   * Adds an event listener to a HTML element
   * and returns a remove listener function.
   *
   * @param {HTMLElement} node
   * @param {String} type
   * @param {Function} callback
   * @return {Object}
   */
  function listenNode(node, type, callback) {
      node.addEventListener(type, callback);

      return {
          destroy: function() {
              node.removeEventListener(type, callback);
          }
      }
  }

  /**
   * Add an event listener to a list of HTML elements
   * and returns a remove listener function.
   *
   * @param {NodeList|HTMLCollection} nodeList
   * @param {String} type
   * @param {Function} callback
   * @return {Object}
   */
  function listenNodeList(nodeList, type, callback) {
      Array.prototype.forEach.call(nodeList, function(node) {
          node.addEventListener(type, callback);
      });

      return {
          destroy: function() {
              Array.prototype.forEach.call(nodeList, function(node) {
                  node.removeEventListener(type, callback);
              });
          }
      }
  }

  /**
   * Add an event listener to a selector
   * and returns a remove listener function.
   *
   * @param {String} selector
   * @param {String} type
   * @param {Function} callback
   * @return {Object}
   */
  function listenSelector(selector, type, callback) {
      return delegate_1(document.body, selector, type, callback);
  }

  var listen_1 = listen$1;

  var collectionUtils = createCommonjsModule(function (module) {

  var utils = module.exports = {};

  /**
   * Loops through the collection and calls the callback for each element. if the callback returns truthy, the loop is broken and returns the same value.
   * @public
   * @param {*} collection The collection to loop through. Needs to have a length property set and have indices set from 0 to length - 1.
   * @param {function} callback The callback to be called for each element. The element will be given as a parameter to the callback. If this callback returns truthy, the loop is broken and the same value is returned.
   * @returns {*} The value that a callback has returned (if truthy). Otherwise nothing.
   */
  utils.forEach = function(collection, callback) {
      for(var i = 0; i < collection.length; i++) {
          var result = callback(collection[i]);
          if(result) {
              return result;
          }
      }
  };
  });

  var elementUtils = function(options) {
      var getState = options.stateHandler.getState;

      /**
       * Tells if the element has been made detectable and ready to be listened for resize events.
       * @public
       * @param {element} The element to check.
       * @returns {boolean} True or false depending on if the element is detectable or not.
       */
      function isDetectable(element) {
          var state = getState(element);
          return state && !!state.isDetectable;
      }

      /**
       * Marks the element that it has been made detectable and ready to be listened for resize events.
       * @public
       * @param {element} The element to mark.
       */
      function markAsDetectable(element) {
          getState(element).isDetectable = true;
      }

      /**
       * Tells if the element is busy or not.
       * @public
       * @param {element} The element to check.
       * @returns {boolean} True or false depending on if the element is busy or not.
       */
      function isBusy(element) {
          return !!getState(element).busy;
      }

      /**
       * Marks the object is busy and should not be made detectable.
       * @public
       * @param {element} element The element to mark.
       * @param {boolean} busy If the element is busy or not.
       */
      function markBusy(element, busy) {
          getState(element).busy = !!busy;
      }

      return {
          isDetectable: isDetectable,
          markAsDetectable: markAsDetectable,
          isBusy: isBusy,
          markBusy: markBusy
      };
  };

  var listenerHandler = function(idHandler) {
      var eventListeners = {};

      /**
       * Gets all listeners for the given element.
       * @public
       * @param {element} element The element to get all listeners for.
       * @returns All listeners for the given element.
       */
      function getListeners(element) {
          var id = idHandler.get(element);

          if (id === undefined) {
              return [];
          }

          return eventListeners[id] || [];
      }

      /**
       * Stores the given listener for the given element. Will not actually add the listener to the element.
       * @public
       * @param {element} element The element that should have the listener added.
       * @param {function} listener The callback that the element has added.
       */
      function addListener(element, listener) {
          var id = idHandler.get(element);

          if(!eventListeners[id]) {
              eventListeners[id] = [];
          }

          eventListeners[id].push(listener);
      }

      function removeListener(element, listener) {
          var listeners = getListeners(element);
          for (var i = 0, len = listeners.length; i < len; ++i) {
              if (listeners[i] === listener) {
                listeners.splice(i, 1);
                break;
              }
          }
      }

      function removeAllListeners(element) {
        var listeners = getListeners(element);
        if (!listeners) { return; }
        listeners.length = 0;
      }

      return {
          get: getListeners,
          add: addListener,
          removeListener: removeListener,
          removeAllListeners: removeAllListeners
      };
  };

  var idGenerator = function() {
      var idCount = 1;

      /**
       * Generates a new unique id in the context.
       * @public
       * @returns {number} A unique id in the context.
       */
      function generate() {
          return idCount++;
      }

      return {
          generate: generate
      };
  };

  var idHandler = function(options) {
      var idGenerator     = options.idGenerator;
      var getState        = options.stateHandler.getState;

      /**
       * Gets the resize detector id of the element.
       * @public
       * @param {element} element The target element to get the id of.
       * @returns {string|number|null} The id of the element. Null if it has no id.
       */
      function getId(element) {
          var state = getState(element);

          if (state && state.id !== undefined) {
              return state.id;
          }

          return null;
      }

      /**
       * Sets the resize detector id of the element. Requires the element to have a resize detector state initialized.
       * @public
       * @param {element} element The target element to set the id of.
       * @returns {string|number|null} The id of the element.
       */
      function setId(element) {
          var state = getState(element);

          if (!state) {
              throw new Error("setId required the element to have a resize detection state.");
          }

          var id = idGenerator.generate();

          state.id = id;

          return id;
      }

      return {
          get: getId,
          set: setId
      };
  };

  /* global console: false */

  /**
   * Reporter that handles the reporting of logs, warnings and errors.
   * @public
   * @param {boolean} quiet Tells if the reporter should be quiet or not.
   */
  var reporter = function(quiet) {
      function noop() {
          //Does nothing.
      }

      var reporter = {
          log: noop,
          warn: noop,
          error: noop
      };

      if(!quiet && window.console) {
          var attachFunction = function(reporter, name) {
              //The proxy is needed to be able to call the method with the console context,
              //since we cannot use bind.
              reporter[name] = function reporterProxy() {
                  var f = console[name];
                  if (f.apply) { //IE9 does not support console.log.apply :)
                      f.apply(console, arguments);
                  } else {
                      for (var i = 0; i < arguments.length; i++) {
                          f(arguments[i]);
                      }
                  }
              };
          };

          attachFunction(reporter, "log");
          attachFunction(reporter, "warn");
          attachFunction(reporter, "error");
      }

      return reporter;
  };

  var browserDetector = createCommonjsModule(function (module) {

  var detector = module.exports = {};

  detector.isIE = function(version) {
      function isAnyIeVersion() {
          var agent = navigator.userAgent.toLowerCase();
          return agent.indexOf("msie") !== -1 || agent.indexOf("trident") !== -1 || agent.indexOf(" edge/") !== -1;
      }

      if(!isAnyIeVersion()) {
          return false;
      }

      if(!version) {
          return true;
      }

      //Shamelessly stolen from https://gist.github.com/padolsey/527683
      var ieVersion = (function(){
          var undef,
              v = 3,
              div = document.createElement("div"),
              all = div.getElementsByTagName("i");

          do {
              div.innerHTML = "<!--[if gt IE " + (++v) + "]><i></i><![endif]-->";
          }
          while (all[0]);

          return v > 4 ? v : undef;
      }());

      return version === ieVersion;
  };

  detector.isLegacyOpera = function() {
      return !!window.opera;
  };
  });

  var utils_1 = createCommonjsModule(function (module) {

  var utils = module.exports = {};

  utils.getOption = getOption;

  function getOption(options, name, defaultValue) {
      var value = options[name];

      if((value === undefined || value === null) && defaultValue !== undefined) {
          return defaultValue;
      }

      return value;
  }
  });

  var batchProcessor = function batchProcessorMaker(options) {
      options             = options || {};
      var reporter        = options.reporter;
      var asyncProcess    = utils_1.getOption(options, "async", true);
      var autoProcess     = utils_1.getOption(options, "auto", true);

      if(autoProcess && !asyncProcess) {
          reporter && reporter.warn("Invalid options combination. auto=true and async=false is invalid. Setting async=true.");
          asyncProcess = true;
      }

      var batch = Batch();
      var asyncFrameHandler;
      var isProcessing = false;

      function addFunction(level, fn) {
          if(!isProcessing && autoProcess && asyncProcess && batch.size() === 0) {
              // Since this is async, it is guaranteed to be executed after that the fn is added to the batch.
              // This needs to be done before, since we're checking the size of the batch to be 0.
              processBatchAsync();
          }

          batch.add(level, fn);
      }

      function processBatch() {
          // Save the current batch, and create a new batch so that incoming functions are not added into the currently processing batch.
          // Continue processing until the top-level batch is empty (functions may be added to the new batch while processing, and so on).
          isProcessing = true;
          while (batch.size()) {
              var processingBatch = batch;
              batch = Batch();
              processingBatch.process();
          }
          isProcessing = false;
      }

      function forceProcessBatch(localAsyncProcess) {
          if (isProcessing) {
              return;
          }

          if(localAsyncProcess === undefined) {
              localAsyncProcess = asyncProcess;
          }

          if(asyncFrameHandler) {
              cancelFrame(asyncFrameHandler);
              asyncFrameHandler = null;
          }

          if(localAsyncProcess) {
              processBatchAsync();
          } else {
              processBatch();
          }
      }

      function processBatchAsync() {
          asyncFrameHandler = requestFrame(processBatch);
      }

      function cancelFrame(listener) {
          // var cancel = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.clearTimeout;
          var cancel = clearTimeout;
          return cancel(listener);
      }

      function requestFrame(callback) {
          // var raf = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || function(fn) { return window.setTimeout(fn, 20); };
          var raf = function(fn) { return setTimeout(fn, 0); };
          return raf(callback);
      }

      return {
          add: addFunction,
          force: forceProcessBatch
      };
  };

  function Batch() {
      var batch       = {};
      var size        = 0;
      var topLevel    = 0;
      var bottomLevel = 0;

      function add(level, fn) {
          if(!fn) {
              fn = level;
              level = 0;
          }

          if(level > topLevel) {
              topLevel = level;
          } else if(level < bottomLevel) {
              bottomLevel = level;
          }

          if(!batch[level]) {
              batch[level] = [];
          }

          batch[level].push(fn);
          size++;
      }

      function process() {
          for(var level = bottomLevel; level <= topLevel; level++) {
              var fns = batch[level];

              for(var i = 0; i < fns.length; i++) {
                  var fn = fns[i];
                  fn();
              }
          }
      }

      function getSize() {
          return size;
      }

      return {
          add: add,
          process: process,
          size: getSize
      };
  }

  var prop = "_erd";

  function initState(element) {
      element[prop] = {};
      return getState(element);
  }

  function getState(element) {
      return element[prop];
  }

  function cleanState(element) {
      delete element[prop];
  }

  var stateHandler = {
      initState: initState,
      getState: getState,
      cleanState: cleanState
  };

  var object = function(options) {
      options             = options || {};
      var reporter        = options.reporter;
      var batchProcessor  = options.batchProcessor;
      var getState        = options.stateHandler.getState;

      if(!reporter) {
          throw new Error("Missing required dependency: reporter.");
      }

      /**
       * Adds a resize event listener to the element.
       * @public
       * @param {element} element The element that should have the listener added.
       * @param {function} listener The listener callback to be called for each resize event of the element. The element will be given as a parameter to the listener callback.
       */
      function addListener(element, listener) {
          function listenerProxy() {
              listener(element);
          }

          if(browserDetector.isIE(8)) {
              //IE 8 does not support object, but supports the resize event directly on elements.
              getState(element).object = {
                  proxy: listenerProxy
              };
              element.attachEvent("onresize", listenerProxy);
          } else {
              var object = getObject(element);

              if(!object) {
                  throw new Error("Element is not detectable by this strategy.");
              }

              object.contentDocument.defaultView.addEventListener("resize", listenerProxy);
          }
      }

      function buildCssTextString(rules) {
          var seperator = options.important ? " !important; " : "; ";

          return (rules.join(seperator) + seperator).trim();
      }

      /**
       * Makes an element detectable and ready to be listened for resize events. Will call the callback when the element is ready to be listened for resize changes.
       * @private
       * @param {object} options Optional options object.
       * @param {element} element The element to make detectable
       * @param {function} callback The callback to be called when the element is ready to be listened for resize changes. Will be called with the element as first parameter.
       */
      function makeDetectable(options, element, callback) {
          if (!callback) {
              callback = element;
              element = options;
              options = null;
          }

          options = options || {};
          var debug = options.debug;

          function injectObject(element, callback) {
              var OBJECT_STYLE = buildCssTextString(["display: block", "position: absolute", "top: 0", "left: 0", "width: 100%", "height: 100%", "border: none", "padding: 0", "margin: 0", "opacity: 0", "z-index: -1000", "pointer-events: none"]);

              //The target element needs to be positioned (everything except static) so the absolute positioned object will be positioned relative to the target element.

              // Position altering may be performed directly or on object load, depending on if style resolution is possible directly or not.
              var positionCheckPerformed = false;

              // The element may not yet be attached to the DOM, and therefore the style object may be empty in some browsers.
              // Since the style object is a reference, it will be updated as soon as the element is attached to the DOM.
              var style = window.getComputedStyle(element);
              var width = element.offsetWidth;
              var height = element.offsetHeight;

              getState(element).startSize = {
                  width: width,
                  height: height
              };

              function mutateDom() {
                  function alterPositionStyles() {
                      if(style.position === "static") {
                          element.style.setProperty("position", "relative", options.important ? "important" : "");

                          var removeRelativeStyles = function(reporter, element, style, property) {
                              function getNumericalValue(value) {
                                  return value.replace(/[^-\d\.]/g, "");
                              }

                              var value = style[property];

                              if(value !== "auto" && getNumericalValue(value) !== "0") {
                                  reporter.warn("An element that is positioned static has style." + property + "=" + value + " which is ignored due to the static positioning. The element will need to be positioned relative, so the style." + property + " will be set to 0. Element: ", element);
                                  element.style.setProperty(property, "0", options.important ? "important" : "");
                              }
                          };

                          //Check so that there are no accidental styles that will make the element styled differently now that is is relative.
                          //If there are any, set them to 0 (this should be okay with the user since the style properties did nothing before [since the element was positioned static] anyway).
                          removeRelativeStyles(reporter, element, style, "top");
                          removeRelativeStyles(reporter, element, style, "right");
                          removeRelativeStyles(reporter, element, style, "bottom");
                          removeRelativeStyles(reporter, element, style, "left");
                      }
                  }

                  function onObjectLoad() {
                      // The object has been loaded, which means that the element now is guaranteed to be attached to the DOM.
                      if (!positionCheckPerformed) {
                          alterPositionStyles();
                      }

                      /*jshint validthis: true */

                      function getDocument(element, callback) {
                          //Opera 12 seem to call the object.onload before the actual document has been created.
                          //So if it is not present, poll it with an timeout until it is present.
                          //TODO: Could maybe be handled better with object.onreadystatechange or similar.
                          if(!element.contentDocument) {
                              var state = getState(element);
                              if (state.checkForObjectDocumentTimeoutId) {
                                  window.clearTimeout(state.checkForObjectDocumentTimeoutId);
                              }
                              state.checkForObjectDocumentTimeoutId = setTimeout(function checkForObjectDocument() {
                                  state.checkForObjectDocumentTimeoutId = 0;
                                  getDocument(element, callback);
                              }, 100);

                              return;
                          }

                          callback(element.contentDocument);
                      }

                      //Mutating the object element here seems to fire another load event.
                      //Mutating the inner document of the object element is fine though.
                      var objectElement = this;

                      //Create the style element to be added to the object.
                      getDocument(objectElement, function onObjectDocumentReady(objectDocument) {
                          //Notify that the element is ready to be listened to.
                          callback(element);
                      });
                  }

                  // The element may be detached from the DOM, and some browsers does not support style resolving of detached elements.
                  // The alterPositionStyles needs to be delayed until we know the element has been attached to the DOM (which we are sure of when the onObjectLoad has been fired), if style resolution is not possible.
                  if (style.position !== "") {
                      alterPositionStyles();
                      positionCheckPerformed = true;
                  }

                  //Add an object element as a child to the target element that will be listened to for resize events.
                  var object = document.createElement("object");
                  object.style.cssText = OBJECT_STYLE;
                  object.tabIndex = -1;
                  object.type = "text/html";
                  object.setAttribute("aria-hidden", "true");
                  object.onload = onObjectLoad;

                  //Safari: This must occur before adding the object to the DOM.
                  //IE: Does not like that this happens before, even if it is also added after.
                  if(!browserDetector.isIE()) {
                      object.data = "about:blank";
                  }

                  if (!getState(element)) {
                      // The element has been uninstalled before the actual loading happened.
                      return;
                  }

                  element.appendChild(object);
                  getState(element).object = object;

                  //IE: This must occur after adding the object to the DOM.
                  if(browserDetector.isIE()) {
                      object.data = "about:blank";
                  }
              }

              if(batchProcessor) {
                  batchProcessor.add(mutateDom);
              } else {
                  mutateDom();
              }
          }

          if(browserDetector.isIE(8)) {
              //IE 8 does not support objects properly. Luckily they do support the resize event.
              //So do not inject the object and notify that the element is already ready to be listened to.
              //The event handler for the resize event is attached in the utils.addListener instead.
              callback(element);
          } else {
              injectObject(element, callback);
          }
      }

      /**
       * Returns the child object of the target element.
       * @private
       * @param {element} element The target element.
       * @returns The object element of the target.
       */
      function getObject(element) {
          return getState(element).object;
      }

      function uninstall(element) {
          if (!getState(element)) {
              return;
          }

          var object = getObject(element);

          if (!object) {
              return;
          }

          if (browserDetector.isIE(8)) {
              element.detachEvent("onresize", object.proxy);
          } else {
              element.removeChild(object);
          }

          if (getState(element).checkForObjectDocumentTimeoutId) {
              window.clearTimeout(getState(element).checkForObjectDocumentTimeoutId);
          }

          delete getState(element).object;
      }

      return {
          makeDetectable: makeDetectable,
          addListener: addListener,
          uninstall: uninstall
      };
  };

  var forEach$1 = collectionUtils.forEach;

  var scroll = function(options) {
      options             = options || {};
      var reporter        = options.reporter;
      var batchProcessor  = options.batchProcessor;
      var getState        = options.stateHandler.getState;
      var hasState        = options.stateHandler.hasState;
      var idHandler       = options.idHandler;

      if (!batchProcessor) {
          throw new Error("Missing required dependency: batchProcessor");
      }

      if (!reporter) {
          throw new Error("Missing required dependency: reporter.");
      }

      //TODO: Could this perhaps be done at installation time?
      var scrollbarSizes = getScrollbarSizes();

      var styleId = "erd_scroll_detection_scrollbar_style";
      var detectionContainerClass = "erd_scroll_detection_container";

      function initDocument(targetDocument) {
          // Inject the scrollbar styling that prevents them from appearing sometimes in Chrome.
          // The injected container needs to have a class, so that it may be styled with CSS (pseudo elements).
          injectScrollStyle(targetDocument, styleId, detectionContainerClass);
      }

      initDocument(window.document);

      function buildCssTextString(rules) {
          var seperator = options.important ? " !important; " : "; ";

          return (rules.join(seperator) + seperator).trim();
      }

      function getScrollbarSizes() {
          var width = 500;
          var height = 500;

          var child = document.createElement("div");
          child.style.cssText = buildCssTextString(["position: absolute", "width: " + width*2 + "px", "height: " + height*2 + "px", "visibility: hidden", "margin: 0", "padding: 0"]);

          var container = document.createElement("div");
          container.style.cssText = buildCssTextString(["position: absolute", "width: " + width + "px", "height: " + height + "px", "overflow: scroll", "visibility: none", "top: " + -width*3 + "px", "left: " + -height*3 + "px", "visibility: hidden", "margin: 0", "padding: 0"]);

          container.appendChild(child);

          document.body.insertBefore(container, document.body.firstChild);

          var widthSize = width - container.clientWidth;
          var heightSize = height - container.clientHeight;

          document.body.removeChild(container);

          return {
              width: widthSize,
              height: heightSize
          };
      }

      function injectScrollStyle(targetDocument, styleId, containerClass) {
          function injectStyle(style, method) {
              method = method || function (element) {
                  targetDocument.head.appendChild(element);
              };

              var styleElement = targetDocument.createElement("style");
              styleElement.innerHTML = style;
              styleElement.id = styleId;
              method(styleElement);
              return styleElement;
          }

          if (!targetDocument.getElementById(styleId)) {
              var containerAnimationClass = containerClass + "_animation";
              var containerAnimationActiveClass = containerClass + "_animation_active";
              var style = "/* Created by the element-resize-detector library. */\n";
              style += "." + containerClass + " > div::-webkit-scrollbar { " + buildCssTextString(["display: none"]) + " }\n\n";
              style += "." + containerAnimationActiveClass + " { " + buildCssTextString(["-webkit-animation-duration: 0.1s", "animation-duration: 0.1s", "-webkit-animation-name: " + containerAnimationClass, "animation-name: " + containerAnimationClass]) + " }\n";
              style += "@-webkit-keyframes " + containerAnimationClass +  " { 0% { opacity: 1; } 50% { opacity: 0; } 100% { opacity: 1; } }\n";
              style += "@keyframes " + containerAnimationClass +          " { 0% { opacity: 1; } 50% { opacity: 0; } 100% { opacity: 1; } }";
              injectStyle(style);
          }
      }

      function addAnimationClass(element) {
          element.className += " " + detectionContainerClass + "_animation_active";
      }

      function addEvent(el, name, cb) {
          if (el.addEventListener) {
              el.addEventListener(name, cb);
          } else if(el.attachEvent) {
              el.attachEvent("on" + name, cb);
          } else {
              return reporter.error("[scroll] Don't know how to add event listeners.");
          }
      }

      function removeEvent(el, name, cb) {
          if (el.removeEventListener) {
              el.removeEventListener(name, cb);
          } else if(el.detachEvent) {
              el.detachEvent("on" + name, cb);
          } else {
              return reporter.error("[scroll] Don't know how to remove event listeners.");
          }
      }

      function getExpandElement(element) {
          return getState(element).container.childNodes[0].childNodes[0].childNodes[0];
      }

      function getShrinkElement(element) {
          return getState(element).container.childNodes[0].childNodes[0].childNodes[1];
      }

      /**
       * Adds a resize event listener to the element.
       * @public
       * @param {element} element The element that should have the listener added.
       * @param {function} listener The listener callback to be called for each resize event of the element. The element will be given as a parameter to the listener callback.
       */
      function addListener(element, listener) {
          var listeners = getState(element).listeners;

          if (!listeners.push) {
              throw new Error("Cannot add listener to an element that is not detectable.");
          }

          getState(element).listeners.push(listener);
      }

      /**
       * Makes an element detectable and ready to be listened for resize events. Will call the callback when the element is ready to be listened for resize changes.
       * @private
       * @param {object} options Optional options object.
       * @param {element} element The element to make detectable
       * @param {function} callback The callback to be called when the element is ready to be listened for resize changes. Will be called with the element as first parameter.
       */
      function makeDetectable(options, element, callback) {
          if (!callback) {
              callback = element;
              element = options;
              options = null;
          }

          options = options || {};

          function debug() {
              if (options.debug) {
                  var args = Array.prototype.slice.call(arguments);
                  args.unshift(idHandler.get(element), "Scroll: ");
                  if (reporter.log.apply) {
                      reporter.log.apply(null, args);
                  } else {
                      for (var i = 0; i < args.length; i++) {
                          reporter.log(args[i]);
                      }
                  }
              }
          }

          function isDetached(element) {
              function isInDocument(element) {
                  return element === element.ownerDocument.body || element.ownerDocument.body.contains(element);
              }

              if (!isInDocument(element)) {
                  return true;
              }

              // FireFox returns null style in hidden iframes. See https://github.com/wnr/element-resize-detector/issues/68 and https://bugzilla.mozilla.org/show_bug.cgi?id=795520
              if (window.getComputedStyle(element) === null) {
                  return true;
              }

              return false;
          }

          function isUnrendered(element) {
              // Check the absolute positioned container since the top level container is display: inline.
              var container = getState(element).container.childNodes[0];
              var style = window.getComputedStyle(container);
              return !style.width || style.width.indexOf("px") === -1; //Can only compute pixel value when rendered.
          }

          function getStyle() {
              // Some browsers only force layouts when actually reading the style properties of the style object, so make sure that they are all read here,
              // so that the user of the function can be sure that it will perform the layout here, instead of later (important for batching).
              var elementStyle            = window.getComputedStyle(element);
              var style                   = {};
              style.position              = elementStyle.position;
              style.width                 = element.offsetWidth;
              style.height                = element.offsetHeight;
              style.top                   = elementStyle.top;
              style.right                 = elementStyle.right;
              style.bottom                = elementStyle.bottom;
              style.left                  = elementStyle.left;
              style.widthCSS              = elementStyle.width;
              style.heightCSS             = elementStyle.height;
              return style;
          }

          function storeStartSize() {
              var style = getStyle();
              getState(element).startSize = {
                  width: style.width,
                  height: style.height
              };
              debug("Element start size", getState(element).startSize);
          }

          function initListeners() {
              getState(element).listeners = [];
          }

          function storeStyle() {
              debug("storeStyle invoked.");
              if (!getState(element)) {
                  debug("Aborting because element has been uninstalled");
                  return;
              }

              var style = getStyle();
              getState(element).style = style;
          }

          function storeCurrentSize(element, width, height) {
              getState(element).lastWidth = width;
              getState(element).lastHeight  = height;
          }

          function getExpandChildElement(element) {
              return getExpandElement(element).childNodes[0];
          }

          function getWidthOffset() {
              return 2 * scrollbarSizes.width + 1;
          }

          function getHeightOffset() {
              return 2 * scrollbarSizes.height + 1;
          }

          function getExpandWidth(width) {
              return width + 10 + getWidthOffset();
          }

          function getExpandHeight(height) {
              return height + 10 + getHeightOffset();
          }

          function getShrinkWidth(width) {
              return width * 2 + getWidthOffset();
          }

          function getShrinkHeight(height) {
              return height * 2 + getHeightOffset();
          }

          function positionScrollbars(element, width, height) {
              var expand          = getExpandElement(element);
              var shrink          = getShrinkElement(element);
              var expandWidth     = getExpandWidth(width);
              var expandHeight    = getExpandHeight(height);
              var shrinkWidth     = getShrinkWidth(width);
              var shrinkHeight    = getShrinkHeight(height);
              expand.scrollLeft   = expandWidth;
              expand.scrollTop    = expandHeight;
              shrink.scrollLeft   = shrinkWidth;
              shrink.scrollTop    = shrinkHeight;
          }

          function injectContainerElement() {
              var container = getState(element).container;

              if (!container) {
                  container                   = document.createElement("div");
                  container.className         = detectionContainerClass;
                  container.style.cssText     = buildCssTextString(["visibility: hidden", "display: inline", "width: 0px", "height: 0px", "z-index: -1", "overflow: hidden", "margin: 0", "padding: 0"]);
                  getState(element).container = container;
                  addAnimationClass(container);
                  element.appendChild(container);

                  var onAnimationStart = function () {
                      getState(element).onRendered && getState(element).onRendered();
                  };

                  addEvent(container, "animationstart", onAnimationStart);

                  // Store the event handler here so that they may be removed when uninstall is called.
                  // See uninstall function for an explanation why it is needed.
                  getState(element).onAnimationStart = onAnimationStart;
              }

              return container;
          }

          function injectScrollElements() {
              function alterPositionStyles() {
                  var style = getState(element).style;

                  if(style.position === "static") {
                      element.style.setProperty("position", "relative",options.important ? "important" : "");

                      var removeRelativeStyles = function(reporter, element, style, property) {
                          function getNumericalValue(value) {
                              return value.replace(/[^-\d\.]/g, "");
                          }

                          var value = style[property];

                          if(value !== "auto" && getNumericalValue(value) !== "0") {
                              reporter.warn("An element that is positioned static has style." + property + "=" + value + " which is ignored due to the static positioning. The element will need to be positioned relative, so the style." + property + " will be set to 0. Element: ", element);
                              element.style[property] = 0;
                          }
                      };

                      //Check so that there are no accidental styles that will make the element styled differently now that is is relative.
                      //If there are any, set them to 0 (this should be okay with the user since the style properties did nothing before [since the element was positioned static] anyway).
                      removeRelativeStyles(reporter, element, style, "top");
                      removeRelativeStyles(reporter, element, style, "right");
                      removeRelativeStyles(reporter, element, style, "bottom");
                      removeRelativeStyles(reporter, element, style, "left");
                  }
              }

              function getLeftTopBottomRightCssText(left, top, bottom, right) {
                  left = (!left ? "0" : (left + "px"));
                  top = (!top ? "0" : (top + "px"));
                  bottom = (!bottom ? "0" : (bottom + "px"));
                  right = (!right ? "0" : (right + "px"));

                  return ["left: " + left, "top: " + top, "right: " + right, "bottom: " + bottom];
              }

              debug("Injecting elements");

              if (!getState(element)) {
                  debug("Aborting because element has been uninstalled");
                  return;
              }

              alterPositionStyles();

              var rootContainer = getState(element).container;

              if (!rootContainer) {
                  rootContainer = injectContainerElement();
              }

              // Due to this WebKit bug https://bugs.webkit.org/show_bug.cgi?id=80808 (currently fixed in Blink, but still present in WebKit browsers such as Safari),
              // we need to inject two containers, one that is width/height 100% and another that is left/top -1px so that the final container always is 1x1 pixels bigger than
              // the targeted element.
              // When the bug is resolved, "containerContainer" may be removed.

              // The outer container can occasionally be less wide than the targeted when inside inline elements element in WebKit (see https://bugs.webkit.org/show_bug.cgi?id=152980).
              // This should be no problem since the inner container either way makes sure the injected scroll elements are at least 1x1 px.

              var scrollbarWidth          = scrollbarSizes.width;
              var scrollbarHeight         = scrollbarSizes.height;
              var containerContainerStyle = buildCssTextString(["position: absolute", "flex: none", "overflow: hidden", "z-index: -1", "visibility: hidden", "width: 100%", "height: 100%", "left: 0px", "top: 0px"]);
              var containerStyle          = buildCssTextString(["position: absolute", "flex: none", "overflow: hidden", "z-index: -1", "visibility: hidden"].concat(getLeftTopBottomRightCssText(-(1 + scrollbarWidth), -(1 + scrollbarHeight), -scrollbarHeight, -scrollbarWidth)));
              var expandStyle             = buildCssTextString(["position: absolute", "flex: none", "overflow: scroll", "z-index: -1", "visibility: hidden", "width: 100%", "height: 100%"]);
              var shrinkStyle             = buildCssTextString(["position: absolute", "flex: none", "overflow: scroll", "z-index: -1", "visibility: hidden", "width: 100%", "height: 100%"]);
              var expandChildStyle        = buildCssTextString(["position: absolute", "left: 0", "top: 0"]);
              var shrinkChildStyle        = buildCssTextString(["position: absolute", "width: 200%", "height: 200%"]);

              var containerContainer      = document.createElement("div");
              var container               = document.createElement("div");
              var expand                  = document.createElement("div");
              var expandChild             = document.createElement("div");
              var shrink                  = document.createElement("div");
              var shrinkChild             = document.createElement("div");

              // Some browsers choke on the resize system being rtl, so force it to ltr. https://github.com/wnr/element-resize-detector/issues/56
              // However, dir should not be set on the top level container as it alters the dimensions of the target element in some browsers.
              containerContainer.dir              = "ltr";

              containerContainer.style.cssText    = containerContainerStyle;
              containerContainer.className        = detectionContainerClass;
              container.className                 = detectionContainerClass;
              container.style.cssText             = containerStyle;
              expand.style.cssText                = expandStyle;
              expandChild.style.cssText           = expandChildStyle;
              shrink.style.cssText                = shrinkStyle;
              shrinkChild.style.cssText           = shrinkChildStyle;

              expand.appendChild(expandChild);
              shrink.appendChild(shrinkChild);
              container.appendChild(expand);
              container.appendChild(shrink);
              containerContainer.appendChild(container);
              rootContainer.appendChild(containerContainer);

              function onExpandScroll() {
                  getState(element).onExpand && getState(element).onExpand();
              }

              function onShrinkScroll() {
                  getState(element).onShrink && getState(element).onShrink();
              }

              addEvent(expand, "scroll", onExpandScroll);
              addEvent(shrink, "scroll", onShrinkScroll);

              // Store the event handlers here so that they may be removed when uninstall is called.
              // See uninstall function for an explanation why it is needed.
              getState(element).onExpandScroll = onExpandScroll;
              getState(element).onShrinkScroll = onShrinkScroll;
          }

          function registerListenersAndPositionElements() {
              function updateChildSizes(element, width, height) {
                  var expandChild             = getExpandChildElement(element);
                  var expandWidth             = getExpandWidth(width);
                  var expandHeight            = getExpandHeight(height);
                  expandChild.style.setProperty("width", expandWidth + "px", options.important ? "important" : "");
                  expandChild.style.setProperty("height", expandHeight + "px", options.important ? "important" : "");
              }

              function updateDetectorElements(done) {
                  var width           = element.offsetWidth;
                  var height          = element.offsetHeight;

                  // Check whether the size has actually changed since last time the algorithm ran. If not, some steps may be skipped.
                  var sizeChanged = width !== getState(element).lastWidth || height !== getState(element).lastHeight;

                  debug("Storing current size", width, height);

                  // Store the size of the element sync here, so that multiple scroll events may be ignored in the event listeners.
                  // Otherwise the if-check in handleScroll is useless.
                  storeCurrentSize(element, width, height);

                  // Since we delay the processing of the batch, there is a risk that uninstall has been called before the batch gets to execute.
                  // Since there is no way to cancel the fn executions, we need to add an uninstall guard to all fns of the batch.

                  batchProcessor.add(0, function performUpdateChildSizes() {
                      if (!sizeChanged) {
                          return;
                      }

                      if (!getState(element)) {
                          debug("Aborting because element has been uninstalled");
                          return;
                      }

                      if (!areElementsInjected()) {
                          debug("Aborting because element container has not been initialized");
                          return;
                      }

                      if (options.debug) {
                          var w = element.offsetWidth;
                          var h = element.offsetHeight;

                          if (w !== width || h !== height) {
                              reporter.warn(idHandler.get(element), "Scroll: Size changed before updating detector elements.");
                          }
                      }

                      updateChildSizes(element, width, height);
                  });

                  batchProcessor.add(1, function updateScrollbars() {
                      // This function needs to be invoked event though the size is unchanged. The element could have been resized very quickly and then
                      // been restored to the original size, which will have changed the scrollbar positions.

                      if (!getState(element)) {
                          debug("Aborting because element has been uninstalled");
                          return;
                      }

                      if (!areElementsInjected()) {
                          debug("Aborting because element container has not been initialized");
                          return;
                      }

                      positionScrollbars(element, width, height);
                  });

                  if (sizeChanged && done) {
                      batchProcessor.add(2, function () {
                          if (!getState(element)) {
                              debug("Aborting because element has been uninstalled");
                              return;
                          }

                          if (!areElementsInjected()) {
                            debug("Aborting because element container has not been initialized");
                            return;
                          }

                          done();
                      });
                  }
              }

              function areElementsInjected() {
                  return !!getState(element).container;
              }

              function notifyListenersIfNeeded() {
                  function isFirstNotify() {
                      return getState(element).lastNotifiedWidth === undefined;
                  }

                  debug("notifyListenersIfNeeded invoked");

                  var state = getState(element);

                  // Don't notify if the current size is the start size, and this is the first notification.
                  if (isFirstNotify() && state.lastWidth === state.startSize.width && state.lastHeight === state.startSize.height) {
                      return debug("Not notifying: Size is the same as the start size, and there has been no notification yet.");
                  }

                  // Don't notify if the size already has been notified.
                  if (state.lastWidth === state.lastNotifiedWidth && state.lastHeight === state.lastNotifiedHeight) {
                      return debug("Not notifying: Size already notified");
                  }


                  debug("Current size not notified, notifying...");
                  state.lastNotifiedWidth = state.lastWidth;
                  state.lastNotifiedHeight = state.lastHeight;
                  forEach$1(getState(element).listeners, function (listener) {
                      listener(element);
                  });
              }

              function handleRender() {
                  debug("startanimation triggered.");

                  if (isUnrendered(element)) {
                      debug("Ignoring since element is still unrendered...");
                      return;
                  }

                  debug("Element rendered.");
                  var expand = getExpandElement(element);
                  var shrink = getShrinkElement(element);
                  if (expand.scrollLeft === 0 || expand.scrollTop === 0 || shrink.scrollLeft === 0 || shrink.scrollTop === 0) {
                      debug("Scrollbars out of sync. Updating detector elements...");
                      updateDetectorElements(notifyListenersIfNeeded);
                  }
              }

              function handleScroll() {
                  debug("Scroll detected.");

                  if (isUnrendered(element)) {
                      // Element is still unrendered. Skip this scroll event.
                      debug("Scroll event fired while unrendered. Ignoring...");
                      return;
                  }

                  updateDetectorElements(notifyListenersIfNeeded);
              }

              debug("registerListenersAndPositionElements invoked.");

              if (!getState(element)) {
                  debug("Aborting because element has been uninstalled");
                  return;
              }

              getState(element).onRendered = handleRender;
              getState(element).onExpand = handleScroll;
              getState(element).onShrink = handleScroll;

              var style = getState(element).style;
              updateChildSizes(element, style.width, style.height);
          }

          function finalizeDomMutation() {
              debug("finalizeDomMutation invoked.");

              if (!getState(element)) {
                  debug("Aborting because element has been uninstalled");
                  return;
              }

              var style = getState(element).style;
              storeCurrentSize(element, style.width, style.height);
              positionScrollbars(element, style.width, style.height);
          }

          function ready() {
              callback(element);
          }

          function install() {
              debug("Installing...");
              initListeners();
              storeStartSize();

              batchProcessor.add(0, storeStyle);
              batchProcessor.add(1, injectScrollElements);
              batchProcessor.add(2, registerListenersAndPositionElements);
              batchProcessor.add(3, finalizeDomMutation);
              batchProcessor.add(4, ready);
          }

          debug("Making detectable...");

          if (isDetached(element)) {
              debug("Element is detached");

              injectContainerElement();

              debug("Waiting until element is attached...");

              getState(element).onRendered = function () {
                  debug("Element is now attached");
                  install();
              };
          } else {
              install();
          }
      }

      function uninstall(element) {
          var state = getState(element);

          if (!state) {
              // Uninstall has been called on a non-erd element.
              return;
          }

          // Uninstall may have been called in the following scenarios:
          // (1) Right between the sync code and async batch (here state.busy = true, but nothing have been registered or injected).
          // (2) In the ready callback of the last level of the batch by another element (here, state.busy = true, but all the stuff has been injected).
          // (3) After the installation process (here, state.busy = false and all the stuff has been injected).
          // So to be on the safe side, let's check for each thing before removing.

          // We need to remove the event listeners, because otherwise the event might fire on an uninstall element which results in an error when trying to get the state of the element.
          state.onExpandScroll && removeEvent(getExpandElement(element), "scroll", state.onExpandScroll);
          state.onShrinkScroll && removeEvent(getShrinkElement(element), "scroll", state.onShrinkScroll);
          state.onAnimationStart && removeEvent(state.container, "animationstart", state.onAnimationStart);

          state.container && element.removeChild(state.container);
      }

      return {
          makeDetectable: makeDetectable,
          addListener: addListener,
          uninstall: uninstall,
          initDocument: initDocument
      };
  };

  var forEach$2                 = collectionUtils.forEach;









  //Detection strategies.



  function isCollection(obj) {
      return Array.isArray(obj) || obj.length !== undefined;
  }

  function toArray(collection) {
      if (!Array.isArray(collection)) {
          var array = [];
          forEach$2(collection, function (obj) {
              array.push(obj);
          });
          return array;
      } else {
          return collection;
      }
  }

  function isElement(obj) {
      return obj && obj.nodeType === 1;
  }

  /**
   * @typedef idHandler
   * @type {object}
   * @property {function} get Gets the resize detector id of the element.
   * @property {function} set Generate and sets the resize detector id of the element.
   */

  /**
   * @typedef Options
   * @type {object}
   * @property {boolean} callOnAdd    Determines if listeners should be called when they are getting added.
                                      Default is true. If true, the listener is guaranteed to be called when it has been added.
                                      If false, the listener will not be guarenteed to be called when it has been added (does not prevent it from being called).
   * @property {idHandler} idHandler  A custom id handler that is responsible for generating, setting and retrieving id's for elements.
                                      If not provided, a default id handler will be used.
   * @property {reporter} reporter    A custom reporter that handles reporting logs, warnings and errors.
                                      If not provided, a default id handler will be used.
                                      If set to false, then nothing will be reported.
   * @property {boolean} debug        If set to true, the the system will report debug messages as default for the listenTo method.
   */

  /**
   * Creates an element resize detector instance.
   * @public
   * @param {Options?} options Optional global options object that will decide how this instance will work.
   */
  var elementResizeDetector = function(options) {
      options = options || {};

      //idHandler is currently not an option to the listenTo function, so it should not be added to globalOptions.
      var idHandler$1;

      if (options.idHandler) {
          // To maintain compatability with idHandler.get(element, readonly), make sure to wrap the given idHandler
          // so that readonly flag always is true when it's used here. This may be removed next major version bump.
          idHandler$1 = {
              get: function (element) { return options.idHandler.get(element, true); },
              set: options.idHandler.set
          };
      } else {
          var idGenerator$1 = idGenerator();
          var defaultIdHandler = idHandler({
              idGenerator: idGenerator$1,
              stateHandler: stateHandler
          });
          idHandler$1 = defaultIdHandler;
      }

      //reporter is currently not an option to the listenTo function, so it should not be added to globalOptions.
      var reporter$1 = options.reporter;

      if(!reporter$1) {
          //If options.reporter is false, then the reporter should be quiet.
          var quiet = reporter$1 === false;
          reporter$1 = reporter(quiet);
      }

      //batchProcessor is currently not an option to the listenTo function, so it should not be added to globalOptions.
      var batchProcessor$1 = getOption(options, "batchProcessor", batchProcessor({ reporter: reporter$1 }));

      //Options to be used as default for the listenTo function.
      var globalOptions = {};
      globalOptions.callOnAdd     = !!getOption(options, "callOnAdd", true);
      globalOptions.debug         = !!getOption(options, "debug", false);

      var eventListenerHandler    = listenerHandler(idHandler$1);
      var elementUtils$1            = elementUtils({
          stateHandler: stateHandler
      });

      //The detection strategy to be used.
      var detectionStrategy;
      var desiredStrategy = getOption(options, "strategy", "object");
      var importantCssRules = getOption(options, "important", false);
      var strategyOptions = {
          reporter: reporter$1,
          batchProcessor: batchProcessor$1,
          stateHandler: stateHandler,
          idHandler: idHandler$1,
          important: importantCssRules
      };

      if(desiredStrategy === "scroll") {
          if (browserDetector.isLegacyOpera()) {
              reporter$1.warn("Scroll strategy is not supported on legacy Opera. Changing to object strategy.");
              desiredStrategy = "object";
          } else if (browserDetector.isIE(9)) {
              reporter$1.warn("Scroll strategy is not supported on IE9. Changing to object strategy.");
              desiredStrategy = "object";
          }
      }

      if(desiredStrategy === "scroll") {
          detectionStrategy = scroll(strategyOptions);
      } else if(desiredStrategy === "object") {
          detectionStrategy = object(strategyOptions);
      } else {
          throw new Error("Invalid strategy name: " + desiredStrategy);
      }

      //Calls can be made to listenTo with elements that are still being installed.
      //Also, same elements can occur in the elements list in the listenTo function.
      //With this map, the ready callbacks can be synchronized between the calls
      //so that the ready callback can always be called when an element is ready - even if
      //it wasn't installed from the function itself.
      var onReadyCallbacks = {};

      /**
       * Makes the given elements resize-detectable and starts listening to resize events on the elements. Calls the event callback for each event for each element.
       * @public
       * @param {Options?} options Optional options object. These options will override the global options. Some options may not be overriden, such as idHandler.
       * @param {element[]|element} elements The given array of elements to detect resize events of. Single element is also valid.
       * @param {function} listener The callback to be executed for each resize event for each element.
       */
      function listenTo(options, elements, listener) {
          function onResizeCallback(element) {
              var listeners = eventListenerHandler.get(element);
              forEach$2(listeners, function callListenerProxy(listener) {
                  listener(element);
              });
          }

          function addListener(callOnAdd, element, listener) {
              eventListenerHandler.add(element, listener);

              if(callOnAdd) {
                  listener(element);
              }
          }

          //Options object may be omitted.
          if(!listener) {
              listener = elements;
              elements = options;
              options = {};
          }

          if(!elements) {
              throw new Error("At least one element required.");
          }

          if(!listener) {
              throw new Error("Listener required.");
          }

          if (isElement(elements)) {
              // A single element has been passed in.
              elements = [elements];
          } else if (isCollection(elements)) {
              // Convert collection to array for plugins.
              // TODO: May want to check so that all the elements in the collection are valid elements.
              elements = toArray(elements);
          } else {
              return reporter$1.error("Invalid arguments. Must be a DOM element or a collection of DOM elements.");
          }

          var elementsReady = 0;

          var callOnAdd = getOption(options, "callOnAdd", globalOptions.callOnAdd);
          var onReadyCallback = getOption(options, "onReady", function noop() {});
          var debug = getOption(options, "debug", globalOptions.debug);

          forEach$2(elements, function attachListenerToElement(element) {
              if (!stateHandler.getState(element)) {
                  stateHandler.initState(element);
                  idHandler$1.set(element);
              }

              var id = idHandler$1.get(element);

              debug && reporter$1.log("Attaching listener to element", id, element);

              if(!elementUtils$1.isDetectable(element)) {
                  debug && reporter$1.log(id, "Not detectable.");
                  if(elementUtils$1.isBusy(element)) {
                      debug && reporter$1.log(id, "System busy making it detectable");

                      //The element is being prepared to be detectable. Do not make it detectable.
                      //Just add the listener, because the element will soon be detectable.
                      addListener(callOnAdd, element, listener);
                      onReadyCallbacks[id] = onReadyCallbacks[id] || [];
                      onReadyCallbacks[id].push(function onReady() {
                          elementsReady++;

                          if(elementsReady === elements.length) {
                              onReadyCallback();
                          }
                      });
                      return;
                  }

                  debug && reporter$1.log(id, "Making detectable...");
                  //The element is not prepared to be detectable, so do prepare it and add a listener to it.
                  elementUtils$1.markBusy(element, true);
                  return detectionStrategy.makeDetectable({ debug: debug, important: importantCssRules }, element, function onElementDetectable(element) {
                      debug && reporter$1.log(id, "onElementDetectable");

                      if (stateHandler.getState(element)) {
                          elementUtils$1.markAsDetectable(element);
                          elementUtils$1.markBusy(element, false);
                          detectionStrategy.addListener(element, onResizeCallback);
                          addListener(callOnAdd, element, listener);

                          // Since the element size might have changed since the call to "listenTo", we need to check for this change,
                          // so that a resize event may be emitted.
                          // Having the startSize object is optional (since it does not make sense in some cases such as unrendered elements), so check for its existance before.
                          // Also, check the state existance before since the element may have been uninstalled in the installation process.
                          var state = stateHandler.getState(element);
                          if (state && state.startSize) {
                              var width = element.offsetWidth;
                              var height = element.offsetHeight;
                              if (state.startSize.width !== width || state.startSize.height !== height) {
                                  onResizeCallback(element);
                              }
                          }

                          if(onReadyCallbacks[id]) {
                              forEach$2(onReadyCallbacks[id], function(callback) {
                                  callback();
                              });
                          }
                      } else {
                          // The element has been unisntalled before being detectable.
                          debug && reporter$1.log(id, "Element uninstalled before being detectable.");
                      }

                      delete onReadyCallbacks[id];

                      elementsReady++;
                      if(elementsReady === elements.length) {
                          onReadyCallback();
                      }
                  });
              }

              debug && reporter$1.log(id, "Already detecable, adding listener.");

              //The element has been prepared to be detectable and is ready to be listened to.
              addListener(callOnAdd, element, listener);
              elementsReady++;
          });

          if(elementsReady === elements.length) {
              onReadyCallback();
          }
      }

      function uninstall(elements) {
          if(!elements) {
              return reporter$1.error("At least one element is required.");
          }

          if (isElement(elements)) {
              // A single element has been passed in.
              elements = [elements];
          } else if (isCollection(elements)) {
              // Convert collection to array for plugins.
              // TODO: May want to check so that all the elements in the collection are valid elements.
              elements = toArray(elements);
          } else {
              return reporter$1.error("Invalid arguments. Must be a DOM element or a collection of DOM elements.");
          }

          forEach$2(elements, function (element) {
              eventListenerHandler.removeAllListeners(element);
              detectionStrategy.uninstall(element);
              stateHandler.cleanState(element);
          });
      }

      function initDocument(targetDocument) {
          detectionStrategy.initDocument && detectionStrategy.initDocument(targetDocument);
      }

      return {
          listenTo: listenTo,
          removeListener: eventListenerHandler.removeListener,
          removeAllListeners: eventListenerHandler.removeAllListeners,
          uninstall: uninstall,
          initDocument: initDocument
      };
  };

  function getOption(options, name, defaultValue) {
      var value = options[name];

      if((value === undefined || value === null) && defaultValue !== undefined) {
          return defaultValue;
      }

      return value;
  }

  /**
   * @module ol/metoclient/TimeFrame
   */

  /**
   * Class representing a single time frame in a time slider.
   */
  var TimeFrame =
  /**
   * Create a time frame.
   *
   * @param {object} options Time frame options.
   */
  function TimeFrame(options) {
    _classCallCheck(this, TimeFrame);

    this.beginTime = options.beginTime;
    this.endTime = options.endTime;
    this.useDateFormat = false;
    this.element = document.createElement('div');
    this.element.style['flex-grow'] = options.weight;
    this.element.classList.add('fmi-metoclient-timeslider-frame');
    this.element.classList.add(options.type);
    this.element.dataset.time = this.endTime;
    this.dragListenerElement = document.createElement('div');
    this.dragListenerElement.classList.add('fmi-metoclient-timeslider-drag-listener');
    this.dragListenerElement.style.pointerEvents = 'none';
    this.element.appendChild(this.dragListenerElement);
    this.keyboardAccessibleElement = document.createElement('button');
    this.keyboardAccessibleElement.classList.add('fmi-metoclient-timeslider-keyboard-accessible');
    this.keyboardAccessibleElement.style.pointerEvents = 'none';
    this.element.appendChild(this.keyboardAccessibleElement);
  };

  /**
   *
   */

  var TimeSlider = /*#__PURE__*/function (_Control) {
    _inherits(TimeSlider, _Control);

    var _super = _createSuper(TimeSlider);

    /**
     * Creates an instance of TimeSlider.
     *
     * @param options
     */
    function TimeSlider() {
      var _this;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, TimeSlider);

      var element = document.createElement('div');
      element.className = 'ol-unselectable ol-control fmi-metoclient-timeslider';

      if (options.meteorologicalMode) {
        element.className += " ".concat(METEOROLOGICAL_MODE);
      }

      _this = _super.call(this, {
        element: element,
        target: options.target
      });
      _this.container_ = element;
      _this.config_ = options;
      _this.enableMouseWheel_ = options.enableMouseWheel;
      _this.interactions_ = null;
      _this.playButton_ = null;
      _this.animationPlay_ = false;
      _this.frames_ = [];
      _this.locale_ = options.locale;
      _this.previousTickTextTop_ = Number.POSITIVE_INFINITY;
      _this.previousTickTextRight_ = Number.NEGATIVE_INFINITY;
      _this.previousTickTextBottom_ = Number.NEGATIVE_INFINITY;
      _this.previousTickTextLeft_ = Number.POSITIVE_INFINITY;
      _this.previousTickIndex_ = -1;
      _this.mouseListeners_ = [];
      _this.dragging_ = false;
      _this.resizeDetector = elementResizeDetector();
      _this.timeListener_ = null;
      _this.playingListener_ = null;
      _this.timeZoneListener = null;
      _this.timeZoneLabelListener = null;

      _this.set('timeZone', options['timeZone']);

      _this.set('timeZoneLabel', options['timeZoneLabel']);

      return _this;
    }
    /**
     * Creates a new time slider.
     *
     * @param {Array} moments Time values for the slider.
     */


    _createClass(TimeSlider, [{
      key: "createTimeSlider",
      value: function createTimeSlider(moments) {
        var _this2 = this;

        this.dispatchEvent('render');
        this.clear();
        this.createContainers(moments);
        this.createFrames(moments);
        this.createIndicators();
        this.createTicks();
        this.createInteractions();

        if (this.getMap().get('time') != null) {
          this.updatePointer(this.getMap().get('time'));
        }

        this.timeListener_ = this.getMap().on('change:time', function (evt) {
          _this2.setAnimationTime(evt.target.get('time'));
        });
        this.playingListener_ = this.getMap().on('change:playing', function (evt) {
          _this2.setAnimationPlay(evt.target.get('playing'));
        });
        this.timeZoneListener_ = this.on('change:timeZone', function () {
          _this2.frames_.forEach(function (frame) {
            var tickText = _this2.getTickText(frame['endTime']);

            var textElement = frame.element.getElementsByClassName(FRAME_TEXT_CLASS);

            if (textElement.length > 0) {
              textElement[0].textContent = tickText['content'];
            }
          });

          if (_this2.getMap().get('time') != null) {
            _this2.updatePointer(_this2.getMap().get('time'), true);
          }
        });
        this.timeZoneLabelListener_ = this.on('change:timeZoneLabel', function () {
          Array.from(_this2.container_.getElementsByClassName(TIMEZONE_LABEL_CLASS)).forEach(function (timeZoneLabelElement) {
            timeZoneLabelElement.innerHTML = _this2.get('timeZoneLabel');
          });
        });
        this.dispatchEvent('rendercomplete');
      }
      /**
       * Triggers a movement to the next or previous time moment
       *
       * @param {number} direction Forward or backward direction
       */

    }, {
      key: "step",
      value: function step(direction) {
        var map = this.getMap();
        map.set('playing', false);

        if (direction > 0) {
          map.dispatchEvent('next');
        } else if (direction < 0) {
          map.dispatchEvent('previous');
        }
      }
      /**
       * Creates container elements and appropriate listeners.
       *
       * @param {Array} moments Time values for the slider.
       */

    }, {
      key: "createContainers",
      value: function createContainers(moments) {
        var self = this;
        var clickableContainer = document.createElement('div');
        clickableContainer.classList.add(CLICKABLE_CLASS);

        if (moments.length > 0) {
          clickableContainer.appendChild(this.createPreMargin());
          clickableContainer.appendChild(this.createPreTools());
        }

        var momentsContainer = document.createElement('div');
        momentsContainer.classList.add(FRAMES_CONTAINER_CLASS);

        if (this.enableMouseWheel_) {
          this.mouseListeners_.push(listen_1(momentsContainer, 'wheel', function (event) {
            event.preventDefault();
            self.step(event.deltaY);
          }));
        }

        clickableContainer.appendChild(momentsContainer);
        clickableContainer.appendChild(this.createPostTools(moments));
        var postMargin = document.createElement('div');
        postMargin.classList.add(POST_MARGIN_CLASS);
        this.mouseListeners_.push(listen_1(postMargin, 'click', function (event) {
          self.step(FORWARDS);
        }));
        clickableContainer.appendChild(postMargin);
        clickableContainer.appendChild(this.createTimeZoneLabel());
        this.container_.appendChild(clickableContainer);
        this.container_.classList.add('noselect');
        this.mouseListeners_.push(listen_1(this.container_, 'mouseup', function (event) {
          self.setDragging(false);
          document.activeElement.blur();
        }));
        this.mouseListeners_.push(listen_1(this.container_, 'touchend', function (event) {
          self.setDragging(false);
          document.activeElement.blur();
        }));
        this.resizeDetector.listenTo(this.container_.getElementsByClassName(FRAMES_CONTAINER_CLASS)[0], function (element) {
          self.createTicks();
        });
      }
      /**
       * Creates functional margin area before the actual time slider.
       *
       * @returns {HTMLElement} Margin element.
       */

    }, {
      key: "createPreMargin",
      value: function createPreMargin() {
        var self = this;
        var preMargin = document.createElement('div');
        preMargin.classList.add(PRE_MARGIN_CLASS);
        this.mouseListeners_.push(listen_1(preMargin, 'click', function () {
          self.step(BACKWARDS);
        }));
        return preMargin;
      }
      /**
       * Creates an element for UI tools located in the slider before the first time step
       *
       * @returns {HTMLElement} An element for UI tools.
       */

    }, {
      key: "createPreTools",
      value: function createPreTools() {
        var _this3 = this;

        var preTools = document.createElement('div');
        preTools.classList.add(PRE_TOOLS_CLASS);
        var playButton = document.createElement('button');
        playButton.classList.add(PLAY_BUTTON_CLASS);
        playButton.tabIndex = BASE_TAB_INDEX;

        if (this.animationPlay_) {
          playButton.classList.add(PLAYING_CLASS);
        }

        this.mouseListeners_.push(listen_1(playButton, 'click', function (event) {
          event.preventDefault();

          var map = _this3.getMap();

          map.set('playing', !map.get('playing'));
        }));
        this.playButton_ = playButton;
        preTools.appendChild(playButton);
        return preTools;
      }
      /**
       * Creates an element for UI tools located in the slider after the last time step.
       *
       * @param {Array} moments Time values for the slider.
       * @returns {HTMLElement} An element for UI tools.
       */

    }, {
      key: "createPostTools",
      value: function createPostTools(moments) {
        var postTools = document.createElement('div');
        postTools.classList.add(POST_TOOLS_CLASS);
        var postButton = document.createElement('button');
        postButton.classList.add(POST_BUTTON_CLASS);
        postButton.tabIndex = BASE_TAB_INDEX + 10 + moments.length;
        postTools.appendChild(postButton);
        return postTools;
      }
      /**
       * Creates an element for time zone label.
       *
       * @returns {HTMLElement} Time zone label.
       */

    }, {
      key: "createTimeZoneLabel",
      value: function createTimeZoneLabel() {
        var timezoneLabel = document.createElement('div');
        timezoneLabel.innerHTML = this.get('timeZoneLabel');
        timezoneLabel.classList.add(TIMEZONE_LABEL_CLASS);
        return timezoneLabel;
      }
      /**
       * Creates time frames and provides the frames container with frame elements.
       *
       * @param {Array} moments Time values for the slider.
       */

    }, {
      key: "createFrames",
      value: function createFrames(moments) {
        var i;
        var numMoments = moments.length;
        var currentTime = Date.now();
        var beginTime;
        var endTime;
        var type;
        var weight;
        var timeFrame;
        var framesContainer = this.container_.getElementsByClassName(FRAMES_CONTAINER_CLASS)[0];
        var node;

        while (node = framesContainer.lastChild) {
          framesContainer.removeChild(node);
        }

        this.frames_ = [];

        if (numMoments < 2) {
          return;
        }

        var timePeriod = moments[numMoments - 1] - moments[0];

        for (i = 0; i < numMoments; i += 1) {
          beginTime = i === 0 ? 2 * moments[0] - moments[1] : moments[i - 1];
          endTime = moments[i];
          type = moments[i] <= currentTime ? FRAME_HISTORY : FRAME_FUTURE;
          weight = 100 * (endTime - beginTime) / timePeriod;
          timeFrame = this.createFrame(beginTime, endTime, type, weight);
          timeFrame.element.getElementsByClassName(KEYBOARD_ACCESSIBLE_CLASS)[0].tabIndex = BASE_TAB_INDEX + i;
          framesContainer.appendChild(timeFrame.element);
          this.frames_.push(timeFrame);
        }
      }
      /**
       * Creates a single time frame and corresponding element listeners.
       *
       * @param {number} beginTime Begin time.
       * @param {number} endTime End time.
       * @param {string} type Frame type for observation or forecast.
       * @param {number} weight Weight corresponding time frame length.
       * @returns {object} Time frame.
       */

    }, {
      key: "createFrame",
      value: function createFrame(beginTime, endTime, type, weight) {
        var _this4 = this;

        var self = this;
        var map = this.getMap();
        var timeFrame = new TimeFrame({
          beginTime: beginTime,
          endTime: endTime,
          type: type,
          weight: weight
        });
        var longClick;
        var longTap;
        var clickCount = 0;
        var singleClickTimer = 0;
        this.mouseListeners_.push(listen_1(timeFrame.element, 'mousedown', function () {
          if (_this4.isMeteorologicalMode()) {
            longClick = setTimeout(function () {
              clearTimeout(singleClickTimer);
              longClick = null;
              map.set('playing', false);
              map.set('time', timeFrame['endTime']);
            }, LONG_CLICK_DELAY);
          } else {
            map.set('playing', false);
            map.set('time', timeFrame['endTime']);
          }
        }));
        this.mouseListeners_.push(listen_1(timeFrame.element, 'mouseup', function () {
          if (longClick != null && !self.dragging_) {
            clearTimeout(longClick);
            clickCount += 1;

            if (clickCount === 1) {
              singleClickTimer = setTimeout(function () {
                clearTimeout(longClick);
                clickCount = 0;

                if (timeFrame.endTime === map.get('time')) {
                  map.set('playing', false);
                  map.set('time', timeFrame['beginTime']);
                } else {
                  self.step(timeFrame.endTime - map.get('time'));
                }
              }, DOUBLE_PRESS_DELAY);
            } else if (clickCount === 2) {
              clearTimeout(singleClickTimer);
              clickCount = 0;
              map.set('playing', false);
              map.set('time', timeFrame.endTime);
            }
          }
        }));
        this.mouseListeners_.push(listen_1(timeFrame.element, 'mouseout', function () {
          if (longClick != null) {
            clearTimeout(longClick);
          }
        }));
        this.mouseListeners_.push(listen_1(timeFrame.element, 'touchstart', function () {
          if (_this4.isMeteorologicalMode()) {
            longTap = setTimeout(function () {
              longTap = null;
              map.set('playing', false);
              map.set('time', timeFrame['endTime']);
            }, LONG_TAP_DELAY);
          } else {
            map.set('playing', false);
            map.set('time', timeFrame['endTime']);
          }
        }));

        var stopTouch = function stopTouch() {
          if (longTap != null) {
            clearTimeout(longTap);
          }
        };

        this.mouseListeners_.push(listen_1(timeFrame.element, 'touchend', stopTouch));
        this.mouseListeners_.push(listen_1(timeFrame.element, 'touchcancel', stopTouch));
        this.mouseListeners_.push(listen_1(timeFrame.dragListenerElement, 'mousemove', function (event) {
          if (!self.dragging_) {
            return;
          }

          document.activeElement.blur();
          map.set('playing', false);
          map.set('time', timeFrame.endTime);
        }));
        this.mouseListeners_.push(listen_1(timeFrame.element, 'touchmove', function (event) {
          var _geom;

          if (!self.dragging_ || event.changedTouches[0] === undefined) {
            return;
          }

          var currentTimeFrame;
          var numFrames = _this4.frames_.length;
          var rect;
          var orientation = !_this4.container_.classList.contains(ROTATED) ? HORIZONTAL : VERTICAL;
          var geom = (_geom = {}, _defineProperty(_geom, HORIZONTAL, {
            coord: 'clientX',
            min: 'left',
            max: 'right'
          }), _defineProperty(_geom, VERTICAL, {
            coord: 'clientY',
            min: 'top',
            max: 'bottom'
          }), _geom);
          var touchCoord = event.changedTouches[0][geom[orientation].coord];

          for (var i = 0; i < numFrames; i += 1) {
            rect = _this4.frames_[i].element.getBoundingClientRect();

            if (rect[geom[orientation].min] <= touchCoord && touchCoord <= rect[geom[orientation].max]) {
              currentTimeFrame = _this4.frames_[i];
              break;
            }
          }

          document.activeElement.blur();

          if (currentTimeFrame != null && currentTimeFrame.endTime !== map.get('time')) {
            clearTimeout(longTap);
            map.set('playing', false);
            map.set('time', currentTimeFrame.endTime);
          }
        }));
        return timeFrame;
      }
      /**
       * Creates elements for status visualizations of data loading.
       */

    }, {
      key: "createIndicators",
      value: function createIndicators() {
        this.frames_.forEach(function (frame, index, array) {
          var indicator = document.createElement('div');
          indicator.classList.add(INDICATOR_CLASS);

          if (index === 0) {
            indicator.classList.add('first');
          } else if (index === array.length - 1) {
            indicator.classList.add('last');
          }

          frame.element.appendChild(indicator);
        });
      }
      /**
       * Creates a visually reasonable tick distribution.
       */

    }, {
      key: "createTicks",
      value: function createTicks() {
        var step;
        var stepStart;
        var discreteSteps = [MINUTE, 2 * MINUTE, 5 * MINUTE, 10 * MINUTE, 15 * MINUTE, 20 * MINUTE, 30 * MINUTE, HOUR, 2 * HOUR, 3 * HOUR, 4 * HOUR, 6 * HOUR, 8 * HOUR, 12 * HOUR, DAY];
        var numDiscreteSteps = discreteSteps.length;
        var minStep;
        var nextStep = 0;
        var i;
        var j = 0;
        var maxIter = 10;
        var timeStepsUsed = true;

        do {
          if (j > maxIter) {
            this.configureTicks();
            break;
          }

          minStep = nextStep;
          timeStepsUsed = this.configureTicks(minStep);
          step = 0;
          stepStart = -1;
          nextStep = j > 0 ? minStep : Number.POSITIVE_INFINITY;
          this.frames_.forEach(function (frame, index, frames) {
            if (frame.element.getElementsByClassName(FRAME_TICK_CLASS).length > 0) {
              if (stepStart >= 0) {
                step = frame.endTime - frames[stepStart].endTime;

                if (j === 0 && step < nextStep || j !== 0 && step > nextStep) {
                  nextStep = step;
                }
              }

              stepStart = index;
            }
          });

          if (nextStep !== minStep && (nextStep < HOUR && HOUR % nextStep !== 0 || nextStep > HOUR && nextStep % HOUR !== 0 || nextStep < DAY && DAY % nextStep !== 0)) {
            for (i = 0; i < numDiscreteSteps; i += 1) {
              if (nextStep < discreteSteps[i]) {
                nextStep = discreteSteps[i];
                break;
              }
            }
          }

          j += 1;
        } while (timeStepsUsed && nextStep !== minStep);

        this.showTicks();
      }
      /**
       * Performs a new iteration for tick distribution optimization.
       *
       * @param {number=} minStep Minimum allowed time step.
       * @returns {boolean} Information if using default time step is suitable for the current data.
       */

    }, {
      key: "configureTicks",
      value: function configureTicks() {
        var _this5 = this;

        var minStep = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var self = this;
        var tick;
        var maxTextWidth = 0;
        var useTimeStep = false;
        var timeStep;
        var framesContainer;
        var divisibleDays = false;
        var containsDST = false;
        var containsNonDST = false;
        this.previousTickTextTop_ = null;
        this.previousTickTextRight_ = Number.NEGATIVE_INFINITY;
        this.previousTickTextBottom_ = null;
        this.previousTickTextLeft_ = null;
        this.previousTickValue_ = null;
        this.previousTickIndex_ = null;

        var clearFrame = function clearFrame(frame) {
          var removeChildrenByClass = function removeChildrenByClass(className) {
            Array.from(frame.element.getElementsByClassName(className)).forEach(function (element) {
              element.parentElement.removeChild(element);
            });
          };

          removeChildrenByClass(FRAME_TEXT_WRAPPER_CLASS);
          removeChildrenByClass(FRAME_TICK_CLASS);
        };

        this.frames_.forEach(function (frame) {
          clearFrame(frame);
          var textWrapperElement = document.createElement('div');
          textWrapperElement.classList.add(FRAME_TEXT_WRAPPER_CLASS);
          var textElement = document.createElement('span');
          textElement.classList.add(FRAME_TEXT_CLASS);
          textElement.classList.add(NO_SELECT_CLASS);

          var tickText = _this5.getTickText(frame.endTime);

          textElement.textContent = tickText.content;
          frame.useDateFormat = tickText.useDateFormat;
          textWrapperElement.appendChild(textElement);
          frame.element.appendChild(textWrapperElement);
          frame.element.style.display = 'none';
        }); // Separate loops to prevent accessing textElement width before it is available

        this.frames_.forEach(function (frame, index, frames) {
          var nextIndex = index + 1;
          frame.element.style.display = '';

          if (DateTime.fromMillis(frame['endTime']).setZone(self.get('timeZone')).startOf('day').valueOf() === frame['endTime']) {
            divisibleDays = true;
          }

          if (nextIndex === frames.length) {
            return;
          }

          var textElement = frame.element.querySelector("span.".concat(FRAME_TEXT_CLASS));
          var clientRect = textElement.getBoundingClientRect();

          if (maxTextWidth < clientRect.width) {
            maxTextWidth = clientRect.width;
          }

          var localTimeStep = frames[nextIndex].endTime - frame.endTime;

          if (DateTime.fromMillis(frame.endTime).setZone(self.get('timeZone')).isInDST && localTimeStep < DAY) {
            containsDST = true;
          } else {
            containsNonDST = true;
          }

          if (timeStep == null) {
            useTimeStep = true;
            timeStep = localTimeStep;
          } else if (useTimeStep && localTimeStep !== timeStep) {
            useTimeStep = false;
          }
        });

        if (containsDST && containsNonDST) {
          useTimeStep = false;
        } // Prevent common tick asynchrony


        if (useTimeStep) {
          timeStep *= 2;
        }

        var newTextWidth = "".concat(Math.round(maxTextWidth), "px");
        Array.from(this.container_.getElementsByClassName(FRAME_TEXT_WRAPPER_CLASS)).forEach(function (element) {
          element.style.width = newTextWidth;
        });

        var createTick = function createTick(frame, index, rect, endTime) {
          self.previousTickTextTop_ = rect.top;
          self.previousTickTextRight_ = rect.right;
          self.previousTickTextBottom_ = rect.bottom;
          self.previousTickTextLeft_ = rect.left;
          self.previousTickValue_ = endTime;
          self.previousTickIndex_ = index;
          tick = document.createElement('div');
          tick.classList.add(FRAME_TICK_CLASS);
          tick.classList.add(HIDDEN_CLASS);
          frame.element.appendChild(tick);
        };

        framesContainer = Array.from(this.container_.getElementsByClassName(FRAMES_CONTAINER_CLASS));

        if (framesContainer.length > 0) {
          framesContainer = framesContainer[0].getBoundingClientRect();
        }

        this.frames_.forEach(function (frame, index, frames) {
          var textElementArray = Array.from(frame.element.getElementsByClassName(FRAME_TEXT_WRAPPER_CLASS));

          if (textElementArray.length === 0) {
            return;
          }

          var textWrapper = textElementArray.shift();
          var clientRect = textWrapper.getBoundingClientRect(); // Prevent text overlapping, favor full hours

          if (framesContainer.length === 0 || framesContainer.left <= clientRect.left && framesContainer.right >= clientRect.right && framesContainer.top <= clientRect.top && framesContainer.bottom >= clientRect.bottom) {
            if ((self.previousTickTextRight_ < clientRect.left || self.previousTickTextLeft_ > clientRect.right || self.previousTickTextBottom_ < clientRect.top || self.previousTickTextTop_ > clientRect.bottom) && (self.previousTickIndex_ == null || frame.endTime - frames[self.previousTickIndex_].endTime >= minStep)) {
              createTick(frame, index, clientRect, frame.endTime);
            } else if (index > 0 && self.previousTickIndex_ >= 0 && frames[self.previousTickIndex_] != null && (minStep === 0 && (frame.endTime % HOUR === 0 && frames[self.previousTickIndex_].endTime % HOUR !== 0 || useTimeStep && frame.endTime % HOUR % timeStep === 0 && frames[self.previousTickIndex_].endTime % HOUR % timeStep !== 0 || frame.endTime % HOUR === 0 && frames[self.previousTickIndex_].endTime % HOUR === 0 && DateTime.fromMillis(frame.endTime).setZone(self.get('timeZone')).hour % 2 === 0 && DateTime.fromMillis(frames[self.previousTickIndex_].endTime).setZone(self.get('timeZone')).hour % 2 !== 0) && !frames[self.previousTickIndex_].useDateFormat || frame.useDateFormat || minStep > 0 && (minStep >= HOUR && frames[self.previousTickIndex_].endTime % HOUR !== 0 || frames[self.previousTickIndex_].endTime % HOUR % minStep !== 0 || divisibleDays && DateTime.fromMillis(frames[self.previousTickIndex_].endTime).setZone(self.get('timeZone')).hour % (minStep / HOUR) !== 0))) {
              clearFrame(frames[self.previousTickIndex_]);
              createTick(frame, index, clientRect, frame.endTime);
            } else {
              frame.element.removeChild(textWrapper);
            }
          } else {
            frame.element.removeChild(textWrapper);
          }
        });
        return useTimeStep;
      }
      /**
       * Shows currently visible slider ticks.
       */

    }, {
      key: "showTicks",
      value: function showTicks() {
        Array.from(this.container_.getElementsByClassName(FRAME_TICK_CLASS)).forEach(function (element) {
          element.classList.remove(HIDDEN_CLASS);
        });
      }
      /**
       * Creates a pointer for indicating current time in the slider.
       */

    }, {
      key: "createInteractions",
      value: function createInteractions() {
        var self = this;
        var interactionContainer = document.createElement('div');
        interactionContainer.classList.add(INTERACTIONS_CLASS);
        var pointer = document.createElement('div');
        pointer.classList.add(POINTER_CLASS);
        var textContainer = document.createElement('div');
        textContainer.classList.add(POINTER_WRAPPER_CLASS);
        var textItem = document.createElement('span');
        textItem.classList.add(POINTER_TEXT_CLASS);
        textItem.classList.add('noselect');
        textItem.innerHTML = '';
        textContainer.appendChild(textItem);
        pointer.appendChild(textContainer);
        var infotip = document.createElement('div');
        infotip.classList.add(POINTER_INFOTIP_CLASS);
        infotip.style.display = 'none';
        pointer.appendChild(infotip);
        interactionContainer.appendChild(pointer);
        var handle = document.createElement('div');
        handle.classList.add(POINTER_HANDLE_CLASS);
        interactionContainer.appendChild(handle);
        this.mouseListeners_.push(listen_1(interactionContainer, 'mousedown', function () {
          self.setDragging(true);
        }));
        this.mouseListeners_.push(listen_1(interactionContainer, 'touchstart', function () {
          self.setDragging(true);
        }));
        this.interactions_ = interactionContainer;
      }
      /**
       * Sets an animation time.
       *
       * @param {number} animationTime Animation time.
       */

    }, {
      key: "setAnimationTime",
      value: function setAnimationTime(animationTime) {
        if (animationTime === this.getMap().get('time')) {
          this.updatePointer(animationTime);
          return;
        }

        var numFrames = this.frames_.length;
        var i;
        var currentIndex;
        var nextIndex;
        var updateAllowed = true;

        if (this.animationPlay_) {
          for (i = 0; i < numFrames; i += 1) {
            if (this.getMap().get('time') <= this.frames_[i].endTime) {
              currentIndex = i;
              break;
            }
          }

          if (currentIndex == null) {
            currentIndex = numFrames - 1;
          }

          nextIndex = (currentIndex + 1) % numFrames;
          Array.from(this.frames_[currentIndex].element.getElementsByClassName(INDICATOR_CLASS)).forEach(function (indicatorElement) {
            if (indicatorElement.getAttribute(DATA_STATUS_ATTRIBUTE) === DATA_STATUS_WORKING) {
              updateAllowed = false;
            }
          });

          if (updateAllowed) {
            Array.from(this.frames_[nextIndex].element.getElementsByClassName(INDICATOR_CLASS)).forEach(function (indicatorElement) {
              if (indicatorElement.getAttribute(DATA_STATUS_ATTRIBUTE) === DATA_STATUS_WORKING) {
                updateAllowed = false;
              }
            });
          }
        }

        if (updateAllowed) {
          this.getMap().set('time', animationTime);
          this.updatePointer(animationTime);
        }
      }
      /**
       * Updates pointer text and location on the time slider.
       *
       * @param {number} animationTime Time value.
       * @param {boolean=} forceUpdate Forces an update.
       */

    }, {
      key: "updatePointer",
      value: function updatePointer(animationTime) {
        var forceUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (this.interactions_ == null) {
          return;
        }

        var numFrames = this.frames_.length;
        var i;
        var index;
        var needsUpdate;
        var tickText;

        for (i = 0; i < numFrames; i += 1) {
          if (animationTime <= this.frames_[i].endTime) {
            index = i;
            break;
          }
        }

        if (index != null) {
          if (forceUpdate) {
            needsUpdate = true;
          } else if (this.interactions_.parentElement == null) {
            needsUpdate = true;
          } else if (Number.parseInt(this.interactions_.parentElement.dataset.time, 10) !== animationTime) {
            this.interactions_.parentElement.removeChild(this.interactions_);
            needsUpdate = true;
          }

          if (needsUpdate) {
            this.frames_[index].element.appendChild(this.interactions_);
            tickText = this.getTickText(this.frames_[index].endTime, false).content;
            Array.from(this.interactions_.getElementsByClassName(POINTER_TEXT_CLASS)).forEach(function (textElement) {
              textElement.innerHTML = tickText;
            });
            Array.from(this.container_.getElementsByClassName(POINTER_INFOTIP_CLASS)).forEach(function (infotip) {
              infotip.innerHTML = tickText;
            });
          }
        }
      }
      /**
       * Updates loading state visualization
       *
       * @param {object} timeSteps Loader counter information for intervals.
       */

    }, {
      key: "updateTimeLoaderVis",
      value: function updateTimeLoaderVis(timeSteps) {
        var numIntervalItems = timeSteps.reduce(function (activeTimeSteps, timeStep) {
          if (timeStep.active) {
            activeTimeSteps.push(timeStep);
          }

          return activeTimeSteps;
        }, []);

        if (!this.config_.showTimeSlider) {
          return;
        }

        var numIntervals = numIntervalItems.length;
        var creationNeeded = numIntervals !== this.frames_.length;
        var i;
        var moments = [];

        if (!creationNeeded) {
          for (i = 0; i < numIntervals; i += 1) {
            if (numIntervalItems[i].endTime !== this.frames_[i].endTime) {
              creationNeeded = true;
              break;
            }
          }
        }

        this.container_.style.display = numIntervals > 0 ? 'block' : 'none';

        if (creationNeeded) {
          for (i = 0; i < numIntervals; i += 1) {
            moments.push(numIntervalItems[i].endTime);
          }

          this.createFrames(moments);
          this.createIndicators();
          this.createTicks();

          if (this.getMap().get('time') != null) {
            this.updatePointer(this.getMap().get('time'), true);
          }
        }

        this.frames_.forEach(function (frame) {
          Array.from(frame.element.getElementsByClassName(INDICATOR_CLASS)).forEach(function (indicatorElement) {
            var numIntervals;
            var time;
            var elementTime;
            var endTime;

            if (indicatorElement.parentElement != null && indicatorElement.parentElement.dataset != null) {
              elementTime = indicatorElement.parentElement.dataset.time;
            }

            if (elementTime == null) {
              return;
            }

            time = parseInt(elementTime, 10);

            if (time != null) {
              numIntervals = numIntervalItems.length;

              for (var j = 0; j < numIntervals; j += 1) {
                endTime = numIntervalItems[j].endTime;

                if (endTime != null && endTime === time) {
                  indicatorElement.setAttribute('data-status', numIntervalItems[j].status);
                  break;
                }
              }
            }
          });
        });
      }
      /**
       * Enables or disables pointer dragging.
       *
       * @param {boolean} dragging True if pointer dragging is enabled.
       */

    }, {
      key: "setDragging",
      value: function setDragging(dragging) {
        this.dragging_ = dragging;

        if (this.dragging_) {
          this.getMap().set('playing', false);
        }

        var pointerEvents = dragging ? 'auto' : 'none';
        Array.from(this.container_.getElementsByClassName(DRAG_LISTENER_CLASS)).forEach(function (element) {
          element.style.pointerEvents = pointerEvents;
        });
        Array.from(this.container_.getElementsByClassName(POINTER_CLASS)).forEach(function (element) {
          if (dragging) {
            element.classList.add(POINTER_DRAGGING);
          } else {
            element.classList.remove(POINTER_DRAGGING);
          }
        });
        var display = dragging ? 'block' : 'none';
        Array.from(this.container_.getElementsByClassName(POINTER_INFOTIP_CLASS)).forEach(function (element) {
          element.style.display = display;
        });
      }
      /**
       * Turns animation play on or off.
       *
       * @param {boolean} animationPlay True if play is turned on.
       */

    }, {
      key: "setAnimationPlay",
      value: function setAnimationPlay(animationPlay) {
        this.animationPlay_ = animationPlay;

        if (this.animationPlay_) {
          this.playButton_.classList.add(PLAYING_CLASS);
        } else {
          this.playButton_.classList.remove(PLAYING_CLASS);
        }
      }
      /**
       * Return information if meteorological optimizations are enabled.
       * @returns {boolean} Meteorological mode status.
       */

    }, {
      key: "isMeteorologicalMode",
      value: function isMeteorologicalMode() {
        return this.container_.classList.contains(METEOROLOGICAL_MODE);
      }
      /**
       * Generate text presentation of the given time.
       *
       * @param {number} tickTime Time value.
       * @param {boolean} showDate Show date information.
       * @returns {Object} Generated text presentation.
       */

    }, {
      key: "getTickText",
      value: function getTickText(tickTime) {
        var showDate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var numFrames;
        var i;
        var frameTime;
        var prevTime;
        var zPrevTime;
        var currentMoment;
        var format = 'HH:mm';
        var dateFormat = String.fromCharCode(160) + 'd.M.';
        var useDateFormat = false;
        var beginTime = this.frames_.length > 0 ? this.frames_[0].endTime : Number.NEGATIVE_INFINITY;

        if (beginTime == null) {
          return '';
        }

        if (tickTime < beginTime) {
          tickTime = beginTime;
        }

        var zTime = DateTime.fromMillis(tickTime).setZone(this.get('timeZone')).setLocale(this.locale_);
        var day = zTime.ordinal;
        var year = zTime.year;

        if (showDate) {
          numFrames = this.frames_.length;

          for (i = 0; i < numFrames; i += 1) {
            frameTime = this.frames_[i].endTime;

            if (frameTime >= tickTime) {
              break;
            }

            if (Array.from(this.frames_[i].element.getElementsByClassName(FRAME_TEXT_WRAPPER_CLASS)).length > 0) {
              prevTime = frameTime;
            }
          }

          currentMoment = DateTime.local().setZone(this.get('timeZone'));

          if (prevTime != null) {
            zPrevTime = DateTime.fromMillis(prevTime).setZone(this.get('timeZone'));

            if (day !== zPrevTime.ordinal || year !== zPrevTime.year) {
              useDateFormat = true;
            }
          } else if (tickTime === beginTime && (day !== currentMoment.ordinal || year !== currentMoment.year)) {
            useDateFormat = true;
          }
        }

        return {
          content: useDateFormat ? zTime.weekdayShort + zTime.toFormat(dateFormat) : zTime.toFormat(format),
          useDateFormat: useDateFormat
        };
      }
    }, {
      key: "getClock",
      value: function getClock() {
        return this.getTickText(this.getMap().get('time'), false).content;
      }
      /**
       * Clears time slider configurations.
       */

    }, {
      key: "clear",
      value: function clear() {
        if (this.timeListener_ != null) {
          unByKey(this.timeListener_);
        }

        if (this.playingListener_ != null) {
          unByKey(this.playingListener_);
        }

        if (this.timeZoneListener != null) {
          unByKey(this.timeZoneListener);
        }

        if (this.timeZoneLabelListener != null) {
          unByKey(this.timeZoneLabelListener);
        }

        this.mouseListeners_.forEach(function (mouseListener) {
          mouseListener.destroy();
        });
        this.resizeDetector.removeAllListeners(this.container_);

        if (this.container_ != null && this.container_.lastChild != null) {
          this.container_.removeChild(this.container_.lastChild);
        }

        this.frames_ = [];
      }
      /**
       * Destroys current time slider.
       */

    }, {
      key: "destroy",
      value: function destroy() {
        this.clear();
      }
    }]);

    return TimeSlider;
  }(Control);

  /**
   * @classdesc
   */

  var MetOClient = /*#__PURE__*/function (_BaseObject) {
    _inherits(MetOClient, _BaseObject);

    var _super = _createSuper(MetOClient);

    /**
     * @param {object} options Map options.
     */
    function MetOClient() {
      var _this;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, MetOClient);

      _this = _super.call(this);
      proj4.defs('EPSG:3067', '+proj=utm +zone=35 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs');
      register(proj4);
      _this.config_ = assign({}, DEFAULT_OPTIONS, options);

      if (options.target == null && options.container != null) {
        _this.config_.target = _this.config_.container;
      }

      _this.set('options', options, true);

      _this.set('map', null);

      _this.set('timeSlider', null);

      _this.vectorConfig_ = null;
      _this.status_ = {};
      _this.delay_ = options.refreshInterval != null && options.refreshInterval <= Number.MAX_SAFE_INTEGER && options.refreshInterval >= 0 ? options.refreshInterval : DEFAULT_DELAY;
      _this.periodDelay_ = 2 * DEFAULT_DELAY;
      _this.times_ = [];
      _this.playingListener_ = null;
      _this.previousListener_ = null;
      _this.timeListener_ = null;
      _this.renderComplete_ = false;
      _this.updateNeeded_ = false;
      _this.waitingRender_ = 0;
      _this.refreshInterval_ = options.refreshInterval ? Math.min(Duration.fromISO(options.refreshInterval).valueOf(), MAX_REFRESH_INTERVAL) : DEFAULT_REFRESH_INTERVAL;
      _this.capabilities_ = {};
      _this.legends_ = {};
      _this.selectedLegend_ = DEFAULT_LEGEND;
      _this.layerSwitcherWatcher = null;
      _this.delayLoop_ = _this.config_.metadata.tags.includes(TAG_DELAY_LOOP);
      _this.refreshTimer_ = null;
      _this.animationTimeout_ = null;
      _this.layerListeners_ = [];
      _this.sourceListeners_ = [];
      _this.optionsListener_ = _this.on('change:options', function (event) {
        var options = _this.get('options');

        _this.config_ = assign({}, DEFAULT_OPTIONS, options);

        if (options.target == null && options.container != null) {
          _this.config_.target = _this.config_.container;
        }

        _this.refresh_();
      });

      if (_this.config_.metadata.tags.includes(TAG_RENDER_IMMEDIATELY)) {
        _this.render();
      }

      return _this;
    }
    /**
     *
     * @param key
     * @param value
     * @param silent
     */


    _createClass(MetOClient, [{
      key: "set",
      value: function set(key, value, silent) {
        var property = this.get(key);

        if (property != null && _typeof(property) === 'object') {
          _get(_getPrototypeOf(MetOClient.prototype), "set", this).call(this, key, value, true);

          if (!silent) {
            this.dispatchEvent('change:' + key);
          }
        } else {
          _get(_getPrototypeOf(MetOClient.prototype), "set", this).call(this, key, value, silent);
        }
      }
      /**
       *
       * @returns {*}
       * @private
       */

    }, {
      key: "getVectorConfig_",
      value: function getVectorConfig_() {
        var _this2 = this;

        return this.vectorConfig_ = this.config_.layers.reduce(function (vectorConfig, layer) {
          var source = _this2.config_.sources[layer.source];

          if (source != null && layer.url == null && ['geojson', 'vector', 'raster'].includes(source.type)) {
            vectorConfig.layers.push(layer);

            if (vectorConfig.sources[layer.source] == null) {
              vectorConfig.sources[layer.source] = source;
            }
          }

          return vectorConfig;
        }, {
          version: 8,
          sources: {},
          layers: []
        });
      }
      /**
       * Render the animation map based on current configuration.
       *
       * @returns {Promise<Object>} Promise object representing rendered map.
       */

    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        return this.updateCapabilities_().then(function () {
          _this3.clear_();

          _this3.updateTimes_();

          var defaultTime = _this3.times_[0];
          var realWorldTime = Date.now();

          _this3.times_.some(function (time) {
            var future = time > realWorldTime;

            if (!future) {
              defaultTime = time;
            }

            return future;
          });

          if (_this3.config_.time == null) {
            _this3.config_.time = defaultTime;
          } // Limit bounds after refresh


          if (_this3.config_.time < _this3.times_[0]) {
            var _this3$times_ = _slicedToArray(_this3.times_, 1);

            _this3.config_.time = _this3$times_[0];
          }

          var lastTimeIndex = _this3.times_.length - 1;

          if (_this3.config_.time > _this3.times_[lastTimeIndex]) {
            _this3.config_.time = _this3.times_[lastTimeIndex];
          }

          Object.keys(_this3.config_.sources).forEach(function (source) {
            if (_this3.config_.sources[source].times != null && _this3.config_.sources[source].times.length > 0) {
              _this3.config_.sources[source].tiles = updateSourceTime(_this3.config_.sources[source].tiles, _this3.config_.sources[source].times.includes(defaultTime) ? defaultTime : _this3.config_.sources[source].times[0]);
            }
          });
          _this3.vectorConfig_ = _this3.getVectorConfig_();

          _this3.updateMap_();

          return _this3.get('map');
        }).catch(function (error) {
          console.log(error);
        });
      }
      /**
       *
       */

    }, {
      key: "refresh_",
      value: function refresh_() {
        var _this4 = this;

        var map = this.get('map');

        if (map != null) {
          var layers = map.getLayers().getArray();
          layers.forEach(function (layer) {
            var source = layer.getSource();
            var time = source.get(TIME);

            if (time != null) {
              source.set(TIME, null);
            }

            var id = layer.get('id');

            if (id != null && !id.startsWith('metoclient:')) {
              var config = _this4.config_.layers.find(function (layerConfig) {
                return layerConfig.id === layer.get('metoclient:id');
              });

              if (config != null) {
                config.visibility = layer.getVisible() ? VISIBLE : NOT_VISIBLE;
              }
            }
          });
          var view = map.getView();

          if (view != null) {
            this.config_.center = view.getCenter();
            this.config_.zoom = view.getZoom();
            this.config_.rotation = view.getRotation();
          }
        }

        var timeSlider = this.get('timeSlider');

        if (timeSlider != null) {
          if (this.config_.timeZone !== timeSlider.get('timeZone')) {
            timeSlider.set('timeZone', this.config_.timeZone);
          }

          if (this.config_.timeZoneLabel !== timeSlider.get('timeZoneLabel')) {
            timeSlider.set('timeZoneLabel', this.config_.timeZoneLabel);
          }
        }

        this.render();
      }
      /**
       *
       * @returns {Promise<void>}
       * @private
       */

    }, {
      key: "updateCapabilities_",
      value: function () {
        var _updateCapabilities_ = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var _this5 = this;

          var updateTime, responses;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  updateTime = Date.now();
                  _context.next = 3;
                  return Promise.all(Object.entries(this.config_.layers.reduce(function (capabilities, layer) {
                    if (layer.source == null) {
                      return capabilities;
                    }

                    var sourceIds = [layer.source];
                    var timeData;

                    if (layer.time != null) {
                      if (layer.time.source != null && !sourceIds.includes(layer.time.source)) {
                        sourceIds.push(layer.time.source);
                      }

                      if (layer.time.range != null) {
                        timeData = parseTimes(layer.time.range);
                      }
                    }

                    sourceIds.forEach(function (sourceId) {
                      var source = _this5.config_.sources[sourceId];

                      if (source == null) {
                        return;
                      }

                      var url = getSourceCapabilitiesUrl(source);

                      if (url.length === 0) {
                        return;
                      }

                      var index = url.lastIndexOf('/');
                      var type = '';

                      if (url.toLowerCase().startsWith('http') && index >= 0) {
                        type = url.substring(index + 1).toLowerCase();
                      } else {
                        type = layer.url.service.toLowerCase();
                      }

                      if (capabilities[url] == null) {
                        capabilities[url] = {
                          updated: updateTime,
                          type: type,
                          server: source.server != null ? source.server.toLowerCase() : null,
                          data: null,
                          startTime: Number.POSITIVE_INFINITY,
                          endTime: Number.NEGATIVE_INFINITY
                        };
                      }

                      if (timeData != null && timeData.length > 0) {
                        if (timeData[0] < capabilities[url].startTime) {
                          capabilities[url].startTime = timeData[0];
                        }

                        var maxTimeIndex = timeData.length - 1;

                        if (timeData[maxTimeIndex] > capabilities[url].endTime) {
                          capabilities[url].endTime = timeData[maxTimeIndex];
                        }
                      }
                    });
                    return capabilities;
                  }, {})).map(function (capabKeyValue) {
                    _this5.capabilities_[capabKeyValue[0]] = capabKeyValue[1];
                    var type = capabKeyValue[1].type;
                    var url = ['startTime', 'endTime'].reduce(function (accQuery, timeParam) {
                      if (type === 'wms' && capabKeyValue[1].server === SMARTMET_SERVER) {
                        var timeISO = DateTime.fromMillis(capabKeyValue[1][timeParam]).toUTC().toISO({
                          suppressMilliseconds: true,
                          includeOffset: true
                        });

                        if (timeISO != null) {
                          accQuery += '&' + timeParam.toLowerCase() + '=' + timeISO;
                        }
                      }

                      return accQuery;
                    }, "".concat(capabKeyValue[0], "?service=").concat(type)) + "&".concat(GET_CAPABILITIES_QUERY);
                    return canAjax({
                      url: url,
                      crossDomain: true,
                      contentType: 'text/plain',
                      beforeSend: function beforeSend(jqxhr) {
                        jqxhr.requestURL = url;
                      }
                    });
                  }));

                case 3:
                  responses = _context.sent;
                  _context.next = 6;
                  return Promise.all(responses.map(function (response) {
                    if (response.responseText != null && response.requestURL.endsWith(GET_CAPABILITIES_QUERY)) {
                      var capabKey = response.requestURL.split('?')[0];
                      var capabKeyParts = capabKey.split('/');
                      var localCapabKey = '';

                      if (capabKeyParts.length > 0) {
                        localCapabKey = capabKeyParts[capabKeyParts.length - 1];
                      }

                      if (localCapabKey.length > 0 && _this5.capabilities_[localCapabKey] != null) {
                        capabKey = localCapabKey;
                      }

                      if (typeof CapabilitiesReader[_this5.capabilities_[capabKey].type] === 'function') {
                        _this5.capabilities_[capabKey].data = CapabilitiesReader[_this5.capabilities_[capabKey].type](response.responseText);
                      }
                    }
                  }));

                case 6:
                  Object.keys(this.capabilities_).forEach(function (capabilitiesKey) {
                    if (_this5.capabilities_[capabilitiesKey] != null && _this5.capabilities_[capabilitiesKey].updated < updateTime) {
                      delete _this5.capabilities_[capabilitiesKey];
                    }
                  });

                case 7:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function updateCapabilities_() {
          return _updateCapabilities_.apply(this, arguments);
        }

        return updateCapabilities_;
      }()
      /**
       *
       * @param layer
       * @returns {boolean}
       * @private
       */

    }, {
      key: "isTiledLayer_",
      value: function isTiledLayer_(layer) {
        if (layer == null || layer.source == null) {
          return false;
        }

        if (layer.url != null && typeof layer.url.service === 'string' && layer.url.service.toLowerCase() === 'wmts') {
          return true;
        }

        var source = this.config_.sources[layer.source];

        if (source.type === 'OSM') {
          return true;
        }

        if (source == null || source.tiles == null) {
          return false;
        }

        var tiled = Array.isArray(source.tileSize) ? source.tileSize.map(function (tileSize) {
          return Number(tileSize) > 0;
        }) : new Array(2).fill(Number(source.tileSize) > 0);

        if (Array.isArray(source.tiles)) {
          // Todo: Handle also other indexes
          var url = new url_min(source.tiles[0].toLowerCase());
          tiled = ['width', 'height'].map(function (measure, index) {
            return url.query != null && url.query[measure] !== undefined && Number(url.query[measure]) > 0 || tiled[index];
          });
        }

        if (layer.url != null) {
          ['width', 'height'].forEach(function (measure, index) {
            if (layer.url[measure] !== undefined) {
              tiled[index] = Number(layer.url[measure]) > 0;
            }
          });
        }

        return tiled.every(Boolean);
      }
    }, {
      key: "isAnimationLayer_",
      value: function isAnimationLayer_(layer) {
        return layer.get('times') != null && !layer.get('id').startsWith(METOCLIENT_PREFIX);
      }
    }, {
      key: "getLayerType_",
      value: function getLayerType_(layer) {
        if (this.isTiledLayer_(layer)) {
          return 'tiled';
        }

        if (layer.type != null && layer.type !== 'raster') {
          return layer.type;
        }

        return 'image';
      }
    }, {
      key: "createLayer_",
      value: function createLayer_(layerConfig) {
        var _this6 = this;

        var time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.config_.time;
        var postfix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
        var layerType = this.getLayerType_(layerConfig);

        if (LayerCreator[layerType] == null) {
          return null;
        }

        var source = this.config_.sources[layerConfig.source];
        var timeDefined = layerConfig.time != null && layerConfig.time.data != null;
        var postfixDefined = postfix.length > 0;

        if (postfixDefined && !timeDefined) {
          return null;
        }

        var options = _objectSpread2({}, this.config_);

        if (timeDefined) {
          options.time = time;

          if (!layerConfig.time.data.includes(options.time)) {
            options.time = layerConfig.time.data.reduce(function (prevT, t) {
              var prevTime = prevT;

              if (t < _this6.config_.time && t > prevTime) {
                prevTime = t;
              }

              return prevTime;
            }, layerConfig.time.data[0]);
          }
        }

        var tiles = source.tiles != null ? source.tiles[0].split('?')[0] : null;
        var url = source.capabilities != null && source.capabilities.length > 0 ? source.capabilities : tiles;
        var layer = LayerCreator[layerType](layerConfig, options, url != null ? this.capabilities_[url] : null);

        if (layer != null) {
          this.layerListeners_.push(layer.on('change:visible', function (event) {
            var visible = layer.getVisible();
            ['previous', 'next'].forEach(function (relative) {
              _this6.setRelativesVisible_(layer, relative, visible);

              var previousLayer = layer.get(PREVIOUS);

              if (previousLayer != null) {
                previousLayer.setVisible(visible);
              }

              var nextLayer = layer.get(NEXT);

              if (nextLayer != null) {
                nextLayer.setVisible(visible);
              }
            });

            if (_this6.isAnimationLayer_(layer)) {
              if (!_this6.isVisibleTime_(_this6.config_.time)) {
                var nextTime = _this6.getNextTime_();

                var prevTime = _this6.getPrevTime_();

                var newTime = Math.abs(nextTime - _this6.config_.time) < Math.abs(_this6.config_.time - prevTime) ? nextTime : prevTime;

                if (newTime != null) {
                  _this6.get('map').set('time', newTime);
                }
              }

              _this6.updateTimeSlider_();
            }
          }));

          if (timeDefined) {
            layer.set('times', layerConfig.time.data);
          }

          layer.set(OPACITY, layerConfig.opacity != null ? layerConfig.opacity : 1);
          var id = layer.get('id');
          layer.set(ID, id);

          if (postfixDefined) {
            layer.set('id', "metoclient:".concat(id).concat(postfix));
            layer.set('title', '');
            MetOClient.hideLayer_(layer);
          } else {
            var prevLayerId = layer.get('previous');
            var prevLayer = prevLayerId != null && prevLayerId.length > 0 ? this.config_.layers.find(function (configLayer) {
              return configLayer.id === prevLayerId;
            }) : null;
            var prevTimes = prevLayer != null && prevLayer.time != null ? prevLayer.time.data : [];

            if (prevTimes.includes(this.config_.time)) {
              MetOClient.hideLayer_(layer);
            }
          }
        }

        return layer;
      }
    }, {
      key: "createLayerSwitcherTitle_",
      value: function createLayerSwitcherTitle_(layerConfig) {
        var title = layerConfig.metadata.title;
        var layersConfig = this.config_.layers;
        var nextLayerId = layerConfig.next != null ? layerConfig.next : [this.config_.layers.find(function (layer) {
          return layer.previous === layerConfig.id;
        })].map(function (l) {
          return l == null ? null : l.id;
        })[0];
        var nextLayerConfig = nextLayerId != null && nextLayerId.length > 0 ? layersConfig.find(function (layer) {
          return layer.id === nextLayerId;
        }) : null;
        var nextTitle = nextLayerConfig != null ? this.createLayerSwitcherTitle_(nextLayerConfig) : '';

        if (nextTitle != null && nextTitle.length > 0 && title !== nextTitle) {
          title += " / ".concat(nextTitle);
        }

        layerConfig.metadata.title = '';
        return title;
      }
      /**
       *
       *
       * @param {*} layer
       * @param {*} relative
       * @param {*} visible
       * @memberof MetOClient
       */

    }, {
      key: "setRelativesVisible_",
      value: function setRelativesVisible_(layer, relative, visible) {
        var relativeLayerId = layer.get(relative);
        var layers = this.get('map').getLayers().getArray();
        var relativeLayer = relativeLayerId != null && relativeLayerId.length > 0 ? layers.find(function (layer) {
          return layer.get('id') === relativeLayerId;
        }) : null;

        if (relativeLayer != null) {
          relativeLayer.setVisible(visible);
          this.setRelativesVisible_(relativeLayer, relative, visible);
          var previousLayer = relativeLayer.get(PREVIOUS);

          if (previousLayer != null) {
            previousLayer.setVisible(visible);
          }

          var nextLayer = relativeLayer.get(NEXT);

          if (nextLayer != null) {
            nextLayer.setVisible(visible);
          }
        }
      }
      /**
       *
       * @returns {Collection}
       * @private
       */

    }, {
      key: "createLayers_",
      value: function createLayers_() {
        var _this7 = this;

        var baseMapConfigs = this.config_.layers.filter(function (layerConfig) {
          return layerConfig != null && layerConfig.metadata != null && layerConfig.metadata.type != null && layerConfig.metadata.type.toLowerCase() === BASE_MAP;
        });
        var lastVisibleBaseMapIndex = baseMapConfigs.reduce(function (prevVisibleBaseMapIndex, baseMapConfig, index) {
          return baseMapConfig.visibility === VISIBLE ? index : prevVisibleBaseMapIndex;
        }, baseMapConfigs.length - 1);
        baseMapConfigs.forEach(function (baseMapConfig, index) {
          baseMapConfig.visibility = index === lastVisibleBaseMapIndex ? VISIBLE : NOT_VISIBLE;
        });
        var layers = new Collection$2(this.config_.layers.map(function (layerConfig) {
          if (layerConfig.time != null && layerConfig.metadata != null && layerConfig.metadata.title != null) {
            layerConfig.legendTitle = layerConfig.metadata.title;
          }

          return layerConfig;
        }).reduce(function (olLayers, layerConfig) {
          if (layerConfig.time != null && (layerConfig.previous == null || layerConfig.previous.length === 0) && layerConfig.metadata != null && layerConfig.metadata.title != null) {
            layerConfig.metadata.title = _this7.createLayerSwitcherTitle_(layerConfig);
          }

          if (layerConfig.url != null) {
            layerConfig.url = Object.keys(layerConfig.url).reduce(function (lowerCased, key) {
              lowerCased[key.toLowerCase()] = layerConfig.url[key];
              return lowerCased;
            }, {});
          }

          if (layerConfig.source == null || layerConfig.url != null && (typeof layerConfig.url.service !== 'string' || layerConfig.url.service.length === 0)) {
            return olLayers;
          }

          if (baseMapConfigs.length === 1 && layerConfig.metadata != null && layerConfig.metadata.type != null && layerConfig.metadata.type.toLowerCase() === BASE_MAP) {
            layerConfig.metadata.title = '';
          }

          var olLayer = _this7.createLayer_(layerConfig);

          if (olLayer != null) {
            olLayers.push(olLayer);
          }

          return olLayers;
        }, []));
        layers.getArray().forEach(function (layer, index, layersArray) {
          var opacity = layer.get('metoclient:opacity');

          if (layer.get('times') == null) {
            layers.item(index).setOpacity(opacity);
          } else {
            var source = layer.getSource();
            var time = source.get(TIME);

            if (time === _this7.config_.time) {
              var previousId = layer.get('previous');

              if (previousId != null && previousId.length > 0) {
                var previous = layersArray.find(function (l) {
                  return l.get('id') === previousId;
                });
                var previousTimes = previous.get('times');

                if (!previousTimes.includes(_this7.config_.time)) {
                  layers.item(index).setOpacity(opacity);
                }
              }
            }
          }
        });
        return layers;
      }
    }, {
      key: "setVisible_",
      value: function setVisible_(layer, visible) {
        if (visible) {
          MetOClient.showLayer_(layer);
        } else {
          MetOClient.hideLayer_(layer);
        }
      }
    }, {
      key: "createView_",

      /**
       *
       * @returns {View}
       * @private
       */
      value: function createView_() {
        var viewOptions = _objectSpread2({}, this.config_);

        delete viewOptions.sources;
        delete viewOptions.layers;
        return new View(viewOptions);
      }
      /**
       *
       * @param time
       * @returns {boolean}
       * @private
       */

    }, {
      key: "isVisibleTime_",
      value: function isVisibleTime_(time) {
        return this.get('map').getLayers().getArray().some(function (layer) {
          return layer.getVisible() && layer.get('times') != null && layer.get('times').includes(time);
        });
      }
      /**
       *
       * @private
       */

    }, {
      key: "updateTimeSlider_",
      value: function updateTimeSlider_() {
        var _this8 = this;

        this.get('timeSlider').updateTimeLoaderVis(this.times_.map(function (time) {
          return {
            endTime: time,
            status: _this8.status_[time],
            active: _this8.isVisibleTime_(time)
          };
        }));
      }
    }, {
      key: "currentTimeRendered_",
      value: function currentTimeRendered_() {
        var _this9 = this;

        var map = this.get('map');

        if (map == null) {
          return;
        }

        var layers = map.getLayers().getArray().filter(function (layer) {
          return layer.get('mapbox-source') == null;
        });
        layers.forEach(function (layer) {
          var times = layer.get('times');
          var visible = times == null || !Array.isArray(times) || times.length === 0;

          if (!visible) {
            var source = layer.getSource();

            var visibleTime = _this9.getVisibleTime_(layer);

            if (source.get(TIME) === visibleTime) {
              visible = true;
              var prevLayerId = layer.get('previous');
              var prevLayer = prevLayerId != null && prevLayerId.length > 0 ? layers.find(function (l) {
                return l.get('id') === prevLayerId;
              }) : null;

              if (prevLayer != null) {
                var prevTimes = prevLayer.get('times');

                if (prevTimes[prevTimes.length - 1] >= _this9.config_.time) {
                  visible = false;
                }
              }
            }
          }

          _this9.setVisible_(layer, visible);
        });
        this.status_[this.config_.time] = STATUS_SUCCESS;
        this.updateTimeSlider_();

        if (this.updateNeeded_) {
          this.updateNeeded_ = false;
          this.renderComplete_ = true;
          this.timeUpdated_();
        } else if (this.config_.time != null) {
          var prevTime = this.getPrevTime_();
          var nextTime = this.getNextTime_();
          layers.filter(function (layer) {
            var times = layer.get('times');

            if (times == null || !Array.isArray(times) || times.length === 0) {
              return false;
            }

            return !layer.get('id').startsWith('metoclient:');
          }).forEach(function (layer) {
            var layerId = layer.get('id');

            var layerConfig = _this9.config_.layers.find(function (layerConfig) {
              return layerConfig.id === layerId;
            });

            var skipPrevious = false;
            var skipNext = false;
            var times = layer.get('times');
            var layerPrevTime;
            var layerNextTime;
            var previous = layer.get('previous');
            var next = layer.get('next');

            if (map.get('playing') || prevTime < times[0] && previous != null && previous.length > 0) {
              skipPrevious = true;
            } else {
              layerPrevTime = times.includes(prevTime) ? prevTime : times.reduce(function (closestPrevTime, time) {
                return time < prevTime && prevTime - time < closestPrevTime ? time : closestPrevTime;
              }, Number.POSITIVE_INFINITY);

              if (layerPrevTime > prevTime) {
                layerPrevTime = Math.max.apply(Math, _toConsumableArray(times));
              }
            }

            if (nextTime > times[times.length - 1] && next != null && next.length > 0) {
              skipNext = true;
            } else {
              layerNextTime = times.includes(nextTime) ? nextTime : times.reduce(function (closestNextTime, time) {
                return time > nextTime && nextTime - time > closestNextTime ? time : closestNextTime;
              }, Number.NEGATIVE_INFINITY);

              if (layerNextTime < nextTime) {
                layerNextTime = Math.min.apply(Math, _toConsumableArray(times));
              }
            }

            var layers = map.getLayers();
            var prevLayer = layer.get(PREVIOUS);

            if (prevLayer == null && layerConfig != null && layerPrevTime != null) {
              prevLayer = _this9.createLayer_(layerConfig, layerPrevTime, '-previous');
              prevLayer.setVisible(layer.getVisible());
              var index = layers.getArray().findIndex(function (l) {
                return l.get(ID) === layer.get(ID);
              });
              layers.insertAt(index, prevLayer);
              layer.set(PREVIOUS, prevLayer);
            }

            if (!skipPrevious && prevLayer != null) {
              var prevSource = prevLayer.getSource();

              if (prevSource.get(TIME) !== layerPrevTime) {
                MetOClient.hideLayer_(prevLayer);
                SourceUpdater[prevSource.get('metoclient:olClassName')](prevSource, layerPrevTime);
              }
            }

            var nextLayer = layer.get(NEXT);

            if (nextLayer == null && layerConfig != null && layerNextTime != null) {
              nextLayer = _this9.createLayer_(layerConfig, layerNextTime, '-next');
              nextLayer.setVisible(layer.getVisible());

              var _index = layers.getArray().findIndex(function (l) {
                return l.get(ID) === layer.get(ID);
              });

              layers.insertAt(_index, nextLayer);
              layer.set(NEXT, nextLayer);
            }

            if (!skipNext && nextLayer != null) {
              var nextSource = nextLayer.getSource();

              if (nextSource.get(TIME) !== layerNextTime) {
                MetOClient.hideLayer_(nextLayer);
                SourceUpdater[nextSource.get('metoclient:olClassName')](nextSource, layerNextTime);
              }
            }
          });
          map.renderSync();
          map.once('rendercomplete', function (event) {
            _this9.renderComplete_ = true;

            if (_this9.updateNeeded_) {
              _this9.updateNeeded_ = false;

              _this9.timeUpdated_();
            } else if (_this9.waitingRender_ > 0) {
              clearTimeout(_this9.animationTimeout_);
              _this9.animationTimeout_ = setTimeout(_this9.animate_.bind(_this9), Math.max(_this9.delay_ - (Date.now() - _this9.waitingRender_), 0));
            }
          });
        }
      }
    }, {
      key: "getLayerSwitcher_",
      value: function getLayerSwitcher_() {
        var map = this.get('map');

        if (map == null) {
          return null;
        }

        var controls = map.getControls();

        if (controls == null) {
          return null;
        }

        return controls.getArray().find(function (control) {
          return control.get('metoclient:olClassName') === 'LayerSwitcher';
        });
      }
      /**
       *
       * @param layer
       * @returns {any}
       * @private
       */

    }, {
      key: "getVisibleTime_",
      value: function getVisibleTime_(layer) {
        var _this10 = this;

        var visibleTime = null;
        var layerTimes = layer.get('times');

        if (layerTimes != null && Array.isArray(layerTimes) && layerTimes.length > 0 && this.config_.time >= layerTimes[0]) {
          layerTimes.some(function (time) {
            var notHistory = time >= _this10.config_.time;

            if (notHistory) {
              visibleTime = time;
            }

            return notHistory;
          });
        }

        return visibleTime;
      }
    }, {
      key: "getFeatureLayerTime_",
      value: function getFeatureLayerTime_(featureLayer) {
        var map = this.get('map');

        if (map == null) {
          return null;
        }

        var mapTime = map.get('time');
        var layerTimes = featureLayer.get('times');
        var hideAll = mapTime < layerTimes[0] || mapTime > layerTimes[layerTimes.length - 1];
        var layerTime = hideAll ? null : _toConsumableArray(layerTimes).reverse().find(function (time) {
          return time <= mapTime;
        });
        return layerTime;
      }
      /**
       *
       * @param layer
       * @param prevLayer
       * @param nextLayer
       * @private
       */

    }, {
      key: "useNextLayer_",
      value: function useNextLayer_(layer, prevLayer, nextLayer) {
        var baseId = layer.get('metoclient:id');
        layer.set('id', "metoclient:".concat(baseId, "-previous"));
        nextLayer.set('id', baseId);

        if (prevLayer != null) {
          prevLayer.set('id', "metoclient:".concat(baseId, "-next"));
        }

        nextLayer.set(PREVIOUS, layer);
        nextLayer.set(NEXT, prevLayer);
        nextLayer.set('title', layer.get('title'));
        layer.set(PREVIOUS, nextLayer);
        layer.set('title', '');
      }
      /**
       *
       * @private
       */

    }, {
      key: "timeUpdated_",
      value: function timeUpdated_() {
        var _this11 = this;

        var map = this.get('map');
        var layers = map.getLayers().getArray();
        layers.filter(function (layer) {
          return layer.get('mapbox-source') != null && layer.get('times') != null;
        }).forEach(function (featureLayer) {
          var layerTime = _this11.getFeatureLayerTime_(featureLayer);

          featureLayer.getSource().getFeatures().forEach(function (feature) {
            if (layerTime == null || feature.get('metoclient:time') !== layerTime) {
              feature.setStyle(new Style({}));
            } else {
              feature.setStyle(null);
            }
          });
        });

        if (!this.renderComplete_) {
          var mapTime = this.get('map').get('time');

          if (this.status_[mapTime] !== STATUS_SUCCESS) {
            this.status_[mapTime] = STATUS_WORKING;
            this.updateTimeSlider_();
          }

          this.updateNeeded_ = true;
          return;
        }

        this.get('map').once('rendercomplete', this.currentTimeRendered_.bind(this));
        this.status_[this.config_.time] = STATUS_SUCCESS;
        this.config_.time = this.get('map').get('time');
        this.status_[this.config_.time] = STATUS_WORKING;
        Object.keys(this.status_).forEach(function (time) {
          if (Number(time) !== _this11.config_.time && _this11.status_[time] === STATUS_WORKING) {
            _this11.status_[time] = '';
          }
        });
        this.updateTimeSlider_();
        layers.filter(function (layer) {
          return layer.get('mapbox-source') == null;
        }).filter(function (layer) {
          var times = layer.get('times');

          if (times == null || !Array.isArray(times) || times.length === 0) {
            return false;
          }

          if (_this11.config_.time < times[0] || _this11.config_.time > times[times.length - 1]) {
            MetOClient.hideLayer_(layer);
            return false;
          }

          var prevLayerId = layer.get('previous');
          var prevLayer = prevLayerId != null && prevLayerId.length > 0 ? layers.find(function (l) {
            return l.get('id') === prevLayerId;
          }) : null;
          var prevTimes = prevLayer != null ? prevLayer.get('times') : [];

          if (prevTimes.includes(_this11.config_.time)) {
            MetOClient.hideLayer_(layer);
            return false;
          }

          return !layer.get('id').startsWith('metoclient:');
        }).forEach(function (layer) {
          var source = layer.getSource();

          var visibleTime = _this11.getVisibleTime_(layer);

          if (source.get('metoclient:time') === visibleTime) {
            var prevLayer = layer.get('metoclient:previous');

            if (prevLayer != null) {
              MetOClient.hideLayer_(prevLayer);
            } else {
              _this11.status_[_this11.config_.time] = STATUS_SUCCESS;

              _this11.updateTimeSlider_();
            }

            var nextLayer = layer.get('metoclient:next');

            if (nextLayer != null) {
              MetOClient.hideLayer_(nextLayer);
            }

            MetOClient.showLayer_(layer);
          } else {
            var _prevLayer = layer.get('metoclient:previous');

            var _nextLayer = layer.get('metoclient:next');

            if (_prevLayer != null) {
              var prevSource = _prevLayer.getSource();

              if (prevSource != null && prevSource.get(TIME) === visibleTime) {
                MetOClient.hideLayer_(layer);
                MetOClient.showLayer_(_prevLayer);
                var baseId = layer.get('metoclient:id');
                layer.set('id', "metoclient:".concat(baseId, "-next"));

                _prevLayer.set('id', baseId);

                if (_nextLayer != null) {
                  _nextLayer.set('id', "metoclient:".concat(baseId, "-previous"));
                }

                _prevLayer.set('metoclient:previous', _nextLayer);

                _prevLayer.set('metoclient:next', layer);

                _prevLayer.set('title', layer.get('title'));

                layer.set('metoclient:next', _prevLayer);
                layer.set('title', '');
                return;
              }
            }

            if (_nextLayer != null) {
              var nextSource = _nextLayer.getSource();

              if (nextSource != null) {
                if (nextSource.get(TIME) === visibleTime) {
                  MetOClient.hideLayer_(layer);
                  MetOClient.showLayer_(_nextLayer);

                  _this11.useNextLayer_(layer, _prevLayer, _nextLayer);

                  return;
                }

                _this11.useNextLayer_(layer, _prevLayer, _nextLayer);

                SourceUpdater[nextSource.get('metoclient:olClassName')](nextSource, visibleTime);
                return;
              }
            }

            SourceUpdater[source.get('metoclient:olClassName')](source, _this11.config_.time);
          }
        });
        this.renderComplete_ = false;

        if (map.getLayers().getLength() > 0) {
          map.renderSync();
        }
      }
    }, {
      key: "getLayerSwitcherPanel_",
      value: function getLayerSwitcherPanel_() {
        return document.querySelector("div#".concat(LAYER_SWITCHER_CONTAINER_ID, " div.panel"));
      }
    }, {
      key: "isLayerSwitcherVisible_",
      value: function isLayerSwitcherVisible_() {
        var layerSwitcher = this.getLayerSwitcher_();

        if (layerSwitcher == null) {
          return null;
        }

        return document.getElementById(LAYER_SWITCHER_CONTAINER_ID).classList.contains(layerSwitcher.shownClassName);
      }
      /**
       *
       * @private
       */

    }, {
      key: "createLegendChooser_",
      value: function createLegendChooser_() {
        var _this12 = this;

        var layerSwitcherPanel = this.getLayerSwitcherPanel_();

        if (layerSwitcherPanel == null) {
          return;
        }

        var legendChooserContainer = document.getElementById(LEGEND_CHOOSER_CONTAINER_ID);

        if (legendChooserContainer != null) {
          return;
        }

        legendChooserContainer = document.createElement('div');
        legendChooserContainer.setAttribute('id', LEGEND_CHOOSER_CONTAINER_ID);
        var legendSelectLabel = document.createElement('label');
        legendSelectLabel.setAttribute('id', LEGEND_CHOOSER_LABEL_ID);
        legendSelectLabel.setAttribute('for', LEGEND_CHOOSER_SELECT_ID);
        legendSelectLabel.innerHTML = this.config_.texts.Legend;
        legendChooserContainer.appendChild(legendSelectLabel);
        var legendSelect = document.createElement('select');
        legendSelect.setAttribute('id', LEGEND_CHOOSER_SELECT_ID);
        Object.keys(this.legends_).forEach(function (key) {
          var legendOption = document.createElement('option');
          legendOption.value = key;
          legendOption.text = _this12.legends_[key].title;
          legendSelect.appendChild(legendOption);
        });
        legendSelect.value = this.selectedLegend_;
        legendSelect.addEventListener('change', function () {
          var selectedOption = legendSelect.options[legendSelect.selectedIndex];
          _this12.selectedLegend_ = selectedOption.value;
          var legendContainer = document.getElementById(LEGEND_CONTAINER_ID);

          if (legendContainer != null) {
            while (legendContainer.firstChild) {
              legendContainer.removeChild(legendContainer.firstChild);
            }

            var url = _this12.legends_[selectedOption.value].url;

            if (url != null && url.length > 0) {
              var legendFigure = document.createElement('figure');
              var legendCaption = document.createElement('figcaption');
              legendCaption.innerHTML = selectedOption.text;
              legendFigure.appendChild(legendCaption);
              var legendImage = document.createElement('img');
              legendImage.setAttribute('src', url);
              legendFigure.appendChild(legendImage);
              legendContainer.appendChild(legendFigure);
            }
          }
        });
        legendChooserContainer.appendChild(legendSelect);
        layerSwitcherPanel.appendChild(legendChooserContainer);
        var layerList = layerSwitcherPanel.querySelector('ul');

        if (layerList != null) {
          layerList.addEventListener('change', function () {
            _this12.createLegendChooser_();
          });
        }
      }
      /**
       *
       * @private
       */

    }, {
      key: "createLayerSwitcherWatcher_",
      value: function createLayerSwitcherWatcher_() {
        var _this13 = this;

        if (this.layerSwitcherWatcher != null) {
          return;
        }

        var layerSwitcherPanel = this.getLayerSwitcherPanel_(); // A workaround for https://github.com/walkermatt/ol-layerswitcher/issues/209

        if (layerSwitcherPanel != null) {
          this.layerSwitcherWatcher = new ElementVisibilityWatcher();
          this.layerSwitcherWatcher.watch(layerSwitcherPanel, function (visible) {
            if (visible) {
              _this13.createLegendChooser_();
            }
          });
        }
      }
      /**
       *
       * @private
       */

    }, {
      key: "createLegendContainer_",
      value: function createLegendContainer_() {
        var mapContainer = document.getElementById(this.config_.target);

        if (mapContainer != null) {
          var legendContainer = document.createElement('div');
          legendContainer.setAttribute('id', LEGEND_CONTAINER_ID);
          mapContainer.appendChild(legendContainer);
        }
      }
      /**
       *
       */

    }, {
      key: "createLegends_",
      value: function createLegends_() {
        var _this14 = this;

        var map = this.get('map');

        if (map == null) {
          return;
        }

        var view = map.getView();

        if (view == null) {
          return;
        } // Todo: support resolutions
        // const resolution = view.getResolution();


        var layers = map.getLayers();
        this.legends_ = layers.getArray().filter(function (layer) {
          return _this14.isAnimationLayer_(layer);
        }).reduce(function (legendArray, layer) {
          var source = layer.getSource();

          if (source != null && typeof source.getLegendUrl === 'function') {
            var legendUrl = source.getLegendUrl();

            if (legendUrl != null && legendUrl.length > 0) {
              legendArray[layer.get('id')] = {
                title: layer.get('legendTitle'),
                url: legendUrl
              };
            }
          }

          return legendArray;
        }, _defineProperty({}, DEFAULT_LEGEND, {
          title: '',
          url: null
        }));

        if (Object.entries(this.legends_).length > 1) {
          this.createLegendContainer_();
          this.createLayerSwitcherWatcher_();
        }
      }
    }, {
      key: "initMap_",
      value: function initMap_(map) {
        var _this15 = this;

        this.set('map', map);

        if (!this.config_.metadata.tags.includes(TAG_NO_LAYER_SWITCHER)) {
          var layerSwitcher = new olLayerswitcher({
            tipLabel: this.config_.texts['Layer Switcher']
          });
          layerSwitcher.set('metoclient:olClassName', 'LayerSwitcher');
          map.addControl(layerSwitcher);
          var layerSwitcherContainer = document.querySelector("div#".concat(this.config_.target, " div.layer-switcher"));

          if (layerSwitcherContainer != null) {
            layerSwitcherContainer.setAttribute('id', LAYER_SWITCHER_CONTAINER_ID); // https://github.com/walkermatt/ol-layerswitcher/issues/39

            var layerSwitcherButton = layerSwitcherContainer.querySelector('button');

            if (layerSwitcherButton != null) {
              layerSwitcherButton.onmouseover = function () {};

              layerSwitcherButton.onclick = function () {
                var layerSwitcher = _this15.getLayerSwitcher_();

                if (_this15.isLayerSwitcherVisible_()) {
                  layerSwitcher.hidePanel();
                } else {
                  layerSwitcher.showPanel();
                }
              };
            }

            var layerSwitcherPanel = this.getLayerSwitcherPanel_();

            if (layerSwitcherPanel != null) {
              layerSwitcherPanel.onmouseout = function () {};
            }
          }
        }

        this.createLegends_();
        this.renderComplete_ = true;
        this.get('timeSlider').createTimeSlider(this.times_);
        this.playingListener_ = this.get('map').on('change:playing', function (evt) {
          if (map.get('playing')) {
            _this15.animate_();
          }
        });
        this.timeListener_ = map.on('change:time', this.timeUpdated_.bind(this));
        this.nextListener_ = map.on('next', function (evt) {
          _this15.next();
        });
        this.previousListener_ = map.on('previous', function (evt) {
          _this15.previous();
        });
        map.set('time', this.config_.time);
        this.refreshTimer_ = setInterval(this.refresh_.bind(this), this.refreshInterval_);
        return map;
      }
    }, {
      key: "addTimes_",
      value: function addTimes_(times) {
        if (times != null && Array.isArray(times) && times.length > 0) {
          this.times_ = _toConsumableArray(new Set([].concat(_toConsumableArray(this.times_), _toConsumableArray(times)))).sort();
        }

        var map = this.get('map');

        if (map != null && map.get('time') == null && this.times_.length > 0) {
          var currentTime = Date.now();
          map.set('time', this.times_[Math.max(this.times_.findIndex(function (time) {
            return time > currentTime;
          }) - 1, 0)]);
        }
      }
    }, {
      key: "createVectorLayers_",
      value: function createVectorLayers_(map, vectorConfig) {
        var _this16 = this;

        return olms(map, vectorConfig).then(function (updatedMap) {
          if (vectorConfig.layers != null) {
            var mapProjection = updatedMap.getView().getProjection().getCode();
            updatedMap.getLayers().getArray().filter(function (layer) {
              return layer.get('mapbox-source') != null;
            }).forEach(function (layer) {
              var layerConfig;
              var layerTimes = [];
              var timeProperty;
              var mapboxLayers = layer.get('mapbox-layers');

              if (mapboxLayers != null) {
                layer.set('id', mapboxLayers.join('-'));
                var title = mapboxLayers.reduce(function (layerTitle, layerId) {
                  layerConfig = vectorConfig.layers.find(function (layer) {
                    return layer.id === layerId;
                  });

                  if (layerConfig.metadata != null && layerConfig.metadata.title != null && layerConfig.metadata.title.length > 0) {
                    if (layerTitle.length > 0) {
                      layerTitle += ' / ';
                    }

                    layerTitle += layerConfig.metadata.title;
                    timeProperty = layerConfig.metadata.timeProperty;
                  }

                  return layerTitle;
                }, '');

                if (title != null && title.length > 0) {
                  layer.set('title', title);
                }
              }

              var source = layer.getSource();

              var updateTimes = function updateTimes() {
                if (layerConfig != null) {
                  if (layerConfig.time == null) {
                    layerConfig.time = {};
                  }

                  layerConfig.time.data = layerTimes;
                  layer.set('times', layerConfig.time.data);
                }

                _this16.addTimes_(layerTimes);
              };

              var initFeature = function initFeature(feature) {
                if (timeProperty != null && timeProperty.length > 0) {
                  var time = feature.get(timeProperty);

                  if (time != null && time.length > 0) {
                    var parsedTime = DateTime.fromISO(time).valueOf();

                    if (typeof parsedTime === 'number' && !Number.isNaN(parsedTime)) {
                      feature.set('metoclient:time', parsedTime);
                      var numLayerTimes = layerTimes.length;

                      for (var i = 0; i <= numLayerTimes; i += 1) {
                        if (i === numLayerTimes) {
                          layerTimes.push(parsedTime);
                          updateTimes();
                        } else if (layerTimes[i] === parsedTime) {
                          break;
                        } else if (layerTimes[i] > parsedTime) {
                          layerTimes.splice(i, 0, parsedTime);
                          updateTimes();
                          break;
                        }
                      }

                      var layerTime = _this16.getFeatureLayerTime_(layer);

                      if (layerTime == null || parsedTime !== layerTime) {
                        feature.setStyle(new Style({}));
                      } else {
                        feature.setStyle(null);
                      }
                    }
                  }
                }
              };

              _this16.sourceListeners_.push(source.on('addfeature', function (event) {
                initFeature(event.feature);
              }));

              if (timeProperty != null && timeProperty.length > 0) {
                source.getFeatures().forEach(function (feature) {
                  initFeature(feature);

                  if (mapProjection !== 'EPSG:3857') {
                    feature.getGeometry().transform('EPSG:3857', mapProjection);
                  }
                });
              }
            });

            if (_this16.config_.time == null && _this16.times_.length > 0) {
              _this16.config_.time = _this16.times_[0];
            }
          }

          return updatedMap;
        });
      }
      /**
       *
       */

    }, {
      key: "createInteractions_",
      value: function createInteractions_() {
        if (this.config_.metadata.tags.includes(TAG_NO_INTERACTIONS)) {
          return [];
        } else if (this.config_.metadata.tags.includes(TAG_MOUSE_WHEEL_INTERACTIONS)) {
          return [new DoubleClickZoom(), new DragPan(), new PinchZoom(), new KeyboardPan(), new KeyboardZoom(), new MouseWheelZoom()];
        } else {
          return [new DoubleClickZoom(), new DragPan(), new PinchZoom(), new KeyboardPan(), new KeyboardZoom()];
        }
      }
      /**
       *
       * @private
       */

    }, {
      key: "createMap_",
      value: function createMap_() {
        var _this17 = this;

        var interactions = this.createInteractions_();
        this.set('timeSlider', new TimeSlider({
          locale: 'fi-FI',
          showTimeSlider: true,
          timeZone: this.config_.timeZone,
          timeZoneLabel: this.config_.timeZoneLabel,
          enableMouseWheel: this.config_.metadata.tags.includes(TAG_MOUSE_WHEEL_INTERACTIONS),
          meteorologicalMode: !this.config_.metadata.tags.includes(TAG_INSTANT_TIMESLIDER)
        }));
        var controls = [new Zoom({
          zoomInLabel: this.config_.texts['Zoom In Label'],
          zoomOutLabel: this.config_.texts['Zoom Out Label'],
          zoomInTipLabel: this.config_.texts['Zoom In'],
          zoomOutTipLabel: this.config_.texts['Zoom Out']
        }), this.get('timeSlider')];

        if (this.config_.metadata.tags.includes(TAG_FULL_SCREEN_CONTROL)) {
          controls.push(new FullScreen({
            label: this.config_.texts['Fullscreen Label'],
            labelActive: this.config_.texts['Fullscreen Label Active'],
            tipLabel: this.config_.texts['Fullscreen Tip Label']
          }));
        }

        var newMap = new Map$1({
          target: this.config_.target,
          layers: this.createLayers_(),
          view: this.createView_(),
          controls: controls,
          interactions: interactions
        });

        if (this.vectorConfig_.layers.length > 0) {
          return this.createVectorLayers_(newMap, this.vectorConfig_).then(function (map) {
            return _this17.initMap_(map);
          });
        }

        return new Promise(function (resolve) {
          resolve(_this17.initMap_(newMap));
        });
      }
      /**
       *
       * @private
       */

    }, {
      key: "updateMap_",
      value: function updateMap_() {
        var _this18 = this;

        var map = this.get('map');

        if (map == null) {
          return this.createMap_();
        }

        map.setTarget(this.config_.target);
        map.getLayerGroup().setLayers(this.createLayers_().extend(map.getLayers().getArray().filter(function (layer) {
          return layer.get('metoclient:id') == null;
        })));
        map.setView(this.createView_());
        map.set('time', this.config_.time);

        if (this.vectorConfig_.layers.length > 0) {
          return this.createVectorLayers_(map, this.vectorConfig_).then(function (updatedMap) {
            _this18.timeUpdated_();

            return updatedMap;
          });
        }

        return new Promise(function (resolve) {
          _this18.timeUpdated_();

          resolve(map);
        });
      }
      /**
       *
       * @private
       */

    }, {
      key: "updateTimes_",
      value: function updateTimes_() {
        var _this19 = this;

        this.times_ = [];
        this.status_ = {};
        this.config_.layers.forEach(function (layer) {
          if (layer.time != null && layer.time.range != null) {
            var source = layer.time.source != null ? _this19.config_.sources[layer.time.source] : _this19.config_.sources[layer.source];

            var capabilities = _this19.capabilities_[source.tiles[0].split('?')[0]]; // Generalize


            if (capabilities == null || capabilities.data == null || capabilities.data.Capability == null || capabilities.data.Capability.Layer == null || capabilities.data.Capability.Layer.Layer == null) {
              return;
            }

            var layerElement = capabilities.data.Capability.Layer.Layer.find(function (element) {
              return [layer.url.layer, layer.url.layers].includes(element.Name);
            });
            var data = layerElement != null ? layerElement.Dimension.find(function (element) {
              return element.name.toLowerCase() === 'time';
            }).values : [];
            var parsedData = parseTimes(data);
            var times = parseTimes(layer.time.range, layer.time.offset, parsedData);
            var currentTime = Date.now();
            var historyData;
            var historyIndex = 0;
            var futureData;
            var futureIndex = 0;
            times.forEach(function (time, index) {
              if (!Number.isNaN(time) && !Number.isFinite(time)) {
                if (time < 0) {
                  if (historyData == null) {
                    historyData = parsedData.filter(function (t) {
                      return t < currentTime;
                    }).sort().reverse();
                  }

                  times[index] = historyData[historyIndex];
                  historyIndex += 1;
                } else {
                  if (futureData == null) {
                    futureData = parsedData.filter(function (t) {
                      return t >= currentTime;
                    }).sort();
                  }

                  times[index] = futureData[futureIndex];
                  futureIndex += 1;
                }
              }
            });
            times.sort();
            layer.time.data = times.filter(function (time) {
              return parsedData.includes(time);
            });

            _this19.addTimes_(layer.time.data);
          }
        });
        this.times_.forEach(function (time) {
          _this19.status_[time] = '';
        });
      }
      /**
       * @param options
       */

    }, {
      key: "play",
      value: function play(options) {
        this.delay_ = Math.sign(options.delay) > 0 ? options.delay : DEFAULT_DELAY;
        this.periodDelay_ = Math.sign(options.periodDelay) > 0 ? options.periodDelay : 2 * DEFAULT_DELAY;
        this.get('map').set('playing', true);
      }
      /**
       *
       * @private
       */

    }, {
      key: "animate_",
      value: function animate_() {
        if (this.get('map').get('playing')) {
          if (this.renderComplete_) {
            clearTimeout(this.animationTimeout_);
            this.waitingRender_ = 0;
            this.next();
            this.animationTimeout_ = setTimeout(this.animate_.bind(this), this.delay_);
          } else {
            this.waitingRender_ = Date.now();
          }
        }
      }
      /**
       *
       * @returns {*}
       * @private
       */

    }, {
      key: "getNextTime_",
      value: function getNextTime_() {
        var time = this.config_.time;
        var numTimes = this.times_.length;
        var timeIndex;

        for (var i = 0; i < numTimes; i += 1) {
          if (this.isVisibleTime_(this.times_[i])) {
            if (this.times_[i] > time) {
              timeIndex = i;
              break;
            }

            if (timeIndex == null) {
              timeIndex = i;
            }
          }
        }

        return this.times_[timeIndex];
      }
      /**
       *
       */

    }, {
      key: "next",
      value: function next() {
        if (!this.isReady_()) {
          return;
        }

        var map = this.get('map');
        var currentTime = map.get('time');
        var nextTime = this.getNextTime_();

        if (!this.delayLoop_ || currentTime == null || currentTime < nextTime) {
          map.set('time', nextTime);
          this.delayLoop_ = this.config_.metadata.tags.includes(TAG_DELAY_LOOP);
        } else {
          this.delayLoop_ = false;
        }
      }
      /**
       *
       * @returns {*}
       * @private
       */

    }, {
      key: "getPrevTime_",
      value: function getPrevTime_() {
        var time = this.config_.time;
        var lastTimeIndex = this.times_.length - 1;
        var timeIndex;

        for (var i = lastTimeIndex; i >= 0; i -= 1) {
          if (this.isVisibleTime_(this.times_[i])) {
            if (this.times_[i] < time) {
              timeIndex = i;
              break;
            }

            if (timeIndex == null) {
              timeIndex = i;
            }
          }
        }

        return this.times_[timeIndex];
      }
      /**
       *
       */

    }, {
      key: "previous",
      value: function previous() {
        if (!this.isReady_()) {
          return;
        }

        this.get('map').set('time', this.getPrevTime_());
      }
      /**
       *
       * @returns {boolean}
       * @private
       */

    }, {
      key: "isReady_",
      value: function isReady_() {
        return this.get('map') != null && this.times_.length > 0;
      }
      /**
       *
       * @api
       */

    }, {
      key: "pause",
      value: function pause() {
        this.get('map').set('playing', false);
      }
    }, {
      key: "stop",
      value: function stop() {
        this.pause();
      }
    }, {
      key: "clear_",
      value: function clear_() {
        unByKey(this.layerListeners_);
        unByKey(this.sourceListeners_);
      }
      /**
       *
       * @api
       */

    }, {
      key: "destroy",
      value: function destroy() {
        this.clear_();
        unByKey(this.playingListener_);
        unByKey(this.nextListener_);
        unByKey(this.previousListener_);
        unByKey(this.timeListener_);
        unByKey(this.optionsListener_);
        clearInterval(this.refreshTimer_);
        clearTimeout(this.animationTimeout_);
        this.get('timeSlider').destroy();
        this.get('map').setTarget(null);
        this.set('map', null);
      }
      /**
       *
       * @param coordinate
       * @param source
       * @param destination
       * @returns {import("./coordinate.js").Coordinate}
       */

    }], [{
      key: "showLayer_",
      value: function showLayer_(layer) {
        var opacity = layer.get('metoclient:opacity');

        if (opacity == null) {
          opacity = 1;
        }

        layer.setOpacity(opacity);
      }
    }, {
      key: "hideLayer_",
      value: function hideLayer_(layer) {
        layer.setOpacity(0);
      }
    }, {
      key: "transform",
      value: function transform$1(coordinate, source, destination) {
        proj4.defs('EPSG:3067', '+proj=utm +zone=35 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs');
        register(proj4);
        return transform(coordinate, source, destination);
      }
    }]);

    return MetOClient;
  }(BaseObject);

  fetch('./config.json')
    .then((response) => {
      return response.json();
    })
    .then((options) => {
      const metoclient = new MetOClient(options);
      metoclient
        .render()
        .then(function (map) {
          const timeSlider = metoclient.get('timeSlider').element;
          document
            .querySelector('.fmi-metoclient-timeslider-step-button:first-child')
            .addEventListener('click', function () {
              console.log('rotate');
              timeSlider.classList.toggle('rotated');
            });
        })
        .catch((err) => {
          (console.error || console.log).call(console, err.stack || err);
        });
    });

}());
